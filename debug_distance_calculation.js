/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
 * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏–º–µ—é—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ~92–º –¥–æ –∞–¥—Ä–µ—Å–∞
 */

const fs = require('fs');

// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
const listingsData = JSON.parse(fs.readFileSync('./example/example-listings.json', 'utf8'));
const addressesData = JSON.parse(fs.readFileSync('./example/example-addresses.json', 'utf8'));

console.log('üîç –û–¢–õ–ê–î–ö–ê –ú–ï–¢–û–î–û–í –†–ê–°–ß–ï–¢–ê –†–ê–°–°–¢–û–Ø–ù–ò–ô\n');

/**
 * –ú–µ—Ç–æ–¥ 1: Haversine –∏–∑ smart-address-matcher.js
 */
function calculateDistanceHaversine(coord1, coord2) {
    const R = 6371000;
    const lat1Rad = (coord1.lat * Math.PI) / 180;
    const lat2Rad = (coord2.lat * Math.PI) / 180;
    const deltaLatRad = ((coord2.lat - coord1.lat) * Math.PI) / 180;
    const deltaLngRad = ((coord2.lng - coord1.lng) * Math.PI) / 180;

    const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) +
              Math.cos(lat1Rad) * Math.cos(lat2Rad) *
              Math.sin(deltaLngRad / 2) * Math.sin(deltaLngRad / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c;
}

/**
 * –ú–µ—Ç–æ–¥ 2: Turf.js –∏–∑ geo-utils.js (—Å–∏–º—É–ª—è—Ü–∏—è)
 */
function calculateDistanceTurf(coord1, coord2) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç Turf.js
    const R = 6371000;
    
    // GeoJSON –∏—Å–ø–æ–ª—å–∑—É–µ—Ç [lng, lat], –∞ –Ω–µ [lat, lng]
    const from = [parseFloat(coord1.lng), parseFloat(coord1.lat)];
    const to = [parseFloat(coord2.lng), parseFloat(coord2.lat)];
    
    const lat1Rad = (from[1] * Math.PI) / 180;
    const lat2Rad = (to[1] * Math.PI) / 180;
    const deltaLatRad = ((to[1] - from[1]) * Math.PI) / 180;
    const deltaLngRad = ((to[0] - from[0]) * Math.PI) / 180;

    const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) +
              Math.cos(lat1Rad) * Math.cos(lat2Rad) *
              Math.sin(deltaLngRad / 2) * Math.sin(deltaLngRad / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c;
}

/**
 * –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ—Å—Ç–æ–π –µ–≤–∫–ª–∏–¥–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ü–∏–∏ –ú–µ—Ä–∫–∞—Ç–æ—Ä–∞ (–Ω–µ—Ç–æ—á–Ω—ã–π, –Ω–æ –±—ã—Å—Ç—Ä—ã–π)
 */
function calculateDistanceEuclidean(coord1, coord2) {
    const R = 6371000;
    const latAvg = (coord1.lat + coord2.lat) / 2 * Math.PI / 180;
    
    const dLat = (coord2.lat - coord1.lat) * Math.PI / 180;
    const dLng = (coord2.lng - coord1.lng) * Math.PI / 180 * Math.cos(latAvg);
    
    return R * Math.sqrt(dLat * dLat + dLng * dLng);
}

// –ù–∞–π–¥–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –≥—Ä—É–ø–ø—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
const problemListings = listingsData.filter(listing => 
    listing.address === "—É–ª. –ù–∞–º–µ—Ç–∫–∏–Ω–∞, –≤–ª10" && 
    listing.address_distance && 
    Math.abs(listing.address_distance - 91.8) < 1
);

if (problemListings.length === 0) {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    process.exit(1);
}

const testListing = problemListings[0];
const testAddress = addressesData.find(addr => addr.id === testListing.address_id);

if (!testAddress) {
    console.log('‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    process.exit(1);
}

console.log('üìä –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:');
console.log(`   üìç –û–±—ä—è–≤–ª–µ–Ω–∏–µ: "${testListing.address}"`);
console.log(`   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${testListing.coordinates.lat}, ${testListing.coordinates.lng}`);
console.log(`   üè† –ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: "${testAddress.address}"`);
console.log(`   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞: ${testAddress.coordinates.lat}, ${testAddress.coordinates.lng}`);
console.log(`   üìè –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${testListing.address_distance.toFixed(1)}–º`);
console.log('');

// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const listingCoords = {
    lat: parseFloat(testListing.coordinates.lat),
    lng: parseFloat(testListing.coordinates.lng)
};

const addressCoords = {
    lat: parseFloat(testAddress.coordinates.lat),
    lng: parseFloat(testAddress.coordinates.lng)
};

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í –†–ê–°–ß–ï–¢–ê –†–ê–°–°–¢–û–Ø–ù–ò–ô:');

// –¢–µ—Å—Ç 1: Haversine
const distanceHaversine = calculateDistanceHaversine(listingCoords, addressCoords);
console.log(`   1Ô∏è‚É£ Haversine: ${distanceHaversine.toFixed(1)}–º`);

// –¢–µ—Å—Ç 2: Turf.js (—Å–∏–º—É–ª—è—Ü–∏—è)
const distanceTurf = calculateDistanceTurf(listingCoords, addressCoords);
console.log(`   2Ô∏è‚É£ Turf.js —Å—Ç–∏–ª—å: ${distanceTurf.toFixed(1)}–º`);

// –¢–µ—Å—Ç 3: –ï–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
const distanceEuclidean = calculateDistanceEuclidean(listingCoords, addressCoords);
console.log(`   3Ô∏è‚É£ –ï–≤–∫–ª–∏–¥–æ–≤–æ: ${distanceEuclidean.toFixed(1)}–º`);

console.log('');

// –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
const latDiff = Math.abs(listingCoords.lat - addressCoords.lat);
const lngDiff = Math.abs(listingCoords.lng - addressCoords.lng);

console.log('üìê –ê–ù–ê–õ–ò–ó –ö–û–û–†–î–ò–ù–ê–¢:');
console.log(`   üìä –†–∞–∑–Ω–∏—Ü–∞ –ø–æ —à–∏—Ä–æ—Ç–µ: ${latDiff.toFixed(8)} (${latDiff * 111000}–º)`);
console.log(`   üìä –†–∞–∑–Ω–∏—Ü–∞ –ø–æ –¥–æ–ª–≥–æ—Ç–µ: ${lngDiff.toFixed(8)} (${lngDiff * 111000 * Math.cos(listingCoords.lat * Math.PI / 180)}–º)`);

// –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
console.log('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú:');

if (Math.abs(distanceHaversine - testListing.address_distance) > 1) {
    console.log('‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê 1: –†–∞—Å—á–µ—Ç Haversine –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º');
    console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${Math.abs(distanceHaversine - testListing.address_distance).toFixed(1)}–º`);
}

if (distanceHaversine < 20 && testListing.address_match_confidence !== 'high') {
    console.log('‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê 2: –ü—Ä–∞–≤–∏–ª–æ –±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è!');
    console.log(`   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${distanceHaversine.toFixed(1)}–º ‚â§ 20–º, –Ω–æ —Ç–æ—á–Ω–æ—Å—Ç—å "${testListing.address_match_confidence}"`);
    console.log('   üéØ –û–ñ–ò–î–ê–ï–¢–°–Ø: —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "high" —Å 90% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é');
}

if (distanceHaversine > 90 && distanceHaversine < 95) {
    console.log('‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê 3: –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º—É–ª–µ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è');
    console.log('   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ ~92–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è "–æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö" –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
}

// –ü—Ä–æ–≤–µ—Ä–∏–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã "–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ"
const coord1String = `${testListing.coordinates.lat},${testListing.coordinates.lng}`;
const coord2String = `${testAddress.coordinates.lat},${testAddress.coordinates.lng}`;

if (coord1String === coord2String) {
    console.log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏');
} else {
    console.log('‚ö†Ô∏è  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ù–ï –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ:');
    console.log(`   –û–±—ä—è–≤–ª–µ–Ω–∏–µ: ${coord1String}`);
    console.log(`   –ê–¥—Ä–µ—Å: ${coord2String}`);
}

// –ù–∞–π–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
console.log('\nüéØ –ü–û–ò–°–ö –ë–õ–ò–ñ–ê–ô–®–ò–• –ê–î–†–ï–°–û–í:');

const nearbyAddresses = addressesData
    .map(addr => ({
        ...addr,
        distance: calculateDistanceHaversine(listingCoords, {
            lat: parseFloat(addr.coordinates.lat),
            lng: parseFloat(addr.coordinates.lng)
        })
    }))
    .filter(addr => addr.distance <= 100)
    .sort((a, b) => a.distance - b.distance)
    .slice(0, 5);

nearbyAddresses.forEach((addr, index) => {
    console.log(`   ${index + 1}. "${addr.address}" - ${addr.distance.toFixed(1)}–º ${addr.id === testListing.address_id ? '(–í–´–ë–†–ê–ù–ù–´–ô)' : ''}`);
});

if (nearbyAddresses.length > 0 && nearbyAddresses[0].distance <= 20 && nearbyAddresses[0].id !== testListing.address_id) {
    console.log('\n‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω –±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π –∞–¥—Ä–µ—Å!');
    console.log(`   üè† –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω: "${nearbyAddresses[0].address}" (${nearbyAddresses[0].distance.toFixed(1)}–º)`);
    console.log(`   üè† –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω: "${testAddress.address}" (${distanceHaversine.toFixed(1)}–º)`);
}

console.log('\nüìà –í–´–í–û–î–´:');
if (distanceHaversine <= 20) {
    console.log('‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –±–ª–∏–∑–æ—Å—Ç–∏ (‚â§20–º = 90% —Ç–æ—á–Ω–æ—Å—Ç—å)');
} else {
    console.log('‚ùå –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –±–ª–∏–∑–æ—Å—Ç–∏ (>20–º)');
}

console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
if (nearbyAddresses.length > 0 && nearbyAddresses[0].distance <= 20) {
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞');
    console.log('2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –±–ª–∏–∑–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ü–û–°–õ–ï –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞');
}
if (Math.abs(distanceHaversine - testListing.address_distance) > 1) {
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ');
}