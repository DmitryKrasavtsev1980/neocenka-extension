/**
 * –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç—å—é
 */

class AreaPage {
    constructor() {
        this.currentAreaId = null;
        this.currentArea = null;
        this.map = null;
        this.drawnPolygon = null;
        this.drawControl = null;

        // –°–ª–æ–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
        this.mapLayers = {
            addresses: null,
            objects: null,
            listings: null
        };

        // –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        this.markerCluster = null;

        this.addressesTable = null;
        this.duplicatesTable = null;
        this.sourcesChartInstance = null;
        this.addressConfidenceChartInstance = null;
        this.addressMethodsChartInstance = null;
        
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã
        this.addresses = [];
        this.listings = [];
        this.segments = [];

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        this.processing = {
            parsing: false,
            updating: false,
            addresses: false,
            duplicates: false
        };

        // –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage
        this.storageKey = 'neocenka_area_progress_';

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–æ—É—Ç–∏–ª–∏—Ç—ã
        this.geoUtils = new GeoUtils();
        this.spatialManager = spatialIndexManager;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OSM API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
        this.osmAPI = new OSMOverpassAPI();

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–∞—Ä—Ç—ã
        this.activeMapFilter = null;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π
        this.selectedDuplicates = new Set();
        

        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
        this.servicesIntegration = null;
        
        // SlimSelect instances –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        this.processingAddressSlimSelect = null;
        this.processingPropertyTypeSlimSelect = null;
        this.processingStatusSlimSelect = null;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    destroy() {
        try {
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
            if (this.servicesIntegration) {
                this.servicesIntegration.destroy();
                this.servicesIntegration = null;
            }
            
            if (this.processingAddressSlimSelect) {
                this.processingAddressSlimSelect.destroy();
                this.processingAddressSlimSelect = null;
            }
            
            if (this.processingPropertyTypeSlimSelect) {
                this.processingPropertyTypeSlimSelect.destroy();
                this.processingPropertyTypeSlimSelect = null;
            }
            
            if (this.processingStatusSlimSelect) {
                this.processingStatusSlimSelect.destroy();
                this.processingStatusSlimSelect = null;
            }

            // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
            if (this.map) {
                this.map.remove();
                this.map = null;
            }

            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º DataTables –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
            if (this.addressesTable) {
                this.addressesTable.destroy();
                this.addressesTable = null;
            }

            if (this.duplicatesTable) {
                this.duplicatesTable.destroy();
                this.duplicatesTable = null;
            }

            console.log('AreaPage —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤ AreaPage:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async init() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º ID –æ–±–ª–∞—Å—Ç–∏ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            const urlParams = new URLSearchParams(window.location.search);
            this.currentAreaId = urlParams.get('id');

            if (!this.currentAreaId) {
                this.showError('ID –æ–±–ª–∞—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω');
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
            await this.loadAreaData();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await this.initMap();
            this.initDataTable();
            this.bindEvents();
            this.bindDataTableEvents();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞–¥—Ä–µ—Å–∞
            await this.loadAreaStats();
            await this.loadAddresses();
            await this.loadDuplicatesTable();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await this.initProcessingFilters();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
            await this.initServicesIntegration();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–¥—Ä–µ—Å–æ–≤
            this.restoreAddressTableState();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            this.restoreStatisticsPanelState();
            this.restoreDataWorkPanelState();
            this.restoreMapPanelState();
            this.restoreDuplicatesPanelState();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            this.restoreProgressState();

        } catch (error) {
            console.error('Error initializing area page:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ' + error.message);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–∏
     */
    async loadAreaData() {
        try {
            const areaData = await db.get('map_areas', this.currentAreaId);

            if (!areaData) {
                throw new Error('–û–±–ª–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MapAreaModel –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º
            this.currentArea = new MapAreaModel(areaData);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            document.getElementById('areaTitle').textContent = this.currentArea.name;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
            this.setBreadcrumbs();

        } catch (error) {
            console.error('Error loading area data:', error);
            throw error;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
     */
    setBreadcrumbs() {
        const breadcrumbsContainer = document.getElementById('breadcrumbs-container');
        if (breadcrumbsContainer && typeof createBreadcrumbs === 'function') {
            createBreadcrumbs([
                { text: '–ì–ª–∞–≤–Ω–∞—è', href: 'main.html' },
                { text: '–û–±–ª–∞—Å—Ç–∏', href: 'main.html' },
                { text: this.currentArea.name, href: null }
            ]);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
     */
    async initMap() {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
            this.map = L.map('map').setView([55.7558, 37.6176], 11); // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∫–∞—Ä—Ç—ã
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(this.map);

            // –ï—Å–ª–∏ —É –æ–±–ª–∞—Å—Ç–∏ –µ—Å—Ç—å –ø–æ–ª–∏–≥–æ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å–ª–æ–π
            if (this.currentArea.polygon && this.currentArea.polygon.length > 0) {
                this.displayAreaPolygon();
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∏ –∫–∞—Ä—Ç—ã
            this.initMapLayers();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è
            this.initDrawControls();

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä "–ì–æ–¥" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—ç—Ç–æ —Ç–∞–∫–∂–µ –∑–∞–≥—Ä—É–∑–∏—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ä—Ç—É)
            this.setDefaultMapFilter();

        } catch (error) {
            console.error('Error initializing map:', error);
            throw error;
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
     */
    displayAreaPolygon() {
        if (!this.currentArea.polygon || this.currentArea.polygon.length === 0) {
            return;
        }

        // –ï—Å–ª–∏ –ø–æ–ª–∏–≥–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if (this.areaPolygonLayer) {
            console.log('üî∑ –ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ');
            return;
        }

        console.log('üî∑ –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µ');

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Leaflet
        const latLngs = this.currentArea.polygon.map(point => [point.lat, point.lng]);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–π
        this.areaPolygonLayer = L.polygon(latLngs, {
            color: '#3b82f6',
            fillColor: '#3b82f6',
            fillOpacity: 0.2,
            weight: 2
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.drawnPolygon = this.areaPolygonLayer;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –≤ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞)
        // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –ø–æ–ª–∏–≥–æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–µ—ë –ø–æ–∑–∂–µ –≤ initDrawControls()
        if (this.drawnItems) {
            this.drawnItems.addLayer(this.areaPolygonLayer);
        } else {
            // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –∫–∞—Ä—Ç—É
            this.map.addLayer(this.areaPolygonLayer);
        }

        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –∫–∞—Ä—Ç—ã –≤–∏–¥–∏–º–∞
        const mapContent = document.getElementById('mapPanelContent');
        if (mapContent && mapContent.style.display !== 'none') {
            this.map.fitBounds(this.areaPolygonLayer.getBounds());
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
     */
    initDrawControls() {
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.drawnItems = new L.FeatureGroup();
        this.map.addLayer(this.drawnItems);

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª–∏–≥–æ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (this.areaPolygonLayer) {
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω —Å –∫–∞—Ä—Ç—ã (–µ—Å–ª–∏ –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞–ø—Ä—è–º—É—é)
            if (this.map.hasLayer(this.areaPolygonLayer)) {
                this.map.removeLayer(this.areaPolygonLayer);
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –≤ –≥—Ä—É–ø–ø—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –µ–≥–æ –Ω–∞ –∫–∞—Ä—Ç—É)
            this.drawnItems.addLayer(this.areaPolygonLayer);
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        const drawControl = new L.Control.Draw({
            position: 'topright',
            draw: {
                polygon: {
                    allowIntersection: false,
                    drawError: {
                        color: '#e1e047',
                        message: '<strong>–û—à–∏–±–∫–∞:</strong> –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è!'
                    },
                    shapeOptions: {
                        color: '#3b82f6',
                        fillColor: '#3b82f6',
                        fillOpacity: 0.2
                    }
                },
                polyline: false,
                rectangle: false,
                circle: false,
                marker: false,
                circlemarker: false
            },
            edit: {
                featureGroup: this.drawnItems,
                remove: true
            }
        });

        this.drawControl = drawControl;
        this.map.addControl(drawControl);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.map.on(L.Draw.Event.CREATED, (e) => {
            const layer = e.layer;

            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–ª–∏–≥–æ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç –µ–≥–æ —Å –∫–∞—Ä—Ç—ã)
            if (this.drawnPolygon && this.drawnItems.hasLayer(this.drawnPolygon)) {
                this.drawnItems.removeLayer(this.drawnPolygon);
            }
            if (this.areaPolygonLayer && this.drawnItems.hasLayer(this.areaPolygonLayer)) {
                this.drawnItems.removeLayer(this.areaPolygonLayer);
            }
            
            // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é —Å –∫–∞—Ä—Ç—ã (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ —á–µ—Ä–µ–∑ drawnItems)
            if (this.drawnPolygon && this.map.hasLayer(this.drawnPolygon)) {
                this.map.removeLayer(this.drawnPolygon);
            }
            if (this.areaPolygonLayer && this.map.hasLayer(this.areaPolygonLayer)) {
                this.map.removeLayer(this.areaPolygonLayer);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω
            this.drawnPolygon = layer;
            this.areaPolygonLayer = layer;
            this.drawnItems.addLayer(layer);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –≤ –æ–±–ª–∞—Å—Ç—å
            this.savePolygon();
        });

        this.map.on(L.Draw.Event.EDITED, (e) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–∏
            const layers = e.layers;
            layers.eachLayer((layer) => {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω
                this.drawnPolygon = layer;
                this.areaPolygonLayer = layer;
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            this.savePolygon();
        });

        this.map.on(L.Draw.Event.DELETED, (e) => {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω
            this.drawnPolygon = null;
            this.areaPolygonLayer = null;
            this.currentArea.polygon = [];
            this.saveAreaChanges();
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–µ–≤ –∫–∞—Ä—Ç—ã
     */
    initMapLayers() {
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã —Å–ª–æ–µ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞ –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        this.mapLayers.addresses = L.layerGroup().addTo(this.map);
        this.mapLayers.objects = L.layerGroup();
        this.mapLayers.listings = L.layerGroup();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ (–Ω–µ —Å–æ–∑–¥–∞–µ–º —Å—Ä–∞–∑—É)
        this.addressesCluster = null;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–Ω–µ —Å–æ–∑–¥–∞–µ–º —Å—Ä–∞–∑—É)
        this.listingsCluster = null;

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–ª–æ–µ–≤
        const overlayMaps = {
            "üìç –ê–¥—Ä–µ—Å–∞": this.mapLayers.addresses,
            "üè† –û–±—ä–µ–∫—Ç—ã": this.mapLayers.objects,
            "üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è": this.mapLayers.listings
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (this.areaPolygonLayer) {
            overlayMaps["üî∑ –ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏"] = this.areaPolygonLayer;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É
        const layerControl = L.control.layers(null, overlayMaps, {
            position: 'topleft',
            collapsed: false
        }).addTo(this.map);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (this.areaPolygonLayer) {
            this.areaPolygonLayer.addTo(this.map);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
        this.map.on('overlayadd', (e) => {
            console.log('Layer added:', e.name);
            if (e.name === 'üìç –ê–¥—Ä–µ—Å–∞' && this.addressesCluster) {
                this.addressesCluster.markerLayer.addTo(this.map);
                this.addressesCluster.clusterLayer.addTo(this.map);
            } else if (e.name === 'üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è' && this.listingsCluster) {
                this.listingsCluster.markerLayer.addTo(this.map);
                this.listingsCluster.clusterLayer.addTo(this.map);
            }
        });

        this.map.on('overlayremove', (e) => {
            console.log('Layer removed:', e.name);
            if (e.name === 'üìç –ê–¥—Ä–µ—Å–∞' && this.addressesCluster) {
                this.map.removeLayer(this.addressesCluster.markerLayer);
                this.map.removeLayer(this.addressesCluster.clusterLayer);
            } else if (e.name === 'üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è' && this.listingsCluster) {
                this.map.removeLayer(this.listingsCluster.markerLayer);
                this.map.removeLayer(this.listingsCluster.clusterLayer);
            }
        });

    }


    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞—Ä—Ç—É
     */
    async loadMapData() {
        try {
            console.log(`üîÑ === –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–°–ï–• –î–ê–ù–ù–´–• –ö–ê–†–¢–´ ===`);
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏
            this.displayAreaPolygon();
            
            console.log(`üìç –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–∞—Ä—Ç—É...`);
            await this.loadAddressesOnMap();
            
            console.log(`üè¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É...`);
            await this.loadObjectsOnMap();
            
            console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç—É...`);
            await this.loadListingsOnMap();
            
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
        } catch (error) {
            console.error('Error loading map data:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
     */
    async loadAddressesOnMap() {
        try {
            const addresses = await this.getAddressesInArea();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ popup –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if (this.map) {
                this.map.closePopup();
            }
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            this.mapLayers.addresses.clearLayers();
            if (this.addressesCluster) {
                this.addressesCluster.clearMarkers();
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (!Array.isArray(addresses) || addresses.length === 0) {
                return;
            }

            const markers = [];
            
            for (const address of addresses) {
                try {
                    if (address.coordinates && address.coordinates.lat && address.coordinates.lng) {
                        // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω
                        let markerColor = '#3b82f6'; // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        if (address.wall_material_id) {
                            try {
                                const wallMaterial = await db.get('wall_materials', address.wall_material_id);
                                if (wallMaterial && wallMaterial.color) {
                                    markerColor = wallMaterial.color;
                                }
                            } catch (error) {
                                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –¥–ª—è –∞–¥—Ä–µ—Å–∞:', address.id);
                            }
                        }

                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É –º–∞—Ä–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
                        const floorCount = address.floors_count || 0;
                        let markerHeight;
                        if (floorCount >= 1 && floorCount <= 5) {
                            markerHeight = 10;
                        } else if (floorCount > 5 && floorCount <= 10) {
                            markerHeight = 15;
                        } else if (floorCount > 10 && floorCount <= 20) {
                            markerHeight = 20;
                        } else if (floorCount > 20) {
                            markerHeight = 25;
                        } else {
                            markerHeight = 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
                        }

                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—è–¥–æ–º —Å –º–∞—Ä–∫–µ—Ä–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
                        let labelText = '';
                        switch (this.activeMapFilter) {
                            case 'year':
                                labelText = address.build_year || '';
                                break;
                            case 'series':
                                if (address.house_series_id) {
                                    try {
                                        const houseSeries = await db.get('house_series', address.house_series_id);
                                        labelText = houseSeries ? houseSeries.name : '';
                                    } catch (error) {
                                        labelText = '';
                                    }
                                }
                                break;
                            case 'floors':
                                labelText = address.floors_count || '';
                                break;
                            case 'objects':
                                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                                try {
                                    const objects = await db.getObjectsByAddress(address.id);
                                    labelText = objects.length.toString();
                                } catch (error) {
                                    labelText = '0';
                                }
                                break;
                            case 'listings':
                                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                                try {
                                    const listings = await db.getListingsByAddress(address.id);
                                    labelText = listings.length.toString();
                                    if (listings.length > 0) {
                                        console.log(`üìç –ê–¥—Ä–µ—Å ${address.address} –∏–º–µ–µ—Ç ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                                    }
                                } catch (error) {
                                    console.error(`–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${address.id}:`, error);
                                    labelText = '0';
                                }
                                break;
                            default:
                                labelText = address.build_year || '';
                        }

                        const marker = L.marker([address.coordinates.lat, address.coordinates.lng], {
                            icon: L.divIcon({
                                className: 'address-marker',
                                html: `
                                    <div class="leaflet-marker-icon-wrapper" style="position: relative;">
                                        <div style="
                                            width: 0; 
                                            height: 0; 
                                            border-left: 7.5px solid transparent; 
                                            border-right: 7.5px solid transparent; 
                                            border-top: ${markerHeight}px solid ${markerColor};
                                            filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));
                                        "></div>
                                        ${labelText ? `<span class="leaflet-marker-iconlabel" style="
                                            position: absolute; 
                                            left: 15px; 
                                            top: 0px; 
                                            font-size: 11px; 
                                            font-weight: 600; 
                                            color: #374151; 
                                            background: rgba(255,255,255,0.9); 
                                            padding: 1px 4px; 
                                            border-radius: 3px; 
                                            white-space: nowrap;
                                            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                                        ">${labelText}</span>` : ''}
                                    </div>
                                `,
                                iconSize: [15, markerHeight],
                                iconAnchor: [7.5, markerHeight]
                            })
                        });

                        const typeText = this.getAddressTypeText(address.type);
                        
                        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω
                        let wallMaterialText = '–ù–µ —É–∫–∞–∑–∞–Ω';
                        if (address.wall_material_id) {
                            try {
                                const wallMaterial = await db.get('wall_materials', address.wall_material_id);
                                if (wallMaterial) {
                                    wallMaterialText = wallMaterial.name;
                                }
                            } catch (error) {
                                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –¥–ª—è popup:', address.id);
                            }
                        }
                        
                        marker.bindPopup(`
                            <div class="address-popup">
                                <div class="header">
                                    <strong>üìç –ê–¥—Ä–µ—Å</strong><br>
                                    <div class="address-title">${address.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                                </div>
                                
                                <div class="meta">
                                    <small>–¢–∏–ø: <strong>${typeText}</strong></small><br>
                                    <small>–ò—Å—Ç–æ—á–Ω–∏–∫: ${address.source || '–ù–µ —É–∫–∞–∑–∞–Ω'}</small>
                                    ${address.floors_count ? `<br><small>–≠—Ç–∞–∂–µ–π: ${address.floors_count}</small>` : ''}
                                    <br><small>–ú–∞—Ç–µ—Ä–∏–∞–ª: <strong>${wallMaterialText}</strong></small>
                                </div>
                                
                                <div class="actions" style="margin-top: 12px; display: flex; gap: 8px;">
                                    <button data-action="edit-address" data-address-id="${address.id}" 
                                            class="btn btn-primary btn-sm">
                                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                    </button>
                                    <button data-action="delete-address" data-address-id="${address.id}" 
                                            class="btn btn-danger btn-sm">
                                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                    </button>
                                </div>
                            </div>
                        `, {
                            maxWidth: 280,
                            className: 'address-popup-container'
                        });

                        markers.push(marker);
                    }
                } catch (markerError) {
                    console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${address.id}:`, markerError);
                }
            }

            // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å–æ–≤ –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
            if (addresses.length > 20) {
                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if (!this.addressesCluster) {
                    this.addressesCluster = new MarkerCluster(this.map, {
                        maxClusterRadius: 60,
                        disableClusteringAtZoom: 16,
                        zoomToBoundsOnClick: true,
                        spiderfyOnMaxZoom: true,
                        animate: true
                    });
                }
                this.addressesCluster.addMarkers(markers);
                console.log(`üìç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π`);
            } else {
                // –î–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–¥—Ä–µ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ –Ω–∞ –∫–∞—Ä—Ç—É
                markers.forEach(marker => {
                    this.mapLayers.addresses.addLayer(marker);
                });
                console.log(`üìç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É`);
            }
            
        } catch (error) {
            console.error('Error loading addresses on map:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
     */
    async loadObjectsOnMap() {
        try {
            const addresses = await this.getAddressesInArea();
            const objects = [];

            // –£–î–ê–õ–ï–ù: –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            this.mapLayers.objects.clearLayers();

            objects.forEach(object => {
                if (object.address?.coordinates?.lat && object.address?.coordinates?.lng) {
                    const marker = L.marker([object.address.coordinates.lat, object.address.coordinates.lng], {
                        icon: L.divIcon({
                            className: 'object-marker',
                            html: '<div style="background: #10b981; width: 14px; height: 14px; border-radius: 3px; border: 2px solid white;"></div>',
                            iconSize: [18, 18],
                            iconAnchor: [9, 9]
                        })
                    });

                    marker.bindPopup(`
                        <div>
                            <strong>üè† –û–±—ä–µ–∫—Ç</strong><br>
                            ${object.name || object.address?.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}<br>
                            <small>–¢–∏–ø: ${object.property_type || '–ù–µ —É–∫–∞–∑–∞–Ω'}</small><br>
                            <small>–û–±—ä—è–≤–ª–µ–Ω–∏–π: ${object.listings_count || 0}</small>
                        </div>
                    `);

                    this.mapLayers.objects.addLayer(marker);
                }
            });

            debugLogger.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${objects.length} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É`);
        } catch (error) {
            console.error('Error loading objects on map:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç—É
     */
    async loadListingsOnMap() {
        try {
            const listings = await this.getListingsInArea();
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            this.mapLayers.listings.clearLayers();
            if (this.listingsCluster) {
                this.listingsCluster.clearMarkers();
            }

            const markers = [];

            listings.forEach(listing => {
                if (listing.coordinates && listing.coordinates.lat && listing.coordinates.lng) {
                    const marker = this.createListingMarker(listing);
                    markers.push(marker);
                }
            });

            // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
            if (listings.length > 20) {
                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if (!this.listingsCluster) {
                    this.listingsCluster = new MarkerCluster(this.map, {
                        maxClusterRadius: 60,
                        disableClusteringAtZoom: 16,
                        zoomToBoundsOnClick: true,
                        spiderfyOnMaxZoom: true,
                        animate: true
                    });
                }
                this.listingsCluster.addMarkers(markers);
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ —Å–ª–æ–π –Ω–µ –≤–∫–ª—é—á–µ–Ω
                if (!this.map.hasLayer(this.mapLayers.listings)) {
                    this.map.removeLayer(this.listingsCluster.markerLayer);
                    this.map.removeLayer(this.listingsCluster.clusterLayer);
                }
                console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç—É —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π`);
            } else {
                // –î–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ –Ω–∞ –∫–∞—Ä—Ç—É
                markers.forEach(marker => {
                    this.mapLayers.listings.addLayer(marker);
                });
                console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç—É`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            this.updateListingsCount(listings.length);

        } catch (error) {
            console.error('Error loading listings on map:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @param {Object} listing - –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @returns {L.Marker} Leaflet –º–∞—Ä–∫–µ—Ä
     */
    createListingMarker(listing) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        let color = '#ef4444'; // –∫—Ä–∞—Å–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (listing.status === 'active') color = '#22c55e'; // –∑–µ–ª–µ–Ω—ã–π
        else if (listing.status === 'archived') color = '#6b7280'; // —Å–µ—Ä—ã–π
        else if (listing.status === 'needs_processing') color = '#f59e0b'; // –∂–µ–ª—Ç—ã–π
        else if (listing.status === 'processing') color = '#3b82f6'; // —Å–∏–Ω–∏–π

        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –Ω–∏–∑–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        if (listing.address_match_confidence === 'low' || listing.address_match_confidence === 'very_low') {
            color = '#ef4444'; // –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
        }

        // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        const sourceIcon = listing.source === 'avito' ? 'üü¢' : 'üîµ';
        
        const marker = L.circleMarker([listing.coordinates.lat, listing.coordinates.lng], {
            radius: 8,
            fillColor: color,
            color: 'white',
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8,
            listingData: listing // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        });

        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π popup
        const popupContent = this.createListingPopup(listing, color);
        marker.bindPopup(popupContent, {
            maxWidth: 320,
            className: 'listing-popup-container'
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        marker.on('mouseover', () => {
            if (!marker.isPopupOpen()) {
                marker.bindTooltip(`
                    <div style="font-size: 12px;">
                        <strong>${listing.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</strong><br>
                        ${listing.price ? new Intl.NumberFormat('ru-RU').format(listing.price) + ' ‚ÇΩ' : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                    </div>
                `, { direction: 'top', offset: [0, -10] }).openTooltip();
            }
        });

        marker.on('mouseout', () => {
            marker.closeTooltip();
        });

        return marker;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ popup –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @param {Object} listing - –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @param {string} color - –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
     * @returns {string} HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ popup
     */
    createListingPopup(listing, color) {
        const price = listing.price ? new Intl.NumberFormat('ru-RU').format(listing.price) + ' ‚ÇΩ' : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
        const source = listing.source === 'avito' ? '–ê–≤–∏—Ç–æ' : listing.source === 'cian' ? '–¶–∏–∞–Ω' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const sourceIcon = listing.source === 'avito' ? 'üü¢' : 'üîµ';
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        const createdDate = listing.created_at ? new Date(listing.created_at).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const lastSeen = listing.last_seen ? new Date(listing.last_seen).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        return `
            <div class="listing-popup">
                <div class="header">
                    <div class="title">${listing.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>
                    <div class="price" style="color: ${color};">${price}</div>
                </div>
                
                <div class="meta">
                    ${sourceIcon} –ò—Å—Ç–æ—á–Ω–∏–∫: <strong>${source}</strong>
                </div>
                
                <div class="meta">
                    üìÖ –°–æ–∑–¥–∞–Ω–æ: ${createdDate}
                </div>
                
                ${listing.last_seen ? `
                    <div class="meta">
                        üëÅÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä: ${lastSeen}
                    </div>
                ` : ''}
                
                ${listing.property_type ? `
                    <div class="meta">
                        üè† –¢–∏–ø: ${this.getPropertyTypeText(listing.property_type)}
                    </div>
                ` : ''}
                
                ${listing.operation_type ? `
                    <div class="meta">
                        üíº –û–ø–µ—Ä–∞—Ü–∏—è: ${this.getOperationTypeText(listing.operation_type)}
                    </div>
                ` : ''}
                
                <div style="margin: 8px 0;">
                    <span class="status ${listing.status}">${this.getStatusText(listing.status)}</span>
                </div>
                
                ${listing.coordinates ? `
                    <div class="meta">
                        üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${listing.coordinates.lat.toFixed(6)}, ${listing.coordinates.lng.toFixed(6)}
                    </div>
                ` : ''}
                
                <div class="actions" style="display: flex; gap: 8px;">
                    <button class="btn btn-primary view-listing-details" data-listing-id="${listing.id}">
                        üëÅÔ∏è –û—Ç–∫—Ä—ã—Ç—å
                    </button>
                    ${listing.url ? `
                        <a href="${listing.url}" target="_blank" class="btn btn-primary">
                            üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ ${this.getSourceName(listing.source)}
                        </a>
                    ` : ''}
                </div>
            </div>
        `;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     * @param {string} propertyType - –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     * @returns {string} –¢–µ–∫—Å—Ç —Ç–∏–ø–∞
     */
    getPropertyTypeText(propertyType) {
        const types = {
            'apartment': '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
            'room': '–ö–æ–º–Ω–∞—Ç–∞',
            'house': '–î–æ–º',
            'land': '–£—á–∞—Å—Ç–æ–∫',
            'commercial': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è',
            'garage': '–ì–∞—Ä–∞–∂'
        };
        return types[propertyType] || propertyType;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @param {string} source - –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @returns {string} –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     */
    getSourceName(source) {
        const sources = {
            'avito': '–ê–≤–∏—Ç–æ',
            'cian': '–¶–∏–∞–Ω',
            'yandex': '–Ø–Ω–¥–µ–∫—Å.–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
            'domclick': '–î–æ–º–ö–ª–∏–∫'
        };
        return sources[source] || '—Å–∞–π—Ç–µ';
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
     * @param {Object} listing - –û–±—ä—è–≤–ª–µ–Ω–∏–µ
     * @returns {string} HTML —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ—á–Ω–æ—Å—Ç–∏
     */
    renderAddressAccuracyInfo(listing) {
        let addressInfo = '';
        let accuracyInfo = '';
        let coordinatesInfo = '';

        if (listing.address_id) {
            // –ê–¥—Ä–µ—Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–π address_id
            const linkedAddress = this.getAddressNameById(listing.address_id);
            addressInfo = `
                <div class="mb-2">
                    <span class="text-sm font-medium text-gray-500">–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:</span>
                    <div class="mt-1 flex items-center space-x-2">
                        <select id="addressSelect_${listing.id}" class="text-sm text-gray-900 bg-white border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å --</option>
                        </select>
                        <button id="saveAddress_${listing.id}" class="text-xs px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                    </div>
                </div>
                <div class="mb-2">
                    <span class="text-sm font-medium text-gray-500">–ê–¥—Ä–µ—Å –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</span>
                    <span class="text-sm text-gray-600 ml-2">${this.escapeHtml(listing.address || '–ù–µ —É–∫–∞–∑–∞–Ω')}</span>
                </div>
            `;
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (listing.address_match_confidence) {
                const confidence = this.getAddressConfidenceText(listing.address_match_confidence);
                const method = this.getAddressMethodText(listing.address_match_method);
                const distance = listing.address_distance ? ` (${Math.round(listing.address_distance)}–º)` : '';
                const score = listing.address_match_score ? ` ‚Ä¢ –û—Ü–µ–Ω–∫–∞: ${(listing.address_match_score * 100).toFixed(0)}%` : '';
                
                const hasLowConfidence = listing.address_match_confidence === 'low' || listing.address_match_confidence === 'very_low';
                console.log('üîç Modal button check:', {
                    listingId: listing.id,
                    address_match_confidence: listing.address_match_confidence,
                    hasLowConfidence: hasLowConfidence
                });
                
                const correctAddressButton = hasLowConfidence ? `
                    <button id="correctAddressModal_${listing.id}" class="ml-2 text-xs px-2 py-1 bg-green-500 text-white rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500">
                        –í–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å
                    </button>
                ` : '';
                
                console.log('üîç Modal button HTML:', correctAddressButton);
                
                accuracyInfo = `
                    <div class="mb-2">
                        <span class="text-sm font-medium text-gray-500">–¢–æ—á–Ω–æ—Å—Ç—å:</span>
                        <span class="text-sm ${this.getConfidenceColor(listing.address_match_confidence)} ml-2">${confidence}${distance}</span>
                        ${correctAddressButton}
                    </div>
                    <div class="mb-2">
                        <span class="text-xs text-gray-500">–ú–µ—Ç–æ–¥: ${method}${score}</span>
                    </div>
                `;
            } else {
                accuracyInfo = `
                    <div class="mb-2">
                        <span class="text-sm font-medium text-gray-500">–¢–æ—á–Ω–æ—Å—Ç—å:</span>
                        <span class="text-sm text-green-600 ml-2">–ê–¥—Ä–µ—Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω</span>
                    </div>
                `;
            }
            coordinatesInfo = '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞';
        } else {
            // –ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            addressInfo = `
                <div class="mb-2">
                    <span class="text-sm font-medium text-gray-500">–ê–¥—Ä–µ—Å –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</span>
                    <span class="text-sm text-gray-900 ml-2">${this.escapeHtml(listing.address || '–ù–µ —É–∫–∞–∑–∞–Ω')}</span>
                </div>
                <div class="mb-2">
                    <span class="text-sm font-medium text-gray-500">–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å:</span>
                    <div class="mt-1 flex items-center space-x-2">
                        <select id="addressSelect_${listing.id}" class="text-sm text-gray-900 bg-white border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å --</option>
                        </select>
                        <button id="saveAddress_${listing.id}" class="text-xs px-2 py-1 bg-green-500 text-white rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500">
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                    </div>
                </div>
            `;
            
            accuracyInfo = `
                <div class="mb-2">
                    <span class="text-sm font-medium text-gray-500">–°—Ç–∞—Ç—É—Å:</span>
                    <span class="text-sm text-orange-600 ml-2">–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω</span>
                </div>
                <div class="mb-2">
                    <span class="text-xs text-gray-500">–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞</span>
                </div>
            `;
            coordinatesInfo = '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è';
        }

        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const coords = this.getListingCoordinates(listing);
        const coordsDisplay = coords ? 
            `<div class="mb-2">
                <span class="text-sm font-medium text-gray-500">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</span>
                <span class="text-sm text-gray-700 ml-2">${coords.lat.toFixed(6)}, ${coords.lng.toFixed(6)}</span>
                <span class="text-xs text-gray-500 block">${coordinatesInfo}</span>
            </div>` : 
            `<div class="mb-2">
                <span class="text-sm text-red-600">‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</span>
            </div>`;

        return addressInfo + accuracyInfo + coordsDisplay;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞–º–∏ —Å SlimSelect
     * @param {string} listingId - ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @param {string} currentAddressId - –¢–µ–∫—É—â–∏–π ID –∞–¥—Ä–µ—Å–∞
     */
    async initializeAddressSelector(listingId, currentAddressId) {
        try {
            const selectElement = document.getElementById(`addressSelect_${listingId}`);
            if (!selectElement) return;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏
            const addresses = await this.getAddressesInArea();
            
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏
            selectElement.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å --</option>';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            addresses.forEach(address => {
                const option = document.createElement('option');
                option.value = address.id;
                option.textContent = address.address;
                
                // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å
                if (address.id === currentAddressId) {
                    option.selected = true;
                }
                
                selectElement.appendChild(option);
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
            const slimSelect = new SlimSelect({
                select: selectElement,
                settings: {
                    placeholderText: '-- –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å --',
                    searchPlaceholder: '–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞...',
                    searchText: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
                    searchHighlight: true,
                    closeOnSelect: true
                }
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SlimSelect –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            this[`addressSlimSelect_${listingId}`] = slimSelect;
            
            console.log(`üìç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @param {string} listingId - ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async saveListingAddress(listingId) {
        try {
            const select = document.getElementById(`addressSelect_${listingId}`);
            if (!select) {
                console.error('–°–µ–ª–µ–∫—Ç–æ—Ä –∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', `addressSelect_${listingId}`);
                return;
            }

            const selectedAddressId = select.value;
            console.log(`üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId}:`, selectedAddressId);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            const listing = await db.getListing(listingId);
            if (!listing) {
                console.error('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
            listing.address_id = selectedAddressId || null;
            
            // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –≤—ã–±—Ä–∞–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
            if (selectedAddressId) {
                listing.address_match_confidence = 'manual';
                listing.address_match_method = 'manual_selection';
                listing.address_match_score = 1.0;
                listing.address_distance = null;
            } else {
                // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —É–±—Ä–∞–Ω, –æ—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
                listing.address_match_confidence = null;
                listing.address_match_method = null;
                listing.address_match_score = null;
                listing.address_distance = null;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.updateListing(listing);
            
            console.log(`‚úÖ –ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId}:`, selectedAddressId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            const locationContent = document.getElementById(`locationPanelContent-${listingId}`);
            if (locationContent) {
                // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                const updatedListing = await db.getListing(listingId);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ
                const addressInfoHtml = this.renderAddressAccuracyInfo(updatedListing);
                const mapContainer = document.getElementById(`listing-map-${listingId}`);
                const mapHtml = mapContainer ? mapContainer.outerHTML : '';
                
                locationContent.innerHTML = addressInfoHtml + mapHtml;
                
                // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                setTimeout(() => {
                    this.initializeAddressSelector(listingId, updatedListing.address_id);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    const saveButton = document.getElementById(`saveAddress_${listingId}`);
                    if (saveButton) {
                        saveButton.addEventListener('click', () => {
                            this.saveListingAddress(listingId);
                        });
                    }
                    
                    // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—ë
                    if (mapContainer && mapContainer._leafletMap) {
                        this.renderListingMap(updatedListing);
                    }
                }, 100);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
            await this.loadDuplicatesTable();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: ' + error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞
     * @param {string} confidence - –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
     * @returns {string} –ß–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
     */
    getAddressConfidenceText(confidence) {
        const confidenceMap = {
            'high': '–í—ã—Å–æ–∫–∞—è',
            'medium': '–°—Ä–µ–¥–Ω—è—è', 
            'low': '–ù–∏–∑–∫–∞—è',
            'very_low': '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è',
            'manual': '–í—Ä—É—á–Ω—É—é',
            'none': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'
        };
        return confidenceMap[confidence] || confidence;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
     * @param {string} confidence - –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
     * @returns {string} CSS –∫–ª–∞—Å—Å
     */
    getConfidenceColor(confidence) {
        const colorMap = {
            'high': 'text-green-600',
            'medium': 'text-yellow-600',
            'low': 'text-orange-600', 
            'very_low': 'text-red-600',
            'none': 'text-gray-500'
        };
        return colorMap[confidence] || 'text-gray-500';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
     * @param {string} method - –ú–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
     */
    getAddressMethodText(method) {
        const methodMap = {
            'exact_geo': '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º',
            'near_geo_text': '–ü–æ–∏—Å–∫ —Ä—è–¥–æ–º + –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞',
            'extended_geo_text': '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ + –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞',
            'global_text': '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É',
            'manual': '–í—Ä—É—á–Ω—É—é',
            'manual_selection': '–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä',
            'no_match': '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        };
        return methodMap[method] || method || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∏–∑ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
     * @param {Object} listing - –û–±—ä—è–≤–ª–µ–Ω–∏–µ
     * @returns {Object|null} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {lat, lng} –∏–ª–∏ null
     */
    getListingCoordinates(listing) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        if (listing.address_id) {
            const address = this.addresses.find(addr => addr.id === listing.address_id);
            if (address && address.coordinates && address.coordinates.lat && address.coordinates.lng) {
                return {
                    lat: parseFloat(address.coordinates.lat),
                    lng: parseFloat(address.coordinates.lng)
                };
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if (listing.coordinates) {
            // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            const lat = listing.coordinates.lat || listing.coordinates.lon;
            const lng = listing.coordinates.lng || listing.coordinates.lon;
            
            if (lat && lng) {
                return { 
                    lat: parseFloat(lat), 
                    lng: parseFloat(lng) 
                };
            }
        }

        return null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
     * @param {string} operationType - –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
     * @returns {string} –¢–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    getOperationTypeText(operationType) {
        const operations = {
            'sell': '–ü—Ä–æ–¥–∞–∂–∞',
            'rent': '–ê—Ä–µ–Ω–¥–∞',
            'rent_long': '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞',
            'rent_short': '–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞'
        };
        return operations[operationType] || operationType;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞
     * @param {string} type - –¢–∏–ø –∞–¥—Ä–µ—Å–∞
     * @returns {string} –¢–µ–∫—Å—Ç —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞
     */
    getAddressTypeText(type) {
        switch(type) {
            case 'house':
            case 'building':
                return '–î–æ–º';
            case 'house_with_land':
                return '–î–æ–º —Å —É—á–∞—Å—Ç–∫–æ–º';
            case 'land':
                return '–£—á–∞—Å—Ç–æ–∫';
            case 'commercial':
                return '–ö–æ–º–º–µ—Ä—Ü–∏—è';
            default:
                return '–ó–¥–∞–Ω–∏–µ';
        }
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
     * @param {string} addressId - ID –∞–¥—Ä–µ—Å–∞
     */
    async editAddress(addressId) {
        try {
            console.log(`üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${addressId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            const address = await db.get('addresses', addressId);
            if (!address) {
                this.showError('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞
            this.fillAddressForm(address);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.showAddressModal(address);
            
        } catch (error) {
            console.error('Error opening edit address modal:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
        }
    }

    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
     * @param {Object} address - –î–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
     */
    async fillAddressForm(address) {
        document.getElementById('editAddressText').value = address.address || '';
        document.getElementById('editAddressType').value = address.type || 'house';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–∏–∏ –¥–æ–º–æ–≤ –≤ select
        await this.loadHouseSeries();
        document.getElementById('editHouseSeries').value = address.house_series_id || '';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ç–µ–Ω –≤ select
        await this.loadWallMaterials();
        document.getElementById('editWallMaterial').value = address.wall_material_id || '';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π –≤ select
        await this.loadCeilingMaterials();
        document.getElementById('editCeilingMaterial').value = address.ceiling_material_id || '';
        
        // –ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ
        const gasSupplyValue = address.gas_supply === null || address.gas_supply === undefined ? '' : address.gas_supply.toString();
        document.getElementById('editGasSupply').value = gasSupplyValue;
        
        document.getElementById('editFloorsCount').value = address.floors_count || '';
        document.getElementById('editBuildYear').value = address.build_year || '';
        document.getElementById('editEntrancesCount').value = address.entrances_count || '';
        document.getElementById('editLivingSpaces').value = address.living_spaces_count || '';
        document.getElementById('editHasPlayground').checked = address.has_playground || false;
        document.getElementById('editHasSportsArea').checked = address.has_sports_area || false;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        this.updateExternalServiceLinks(address);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã (2–ì–ò–°, –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã, –ü–∞–Ω–æ—Ä–∞–º—ã)
     * @param {Object} address - –î–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
     */
    updateExternalServiceLinks(address) {
        if (!address || !address.coordinates) {
            return;
        }

        const { lat, lng } = address.coordinates;
        const addressText = address.address || '';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –¥–ª—è 2–ì–ò–° –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥—Ä–µ—Å–∞
        let cityFor2gis = 'novosibirsk'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (addressText.toLowerCase().includes('–º–æ—Å–∫–≤–∞')) {
            cityFor2gis = 'moscow';
        } else if (addressText.toLowerCase().includes('—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥') || addressText.toLowerCase().includes('—Å–ø–±')) {
            cityFor2gis = 'spb';
        } else if (addressText.toLowerCase().includes('–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥')) {
            cityFor2gis = 'ekaterinburg';
        } else if (addressText.toLowerCase().includes('–∫–∞–∑–∞–Ω—å')) {
            cityFor2gis = 'kazan';
        } else if (addressText.toLowerCase().includes('–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥')) {
            cityFor2gis = 'nizhniy_novgorod';
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
        const links = {
            '2gis': `https://2gis.ru/${cityFor2gis}/search/${encodeURIComponent(addressText)}`,
            'yandex': `https://yandex.ru/maps/?whatshere[point]=${lng},${lat}&whatshere[zoom]=17`,
            'panorama': `https://yandex.ru/maps/?panorama[point]=${lng},${lat}&panorama[direction]=0,0&panorama[span]=130.000000,71.919192`
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º href —É —Å—Å—ã–ª–æ–∫
        const link2gis = document.getElementById('url-2gis-address');
        const linkYandex = document.getElementById('url-yandex-address');
        const linkPanorama = document.getElementById('url-yandex-panorama-address');

        if (link2gis) {
            link2gis.href = links['2gis'];
        }
        if (linkYandex) {
            linkYandex.href = links['yandex'];
        }
        if (linkPanorama) {
            linkPanorama.href = links['panorama'];
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
     * @param {Object} address - –î–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
     */
    showAddressModal(address) {
        const modal = document.getElementById('editAddressModal');
        modal.classList.remove('hidden');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        setTimeout(() => {
            this.initEditAddressMap(address);
        }, 100);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        this.editingAddressId = address.id;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {Object} address - –î–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
     */
    initEditAddressMap(address) {
        const mapContainer = document.getElementById('editAddressMap');
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.editAddressMap) {
            this.editAddressMap.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
        this.editAddressMap = L.map('editAddressMap').setView([
            address.coordinates.lat, 
            address.coordinates.lng
        ], 16);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª—ã OpenStreetMap
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors'
        }).addTo(this.editAddressMap);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π –º–∞—Ä–∫–µ—Ä
        this.editAddressMarker = L.marker([
            address.coordinates.lat, 
            address.coordinates.lng
        ], {
            draggable: true
        }).addTo(this.editAddressMap);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
        this.editAddressMarker.on('dragend', async (event) => {
            const marker = event.target;
            const position = marker.getLatLng();
            console.log(`üìç –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${position.lat}, ${position.lng}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Ç–æ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω—ã
            const coordsDisplay = document.querySelector('#editAddressMap + p');
            if (coordsDisplay) {
                coordsDisplay.innerHTML = `
                    <span style="color: #059669; font-weight: 500;">
                        ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${position.lat.toFixed(6)}, ${position.lng.toFixed(6)}
                    </span><br>
                    <span style="font-size: 12px; color: #6b7280;">
                        üîç –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º...
                    </span>
                `;
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º reverse geocoding –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
            try {
                const osmAPI = new OSMOverpassAPI();
                const foundAddress = await osmAPI.reverseGeocode(position.lat, position.lng);
                
                if (foundAddress) {
                    // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –≤ –ø–æ–ª–µ —Ñ–æ—Ä–º—ã
                    const addressField = document.getElementById('editAddressText');
                    if (addressField) {
                        addressField.value = foundAddress;
                        console.log(`‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω: ${foundAddress}`);
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                    if (coordsDisplay) {
                        coordsDisplay.innerHTML = `
                            <span style="color: #059669; font-weight: 500;">
                                ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${position.lat.toFixed(6)}, ${position.lng.toFixed(6)}
                            </span><br>
                            <span style="color: #10b981; font-size: 12px;">
                                üìç –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å: ${foundAddress}
                            </span>
                        `;
                    }
                } else {
                    // –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
                    if (coordsDisplay) {
                        coordsDisplay.innerHTML = `
                            <span style="color: #059669; font-weight: 500;">
                                ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${position.lat.toFixed(6)}, ${position.lng.toFixed(6)}
                            </span><br>
                            <span style="color: #f59e0b; font-size: 12px;">
                                ‚ö†Ô∏è –ê–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω
                            </span>
                        `;
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–∞:', error);
                if (coordsDisplay) {
                    coordsDisplay.innerHTML = `
                        <span style="color: #059669; font-weight: 500;">
                            ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${position.lat.toFixed(6)}, ${position.lng.toFixed(6)}
                        </span><br>
                        <span style="color: #ef4444; font-size: 12px;">
                            ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞
                        </span>
                    `;
                }
            }
        });
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
     * @param {string} addressId - ID –∞–¥—Ä–µ—Å–∞
     */
    async deleteAddress(addressId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            const address = await db.get('addresses', addressId);
            if (!address) {
                this.showError('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            const confirmed = confirm(
                `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å?\n\n` +
                `"${address.address}"\n\n` +
                `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`
            );

            if (!confirmed) {
                return;
            }

            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: ${addressId}`);
            
            // –£–¥–∞–ª—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await db.delete('addresses', addressId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∫–∞–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É"
            await this.refreshMapData();
            
            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.loadAddresses();
            await this.loadAreaStats();
            
            this.showSuccess('–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            
        } catch (error) {
            console.error('Error deleting address:', error);
            this.showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ' + error.message);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    async refreshAddressData() {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
            await this.loadAddressesOnMap();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            await this.loadAddresses();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.loadAreaStats();
            
        } catch (error) {
            console.error('Error refreshing address data:', error);
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
     */
    async forceRefreshAddressData() {
        try {
            console.log(`üîÑ === –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ê–î–†–ï–°–û–í ===`);
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            if (this.spatialManager) {
                console.log(`üóëÔ∏è –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–¥—Ä–µ—Å–æ–≤`);
                this.spatialManager.clearIndex('addresses');
                // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–∞–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
                if (this.spatialManager.hasIndex('addresses')) {
                    this.spatialManager.removeIndex('addresses');
                }
            }
            
            // –û—á–∏—â–∞–µ–º —Å–ª–æ–π –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
            if (this.mapLayers && this.mapLayers.addresses) {
                console.log(`üó∫Ô∏è –û—á–∏—â–∞–µ–º —Å–ª–æ–π –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ`);
                this.mapLayers.addresses.clearLayers();
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–∞—Ä—Ç—É
            console.log(`üìç –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–∞—Ä—Ç—É`);
            await this.loadAddressesOnMap();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–¥—Ä–µ—Å–æ–≤
            console.log(`üìã –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–¥—Ä–µ—Å–æ–≤`);
            await this.loadAddresses();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–ª–∞—Å—Ç–∏
            console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–ª–∞—Å—Ç–∏`);
            await this.loadAreaStats();
            
            console.log(`‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
            
        } catch (error) {
            console.error('Error force refreshing address data:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–¥—Ä–µ—Å–∞
     */
    async saveAddressEdit() {
        try {
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            const formData = new FormData(document.getElementById('editAddressForm'));
            const addressData = {
                address: formData.get('address'),
                type: formData.get('type'),
                house_series_id: formData.get('house_series_id') || null,
                wall_material_id: formData.get('wall_material_id') || null,
                ceiling_material_id: formData.get('ceiling_material_id') || null,
                gas_supply: formData.get('gas_supply') ? formData.get('gas_supply') === 'true' : null,
                floors_count: formData.get('floors_count') ? parseInt(formData.get('floors_count')) : null,
                build_year: formData.get('build_year') ? parseInt(formData.get('build_year')) : null,
                entrances_count: formData.get('entrances_count') ? parseInt(formData.get('entrances_count')) : null,
                living_spaces_count: formData.get('living_spaces_count') ? parseInt(formData.get('living_spaces_count')) : null,
                has_playground: formData.get('has_playground') === 'on',
                has_sports_area: formData.get('has_sports_area') === 'on',
                map_area_id: this.currentAreaId,
                source: 'manual',
                updated_at: new Date().toISOString()
            };

            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –∫–∞—Ä—Ç—ã
            if (this.editAddressMarker) {
                const position = this.editAddressMarker.getLatLng();
                addressData.coordinates = {
                    lat: position.lat,
                    lng: position.lng
                };
            }

            const isNewAddress = !this.editingAddressId;
            
            if (isNewAddress) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
                addressData.id = `manual_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                addressData.created_at = new Date().toISOString();
                
                console.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞:`, addressData);
                await db.add('addresses', addressData);
                this.showSuccess('–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω');
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å
                addressData.id = this.editingAddressId;
                
                console.log(`üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞:`, addressData);
                await db.update('addresses', addressData);
                this.showSuccess('–ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
            }

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.closeEditAddressModal();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∫–∞–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É"
            await this.refreshMapData();
            
            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.loadAddresses();
            await this.loadAreaStats();

            this.showSuccess('–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');

        } catch (error) {
            console.error('Error saving address edit:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ' + error.message);
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
     */
    closeEditAddressModal() {
        const modal = document.getElementById('editAddressModal');
        modal.classList.add('hidden');
        
        // –û—á–∏—â–∞–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        this.editingAddressId = null;
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (this.editAddressMap) {
            this.editAddressMap.remove();
            this.editAddressMap = null;
        }
        
        // –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä
        this.editAddressMarker = null;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    updateListingsCount(count) {
        const listingsCountElement = document.getElementById('listingsCount');
        if (listingsCountElement) {
            listingsCountElement.textContent = count.toLocaleString('ru-RU');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    getStatusText(status) {
        const statusMap = {
            'active': '–ê–∫—Ç–∏–≤–Ω–æ',
            'archived': '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ',
            'needs_processing': '–¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
            'processing': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è'
        };
        return statusMap[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞—Ä—Ç–µ
     */
    async refreshMapData() {
        try {
            await this.loadMapData();
        } catch (error) {
            console.error('Error refreshing map data:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞
     */
    async savePolygon() {
        if (!this.drawnPolygon) return;

        try {
            const latLngs = this.drawnPolygon.getLatLngs()[0];
            this.currentArea.polygon = latLngs.map(point => ({
                lat: point.lat,
                lng: point.lng
            }));

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–π –ø–æ–ª–∏–≥–æ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏
            if (this.areaPolygonLayer) {
                this.areaPolygonLayer.setLatLngs(latLngs);
            }

            await this.saveAreaChanges();
            this.showSuccess('–ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');

        } catch (error) {
            console.error('Error saving polygon:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞: ' + error.message);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±–ª–∞—Å—Ç–∏
     */
    async saveAreaChanges() {
        try {
            this.currentArea.updated_at = new Date();
            await db.updateMapArea(this.currentArea);
        } catch (error) {
            console.error('Error saving area changes:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –¥–∞–Ω–Ω—ã—Ö
     */
    initDataTable() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∞–¥—Ä–µ—Å–æ–≤
            this.addressesTable = $('#addressesTable').DataTable({
                language: {
                    url: '../libs/datatables/ru.json'
                },
                pageLength: 10,
                ordering: true,
                searching: true,
                columns: [
                    { data: 'address', title: '–ê–¥—Ä–µ—Å' },
                    {
                        data: 'type',
                        title: '–¢–∏–ø',
                        render: function (data) {
                            switch(data) {
                                case 'house':
                                case 'building':
                                    return '–î–æ–º';
                                case 'house_with_land':
                                    return '–î–æ–º —Å —É—á–∞—Å—Ç–∫–æ–º';
                                case 'land':
                                    return '–£—á–∞—Å—Ç–æ–∫';
                                case 'commercial':
                                    return '–ö–æ–º–º–µ—Ä—Ü–∏—è';
                                default:
                                    return '–ó–¥–∞–Ω–∏–µ';
                            }
                        }
                    },
                    {
                        data: null,
                        title: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤',
                        render: function (data) {
                            const parts = [];
                            if (data.house_series) parts.push(data.house_series);
                            if (data.wall_material) parts.push(data.wall_material);
                            if (data.building_type) parts.push(data.building_type);
                            if (data.floors_count) parts.push(`${data.floors_count} —ç—Ç.`);
                            return parts.join(', ') || '-';
                        }
                    },
                    { data: 'objects_count', title: '–û–±—ä–µ–∫—Ç–æ–≤', defaultContent: '0' },
                    { data: 'listings_count', title: '–û–±—ä—è–≤–ª–µ–Ω–∏–π', defaultContent: '0' },
                    {
                        data: null,
                        title: '–î–µ–π—Å—Ç–≤–∏—è',
                        orderable: false,
                        render: function (data, type, row) {
                            return `
                                <div class="flex space-x-2">
                                    <button data-action="edit-address" data-address-id="${row.id}" 
                                            class="text-blue-600 hover:text-blue-900 text-sm">
                                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                    </button>
                                    <button data-action="delete-address" data-address-id="${row.id}" 
                                            class="text-red-600 hover:text-red-900 text-sm">
                                        –£–¥–∞–ª–∏—Ç—å
                                    </button>
                                </div>
                            `;
                        }
                    }
                ]
            });

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π
            this.duplicatesTable = $('#duplicatesTable').DataTable({
                language: {
                    url: '../libs/datatables/ru.json'
                },
                pageLength: 10,
                ordering: true,
                searching: true,
                order: [[5, 'desc']], // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–æ–ª–æ–Ω–∫–∞ 5)
                columnDefs: [
                    {
                        targets: 0, // –ö–æ–ª–æ–Ω–∫–∞ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
                        orderable: false,
                        searchable: false,
                        className: 'dt-body-center text-xs',
                        width: '40px',
                        render: function (data, type, row) {
                            return `<input type="checkbox" class="duplicate-checkbox focus:ring-indigo-500 h-3 w-3 text-indigo-600 border-gray-300 rounded" data-id="${row.id}" data-type="${row.type}">`;
                        }
                    },
                    {
                        targets: 1, // –§–∏–ª—å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        orderable: false,
                        searchable: false,
                        className: 'dt-body-center text-xs',
                        width: '60px',
                        render: function (data, type, row) {
                            // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ñ–∏–ª—å—Ç—Ä–∞
                            return `<button class="text-gray-600 hover:text-gray-900 p-1 processing-filter-btn" data-row-id="${row.id}" data-row-type="${row.type}" title="–§–∏–ª—å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                                </svg>
                            </button>`;
                        }
                    },
                    {
                        targets: [3, 4, 5], // –î–∞—Ç—ã
                        className: 'text-xs'
                    },
                    {
                        targets: [6, 7, 8], // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∞–¥—Ä–µ—Å, —Ü–µ–Ω–∞, –∫–æ–Ω—Ç–∞–∫—Ç  
                        className: 'text-xs'
                    }
                ],
                columns: [
                    // 0. –ß–µ–∫–±–æ–∫—Å
                    { 
                        data: null, 
                        title: '<input type="checkbox" id="selectAllDuplicates" class="focus:ring-indigo-500 h-3 w-3 text-indigo-600 border-gray-300 rounded">' 
                    },
                    // 1. –§–∏–ª—å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    { 
                        data: null, 
                        title: '–§–∏–ª—å—Ç—Ä'
                    },
                    // 2. –°—Ç–∞—Ç—É—Å
                    { 
                        data: null, 
                        title: '–°—Ç–∞—Ç—É—Å',
                        render: function (data, type, row) {
                            const isListing = row.type === 'listing';
                            const statusBadges = {
                                'active': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">–ê–∫—Ç–∏–≤–Ω—ã–π</span>',
                                'archived': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>',
                                'archive': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>',
                                'needs_processing': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">–¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</span>'
                            };
                            
                            let html = statusBadges[row.status] || `<span class="text-xs text-gray-500">${row.status}</span>`;
                            
                            if (isListing && row.processing_status) {
                                const processingBadges = {
                                    'address_needed': '<br><span class="inline-flex items-center px-1 py-0.5 text-nowrap rounded-full text-xs font-medium bg-orange-100 text-orange-800" style="font-size: 10px;">–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å</span>',
                                    'duplicate_check_needed': '<br><span class="inline-flex items-center text-nowrap px-1 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800" style="font-size: 10px;">–û–±—Ä. –Ω–∞ –¥—É–±–ª–∏</span>',
                                    'processed': '<br><span class="inline-flex items-center px-1 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800" style="font-size: 10px;">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ</span>'
                                };
                                html += processingBadges[row.processing_status] || '';
                            } else if (!isListing) {
                                // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
                                const listingsCount = row.listings_count || 0;
                                const activeCount = row.active_listings_count || 0;
                                if (listingsCount > 0) {
                                    html += `<br><span class="text-xs text-gray-600 cursor-pointer hover:text-blue-600 expand-object-listings" data-object-id="${row.id}" title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π">
                                        <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                        </svg>
                                        –û–±—ä—è–≤–ª–µ–Ω–∏—è: ${listingsCount} (${activeCount} –∞–∫—Ç.)
                                    </span>`;
                                } else {
                                    html += `<br><span class="text-xs text-gray-600">–û–±—ä—è–≤–ª–µ–Ω–∏—è: ${listingsCount} (${activeCount} –∞–∫—Ç.)</span>`;
                                }
                            }
                            
                            return html;
                        }
                    },
                    // 3. –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    { 
                        data: 'created', 
                        title: '–°–æ–∑–¥–∞–Ω–æ',
                        render: function (data, type, row) {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º created (–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–µ), –∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Ç–æ created_at (–¥–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É)
                            const dateValue = data || row.created_at;
                            if (!dateValue) return '‚Äî';
                            const createdDate = new Date(dateValue);
                            
                            // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp
                            if (type === 'sort' || type === 'type') {
                                return createdDate.getTime();
                            }
                            
                            const dateStr = createdDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' });
                            
                            // –í—ã—á–∏—Å–ª—è–µ–º —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ —Å–µ–≥–æ–¥–Ω—è)
                            const updatedValue = row.updated || row.updated_at;
                            const endDate = updatedValue ? new Date(updatedValue) : new Date();
                            const diffTime = Math.abs(endDate - createdDate);
                            const exposureDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                            
                            return `<div class="text-xs">
                                ${dateStr}<br>
                                <span class="text-gray-500" style="font-size: 10px;">—ç–∫—Å–ø. ${exposureDays} –¥–Ω.</span>
                            </div>`;
                        }
                    },
                    // 4. –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    { 
                        data: 'updated', 
                        title: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
                        render: function (data, type, row) {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º updated (–¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–µ), –∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Ç–æ updated_at (–¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ)
                            const dateValue = data || row.updated_at;
                            if (!dateValue) return '‚Äî';
                            const date = new Date(dateValue);
                            
                            // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp
                            if (type === 'sort' || type === 'type') {
                                return date.getTime();
                            }
                            
                            const now = new Date();
                            const diffTime = Math.abs(now - date);
                            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                            
                            const dateStr = date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' });
                            const daysAgo = diffDays === 1 ? '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥' : `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
                            const color = diffDays > 7 ? 'text-red-600' : 'text-green-600';
                            
                            return `<div class="text-xs">
                                ${dateStr}<br>
                                <span class="${color}" style="font-size: 10px;">${daysAgo}</span>
                            </div>`;
                        }
                    },
                    // 5. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    { 
                        data: null, 
                        title: '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
                        render: function (data, type, row) {
                            const isListing = row.type === 'listing';
                            const parts = [];
                            
                            // –¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã
                            if (row.property_type) {
                                const types = {
                                    'studio': '–°—Ç—É–¥–∏—è',
                                    '1k': '1-–∫',
                                    '2k': '2-–∫',
                                    '3k': '3-–∫',
                                    '4k+': '4-–∫+'
                                };
                                parts.push(types[row.property_type] || row.property_type);
                                parts.push('–∫–≤–∞—Ä—Ç–∏—Ä–∞');
                            }
                            
                            // –ü–ª–æ—â–∞–¥–∏
                            const areas = [];
                            if (row.area_total) areas.push(row.area_total);
                            if (row.area_living) areas.push(row.area_living);
                            if (row.area_kitchen) areas.push(row.area_kitchen);
                            if (areas.length > 0) parts.push(`${areas.join('/')}–º¬≤`);
                            
                            // –≠—Ç–∞–∂/—ç—Ç–∞–∂–Ω–æ—Å—Ç—å
                            if (row.floor && row.total_floors) {
                                parts.push(`${row.floor}/${row.total_floors} —ç—Ç.`);
                            } else if (row.floor && row.floors_total) {
                                // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—è floors_total –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                                parts.push(`${row.floor}/${row.floors_total} —ç—Ç.`);
                            }
                            
                            const characteristicsText = parts.length > 0 ? parts.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                            
                            return `<div class="text-xs text-gray-900 max-w-xs" title="${characteristicsText}">${characteristicsText}</div>`;
                        }
                    },
                    // 6. –ê–¥—Ä–µ—Å
                    { 
                        data: 'address', 
                        title: '–ê–¥—Ä–µ—Å',
                        render: (data, type, row) => {
                            const isListing = row.type === 'listing';
                            const addressFromDb = this.getAddressNameById(row.address_id);
                            
                            if (isListing) {
                                const addressText = data || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
                                let addressFromDbText = addressFromDb || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–∫–æ–±–∫–∞—Ö
                                const hasLowConfidence = row.address_match_confidence === 'low' || row.address_match_confidence === 'very_low';
                                const isManualConfidence = row.address_match_confidence === 'manual';
                                const isAddressNotFound = addressFromDbText === '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –≤ —Å–∫–æ–±–∫–∞—Ö –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                                if (hasLowConfidence && !isAddressNotFound) {
                                    const confidenceText = row.address_match_confidence === 'low' ? '–ù–∏–∑–∫–∞—è' : '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è';
                                    addressFromDbText += ` (${confidenceText})`;
                                } else if (isManualConfidence && !isAddressNotFound) {
                                    addressFromDbText += ` (–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)`;
                                }
                                
                                const addressClass = addressText === '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω' ? 'text-red-600 hover:text-red-800' : 'text-blue-600 hover:text-blue-800';
                                
                                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫—Ä–∞—Å–Ω—ã–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏ –∞–¥—Ä–µ—Å–∞ —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é (–ù–ï manual)
                                const addressFromDbClass = (isAddressNotFound || (hasLowConfidence && !isManualConfidence)) ? 'text-red-500' : 'text-gray-500';
                                
                                return `<div class="text-xs max-w-xs">
                                    <div class="${addressClass} cursor-pointer clickable-address truncate" data-listing-id="${row.id}">${addressText}</div>
                                    <div class="${addressFromDbClass} truncate">${addressFromDbText}</div>
                                </div>`;
                            } else {
                                // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å –∏–∑ –±–∞–∑—ã (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π)
                                const addressText = addressFromDb || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
                                const addressClass = addressText === '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω' ? 'text-red-500' : 'text-blue-600 hover:text-blue-800 cursor-pointer';
                                
                                return `<div class="text-xs max-w-xs">
                                    <div class="${addressClass} truncate clickable-object-address" data-object-id="${row.id}">${addressText}</div>
                                </div>`;
                            }
                        }
                    },
                    // 7. –¶–µ–Ω–∞
                    { 
                        data: null, 
                        title: '–¶–µ–Ω–∞',
                        render: function (data, type, row) {
                            const isListing = row.type === 'listing';
                            const priceValue = isListing ? row.price : row.current_price;
                            
                            if (!priceValue) return '<div class="text-xs">‚Äî</div>';
                            
                            const price = priceValue.toLocaleString();
                            let pricePerMeter = '';
                            
                            if (row.price_per_meter) {
                                pricePerMeter = row.price_per_meter.toLocaleString();
                            } else if (priceValue && row.area_total) {
                                const calculated = Math.round(priceValue / row.area_total);
                                pricePerMeter = calculated.toLocaleString();
                            }
                            
                            return `<div class="text-xs">
                                <div class="text-green-600 font-medium">${price}</div>
                                ${pricePerMeter ? `<div class="text-gray-500">${pricePerMeter}</div>` : ''}
                            </div>`;
                        }
                    },
                    // 8. –ö–æ–Ω—Ç–∞–∫—Ç
                    { 
                        data: null, 
                        title: '–ö–æ–Ω—Ç–∞–∫—Ç',
                        render: function (data, type, row) {
                            const isListing = row.type === 'listing';
                            
                            if (isListing) {
                                const sellerType = row.seller_type === 'private' ? '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' : 
                                                 row.seller_type === 'agency' ? '–ê–≥–µ–Ω—Ç' : 
                                                 row.seller_type === 'agent' ? '–ê–≥–µ–Ω—Ç' :
                                                 row.seller_type === 'owner' ? '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' :
                                                 row.seller_type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                                
                                const sellerName = row.seller_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                                
                                return `<div class="text-xs max-w-xs">
                                    <div class="text-gray-900 truncate" title="${sellerType}">${sellerType}</div>
                                    <div class="text-gray-500 truncate" title="${sellerName}">${sellerName}</div>
                                </div>`;
                            } else {
                                // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
                                const ownerStatus = row.owner_status || '—Ç–æ–ª—å–∫–æ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤';
                                const statusColor = ownerStatus === '–µ—Å—Ç—å –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞' ? 'text-green-600' :
                                                   ownerStatus === '–±—ã–ª–æ –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞' ? 'text-yellow-600' :
                                                   'text-gray-600';
                                
                                return `<div class="text-xs max-w-xs">
                                    <div class="${statusColor} font-medium">${ownerStatus}</div>
                                </div>`;
                            }
                        }
                    }
                ]
            });

        } catch (error) {
            console.error('Error initializing data tables:', error);
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
        document.getElementById('editAreaBtn')?.addEventListener('click', () => {
            this.openEditAreaModal();
        });


        // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
        document.getElementById('loadAddressesBtn')?.addEventListener('click', () => {
            this.loadAddressesFromAPI();
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        document.getElementById('refreshMapBtn')?.addEventListener('click', () => {
            this.refreshMapData();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        document.getElementById('parseListingsBtn')?.addEventListener('click', () => {
            this.parseListings();
        });

        document.getElementById('updateListingsBtn')?.addEventListener('click', () => {
            this.updateListings();
        });

        document.getElementById('processAddressesBtn')?.addEventListener('click', () => {
            this.processAddresses();
        });

        document.getElementById('processDuplicatesBtn')?.addEventListener('click', () => {
            this.processDuplicates();
        });

        document.getElementById('deleteListingsBtn')?.addEventListener('click', () => {
            this.deleteListings();
        });
        
        document.getElementById('deleteDataBtn')?.addEventListener('click', () => {
            this.deleteDataFromTab();
        });

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ AreaServicesIntegration

        // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–¥—Ä–µ—Å–æ–≤
        document.getElementById('addressTableHeader')?.addEventListener('click', () => {
            this.toggleAddressTable();
        });

        // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        document.getElementById('statisticsPanelHeader')?.addEventListener('click', () => {
            this.toggleStatisticsPanel();
        });

        // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        document.getElementById('dataWorkPanelHeader')?.addEventListener('click', () => {
            this.toggleDataWorkPanel();
        });

        // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∫–∞—Ä—Ç—ã –æ–±–ª–∞—Å—Ç–∏
        document.getElementById('mapPanelHeader')?.addEventListener('click', () => {
            this.toggleMapPanel();
        });

        // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª—è–º–∏
        document.getElementById('duplicatesPanelHeader')?.addEventListener('click', () => {
            this.toggleDuplicatesPanel();
        });

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–∞–±–∞–º –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        document.querySelectorAll('.data-nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const tabId = item.getAttribute('data-tab');
                if (tabId) {
                    this.switchDataWorkTab(tabId);
                }
            });
        });

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        document.getElementById('closeModalBtn')?.addEventListener('click', () => {
            this.closeModal();
        });

        document.getElementById('closeModalBtn2')?.addEventListener('click', () => {
            this.closeModal();
        });

        document.getElementById('openListingBtn')?.addEventListener('click', () => {
            this.openCurrentListing();
        });

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
        document.getElementById('editAreaForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveAreaEdit();
        });

        document.getElementById('cancelEditArea')?.addEventListener('click', () => {
            this.closeEditAreaModal();
        });

        // –ö–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–æ–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
        document.getElementById('openAvitoBtn')?.addEventListener('click', () => {
            this.openAvitoFilter();
        });

        document.getElementById('openCianBtn')?.addEventListener('click', () => {
            this.openCianFilter();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL-–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
        document.getElementById('editAvitoUrl')?.addEventListener('input', () => {
            this.updateFilterButtons();
        });

        document.getElementById('editCianUrl')?.addEventListener('input', () => {
            this.updateFilterButtons();
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        document.getElementById('addAddressBtn')?.addEventListener('click', () => {
            this.addAddress();
        });

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        document.getElementById('editAddressForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveAddressEdit();
        });

        document.getElementById('cancelEditAddress')?.addEventListener('click', () => {
            this.closeEditAddressModal();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ñ–æ–Ω
        document.getElementById('editAddressModal')?.addEventListener('click', (e) => {
            if (e.target.id === 'editAddressModal') {
                this.closeEditAddressModal();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ popup –∏ —Ç–∞–±–ª–∏—Ü–µ —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        document.addEventListener('click', (e) => {
            const button = e.target.closest('[data-action]');
            if (!button) return;

            const action = button.getAttribute('data-action');
            const addressId = button.getAttribute('data-address-id');

            if (!addressId) return;

            switch (action) {
                case 'edit-address':
                    this.editAddress(addressId);
                    break;
                case 'delete-address':
                    this.deleteAddress(addressId);
                    break;
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ popup –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        document.addEventListener('click', (e) => {
            // –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å" –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if (e.target.classList.contains('view-listing-details')) {
                const listingId = e.target.getAttribute('data-listing-id');
                if (listingId) {
                    this.showListingDetails(listingId);
                }
                return;
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è select –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω
        document.getElementById('editWallMaterial')?.addEventListener('change', () => {
            this.updateWallMaterialButton();
        });

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω
        document.getElementById('wallMaterialActionBtn')?.addEventListener('click', () => {
            const select = document.getElementById('editWallMaterial');
            if (select.value) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                this.showEditWallMaterialModal(select.value);
            } else {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                this.showWallMaterialModal();
            }
        });

        // –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—Ç–µ–Ω
        document.getElementById('cancelWallMaterial')?.addEventListener('click', () => {
            this.hideWallMaterialModal();
        });

        document.getElementById('saveWallMaterial')?.addEventListener('click', () => {
            this.saveWallMaterial();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        document.getElementById('wallMaterialModal')?.addEventListener('click', (e) => {
            if (e.target.id === 'wallMaterialModal') {
                this.hideWallMaterialModal();
            }
        });

        // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –°–ï–†–ò–ô –î–û–ú–û–í =====

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è select —Å–µ—Ä–∏–∏ –¥–æ–º–∞
        document.getElementById('editHouseSeries')?.addEventListener('change', () => {
            this.updateHouseSeriesButton();
        });

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–∏–∏ –¥–æ–º–∞
        document.getElementById('houseSeriesActionBtn')?.addEventListener('click', () => {
            const select = document.getElementById('editHouseSeries');
            if (select.value) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Ä–∏–∏
                this.showEditHouseSeriesModal(select.value);
            } else {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏
                this.showHouseSeriesModal();
            }
        });

        // –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ—Ä–∏–π –¥–æ–º–æ–≤
        document.getElementById('cancelHouseSeries')?.addEventListener('click', () => {
            this.hideHouseSeriesModal();
        });

        document.getElementById('saveHouseSeries')?.addEventListener('click', () => {
            this.saveHouseSeries();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        document.getElementById('houseSeriesModal')?.addEventListener('click', (e) => {
            if (e.target.id === 'houseSeriesModal') {
                this.hideHouseSeriesModal();
            }
        });

        // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ú–ê–¢–ï–†–ò–ê–õ–û–í –ü–ï–†–ï–ö–†–´–¢–ò–ô =====

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è select –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
        document.getElementById('editCeilingMaterial')?.addEventListener('change', () => {
            this.updateCeilingMaterialButton();
        });

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
        document.getElementById('ceilingMaterialActionBtn')?.addEventListener('click', () => {
            const select = document.getElementById('editCeilingMaterial');
            if (select.value) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                this.showEditCeilingMaterialModal(select.value);
            } else {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                this.showCeilingMaterialModal();
            }
        });

        // –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
        document.getElementById('cancelCeilingMaterial')?.addEventListener('click', () => {
            this.hideCeilingMaterialModal();
        });

        document.getElementById('saveCeilingMaterial')?.addEventListener('click', () => {
            this.saveCeilingMaterial();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        document.getElementById('ceilingMaterialModal')?.addEventListener('click', (e) => {
            if (e.target.id === 'ceilingMaterialModal') {
                this.hideCeilingMaterialModal();
            }
        });

        // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö –§–ò–õ–¨–¢–†–û–í –ö–ê–†–¢–´ =====

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞–¥ –∫–∞—Ä—Ç–æ–π
        document.getElementById('filterByYear')?.addEventListener('click', () => {
            this.toggleMapFilter('year');
        });

        document.getElementById('filterBySeries')?.addEventListener('click', () => {
            this.toggleMapFilter('series');
        });

        document.getElementById('filterByFloors')?.addEventListener('click', () => {
            this.toggleMapFilter('floors');
        });

        document.getElementById('filterByObjects')?.addEventListener('click', () => {
            this.toggleMapFilter('objects');
        });

        document.getElementById('filterByListings')?.addEventListener('click', () => {
            this.toggleMapFilter('listings');
        });

        // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –¢–ê–ë–õ–ò–¶–´ –î–£–ë–õ–ï–ô =====

        // –§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –¥—É–±–ª–µ–π
        document.getElementById('duplicatesStatusFilter')?.addEventListener('change', () => {
            this.loadDuplicatesTable();
        });

        // –í—ã–±–æ—Ä –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π
        document.getElementById('selectAllDuplicates')?.addEventListener('change', (e) => {
            this.selectAllDuplicates(e.target.checked);
        });

        // –û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
        document.getElementById('clearSelectionBtn')?.addEventListener('click', () => {
            this.clearDuplicatesSelection();
        });

        // –ö–Ω–æ–ø–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥—É–±–ª—è–º–∏
        document.getElementById('mergeDuplicatesBtn')?.addEventListener('click', () => {
            this.mergeDuplicates();
        });

        document.getElementById('splitDuplicatesBtn')?.addEventListener('click', () => {
            this.splitDuplicates();
        });

        document.getElementById('correctAddressBtn')?.addEventListener('click', () => {
            this.markAddressAsCorrect();
        });


        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        document.getElementById('processingAddressFilter')?.addEventListener('change', () => {
            this.applyProcessingFilters();
        });

        document.getElementById('processingPropertyTypeFilter')?.addEventListener('change', () => {
            this.applyProcessingFilters();
        });

        document.getElementById('processingFloorFilter')?.addEventListener('input', () => {
            this.applyProcessingFilters();
        });

    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è DataTables
     */
    bindDataTableEvents() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π
        $(document).on('change', '#selectAllDuplicates', (e) => {
            this.selectAllDuplicates(e.target.checked);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π
        $(document).on('change', '.duplicate-checkbox', (e) => {
            console.log('üîÑ jQuery event handler for duplicate checkbox');
            this.handleDuplicateSelection(e.target);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π
        $(document).on('click', '.processing-filter-btn', (e) => {
            const button = e.currentTarget;
            const rowId = button.dataset.rowId;
            const rowType = button.dataset.rowType;
            this.openProcessingFilter(rowId, rowType);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        $(document).on('click', '.remove-filter-btn', (e) => {
            const button = e.currentTarget;
            const filterType = button.dataset.filterType;
            this.removeActiveFilter(filterType);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∞–¥—Ä–µ—Å–∞–º –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π
        $(document).on('click', '.clickable-address', (e) => {
            const listingId = e.currentTarget.dataset.listingId;
            if (listingId) {
                this.showListingDetails(listingId);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
        $(document).on('click', '.expand-object-listings', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const objectId = e.currentTarget.dataset.objectId;
            const tr = $(e.currentTarget).closest('tr');
            const row = this.duplicatesTable.row(tr);
            
            console.log('üîç Expanding object listings for:', objectId);
            
            if (row.child.isShown()) {
                // –°–∫—Ä—ã–≤–∞–µ–º child row
                row.child.hide();
                tr.removeClass('shown');
                $(e.currentTarget).find('svg').css('transform', 'rotate(0deg)');
                console.log('üìñ Child row hidden');
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º child row
                this.showObjectListings(row, objectId);
                tr.addClass('shown');
                $(e.currentTarget).find('svg').css('transform', 'rotate(180deg)');
                console.log('üìó Child row shown');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∞–¥—Ä–µ—Å–∞–º –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π
        $(document).on('click', '.clickable-object-address', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const objectId = e.currentTarget.dataset.objectId;
            if (objectId) {
                this.showObjectDetails(objectId);
            }
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ child row
     */
    async showObjectListings(row, objectId) {
        try {
            console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', objectId);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            const objectListings = await this.getListingsForObject(objectId);
            
            if (objectListings.length === 0) {
                console.log('üìã –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', objectId);
                row.child('<div class="p-4 text-center text-gray-500">–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞</div>').show();
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è child row —Å —Ç–∞–±–ª–∏—Ü–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            const childHtml = this.createChildListingsTable(objectListings);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º child row
            row.child(childHtml).show();
            
            console.log('üìã Child row —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', objectId, '—Å', objectListings.length, '–æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞:', error);
            row.child('<div class="p-4 text-center text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</div>').show();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
     */
    async getListingsForObject(objectId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ object_id
            const allListings = await db.getListings();
            const objectListings = allListings.filter(listing => listing.object_id === objectId);
            
            console.log('üìã –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞', objectId, ':', objectListings.length);
            
            return objectListings;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', error);
            return [];
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å HTML —Ç–∞–±–ª–∏—Ü—É –¥–ª—è child row —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
     */
    createChildListingsTable(listings) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—É–±—ã–≤–∞–Ω–∏–µ) –∏—Å–ø–æ–ª—å–∑—É—è timestamp
        const sortedListings = listings.sort((a, b) => {
            const timestampA = new Date(a.updated || a.updated_at || a.created || a.created_at || 0).getTime();
            const timestampB = new Date(b.updated || b.updated_at || b.created || b.created_at || 0).getTime();
            return timestampB - timestampA;
        });

        const tableHtml = `
            <div class="bg-gray-50 p-4">
                <h4 class="text-sm font-medium text-gray-900 mb-3">–û–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ (${listings.length})</h4>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°—Ç–∞—Ç—É—Å</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°–æ–∑–¥–∞–Ω–æ</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–û–±–Ω–æ–≤–ª–µ–Ω–æ</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ê–¥—Ä–µ—Å</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–¶–µ–Ω–∞</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ö–æ–Ω—Ç–∞–∫—Ç</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ò—Å—Ç–æ—á–Ω–∏–∫</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            ${sortedListings.map(listing => this.createChildListingRow(listing)).join('')}
                        </tbody>
                    </table>
                </div>
            </div>
        `;
        
        return tableHtml;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å HTML —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ child —Ç–∞–±–ª–∏—Ü–µ
     */
    createChildListingRow(listing) {
        // 1. –°—Ç–∞—Ç—É—Å (–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã)
        const statusBadges = {
            'active': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">–ê–∫—Ç–∏–≤–Ω—ã–π</span>',
            'archived': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>',
            'archive': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>',
            'needs_processing': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">–¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</span>'
        };
        
        let statusHtml = statusBadges[listing.status] || `<span class="text-xs text-gray-500">${listing.status}</span>`;
        
        if (listing.processing_status) {
            const processingBadges = {
                'address_needed': '<br><span class="inline-flex items-center px-1 py-0.5 text-nowrap rounded-full text-xs font-medium bg-orange-100 text-orange-800" style="font-size: 10px;">–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å</span>',
                'duplicate_check_needed': '<br><span class="inline-flex items-center text-nowrap px-1 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800" style="font-size: 10px;">–û–±—Ä. –Ω–∞ –¥—É–±–ª–∏</span>',
                'processed': '<br><span class="inline-flex items-center px-1 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800" style="font-size: 10px;">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ</span>'
            };
            statusHtml += processingBadges[listing.processing_status] || '';
        }
        
        // 2. –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        const dateValue = listing.created || listing.created_at;
        let createdHtml = '‚Äî';
        if (dateValue) {
            const createdDate = new Date(dateValue);
            const dateStr = createdDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' });
            
            // –í—ã—á–∏—Å–ª—è–µ–º —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é
            const updatedValue = listing.updated || listing.updated_at;
            const endDate = updatedValue ? new Date(updatedValue) : new Date();
            const diffTime = Math.abs(endDate - createdDate);
            const exposureDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            createdHtml = `<div class="text-xs">
                ${dateStr}<br>
                <span class="text-gray-500" style="font-size: 10px;">—ç–∫—Å–ø. ${exposureDays} –¥–Ω.</span>
            </div>`;
        }
        
        // 3. –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updatedDateValue = listing.updated || listing.updated_at;
        let updatedHtml = '‚Äî';
        if (updatedDateValue) {
            const date = new Date(updatedDateValue);
            const now = new Date();
            const diffTime = Math.abs(now - date);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            const dateStr = date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' });
            const daysAgo = diffDays === 1 ? '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥' : `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
            const color = diffDays > 7 ? 'text-red-600' : 'text-green-600';
            
            updatedHtml = `<div class="text-xs">
                ${dateStr}<br>
                <span class="${color}" style="font-size: 10px;">${daysAgo}</span>
            </div>`;
        }
        
        // 4. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        const parts = [];
        
        if (listing.property_type) {
            const types = {
                'studio': '–°—Ç—É–¥–∏—è',
                '1k': '1-–∫',
                '2k': '2-–∫',
                '3k': '3-–∫',
                '4k+': '4-–∫+'
            };
            parts.push(types[listing.property_type] || listing.property_type);
            parts.push('–∫–≤–∞—Ä—Ç–∏—Ä–∞');
        }
        
        // –ü–ª–æ—â–∞–¥–∏
        const areas = [];
        if (listing.area_total) areas.push(listing.area_total);
        if (listing.area_living) areas.push(listing.area_living);
        if (listing.area_kitchen) areas.push(listing.area_kitchen);
        if (areas.length > 0) parts.push(`${areas.join('/')}–º¬≤`);
        
        // –≠—Ç–∞–∂/—ç—Ç–∞–∂–Ω–æ—Å—Ç—å
        if (listing.floor && listing.total_floors) {
            parts.push(`${listing.floor}/${listing.total_floors} —ç—Ç.`);
        } else if (listing.floor && listing.floors_total) {
            parts.push(`${listing.floor}/${listing.floors_total} —ç—Ç.`);
        }
        
        const characteristicsText = parts.length > 0 ? parts.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        
        // 5. –ê–¥—Ä–µ—Å
        const addressFromDb = this.getAddressNameById(listing.address_id);
        const addressText = listing.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
        let addressFromDbText = addressFromDb || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        const hasLowConfidence = listing.address_match_confidence === 'low' || listing.address_match_confidence === 'very_low';
        const isManualConfidence = listing.address_match_confidence === 'manual';
        const isAddressNotFound = addressFromDbText === '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
        
        if (hasLowConfidence && !isAddressNotFound) {
            const confidenceText = listing.address_match_confidence === 'low' ? '–ù–∏–∑–∫–∞—è' : '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è';
            addressFromDbText += ` (${confidenceText})`;
        } else if (isManualConfidence && !isAddressNotFound) {
            addressFromDbText += ` (–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)`;
        }
        
        const addressClass = addressText === '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω' ? 'text-red-600 hover:text-red-800' : 'text-blue-600 hover:text-blue-800';
        const addressFromDbClass = (isAddressNotFound || (hasLowConfidence && !isManualConfidence)) ? 'text-red-500' : 'text-gray-500';
        
        const addressHtml = `<div class="text-xs max-w-xs">
            <div class="${addressClass} cursor-pointer clickable-address truncate" data-listing-id="${listing.id}">${addressText}</div>
            <div class="${addressFromDbClass} truncate">${addressFromDbText}</div>
        </div>`;
        
        // 6. –¶–µ–Ω–∞
        const priceValue = listing.price;
        let priceHtml = '<div class="text-xs">‚Äî</div>';
        if (priceValue) {
            const price = priceValue.toLocaleString();
            let pricePerMeter = '';
            
            if (listing.price_per_meter) {
                pricePerMeter = listing.price_per_meter.toLocaleString();
            } else if (priceValue && listing.area_total) {
                const calculated = Math.round(priceValue / listing.area_total);
                pricePerMeter = calculated.toLocaleString();
            }
            
            priceHtml = `<div class="text-xs">
                <div class="text-green-600 font-medium">${price}</div>
                ${pricePerMeter ? `<div class="text-gray-500">${pricePerMeter}</div>` : ''}
            </div>`;
        }
        
        // 7. –ö–æ–Ω—Ç–∞–∫—Ç
        const sellerType = listing.seller_type === 'private' ? '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' : 
                          listing.seller_type === 'agency' ? '–ê–≥–µ–Ω—Ç' : 
                          listing.seller_type === 'agent' ? '–ê–≥–µ–Ω—Ç' :
                          listing.seller_type === 'owner' ? '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' :
                          listing.seller_type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        
        const sellerName = listing.seller_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        
        const contactHtml = `<div class="text-xs max-w-xs">
            <div class="text-gray-900 truncate" title="${sellerType}">${sellerType}</div>
            <div class="text-gray-500 truncate" title="${sellerName}">${sellerName}</div>
        </div>`;
        
        // 8. –ò—Å—Ç–æ—á–Ω–∏–∫ (–Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
        const sourceUrl = listing.url || '#';
        let sourceName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ source_metadata.original_source
        if (listing.source_metadata && listing.source_metadata.original_source) {
            sourceName = listing.source_metadata.original_source;
        } else if (listing.source) {
            // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É source —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
            sourceName = listing.source === 'avito' ? '–ê–≤–∏—Ç–æ' : listing.source === 'cian' ? '–¶–∏–∞–Ω' : listing.source;
        }
        
        const sourceHtml = `<div class="text-xs">
            <a href="${sourceUrl}" target="_blank" class="text-blue-600 hover:text-blue-800">${sourceName}</a>
        </div>`;
        
        return `
            <tr class="hover:bg-gray-50">
                <td class="px-3 py-2 whitespace-nowrap text-xs">${statusHtml}</td>
                <td class="px-3 py-2 whitespace-nowrap text-xs">${createdHtml}</td>
                <td class="px-3 py-2 whitespace-nowrap text-xs">${updatedHtml}</td>
                <td class="px-3 py-2 whitespace-nowrap text-xs"><div class="text-xs text-gray-900 max-w-xs" title="${characteristicsText}">${characteristicsText}</div></td>
                <td class="px-3 py-2 whitespace-nowrap text-xs">${addressHtml}</td>
                <td class="px-3 py-2 whitespace-nowrap text-xs">${priceHtml}</td>
                <td class="px-3 py-2 whitespace-nowrap text-xs">${contactHtml}</td>
                <td class="px-3 py-2 whitespace-nowrap text-xs">${sourceHtml}</td>
            </tr>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
     */
    async showObjectDetails(objectId) {
        try {
            console.log('üè† –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞:', objectId);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
            let objectWithData;
            try {
                objectWithData = await window.realEstateObjectManager.getObjectWithListings(objectId);
            } catch (error) {
                console.error('–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', objectId, error);
                this.showError('–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            if (!objectWithData || !objectWithData.object) {
                console.error('–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', objectId);
                this.showError('–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const realEstateObject = objectWithData.object;
            const objectListings = objectWithData.listings || [];
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modalContent = document.getElementById('modalContent');
            modalContent.innerHTML = this.renderObjectDetails(realEstateObject, objectListings);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            this.currentObject = realEstateObject;
            this.currentObjectListings = objectListings;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            document.getElementById('listingModal').classList.remove('hidden');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            setTimeout(() => {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –æ–±—ä–µ–∫—Ç–∞
                this.renderObjectMap(realEstateObject);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞
                this.renderObjectPriceChart(realEstateObject);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                if (objectListings.length > 0) {
                    this.loadObjectPhotos(objectListings[0]);
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
                this.initializeObjectListingsTable(objectListings, objectId);
                
                console.log('üè† –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', objectId);
            }, 100);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞: ' + error.message);
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    renderObjectDetails(realEstateObject, objectListings) {
        return `
            <!-- –ö–∞—Ä—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ -->
            <div class="mb-6">
                <div class="bg-white shadow overflow-hidden sm:rounded-md border border-gray-200">
                    <div class="px-4 py-3">
                        <div class="flex items-center space-x-3">
                            <span class="text-lg font-medium text-gray-900">üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</span>
                        </div>
                    </div>
                    <div class="px-4 pb-4">
                        <div id="object-map-${realEstateObject.id}" class="h-64 bg-gray-200 rounded-md">
                            <!-- –ö–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞ –∑–¥–µ—Å—å -->
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞ -->
            <div class="mb-6">
                <h4 class="text-lg font-medium text-gray-900 mb-4">–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞</h4>
                <div id="object-price-chart-${realEstateObject.id}" class="w-full">
                    <!-- –ì—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω –∑–¥–µ—Å—å -->
                </div>
            </div>
            
            <!-- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ -->
            <div class="mb-6">
                <h4 class="text-lg font-medium text-gray-900 mb-4">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞</h4>
                <div class="bg-white shadow overflow-hidden sm:rounded-md">
                    <div class="px-4 py-5 sm:p-6">
                        <dl class="grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2">
                            ${this.renderObjectParameters(realEstateObject)}
                        </dl>
                    </div>
                </div>
            </div>
            
            <!-- –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è -->
            <div class="mb-6">
                <h4 class="text-lg font-medium text-gray-900 mb-4">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</h4>
                <div id="object-photos-${realEstateObject.id}" class="w-full">
                    <!-- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è -->
                </div>
            </div>
            
            <!-- –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞ -->
            <div class="mb-6">
                <h4 class="text-lg font-medium text-gray-900 mb-4">–û–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ (${objectListings.length})</h4>
                <div class="overflow-x-auto">
                    <table id="object-listings-table-${realEstateObject.id}" class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°—Ç–∞—Ç—É—Å</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°–æ–∑–¥–∞–Ω–æ</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–û–±–Ω–æ–≤–ª–µ–Ω–æ</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ê–¥—Ä–µ—Å</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–¶–µ–Ω–∞</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ö–æ–Ω—Ç–∞–∫—Ç</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ò—Å—Ç–æ—á–Ω–∏–∫</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <!-- –°—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ initializeObjectListingsTable -->
                        </tbody>
                    </table>
                </div>
            </div>
        `;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    renderObjectParameters(realEstateObject) {
        const parameters = [];
        
        // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        if (realEstateObject.created_at) {
            const createdDate = new Date(realEstateObject.created_at).toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit', 
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</dt>
                    <dd class="mt-1 text-sm text-gray-900">${createdDate}</dd>
                </div>
            `);
        }
        
        // –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (realEstateObject.updated_at) {
            const updatedDate = new Date(realEstateObject.updated_at).toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric', 
                hour: '2-digit',
                minute: '2-digit'
            });
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</dt>
                    <dd class="mt-1 text-sm text-gray-900">${updatedDate}</dd>
                </div>
            `);
        }
        
        // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        if (realEstateObject.current_price) {
            const price = realEstateObject.current_price.toLocaleString('ru-RU') + ' ‚ÇΩ';
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞</dt>
                    <dd class="mt-1 text-sm text-green-600 font-medium">${price}</dd>
                </div>
            `);
        }
        
        // –¶–µ–Ω–∞ –∑–∞ –º¬≤
        if (realEstateObject.price_per_meter) {
            const pricePerMeter = realEstateObject.price_per_meter.toLocaleString('ru-RU') + ' ‚ÇΩ/–º¬≤';
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–¶–µ–Ω–∞ –∑–∞ –º¬≤</dt>
                    <dd class="mt-1 text-sm text-gray-900">${pricePerMeter}</dd>
                </div>
            `);
        }
        
        // –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if (realEstateObject.property_type) {
            const types = {
                'studio': '–°—Ç—É–¥–∏—è',
                '1k': '1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                '2k': '2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞', 
                '3k': '3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                '4k+': '4+ –∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞'
            };
            const propertyTypeText = types[realEstateObject.property_type] || realEstateObject.property_type;
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</dt>
                    <dd class="mt-1 text-sm text-gray-900">${propertyTypeText}</dd>
                </div>
            `);
        }
        
        // –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å
        if (realEstateObject.area_total) {
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å</dt>
                    <dd class="mt-1 text-sm text-gray-900">${realEstateObject.area_total} –º¬≤</dd>
                </div>
            `);
        }
        
        // –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å
        if (realEstateObject.area_living) {
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å</dt>
                    <dd class="mt-1 text-sm text-gray-900">${realEstateObject.area_living} –º¬≤</dd>
                </div>
            `);
        }
        
        // –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏
        if (realEstateObject.area_kitchen) {
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏</dt>
                    <dd class="mt-1 text-sm text-gray-900">${realEstateObject.area_kitchen} –º¬≤</dd>
                </div>
            `);
        }
        
        // –≠—Ç–∞–∂
        if (realEstateObject.floor && realEstateObject.total_floors) {
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–≠—Ç–∞–∂</dt>
                    <dd class="mt-1 text-sm text-gray-900">${realEstateObject.floor} –∏–∑ ${realEstateObject.total_floors}</dd>
                </div>
            `);
        }
        
        // –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞
        if (realEstateObject.status) {
            const statusText = realEstateObject.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ê—Ä—Ö–∏–≤–Ω—ã–π';
            const statusColor = realEstateObject.status === 'active' ? 'text-green-600' : 'text-gray-600';
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞</dt>
                    <dd class="mt-1 text-sm ${statusColor} font-medium">${statusText}</dd>
                </div>
            `);
        }
        
        // –°—Ç–∞—Ç—É—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
        if (realEstateObject.owner_status) {
            const ownerStatusColor = realEstateObject.owner_status === '–µ—Å—Ç—å –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞' ? 'text-green-600' :
                                   realEstateObject.owner_status === '–±—ã–ª–æ –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞' ? 'text-yellow-600' :
                                   'text-gray-600';
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–°—Ç–∞—Ç—É—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞</dt>
                    <dd class="mt-1 text-sm ${ownerStatusColor}">${realEstateObject.owner_status}</dd>
                </div>
            `);
        }
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        if (realEstateObject.listings_count) {
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</dt>
                    <dd class="mt-1 text-sm text-gray-900">${realEstateObject.listings_count}</dd>
                </div>
            `);
        }
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        if (realEstateObject.active_listings_count !== undefined) {
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π</dt>
                    <dd class="mt-1 text-sm text-gray-900">${realEstateObject.active_listings_count}</dd>
                </div>
            `);
        }
        
        return parameters.join('');
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    renderObjectMap(realEstateObject) {
        try {
            const mapContainer = document.getElementById(`object-map-${realEstateObject.id}`);
            if (!mapContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ (—á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å)
            const coords = this.getObjectCoordinates(realEstateObject);
            if (!coords) {
                mapContainer.innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                return;
            }

            console.log(`üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${realEstateObject.id} —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:`, coords);

            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
            const objectMap = L.map(`object-map-${realEstateObject.id}`, {
                center: [coords.lat, coords.lng],
                zoom: 16,
                zoomControl: true,
                scrollWheelZoom: false
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∫–∞—Ä—Ç—ã
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(objectMap);

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –æ–±—ä–µ–∫—Ç–∞
            const objectMarker = L.marker([coords.lat, coords.lng], {
                icon: L.divIcon({
                    className: 'object-marker',
                    html: `<div style="background: #10b981; color: white; border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; font-size: 16px; font-weight: bold; border: 3px solid white; box-shadow: 0 2px 6px rgba(0,0,0,0.4);">üè†</div>`,
                    iconSize: [32, 32],
                    iconAnchor: [16, 16]
                })
            }).addTo(objectMap);

            // –î–æ–±–∞–≤–ª—è–µ–º popup –∫ –º–∞—Ä–∫–µ—Ä—É
            const addressText = this.getAddressNameById(realEstateObject.address_id) || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
            const priceText = realEstateObject.current_price ? 
                realEstateObject.current_price.toLocaleString('ru-RU') + ' ‚ÇΩ' : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            
            const markerPopupContent = `
                <div style="min-width: 200px;">
                    <strong>–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</strong><br>
                    <span style="color: #6b7280; font-size: 12px;">${this.escapeHtml(addressText)}</span><br>
                    <span style="color: #059669; font-weight: bold;">${priceText}</span>
                    ${realEstateObject.price_per_meter ? `<br><span style="color: #6b7280; font-size: 12px;">${realEstateObject.price_per_meter.toLocaleString('ru-RU')} ‚ÇΩ/–º¬≤</span>` : ''}
                </div>
            `;
            objectMarker.bindPopup(markerPopupContent);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            mapContainer._leafletMap = objectMap;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –æ–±—ä–µ–∫—Ç–∞:', error);
            const mapContainer = document.getElementById(`object-map-${realEstateObject.id}`);
            if (mapContainer) {
                mapContainer.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã</div>';
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    getObjectCoordinates(realEstateObject) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        if (realEstateObject.address_id) {
            const address = this.addresses.find(addr => addr.id === realEstateObject.address_id);
            if (address && address.coordinates && address.coordinates.lat && address.coordinates.lng) {
                return {
                    lat: parseFloat(address.coordinates.lat),
                    lng: parseFloat(address.coordinates.lng)
                };
            }
        }
        return null;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞
     */
    renderObjectPriceChart(realEstateObject) {
        try {
            const chartContainer = document.getElementById(`object-price-chart-${realEstateObject.id}`);
            if (!chartContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            console.log(`üìä –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${realEstateObject.id}`);

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            const priceData = this.prepareObjectPriceChartData(realEstateObject);
            
            if (priceData.length === 0) {
                chartContainer.innerHTML = '<div class="flex items-center justify-center h-64 text-gray-500">üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</div>';
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–º–æ—â—å—é Chart.js (–ø–æ –æ–±—Ä–∞–∑—Ü—É –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
            const ctx = document.createElement('canvas');
            ctx.width = chartContainer.offsetWidth;
            ctx.height = 300;
            chartContainer.innerHTML = '';
            chartContainer.appendChild(ctx);

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: priceData.map(item => item.dateFormatted),
                    datasets: [{
                        label: '–¶–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞',
                        data: priceData.map(item => item.price),
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false,
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString('ru-RU') + ' ‚ÇΩ';
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return '–¶–µ–Ω–∞: ' + context.parsed.y.toLocaleString('ru-RU') + ' ‚ÇΩ';
                                }
                            }
                        }
                    }
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞:', error);
            const chartContainer = document.getElementById(`object-price-chart-${realEstateObject.id}`);
            if (chartContainer) {
                chartContainer.innerHTML = '<div class="flex items-center justify-center h-64 text-red-500">–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</div>';
            }
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞
     */
    prepareObjectPriceChartData(realEstateObject) {
        const priceData = [];
        
        if (realEstateObject.price_history && realEstateObject.price_history.length > 0) {
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –¥–∞—Ç–µ
            const sortedHistory = [...realEstateObject.price_history].sort((a, b) => new Date(a.date) - new Date(b.date));
            
            sortedHistory.forEach(entry => {
                priceData.push({
                    date: new Date(entry.date),
                    dateFormatted: new Date(entry.date).toLocaleDateString('ru-RU'),
                    price: entry.price
                });
            });
        } else {
            // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            if (realEstateObject.current_price) {
                const date = new Date(realEstateObject.updated_at || realEstateObject.created_at);
                priceData.push({
                    date: date,
                    dateFormatted: date.toLocaleDateString('ru-RU'),
                    price: realEstateObject.current_price
                });
            }
        }
        
        return priceData;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    loadObjectPhotos(listing) {
        try {
            if (!this.currentObject) {
                console.warn('–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const photosContainer = document.getElementById(`object-photos-${this.currentObject.id}`);
            if (!photosContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            console.log(`üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${this.currentObject.id} –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}`);

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const photos = this.getListingPhotos(listing);
            
            if (photos.length === 0) {
                photosContainer.innerHTML = `
                    <div class="bg-gray-100 rounded-lg p-8 text-center text-gray-500">
                        üì∑ –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
                    </div>
                `;
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –≥–∞–ª–µ—Ä–µ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            photosContainer.innerHTML = `
                <div class="fotorama" 
                     data-nav="thumbs" 
                     data-width="100%" 
                     data-height="400"
                     data-thumbheight="50"
                     data-thumbwidth="50"
                     data-allowfullscreen="true"
                     data-transition="slide"
                     data-loop="true"
                     id="object-gallery-${this.currentObject.id}">
                    ${photos.map(photo => `<img src="${photo}" alt="–§–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è">`).join('')}
                </div>
            `;

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Fotorama
            setTimeout(() => {
                const galleryElement = document.getElementById(`object-gallery-${this.currentObject.id}`);
                if (galleryElement && window.$ && $.fn.fotorama) {
                    $(galleryElement).fotorama();
                }
            }, 100);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±—ä–µ–∫—Ç–∞:', error);
            const photosContainer = document.getElementById(`object-photos-${this.currentObject.id}`);
            if (photosContainer) {
                photosContainer.innerHTML = `
                    <div class="bg-red-100 rounded-lg p-8 text-center text-red-500">
                        ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    </div>
                `;
            }
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
     */
    initializeObjectListingsTable(objectListings, objectId) {
        try {
            const tableContainer = document.getElementById(`object-listings-table-${objectId}`);
            if (!tableContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            console.log(`üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${objectId}`);

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—É–±—ã–≤–∞–Ω–∏–µ)
            const sortedListings = objectListings.sort((a, b) => {
                const timestampA = new Date(a.updated || a.updated_at || a.created || a.created_at || 0).getTime();
                const timestampB = new Date(b.updated || b.updated_at || b.created || b.created_at || 0).getTime();
                return timestampB - timestampA;
            });

            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            const tableBody = tableContainer.querySelector('tbody');
            tableBody.innerHTML = sortedListings.map(listing => 
                this.createObjectListingRow(listing, objectId)
            ).join('');

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
            this.bindObjectListingEvents(objectId);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è)
     */
    createObjectListingRow(listing, objectId) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ createChildListingRow, –Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
        let rowHtml = this.createChildListingRow(listing);
        
        // –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–º–µ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        rowHtml = rowHtml.replace(
            `data-listing-id="${listing.id}"`,
            `data-listing-id="${listing.id}" data-object-id="${objectId}"`
        );
        
        // –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        rowHtml = rowHtml.replace(
            'clickable-address',
            'clickable-object-listing-address'
        );
        
        return rowHtml;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
     */
    bindObjectListingEvents(objectId) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        $(document).off('click', '.clickable-object-listing-address');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        $(document).on('click', '.clickable-object-listing-address', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const listingId = e.currentTarget.dataset.listingId;
            const currentObjectId = e.currentTarget.dataset.objectId;
            
            if (listingId && this.currentObjectListings) {
                const listing = this.currentObjectListings.find(l => l.id === listingId);
                if (listing) {
                    console.log(`üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId} –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${currentObjectId}`);
                    this.loadObjectPhotos(listing);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
                    this.updateActiveObjectListingRow(listingId, currentObjectId);
                }
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
     */
    updateActiveObjectListingRow(activeListingId, objectId) {
        try {
            const tableContainer = document.getElementById(`object-listings-table-${objectId}`);
            if (!tableContainer) return;

            // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
            const allRows = tableContainer.querySelectorAll('tbody tr');
            allRows.forEach(row => {
                row.classList.remove('bg-blue-50', 'border-blue-200');
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            const activeRow = tableContainer.querySelector(`[data-listing-id="${activeListingId}"]`);
            if (activeRow) {
                const row = activeRow.closest('tr');
                if (row) {
                    row.classList.add('bg-blue-50', 'border-blue-200');
                }
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–ª–∞—Å—Ç–∏
     */
    async loadAreaStats() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –≤ –æ–±–ª–∞—Å—Ç–∏
            const addresses = await this.getAddressesInArea();

            // –°—á–∏—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏
            let objectsCount = 0;
            let listingsCount = 0;

            if (addresses.length > 0) {
                const addressIds = addresses.map(addr => addr.id);

                const listings = await Promise.all(
                    addressIds.map(id => db.getListingsByAddress(id))
                );

                // –£–î–ê–õ–ï–ù: –ø–æ–¥—Å—á–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤
                listingsCount = listings.flat().length;
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏
            const areaListings = await this.getListingsInArea();

            // –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å –ø–æ–ª–∏–≥–æ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            let areaSize = '-';
            if (this.currentArea.polygon && this.currentArea.polygon.length > 0) {
                try {
                    // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
                    let area = 0;
                    const polygon = this.currentArea.polygon;
                    for (let i = 0; i < polygon.length; i++) {
                        const j = (i + 1) % polygon.length;
                        area += polygon[i].lat * polygon[j].lng;
                        area -= polygon[j].lat * polygon[i].lng;
                    }
                    area = Math.abs(area) / 2;
                    areaSize = `‚âà ${area.toFixed(3)} –∫–º¬≤`;
                } catch (error) {
                    console.warn('–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏:', error);
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            document.getElementById('segmentsCount').textContent = areaSize;
            document.getElementById('addressesCount').textContent = addresses.length;
            document.getElementById('objectsCount').textContent = objectsCount;
            document.getElementById('listingsCount').textContent = Math.max(listingsCount, areaListings.length);

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            await this.updateSourcesChart();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
            await this.updateAddressAnalyticsCharts();

        } catch (error) {
            console.error('Error loading area stats:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏
     */
    async getAddressesInArea() {
        if (!this.currentArea.polygon || this.currentArea.polygon.length === 0) {
            console.warn('–ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç');
            return [];
        }

        try {
            const allAddresses = await db.getAddresses();
            //console.log(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ getAddressesInArea:`);
            //console.log(`üìä –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤ –≤ –ë–î: ${allAddresses.length}`);
            //console.log(`üó∫Ô∏è –ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ (${this.currentArea.polygon.length} —Ç–æ—á–µ–∫):`, this.currentArea.polygon);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–æ–≤
            if (allAddresses.length > 0) {
                //console.log(`üìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞:`, allAddresses[0]);
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
            await this.ensureAddressesIndex(allAddresses);
            
            const addressesInArea = this.spatialManager.findInArea('addresses', this.currentArea.polygon);
            //console.log(`‚úÖ –ê–¥—Ä–µ—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±–ª–∞—Å—Ç–∏: ${addressesInArea.length}`);
            
            if (addressesInArea.length > 0) {
                //console.log(`üìã –ü—Ä–∏–º–µ—Ä –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞:`, addressesInArea[0]);
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –º–∞–Ω—É–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            //console.log(`üî¨ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞–Ω—É–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...`);
            const manualCheck = allAddresses.filter(address => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                let coords = null;
                if (address.coordinates && address.coordinates.lat && address.coordinates.lng) {
                    coords = address.coordinates;
                } else if (address.coordinates && address.coordinates.lat && address.coordinates.lon) {
                    coords = { lat: address.coordinates.lat, lng: address.coordinates.lon };
                } else if (address.lat && address.lng) {
                    coords = { lat: address.lat, lng: address.lng };
                }
                
                if (!coords) {
                    //console.warn(`‚ö†Ô∏è –ê–¥—Ä–µ—Å –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:`, address);
                    return false;
                }
                
                try {
                    const isInside = this.geoUtils.isPointInPolygon(coords, this.currentArea.polygon);
                    if (isInside) {
                        //console.log(`  ‚úì ${address.address} (${coords.lat}, ${coords.lng}) - –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–∏–≥–æ–Ω–∞`);
                    } else {
                        //console.log(`  ‚úó ${address.address} (${coords.lat}, ${coords.lng}) - –≤–Ω–µ –ø–æ–ª–∏–≥–æ–Ω–∞`);
                    }
                    return isInside;
                } catch (error) {
                    console.error('Error checking point in polygon:', error);
                    return false;
                }
            });
            //console.log(`üß™ –ú–∞–Ω—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–æ: ${manualCheck.length} –∞–¥—Ä–µ—Å–æ–≤`);
            
            return addressesInArea;
        } catch (error) {
            console.error('Error getting addresses in area:', error);
            return [];
        }
    }

    /**
     * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
     */
    async ensureAddressesIndex(addresses) {
        try {
            console.log(`üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤`);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
            if (this.spatialManager.hasIndex('addresses')) {
                console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –∞–¥—Ä–µ—Å–æ–≤`);
                this.spatialManager.removeIndex('addresses');
            }

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω–¥–µ–∫—Å–∞
            let validAddresses = 0;
            let invalidAddresses = 0;
            
            const getCoordinatesFunction = (address) => {
                // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                let coords = null;
                
                if (address.coordinates) {
                    coords = {
                        lat: address.coordinates.lat || address.coordinates.latitude,
                        lng: address.coordinates.lng || address.coordinates.lon || address.coordinates.longitude
                    };
                }
                // –ü—Ä—è–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç–µ
                else if (address.lat || address.latitude) {
                    coords = {
                        lat: address.lat || address.latitude,
                        lng: address.lng || address.lon || address.longitude
                    };
                }
                
                if (coords && coords.lat && coords.lng && !isNaN(coords.lat) && !isNaN(coords.lng)) {
                    validAddresses++;
                    return coords;
                } else {
                    invalidAddresses++;
                    return null;
                }
            };

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if (!this.spatialManager.hasIndex('addresses')) {
                console.log(`üèóÔ∏è –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –∞–¥—Ä–µ—Å–æ–≤`);
                await this.spatialManager.createIndex(
                    'addresses',
                    addresses,
                    getCoordinatesFunction
                );
            }
            
            console.log(`‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω: ${validAddresses} –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤, ${invalidAddresses} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö`);
            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:`, this.spatialManager.getIndexesStats());
            
        } catch (error) {
            console.error('Error ensuring addresses index:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ chrome.storage
     */
    async getUpdateSettings() {
        return new Promise((resolve) => {
            chrome.storage.local.get(['neocenka_settings'], (result) => {
                const settings = result.neocenka_settings || {};
                resolve(settings);
            });
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏
     */
    async getListingsInArea() {
        if (!this.currentArea.polygon || this.currentArea.polygon.length === 0) {
            debugLogger.log('–ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç');
            return [];
        }

        try {
            const allListings = await db.getListings();
            debugLogger.log(`–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î: ${allListings.length}`);
            debugLogger.log(`–ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ (${this.currentArea.polygon.length} —Ç–æ—á–µ–∫):`, this.currentArea.polygon);
            
            
            
            const listingsWithCoords = allListings.filter(listing => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                const hasCoordinatesObject = listing.coordinates && 
                                           (listing.coordinates.lat || listing.coordinates.latitude) && 
                                           (listing.coordinates.lng || listing.coordinates.lon || listing.coordinates.longitude);
                const hasDirectCoords = (listing.lat || listing.latitude) && 
                                      (listing.lng || listing.lon || listing.longitude);
                return hasCoordinatesObject || hasDirectCoords;
            });
            
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏–≥–æ–Ω–∞ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            if (this.currentArea.polygon && this.currentArea.polygon.length > 0) {
                const polygonBounds = this.geoUtils.getPolygonBounds(this.currentArea.polygon);
                debugLogger.log('–ì—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏–≥–æ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏:', polygonBounds);
                
                if (listingsWithCoords.length > 0) {
                    const listingBounds = {
                        minLat: Math.min(...listingsWithCoords.map(l => parseFloat(l.coordinates.lat))),
                        maxLat: Math.max(...listingsWithCoords.map(l => parseFloat(l.coordinates.lat))),
                        minLng: Math.min(...listingsWithCoords.map(l => parseFloat(l.coordinates.lng))),
                        maxLng: Math.max(...listingsWithCoords.map(l => parseFloat(l.coordinates.lng)))
                    };
                    debugLogger.log('–ì—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', listingBounds);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü
                    const boundsOverlap = !(
                        polygonBounds.maxLat < listingBounds.minLat ||
                        polygonBounds.minLat > listingBounds.maxLat ||
                        polygonBounds.maxLng < listingBounds.minLng ||
                        polygonBounds.minLng > listingBounds.maxLng
                    );
                    debugLogger.log('–ü–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –ª–∏ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏–≥–æ–Ω–∞ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', boundsOverlap);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≥–æ–Ω–∞
            if (!this.geoUtils.isValidPolygon(this.currentArea.polygon)) {
                console.error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏');
                return [];
            }


            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            await this.ensureListingsIndex(allListings);
            
            const listingsInArea = this.spatialManager.findInArea('listings', this.currentArea.polygon);

            debugLogger.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏: ${listingsInArea.length}`);

            // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if (listingsInArea.length === 0) {
                const bounds = this.geoUtils.getPolygonBounds(this.currentArea.polygon);
                const center = this.geoUtils.getPolygonCenter(this.currentArea.polygon);
                const area = this.geoUtils.getPolygonArea(this.currentArea.polygon);

                debugLogger.log('–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∏ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ –ø–æ–ª–∏–≥–æ–Ω');
                debugLogger.log('–ì—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏–≥–æ–Ω–∞:', bounds);
                debugLogger.log('–¶–µ–Ω—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞:', center);
                debugLogger.log(`–ü–ª–æ—â–∞–¥—å –ø–æ–ª–∏–≥–æ–Ω–∞: ${(area / 1000000).toFixed(2)} –∫–º¬≤`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—Ä—É—á–Ω—É—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                const listingsWithCoords = allListings.filter(listing => {
                    const hasCoordinatesObject = listing.coordinates && 
                                               (listing.coordinates.lat || listing.coordinates.latitude) && 
                                               (listing.coordinates.lng || listing.coordinates.lon || listing.coordinates.longitude);
                    const hasDirectCoords = (listing.lat || listing.latitude) && 
                                          (listing.lng || listing.lon || listing.longitude);
                    return hasCoordinatesObject || hasDirectCoords;
                }).slice(0, 3);

                if (listingsWithCoords.length > 0) {
                    debugLogger.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è:');
                    listingsWithCoords.forEach(listing => {
                        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        let normalizedCoords = null;
                        if (listing.coordinates) {
                            normalizedCoords = {
                                lat: listing.coordinates.lat || listing.coordinates.latitude,
                                lng: listing.coordinates.lng || listing.coordinates.lon || listing.coordinates.longitude
                            };
                        } else if (listing.lat || listing.latitude) {
                            normalizedCoords = {
                                lat: listing.lat || listing.latitude,
                                lng: listing.lng || listing.lon || listing.longitude
                            };
                        }
                        
                        const isInside = normalizedCoords ? this.geoUtils.isPointInPolygon(normalizedCoords, this.currentArea.polygon) : false;
                        debugLogger.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}:`, {
                            originalCoords: listing.coordinates,
                            normalizedCoords: normalizedCoords,
                            isInside: isInside,
                            title: listing.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                            source: listing.source
                        });
                    });
                }
            }

            return listingsInArea;
        } catch (error) {
            console.error('Error getting listings in area:', error);
            return [];
        }
    }

    /**
     * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async ensureListingsIndex(listings) {
        try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
            if (this.spatialManager.hasIndex('listings')) {
                this.spatialManager.removeIndex('listings');
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if (!this.spatialManager.hasIndex('listings')) {
                await this.spatialManager.createIndex(
                    'listings',
                    listings,
                    (listing) => {
                        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                        let coords = null;
                        if (listing.coordinates) {
                            coords = {
                                lat: listing.coordinates.lat || listing.coordinates.latitude,
                                lng: listing.coordinates.lng || listing.coordinates.lon || listing.coordinates.longitude
                            };
                        }
                        // –ü—Ä—è–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç–µ
                        else if (listing.lat || listing.latitude) {
                            coords = {
                                lat: listing.lat || listing.latitude,
                                lng: listing.lng || listing.lon || listing.longitude
                            };
                        }
                        
                        return coords;
                    }
                );
            }
        } catch (error) {
            console.error('Error ensuring listings index:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É
     */
    async loadAddresses() {
        try {
            console.log(`üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É...`);
            const addresses = await this.getAddressesInArea();
            console.log(`üìä –ê–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${addresses.length}`);

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            for (const address of addresses) {
                const listings = await db.getListingsByAddress(address.id);

                address.objects_count = 0; // –£–î–ê–õ–ï–ù: –ø–æ–¥—Å—á–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤
                address.listings_count = listings.length;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
            this.addresses = addresses;

            // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            if (this.addressesTable) {
                console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–¥—Ä–µ—Å–æ–≤`);
                this.addressesTable.clear();
                this.addressesTable.rows.add(addresses); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª —ç—Ç—É —Å—Ç—Ä–æ–∫—É!
                this.addressesTable.draw();
                console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
            } else {
                console.warn(`‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
            }

        } catch (error) {
            console.error('Error loading addresses:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤: ' + error.message);
        }
    }


    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
     */
    openEditAreaModal() {
        document.getElementById('editAreaName').value = this.currentArea.name;
        document.getElementById('editAvitoUrl').value = this.currentArea.avito_filter_url || '';
        document.getElementById('editCianUrl').value = this.currentArea.cian_filter_url || '';

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.updateFilterButtons();

        document.getElementById('editAreaModal').classList.remove('hidden');
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
     */
    closeEditAreaModal() {
        document.getElementById('editAreaModal').classList.add('hidden');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–±–ª–∞—Å—Ç–∏
     */
    async saveAreaEdit() {
        try {
            const formData = new FormData(document.getElementById('editAreaForm'));

            this.currentArea.name = formData.get('name');
            this.currentArea.avito_filter_url = formData.get('avito_filter_url');
            this.currentArea.cian_filter_url = formData.get('cian_filter_url');

            await this.saveAreaChanges();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            document.getElementById('areaTitle').textContent = this.currentArea.name;
            this.setBreadcrumbs();

            this.closeEditAreaModal();
            this.showSuccess('–û–±–ª–∞—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

        } catch (error) {
            console.error('Error saving area edit:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
        }
    }

    /**
     * –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    async loadAddressesFromAPI() {
        console.log(`üöÄ === –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò –ê–î–†–ï–°–û–í –ò–ó OSM ===`);
        
        if (!this.currentArea || !this.currentArea.polygon) {
            console.error(`‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤`);
            this.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤');
            return;
        }

        console.log(`‚úÖ –ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω, —Ç–æ—á–µ–∫: ${this.currentArea.polygon.length}`);

        try {
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä OSM API
            console.log(`üîß –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä OSM API...`);
            const osmAPI = new OSMOverpassAPI();
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω
            console.log(`üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω...`);
            const validation = osmAPI.validatePolygon(this.currentArea.polygon);
            console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`, validation);
            
            if (!validation.valid) {
                console.error(`‚ùå –ü–æ–ª–∏–≥–æ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: ${validation.error}`);
                this.showError(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω: ${validation.error}`);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Overpass API
            console.log(`üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Overpass API...`);
            this.showInfo('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Overpass API...');
            
            const apiStatus = await osmAPI.getAPIStatus();
            console.log(`üì° –°—Ç–∞—Ç—É—Å API:`, apiStatus);
            
            if (!apiStatus.available) {
                console.error(`‚ùå Overpass API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, apiStatus);
                this.showError('Overpass API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                return;
            }

            console.log(`‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...`);
            this.showInfo('–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ OpenStreetMap...');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            this.showProgressBar('import-addresses');
            
            // –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const progressCallback = (message, percent) => {
                console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${percent}% - ${message}`);
                this.updateProgressBar('import-addresses', percent, message);
            };

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞
            console.log(`üåç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ OSM...`);
            const osmAddresses = await osmAPI.loadAddressesForArea(this.currentArea, progressCallback);
            console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: ${osmAddresses ? osmAddresses.length : 'null'}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            this.updateProgressBar('import-addresses', 100, '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

            if (osmAddresses.length === 0) {
                this.hideProgressBar('import-addresses');
                this.showInfo('–í —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ OSM');
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            this.showInfo(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${osmAddresses.length} –∞–¥—Ä–µ—Å–æ–≤...`);
            
            let savedCount = 0;
            let skippedCount = 0;
            
            for (const address of osmAddresses) {
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å
                    const existingAddresses = await db.getAll('addresses');
                    const duplicate = existingAddresses.find(existing => 
                        existing.source === 'osm' && 
                        existing.osm_id === address.osm_id && 
                        existing.osm_type === address.osm_type
                    );

                    if (duplicate) {
                        skippedCount++;
                        continue;
                    }

                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –∫ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏
                    address.map_area_id = this.currentAreaId;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                    await db.add('addresses', address);
                    savedCount++;
                    
                } catch (error) {
                    console.error('Error saving address:', error);
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.loadAreaStats();
            await this.loadAddresses();
            await this.loadAddressesOnMap();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            let resultMessage = `–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${savedCount} –Ω–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤`;
            if (skippedCount > 0) {
                resultMessage += `, ${skippedCount} –ø—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏)`;
            }
            
            this.showSuccess(resultMessage);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            setTimeout(() => {
                this.hideProgressBar('import-addresses');
            }, 2000);

        } catch (error) {
            console.error('Error loading addresses from OSM:', error);
            this.hideProgressBar('import-addresses');
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤: ' + error.message);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    createProgressModal(title) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 z-50 overflow-y-auto';
        modal.innerHTML = `
            <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
                <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                    <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                        <div class="sm:flex sm:items-start">
                            <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
                                    ${title}
                                </h3>
                                <div class="space-y-4">
                                    <div class="w-full bg-gray-200 rounded-full h-3">
                                        <div id="osmProgressBar" class="bg-blue-600 h-3 rounded-full transition-all duration-300" style="width: 0%"></div>
                                    </div>
                                    <div id="osmProgressText" class="text-sm text-gray-600">
                                        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        return {
            updateProgress: (percent, message) => {
                const progressBar = modal.querySelector('#osmProgressBar');
                const progressText = modal.querySelector('#osmProgressText');
                
                if (progressBar) {
                    progressBar.style.width = percent + '%';
                }
                if (progressText) {
                    progressText.textContent = message;
                }
            },
            close: () => {
                if (modal.parentNode) {
                    modal.parentNode.removeChild(modal);
                }
            }
        };
    }

    async parseListings() {
        if (this.processing.parsing) {
            this.showInfo('–ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return;
        }

        if (!this.currentArea.avito_filter_url && !this.currentArea.cian_filter_url) {
            this.showError('–ù–µ —É–∫–∞–∑–∞–Ω—ã URL —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
            return;
        }

        try {
            this.processing.parsing = true;
            debugLogger.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–ª–∞—Å—Ç–∏:', this.currentArea.name);
            this.updateProgressBar('parsing', 0, '–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...');

            let totalParsed = 0;
            let totalErrors = 0;

            // –ü–∞—Ä—Å–∏–Ω–≥ Avito –µ—Å–ª–∏ –µ—Å—Ç—å URL
            if (this.currentArea.avito_filter_url) {
                this.updateProgressBar('parsing', 20, '–ü–∞—Ä—Å–∏–Ω–≥ Avito...');
                debugLogger.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Avito –¥–ª—è –æ–±–ª–∞—Å—Ç–∏');
                try {
                    const avitoResult = await this.parseAvitoForArea();
                    debugLogger.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ Avito –∑–∞–≤–µ—Ä—à–µ–Ω:', avitoResult);
                    totalParsed += avitoResult.parsed;
                    totalErrors += avitoResult.errors;
                    this.updateProgressBar('parsing', 50, '–ü–∞—Ä—Å–∏–Ω–≥ Avito –∑–∞–≤–µ—Ä—à–µ–Ω');
                } catch (error) {
                    debugLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Avito:', error);
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Avito:', error);
                    totalErrors++;
                }
            }

            // –ü–∞—Ä—Å–∏–Ω–≥ Cian –µ—Å–ª–∏ –µ—Å—Ç—å URL
            if (this.currentArea.cian_filter_url) {
                this.updateProgressBar('parsing', 60, '–ü–∞—Ä—Å–∏–Ω–≥ Cian...');
                try {
                    const cianResult = await this.parseCianForArea();
                    totalParsed += cianResult.parsed;
                    totalErrors += cianResult.errors;
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Cian:', error);
                    totalErrors++;
                }
            }

            debugLogger.log('üèÅ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', totalParsed, '–æ—à–∏–±–æ–∫:', totalErrors);
            this.updateProgressBar('parsing', 100, '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫–∞—Ä—Ç—É
            debugLogger.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫–∞—Ä—Ç—É');
            await this.loadAreaStats();
            await this.loadAddresses();
            await this.refreshMapData();

            this.showSuccess(`–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalParsed}, –æ—à–∏–±–æ–∫: ${totalErrors}`);
            debugLogger.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω');

        } catch (error) {
            console.error('Error during parsing:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ' + error.message);
        } finally {
            this.processing.parsing = false;
            this.hideProgressBar('parsing');
        }
    }

    async updateListings() {
        if (this.processing.updating) {
            this.showInfo('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return;
        }

        try {
            this.processing.updating = true;
            debugLogger.log('–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–ª–∞—Å—Ç–∏:', this.currentArea.name);
            this.updateProgressBar('updating', 0, '–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');

            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const settings = await this.getUpdateSettings();
            const updateIntervalDays = settings.update_days || 7;
            
            debugLogger.log(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateIntervalDays} –¥–Ω–µ–π`);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏
            const allAreaListings = await this.getListingsInArea();
            
            if (allAreaListings.length === 0) {
                this.showInfo('–í –æ–±–ª–∞—Å—Ç–∏ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                return;
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - updateIntervalDays);
            
            const areaListings = allAreaListings.filter(listing => {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                if (listing.status !== 'active') {
                    debugLogger.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: —Å—Ç–∞—Ç—É—Å "${listing.status}" (–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–µ)`);
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if (!listing.updated_at) {
                    return true; // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º
                }
                
                const lastUpdate = new Date(listing.updated_at);
                const needsUpdate = lastUpdate < cutoffDate;
                
                if (!needsUpdate) {
                    debugLogger.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${lastUpdate.toLocaleDateString()}`);
                }
                
                return needsUpdate;
            });

            if (areaListings.length === 0) {
                const activeListings = allAreaListings.filter(l => l.status === 'active').length;
                this.showInfo(`–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeListings} –∏–∑ ${allAreaListings.length}, –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ ${updateIntervalDays} –¥–Ω–µ–π`);
                return;
            }

            this.updateProgressBar('updating', 10, `–ù–∞–π–¥–µ–Ω–æ ${areaListings.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–∑ ${allAreaListings.length} –≤—Å–µ–≥–æ)`);

            let updatedCount = 0;
            let errorCount = 0;
            const batchSize = 5; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
            for (let i = 0; i < areaListings.length; i += batchSize) {
                const batch = areaListings.slice(i, i + batchSize);
                const progress = 10 + ((i / areaListings.length) * 80);
                
                this.updateProgressBar('updating', progress, 
                    `–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${i + 1}-${Math.min(i + batchSize, areaListings.length)} –∏–∑ ${areaListings.length}`);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                const batchPromises = batch.map(listing => this.updateSingleListing(listing));
                const batchResults = await Promise.allSettled(batchPromises);

                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                batchResults.forEach(result => {
                    if (result.status === 'fulfilled' && result.value.success) {
                        updatedCount++;
                    } else {
                        errorCount++;
                        debugLogger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', result.reason || result.value?.error);
                    }
                });

                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

            this.updateProgressBar('updating', 100, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫–∞—Ä—Ç—É
            await this.loadAreaStats();
            await this.loadAddresses();
            await this.refreshMapData();

            const skippedCount = allAreaListings.length - areaListings.length;
            let resultMessage = `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`;
            if (errorCount > 0) {
                resultMessage += `, –æ—à–∏–±–æ–∫: ${errorCount}`;
            }
            if (skippedCount > 0) {
                resultMessage += `, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã)`;
            }
            
            this.showSuccess(resultMessage);

        } catch (error) {
            console.error('Error during updating:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + error.message);
        } finally {
            this.processing.updating = false;
            this.hideProgressBar('updating');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async updateSingleListing(listing) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–º–µ–µ—Ç URL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (!listing.url) {
                return { success: false, error: 'URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' };
            }

            debugLogger.log('–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:', listing.url);

            // –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const tab = await this.createTabWithRetry(listing.url, 2);
            
            try {
                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º content script
                await this.waitForPageLoad(tab.id);
                await this.injectContentScript(tab.id);
                
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                const response = await this.waitForContentScriptAndParse(tab.id, {
                    action: 'parseCurrentListing',
                    areaId: this.currentAreaId,
                    existingListingId: listing.id
                });

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É
                try {
                    chrome.tabs.remove(tab.id);
                } catch (closeError) {
                    debugLogger.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É:', closeError);
                }

                if (response && response.success && response.data) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    const updatedListing = {
                        ...listing,
                        ...response.data,
                        id: listing.id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID
                        created_at: listing.created_at, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
                        updated_at: new Date(),
                        // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º source_metadata –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                        source_metadata: listing.source_metadata
                    };

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    if (listing.price !== response.data.price) {
                        if (!updatedListing.price_history) {
                            updatedListing.price_history = listing.price_history || [];
                        }
                        updatedListing.price_history.push({
                            date: new Date(),
                            old_price: listing.price,
                            new_price: response.data.price
                        });
                    }

                    await db.update('listings', updatedListing);
                    return { success: true, updated: true };
                } else {
                    // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∞—Ä—Ö–∏–≤–Ω–æ–µ
                    listing.status = 'archived';
                    listing.last_seen = new Date();
                    listing.updated_at = new Date();
                    await db.update('listings', listing);
                    
                    return { success: true, archived: true };
                }

            } catch (error) {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                try {
                    chrome.tabs.remove(tab.id);
                } catch (closeError) {
                    debugLogger.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', closeError);
                }
                throw error;
            }

        } catch (error) {
            debugLogger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—Ç–µ–Ω –≤ select
     */
    async loadWallMaterials() {
        try {
            const materials = await db.getAll('wall_materials');
            const select = document.getElementById('editWallMaterial');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            const currentValue = select.value;
            
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
            select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª...</option>';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            materials.forEach(material => {
                const option = document.createElement('option');
                option.value = material.id;
                option.textContent = material.name;
                select.appendChild(option);
            });
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            if (currentValue) {
                select.value = currentValue;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            this.updateWallMaterialButton();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—Ç–µ–Ω:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º —Å—Ç–µ–Ω
     */
    updateWallMaterialButton() {
        const select = document.getElementById('editWallMaterial');
        const button = document.getElementById('wallMaterialActionBtn');
        
        if (select.value) {
            button.textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
            button.className = 'mt-1 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500';
        } else {
            button.textContent = '+ –î–æ–±–∞–≤–∏—Ç—å';
            button.className = 'mt-1 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω
     */
    showWallMaterialModal() {
        document.getElementById('wallMaterialModal').classList.remove('hidden');
        document.querySelector('#wallMaterialModal .modal-title').textContent = '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω';
        document.getElementById('wallMaterialName').focus();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω
     */
    async showEditWallMaterialModal(materialId) {
        try {
            const material = await db.get('wall_materials', materialId);
            if (!material) {
                this.showError('–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            document.getElementById('wallMaterialId').value = material.id;
            document.getElementById('wallMaterialName').value = material.name;
            document.getElementById('wallMaterialColor').value = material.color;

            // –ú–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            document.querySelector('#wallMaterialModal .modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            document.getElementById('wallMaterialModal').classList.remove('hidden');
            document.getElementById('wallMaterialName').focus();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: ' + error.message);
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω
     */
    hideWallMaterialModal() {
        document.getElementById('wallMaterialModal').classList.add('hidden');
        document.getElementById('wallMaterialForm').reset();
        document.getElementById('wallMaterialId').value = '';
        document.getElementById('wallMaterialColor').value = '#3b82f6';
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
     */
    async saveWallMaterial() {
        try {
            const form = document.getElementById('wallMaterialForm');
            const formData = new FormData(form);
            
            const materialId = formData.get('id');
            const material = {
                name: formData.get('name').trim(),
                color: formData.get('color')
            };

            if (!material.name) {
                this.showError('–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª)
            const existingMaterials = await db.getAll('wall_materials');
            const duplicate = existingMaterials.find(m => 
                m.name.toLowerCase() === material.name.toLowerCase() && m.id !== materialId
            );

            if (duplicate) {
                this.showError('–ú–∞—Ç–µ—Ä–∏–∞–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return;
            }

            let savedMaterial;
            
            if (materialId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                material.id = materialId;
                material.updated_at = new Date();
                savedMaterial = await db.update('wall_materials', material);
                this.showSuccess('–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                savedMaterial = await db.add('wall_materials', material);
                this.showSuccess('–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º select
            await this.loadWallMaterials();
            
            // –í—ã–±–∏—Ä–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
            document.getElementById('editWallMaterial').value = savedMaterial.id;
            this.updateWallMaterialButton();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.hideWallMaterialModal();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: ' + error.message);
        }
    }

    // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –°–ï–†–ò–ô –î–û–ú–û–í =====

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–∏–π –¥–æ–º–æ–≤ –≤ select
     */
    async loadHouseSeries() {
        try {
            const series = await db.getAll('house_series');
            const select = document.getElementById('editHouseSeries');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            const currentValue = select.value;
            
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
            select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é...</option>';
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–∏–∏
            series.forEach(item => {
                const option = document.createElement('option');
                option.value = item.id;
                option.textContent = item.name;
                select.appendChild(option);
            });
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            if (currentValue) {
                select.value = currentValue;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            this.updateHouseSeriesButton();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–∏–π –¥–æ–º–æ–≤:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–∏–µ–π –¥–æ–º–∞
     */
    updateHouseSeriesButton() {
        const select = document.getElementById('editHouseSeries');
        const button = document.getElementById('houseSeriesActionBtn');
        
        if (select.value) {
            button.textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
            button.className = 'mt-1 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500';
        } else {
            button.textContent = '+ –î–æ–±–∞–≤–∏—Ç—å';
            button.className = 'mt-1 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∏ –¥–æ–º–∞
     */
    showHouseSeriesModal() {
        document.getElementById('houseSeriesModal').classList.remove('hidden');
        document.querySelector('#houseSeriesModal .modal-title').textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏—é –¥–æ–º–∞';
        document.getElementById('houseSeriesName').focus();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–∏–∏ –¥–æ–º–∞
     */
    async showEditHouseSeriesModal(seriesId) {
        try {
            const series = await db.get('house_series', seriesId);
            if (!series) {
                this.showError('–°–µ—Ä–∏—è –¥–æ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–∏–∏
            document.getElementById('houseSeriesId').value = series.id;
            document.getElementById('houseSeriesName').value = series.name;

            // –ú–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            document.querySelector('#houseSeriesModal .modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–∏—é –¥–æ–º–∞';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            document.getElementById('houseSeriesModal').classList.remove('hidden');
            document.getElementById('houseSeriesName').focus();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–∏–∏: ' + error.message);
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–µ—Ä–∏–∏ –¥–æ–º–∞
     */
    hideHouseSeriesModal() {
        document.getElementById('houseSeriesModal').classList.add('hidden');
        document.getElementById('houseSeriesForm').reset();
        document.getElementById('houseSeriesId').value = '';
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ä–∏—é –¥–æ–º–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
     */
    async saveHouseSeries() {
        try {
            const form = document.getElementById('houseSeriesForm');
            const formData = new FormData(form);
            
            const seriesId = formData.get('id');
            const series = {
                name: formData.get('name').trim()
            };

            if (!series.name) {
                this.showError('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —Å–µ—Ä–∏—é)
            const existingSeries = await db.getAll('house_series');
            const duplicate = existingSeries.find(s => 
                s.name.toLowerCase() === series.name.toLowerCase() && s.id !== seriesId
            );

            if (duplicate) {
                this.showError('–°–µ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return;
            }

            let savedSeries;
            
            if (seriesId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Ä–∏–∏
                series.id = seriesId;
                series.updated_at = new Date();
                savedSeries = await db.update('house_series', series);
                this.showSuccess('–°–µ—Ä–∏—è –¥–æ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏
                savedSeries = await db.add('house_series', series);
                this.showSuccess('–°–µ—Ä–∏—è –¥–æ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º select
            await this.loadHouseSeries();
            
            // –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–∏—é
            document.getElementById('editHouseSeries').value = savedSeries.id;
            this.updateHouseSeriesButton();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.hideHouseSeriesModal();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–∏–∏ –¥–æ–º–∞:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–∏–∏: ' + error.message);
        }
    }

    // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –ú–ê–¢–ï–†–ò–ê–õ–û–í –ü–ï–†–ï–ö–†–´–¢–ò–ô =====

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π –≤ select
     */
    async loadCeilingMaterials() {
        try {
            const materials = await db.getAll('ceiling_materials');
            const select = document.getElementById('editCeilingMaterial');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            const currentValue = select.value;
            
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
            select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª...</option>';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            materials.forEach(material => {
                const option = document.createElement('option');
                option.value = material.id;
                option.textContent = material.name;
                select.appendChild(option);
            });
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            if (currentValue) {
                select.value = currentValue;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            this.updateCeilingMaterialButton();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
     */
    updateCeilingMaterialButton() {
        const select = document.getElementById('editCeilingMaterial');
        const button = document.getElementById('ceilingMaterialActionBtn');
        
        if (select.value) {
            button.textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
            button.className = 'mt-1 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500';
        } else {
            button.textContent = '+ –î–æ–±–∞–≤–∏—Ç—å';
            button.className = 'mt-1 inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500';
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
     */
    showCeilingMaterialModal() {
        document.getElementById('ceilingMaterialModal').classList.remove('hidden');
        document.querySelector('#ceilingMaterialModal .modal-title').textContent = '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π';
        document.getElementById('ceilingMaterialName').focus();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
     */
    async showEditCeilingMaterialModal(materialId) {
        try {
            const material = await db.get('ceiling_materials', materialId);
            if (!material) {
                this.showError('–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            document.getElementById('ceilingMaterialId').value = material.id;
            document.getElementById('ceilingMaterialName').value = material.name;

            // –ú–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            document.querySelector('#ceilingMaterialModal .modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            document.getElementById('ceilingMaterialModal').classList.remove('hidden');
            document.getElementById('ceilingMaterialName').focus();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: ' + error.message);
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
     */
    hideCeilingMaterialModal() {
        document.getElementById('ceilingMaterialModal').classList.add('hidden');
        document.getElementById('ceilingMaterialForm').reset();
        document.getElementById('ceilingMaterialId').value = '';
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
     */
    async saveCeilingMaterial() {
        try {
            const form = document.getElementById('ceilingMaterialForm');
            const formData = new FormData(form);
            
            const materialId = formData.get('id');
            const material = {
                name: formData.get('name').trim()
            };

            if (!material.name) {
                this.showError('–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª)
            const existingMaterials = await db.getAll('ceiling_materials');
            const duplicate = existingMaterials.find(m => 
                m.name.toLowerCase() === material.name.toLowerCase() && m.id !== materialId
            );

            if (duplicate) {
                this.showError('–ú–∞—Ç–µ—Ä–∏–∞–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return;
            }

            let savedMaterial;
            
            if (materialId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                material.id = materialId;
                material.updated_at = new Date();
                savedMaterial = await db.update('ceiling_materials', material);
                this.showSuccess('–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                savedMaterial = await db.add('ceiling_materials', material);
                this.showSuccess('–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º select
            await this.loadCeilingMaterials();
            
            // –í—ã–±–∏—Ä–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
            document.getElementById('editCeilingMaterial').value = savedMaterial.id;
            this.updateCeilingMaterialButton();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.hideCeilingMaterialModal();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π:', error);
            this.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: ' + error.message);
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
     * @param {string} filterType - –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ (year, series, floors, objects, listings)
     */
    toggleMapFilter(filterType) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filterButtons = [
            'filterByYear',
            'filterBySeries', 
            'filterByFloors',
            'filterByObjects',
            'filterByListings'
        ];

        filterButtons.forEach(buttonId => {
            const button = document.getElementById(buttonId);
            if (button) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–±–µ–ª—ã–π —Ñ–æ–Ω)
                button.className = 'inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500';
            }
        });

        // –ï—Å–ª–∏ —Ç–æ—Ç –∂–µ —Ñ–∏–ª—å—Ç—Ä - –æ—Ç–∫–ª—é—á–∞–µ–º
        if (this.activeMapFilter === filterType) {
            this.activeMapFilter = null;
            console.log('üîÑ –§–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω');
            return;
        }

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
        this.activeMapFilter = filterType;
        const activeButton = document.getElementById(`filterBy${filterType.charAt(0).toUpperCase() + filterType.slice(1)}`);
        
        if (activeButton) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (sky —Ü–≤–µ—Ç)
            activeButton.className = 'inline-flex items-center px-3 py-2 border border-sky-300 shadow-sm text-sm leading-4 font-medium rounded-md text-sky-700 bg-sky-100 hover:bg-sky-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500';
        }

        console.log(`üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä: ${filterType}`);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∫ –∫–∞—Ä—Ç–µ
        this.applyMapFilter(filterType);
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ –∫–∞—Ä—Ç–µ
     * @param {string} filterType - –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
     */
    async applyMapFilter(filterType) {
        console.log(`üìç –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä "${filterType}" –∫ –∫–∞—Ä—Ç–µ`);
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∞–¥—Ä–µ—Å–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–¥—Ä–µ—Å–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (this.addressesCluster || (this.mapLayers.addresses && this.mapLayers.addresses.getLayers().length > 0)) {
            await this.loadAddressesOnMap();
        } else {
            console.log(`üìç –ê–¥—Ä–µ—Å–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ñ–∏–ª—å—Ç—Ä –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ`);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ì–æ–¥)
     */
    setDefaultMapFilter() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        this.activeMapFilter = 'year';
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ–¥"
        const yearButton = document.getElementById('filterByYear');
        if (yearButton) {
            yearButton.className = 'inline-flex items-center px-3 py-2 border border-sky-300 shadow-sm text-sm leading-4 font-medium rounded-md text-sky-700 bg-sky-100 hover:bg-sky-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500';
        }
        
        console.log('üéØ –§–∏–ª—å—Ç—Ä "–ì–æ–¥" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ä—Ç—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.loadMapData();
    }

    async processAddresses() {
        if (this.processing.addresses) {
            this.showInfo('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return;
        }

        try {
            this.processing.addresses = true;
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
            this.updateProgressBar('addresses', 0, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
            const allListings = await db.getListings();
            const unprocessedListings = allListings.filter(listing => 
                !listing.address_id && 
                listing.coordinates && 
                listing.coordinates.lat && 
                (listing.coordinates.lng || listing.coordinates.lon)
            );

            if (unprocessedListings.length === 0) {
                this.showInfo('–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤—Å–µ —É–∂–µ –∏–º–µ—é—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞)');
                return;
            }

            this.updateProgressBar('addresses', 10, `–ù–∞–π–¥–µ–Ω–æ ${unprocessedListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞
            const allAddresses = await db.getAddresses();
            if (allAddresses.length === 0) {
                this.showError('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è');
                return;
            }

            this.updateProgressBar('addresses', 20, `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allAddresses.length} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –±–∞–∑—ã`);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            const AddressMatcher = await this.loadAddressMatcher();
            const matcher = new AddressMatcher(this.spatialManager);

            this.updateProgressBar('addresses', 30, '–ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è...');

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const batchSize = 50;
            let processedCount = 0;
            let matchedCount = 0;
            let results = {
                processed: 0,
                matched: 0,
                highConfidence: 0,
                mediumConfidence: 0,
                lowConfidence: 0,
                noMatch: 0,
                errors: 0
            };

            for (let i = 0; i < unprocessedListings.length; i += batchSize) {
                const batch = unprocessedListings.slice(i, i + batchSize);
                const progress = 30 + ((i / unprocessedListings.length) * 60);
                
                this.updateProgressBar('addresses', progress, 
                    `–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ${i + 1}-${Math.min(i + batchSize, unprocessedListings.length)} –∏–∑ ${unprocessedListings.length}`);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                for (const listing of batch) {
                    try {
                        const matchResult = await matcher.matchAddress(listing, allAddresses);
                        processedCount++;
                        results.processed++;

                        if (matchResult.address) {
                            matchedCount++;
                            results.matched++;

                            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                            listing.address_id = matchResult.address.id;
                            listing.address_match_confidence = matchResult.confidence;
                            listing.address_match_method = matchResult.method;
                            listing.address_match_score = matchResult.score;
                            listing.address_distance = matchResult.distance;
                            listing.updated_at = new Date();

                            // –ò–∑–º–µ–Ω—è–µ–º processing_status —Å 'address_needed' –Ω–∞ 'duplicate_check_needed'
                            // –∫–æ–≥–¥–∞ –∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                            if (listing.processing_status === 'address_needed') {
                                listing.processing_status = 'duplicate_check_needed';
                            }

                            await db.update('listings', listing);

                            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–æ–≤–µ—Ä–∏—è
                            switch (matchResult.confidence) {
                                case 'high':
                                    results.highConfidence++;
                                    break;
                                case 'medium':
                                    results.mediumConfidence++;
                                    break;
                                case 'low':
                                case 'very_low':
                                    results.lowConfidence++;
                                    break;
                            }
                        } else {
                            results.noMatch++;
                        }
                    } catch (error) {
                        results.errors++;
                        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
                    }
                }

                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                await new Promise(resolve => setTimeout(resolve, 100));
            }

            this.updateProgressBar('addresses', 100, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.loadAreaStats();
            await this.refreshMapData();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const message = `
                –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
                ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.processed}
                ‚Ä¢ –ù–∞–π–¥–µ–Ω—ã –∞–¥—Ä–µ—Å–∞: ${results.matched}
                ‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${results.highConfidence}
                ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${results.mediumConfidence}
                ‚Ä¢ –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${results.lowConfidence}
                ‚Ä¢ –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${results.noMatch}
                ‚Ä¢ –û—à–∏–±–æ–∫: ${results.errors}
            `;

            this.showSuccess(message);

        } catch (error) {
            console.error('Error processing addresses:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: ' + error.message);
        } finally {
            this.processing.addresses = false;
            this.hideProgressBar('addresses');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è AddressMatcher
     */
    async loadAddressMatcher() {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = '../utils/addressMatcher.js';
            script.onload = () => {
                resolve(window.AddressMatcher || AddressMatcher);
            };
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    async processDuplicates() {
        this.showInfo('–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤—Ö–æ–¥—è—â–∏—Ö –≤ –æ–±–ª–∞—Å—Ç—å
     */
    async deleteListings() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–ª–∞—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!this.currentArea || !this.currentAreaId) {
                this.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const allListings = await db.getListings();
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –≤—Ö–æ–¥—è—â–∏–µ –≤ –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏
            const listingsInArea = allListings.filter(listing => {
                if (!listing.coordinates || !listing.coordinates.lat || !(listing.coordinates.lng || listing.coordinates.lon)) {
                    return false;
                }
                
                const lat = listing.coordinates.lat;
                const lng = listing.coordinates.lng || listing.coordinates.lon;
                
                return this.currentArea.containsPoint(lat, lng);
            });

            if (listingsInArea.length === 0) {
                this.showInfo('–í –æ–±–ª–∞—Å—Ç–∏ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            const confirmed = confirm(
                `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${listingsInArea.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –æ–±–ª–∞—Å—Ç–∏ "${this.currentArea.name}"?\n\n` +
                `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`
            );

            if (!confirmed) {
                return;
            }

            // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            let deletedCount = 0;
            let errorCount = 0;

            for (const listing of listingsInArea) {
                try {
                    await db.delete('listings', listing.id);
                    deletedCount++;
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}:`, error);
                    errorCount++;
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏ —Ç–∞–±–ª–∏—Ü—ã
            await this.loadMapData();
            if (this.duplicatesTable) {
                await this.loadDuplicatesTable();
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (errorCount === 0) {
                this.showSuccess(`–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${deletedCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –æ–±–ª–∞—Å—Ç–∏`);
            } else {
                this.showWarning(`–£–¥–∞–ª–µ–Ω–æ ${deletedCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –æ—à–∏–±–æ–∫: ${errorCount}`);
            }

            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${deletedCount}, –æ—à–∏–±–æ–∫: ${errorCount}`);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
            this.showError(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${error.message}`);
        }
    }

    // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –¢–ê–ë–õ–ò–¶–´ –î–£–ë–õ–ï–ô =====

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
     */
    async loadDuplicatesTable() {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö child rows –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            const expandedRows = this.saveExpandedRowsState();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –æ–±–ª–∞—Å—Ç—å (–ø–æ–ª–∏–≥–æ–Ω)
            const allListings = await this.getListingsInArea();
            console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', allListings.length);
            
            // –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "processed"
            const listings = allListings.filter(listing => listing.processing_status !== 'processed');
            console.log('üìã –û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–µ–Ω—ã "processed"):', listings.length);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            const objects = await window.realEstateObjectManager.getObjectsWithFilters();
            console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:', objects.length);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            const tableData = [
                ...listings.map(item => ({...item, type: 'listing'})),
                ...objects.map(item => ({...item, type: 'object'}))
            ];

            console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tableData.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π (${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π + ${objects.length} –æ–±—ä–µ–∫—Ç–æ–≤)`);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
            this.listings = listings;
            this.objects = objects;

            // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
            this.selectedDuplicates.clear();

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataTable
            if (this.duplicatesTable) {
                this.duplicatesTable.clear();
                this.duplicatesTable.rows.add(tableData);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã (–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç—É—Å –∏ —Ñ–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏)
                this.applyProcessingFilters();
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö child rows –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
                setTimeout(() => {
                    this.restoreExpandedRowsState(expandedRows);
                }, 300);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤—ã–±–æ—Ä–∞
            this.updateDuplicatesSelection();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö child rows
     */
    saveExpandedRowsState() {
        if (!this.duplicatesTable) return [];
        
        const expandedRows = [];
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã
        this.duplicatesTable.rows().every(function(rowIdx, tableLoop, rowLoop) {
            const row = this;
            const data = row.data();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ child row –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
            if (row.child.isShown()) {
                expandedRows.push({
                    id: data.id,
                    type: data.type
                });
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ expanded row:', data.id, data.type);
            }
        });
        
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π expanded rows:', expandedRows.length);
        return expandedRows;
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö child rows
     */
    async restoreExpandedRowsState(expandedRows) {
        if (!this.duplicatesTable || !expandedRows || expandedRows.length === 0) {
            console.log('üîÑ –ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π expanded rows –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
            return;
        }
        
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º', expandedRows.length, 'expanded rows');
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã
        this.duplicatesTable.rows().every(function(rowIdx, tableLoop, rowLoop) {
            const row = this;
            const data = row.data();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞
            const wasExpanded = expandedRows.find(item => 
                item.id === data.id && item.type === data.type
            );
            
            if (wasExpanded && data.type === 'object') {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º expanded —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
                console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º expanded row –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', data.id);
                
                // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç expand –≤ —Å—Ç—Ä–æ–∫–µ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–º—É
                const tr = $(row.node());
                const expandElement = tr.find('.expand-object-listings');
                
                if (expandElement.length > 0) {
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è child row
                    setTimeout(async () => {
                        try {
                            await window.areaPage.showObjectListings(row, data.id);
                            tr.addClass('shown');
                            expandElement.find('svg').css('transform', 'rotate(180deg)');
                            console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω expanded row –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', data.id);
                        } catch (error) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è expanded row:', error);
                        }
                    }, 100 * rowIdx); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                }
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    getPropertyTypeText(propertyType) {
        const types = {
            'studio': '–°—Ç—É–¥–∏—è',
            '1k': '1–∫',
            '2k': '2–∫',
            '3k': '3–∫',
            '4k+': '4–∫+'
        };
        return types[propertyType] || propertyType;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusBadge(status) {
        const badges = {
            'active': '<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">–ê–∫—Ç–∏–≤–Ω—ã–π</span>',
            'archived': '<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>',
            'needs_processing': '<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">–¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</span>'
        };
        return badges[status] || `<span class="text-sm text-gray-500">${status}</span>`;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π
     */
    bindDuplicateRowEvents() {
        const checkboxes = document.querySelectorAll('.duplicate-checkbox');
        console.log('üîó bindDuplicateRowEvents: –Ω–∞–π–¥–µ–Ω–æ —á–µ–∫–±–æ–∫—Å–æ–≤:', checkboxes.length);
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                this.handleDuplicateSelection(checkbox);
            });
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π
     */
    handleDuplicateSelection(checkbox) {
        console.log('üîÑ handleDuplicateSelection called for checkbox:', checkbox);
        const itemId = checkbox.dataset.id;
        const itemType = checkbox.dataset.type;
        const key = `${itemType}_${itemId}`;

        console.log('üîÑ Checkbox data:', { itemId, itemType, key, checked: checkbox.checked });

        if (checkbox.checked) {
            this.selectedDuplicates.add(key);
        } else {
            this.selectedDuplicates.delete(key);
        }

        console.log('üîÑ Selected duplicates:', this.selectedDuplicates.size);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
        this.updateSelectAllCheckbox();
        
        this.updateDuplicatesSelection();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
     */
    updateSelectAllCheckbox() {
        const allCheckboxes = document.querySelectorAll('.duplicate-checkbox');
        const selectAllCheckbox = document.getElementById('selectAllDuplicates');
        
        if (selectAllCheckbox && allCheckboxes.length > 0) {
            const checkedCount = Array.from(allCheckboxes).filter(cb => cb.checked).length;
            selectAllCheckbox.checked = checkedCount === allCheckboxes.length;
            selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < allCheckboxes.length;
        }
    }

    /**
     * –í—ã–±–æ—Ä –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π
     */
    selectAllDuplicates(checked) {
        const checkboxes = document.querySelectorAll('.duplicate-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = checked;
            this.handleDuplicateSelection(checkbox);
        });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π
     */
    clearDuplicatesSelection() {
        this.selectedDuplicates.clear();
        document.querySelectorAll('.duplicate-checkbox').forEach(checkbox => {
            checkbox.checked = false;
        });
        const selectAllCheckbox = document.getElementById('selectAllDuplicates');
        if (selectAllCheckbox) {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = false;
        }
        this.updateDuplicatesSelection();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤—ã–±–æ—Ä–∞ –¥—É–±–ª–µ–π
     */
    updateDuplicatesSelection() {
        console.log('üîÑ updateDuplicatesSelection called, selectedCount:', this.selectedDuplicates.size);
        const selectedCount = this.selectedDuplicates.size;
        const selectedInfo = document.getElementById('selectedItemsInfo');
        const selectedCountEl = document.getElementById('selectedItemsCount');
        const mergeBtnEl = document.getElementById('mergeDuplicatesBtn');
        const splitBtnEl = document.getElementById('splitDuplicatesBtn');
        const correctAddressBtnEl = document.getElementById('correctAddressBtn');

        if (selectedCount > 0) {
            selectedInfo.classList.remove('hidden');
            const elementText = selectedCount === 1 ? '—ç–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω' : '—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ';
            selectedCountEl.textContent = `${selectedCount} ${elementText}`;
            mergeBtnEl.disabled = selectedCount < 1;
            splitBtnEl.disabled = false;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å" —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–µ "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å"
            let processingStatusFilter = '';
            if (this.processingStatusSlimSelect) {
                const selected = this.processingStatusSlimSelect.getSelected();
                processingStatusFilter = selected?.[0]?.value || selected?.[0] || '';
            }
            
            // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
            const directValue = document.getElementById('processingStatusFilter')?.value || '';
            
            const actualFilter = processingStatusFilter || directValue;
            
            console.log('üîç Processing filter for button:', {
                selectedCount,
                processingStatusFilter,
                directValue,
                actualFilter,
                slimSelectExists: !!this.processingStatusSlimSelect,
                getSelected: this.processingStatusSlimSelect?.getSelected(),
                checkCondition: actualFilter === 'address_needed'
            });
            
            if (actualFilter === 'address_needed') {
                console.log('‚úÖ Showing correct address button');
                correctAddressBtnEl.classList.remove('hidden');
                correctAddressBtnEl.disabled = false;
            } else {
                console.log('‚ùå Hiding correct address button');
                correctAddressBtnEl.classList.add('hidden');
            }
        } else {
            selectedInfo.classList.add('hidden');
            mergeBtnEl.disabled = true;
            splitBtnEl.disabled = true;
            correctAddressBtnEl.classList.add('hidden');
        }
    }

    /**
     * –ü–æ–º–µ—Ç–∏—Ç—å –∞–¥—Ä–µ—Å –∫–∞–∫ –≤–µ—Ä–Ω—ã–π (–ø–µ—Ä–µ–≤–æ–¥ –≤ —Å—Ç–∞—Ç—É—Å manual)
     */
    async markAddressAsCorrect() {
        try {
            if (this.selectedDuplicates.size === 0) {
                this.showError('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞');
                return;
            }

            const selectedItems = Array.from(this.selectedDuplicates);
            console.log('üè† Marking addresses as correct for:', selectedItems);

            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const listingsToUpdate = [];
            for (const key of selectedItems) {
                const [type, ...idParts] = key.split('_');
                const id = idParts.join('_'); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π ID
                console.log('üîç Processing key:', key, 'type:', type, 'id:', id);
                if (type === 'listing') {
                    const listing = this.listings.find(l => l.id === id);
                    console.log('üîç Found listing:', !!listing, listing?.id);
                    if (listing) {
                        listingsToUpdate.push(listing);
                    }
                } else {
                    console.log('üîç Skipping non-listing type:', type);
                }
            }
            
            console.log('üîç listingsToUpdate:', listingsToUpdate.length, 'items');

            if (listingsToUpdate.length === 0) {
                this.showError('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –Ω–∞ "manual"
            for (const listing of listingsToUpdate) {
                listing.address_match_confidence = 'manual';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await db.update('listings', listing);
                console.log(`‚úÖ Address marked as correct for listing ${listing.id}`);
            }

            this.showSuccess(`–ê–¥—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è ${listingsToUpdate.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            
            // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            this.clearDuplicatesSelection();
            await this.loadDuplicatesTable();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: ' + error.message);
        }
    }

    /**
     * –ü–æ–º–µ—Ç–∏—Ç—å –∞–¥—Ä–µ—Å –∫–∞–∫ –≤–µ—Ä–Ω—ã–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞)
     */
    async markSingleAddressAsCorrect(listingId) {
        try {
            const listing = this.listings.find(l => l.id === listingId);
            if (!listing) {
                this.showError('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            console.log('üè† Marking single address as correct for listing:', listingId);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –Ω–∞ "manual"
            listing.address_match_confidence = 'manual';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.update('listings', listing);
            console.log(`‚úÖ Single address marked as correct for listing ${listingId}`);

            this.showSuccess('–ê–¥—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.updateModalAddressInfo(listingId, listing);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
            await this.loadDuplicatesTable();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: ' + error.message);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
     */
    updateModalAddressInfo(listingId, listing) {
        const locationContent = document.getElementById(`locationPanelContent-${listingId}`);
        if (locationContent) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ
            const addressInfoHtml = this.renderAddressAccuracyInfo(listing);
            const mapContainer = document.getElementById(`listing-map-${listingId}`);
            const mapHtml = mapContainer ? mapContainer.outerHTML : '';
            
            locationContent.innerHTML = addressInfoHtml + mapHtml;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            const locationHeader = document.getElementById(`locationPanelHeader-${listingId}`);
            if (locationHeader) {
                const statusElement = locationHeader.querySelector('.text-sm');
                if (statusElement) {
                    statusElement.textContent = this.getAddressStatusText(listing);
                    statusElement.className = `text-sm ${this.getAddressStatusClass(listing)}`;
                }
            }
            
            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            setTimeout(() => {
                this.initializeAddressSelector(listingId, listing.address_id);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                const saveButton = document.getElementById(`saveAddress_${listingId}`);
                if (saveButton) {
                    saveButton.addEventListener('click', () => {
                        this.saveListingAddress(listingId);
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å" –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                const correctAddressModalButton = document.getElementById(`correctAddressModal_${listingId}`);
                if (correctAddressModalButton) {
                    correctAddressModalButton.addEventListener('click', () => {
                        this.markSingleAddressAsCorrect(listingId);
                    });
                }
                
                // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—ë
                if (mapContainer && mapContainer._leafletMap) {
                    this.renderListingMap(listing);
                }
            }, 100);
        }
    }

    /**
     * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–µ–π / —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    async mergeDuplicates() {
        if (this.selectedDuplicates.size < 1) {
            this.showError('–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            return;
        }

        try {
            const selectedItems = Array.from(this.selectedDuplicates);
            console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', selectedItems);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RealEstateObjectManager
            if (!window.realEstateObjectManager) {
                this.showError('RealEstateObjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                console.error('‚ùå RealEstateObjectManager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window');
                return;
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤—ã–±–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è RealEstateObjectManager
            const itemsToMerge = selectedItems.map(key => {
                const [type, ...idParts] = key.split('_');
                const id = idParts.join('_'); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π ID
                return { type, id };
            });
            
            console.log('üîó –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:', itemsToMerge);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∞–¥—Ä–µ—Å
            const validation = await window.realEstateObjectManager.validateMergeByAddress(itemsToMerge);
            if (!validation.canMerge) {
                this.showError('–û–±—ä–µ–¥–∏–Ω—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º');
                return;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            let addressId = null;
            if (validation.addresses.length > 0) {
                addressId = validation.addresses[0];
            } else {
                // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                const firstItem = itemsToMerge.find(item => item.type === 'listing');
                if (firstItem) {
                    const listing = this.listings.find(l => l.id === firstItem.id);
                    addressId = listing?.address_id;
                }
            }
            
            if (!addressId) {
                this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è');
                return;
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            const newObject = await window.realEstateObjectManager.mergeIntoObject(itemsToMerge, addressId);
            
            if (newObject) {
                const elementText = selectedItems.length === 1 ? '—ç–ª–µ–º–µ–Ω—Ç–∞' : '—ç–ª–µ–º–µ–Ω—Ç–æ–≤';
                this.showSuccess(`–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ ${selectedItems.length} ${elementText}`);
                
                // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                this.clearDuplicatesSelection();
                await this.loadDuplicatesTable();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥—É–±–ª–µ–π:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message);
        }
    }

    /**
     * –†–∞–∑–±–∏–≤–∫–∞ –¥—É–±–ª–µ–π
     */
    async splitDuplicates() {
        if (this.selectedDuplicates.size === 0) {
            this.showError('–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥—É–±–ª–µ–π');
            return;
        }

        try {
            const selectedItems = Array.from(this.selectedDuplicates);
            console.log('‚úÇÔ∏è –†–∞–∑–±–∏–≤–∫–∞ –¥—É–±–ª–µ–π:', selectedItems);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RealEstateObjectManager
            if (!window.realEstateObjectManager) {
                this.showError('RealEstateObjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                console.error('‚ùå RealEstateObjectManager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ (–æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
            const objectsToSplit = selectedItems
                .filter(key => key.startsWith('object_'))
                .map(key => {
                    const [type, ...idParts] = key.split('_');
                    return idParts.join('_'); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π ID
                });
            
            if (objectsToSplit.length === 0) {
                this.showError('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏');
                return;
            }
            
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            const confirmed = confirm(
                `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∏—Ç—å ${objectsToSplit.length} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è?\n\n` +
                '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.'
            );
            
            if (!confirmed) {
                return;
            }
            
            console.log('‚úÇÔ∏è –û–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏:', objectsToSplit);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–±–∏–≤–∫—É
            const result = await window.realEstateObjectManager.splitObjectsToListings(objectsToSplit);
            
            if (result) {
                this.showSuccess(
                    `–†–∞–∑–±–∏—Ç–æ ${result.deletedObjectsCount} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ ${result.updatedListingsCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π. ` +
                    '–í—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –¥—É–±–ª–∏"'
                );
                
                // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                this.clearDuplicatesSelection();
                await this.loadDuplicatesTable();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ –¥—É–±–ª–µ–π:', error);
            this.showError('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏: ' + error.message);
        }
    }

    // –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π –º–µ—Ç–æ–¥ parseAvitoForArea - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ –Ω–∏–∂–µ

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ Cian –¥–ª—è –æ–±–ª–∞—Å—Ç–∏
     */
    async parseCianForArea() {
        try {
            debugLogger.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Cian –ø–æ —Ñ–∏–ª—å—Ç—Ä—É:', this.currentArea.cian_filter_url);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ background script –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            const response = await chrome.runtime.sendMessage({
                action: 'parseMassByFilter',
                source: 'cian',
                filterUrl: this.currentArea.cian_filter_url,
                areaId: this.currentArea.id
            });

            if (response && response.success) {
                return {
                    parsed: response.parsed || 0,
                    errors: response.errors || 0
                };
            } else {
                throw new Error(response?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Cian');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Cian:', error);
            return { parsed: 0, errors: 1 };
        }
    }

    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    async viewDuplicateDetails(id, type) {
        console.log(`üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π ${type}:`, id);
        
        try {
            const storeName = type === 'listing' ? 'listings' : 'objects';
            const item = await db.get(storeName, id);
            
            if (!item) {
                this.showError('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –∏–ª–∏ –∫–æ–Ω—Å–æ–ª–∏
            console.log('–î–µ—Ç–∞–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞:', item);
            this.showInfo('–î–µ—Ç–∞–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π: ' + error.message);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    async deleteDuplicate(id, type) {
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç ${type === 'listing' ? '–æ–±—ä—è–≤–ª–µ–Ω–∏–µ' : '–æ–±—ä–µ–∫—Ç'}?`)) {
            return;
        }

        try {
            const storeName = type === 'listing' ? 'listings' : 'objects';
            await db.delete(storeName, id);
            
            this.showSuccess(`${type === 'listing' ? '–û–±—ä—è–≤–ª–µ–Ω–∏–µ' : '–û–±—ä–µ–∫—Ç'} —É–¥–∞–ª–µ–Ω`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            await this.loadDuplicatesTable();
            
            // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω
            this.selectedDuplicates.delete(`${type}_${id}`);
            this.updateDuplicatesSelection();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message);
        }
    }

    async addAddress() {
        if (!this.currentArea || !this.currentArea.polygon) {
            this.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞');
            return;
        }

        try {
            console.log(`üÜï –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏
            const center = this.geoUtils.getPolygonCenter(this.currentArea.polygon);
            console.log(`üìç –¶–µ–Ω—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞:`, center);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ–ª–∏–≥–æ–Ω–∞
            const newAddress = {
                id: null, // null –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
                address: '', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ reverse geocoding
                coordinates: {
                    lat: center.lat,
                    lng: center.lng
                },
                type: 'house',
                map_area_id: this.currentAreaId,
                source: 'manual',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            await this.fillAddressForm(newAddress);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.showAddressModal(newAddress);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            this.editingAddressId = null;
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º reverse geocoding –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Ü–µ–Ω—Ç—Ä–∞
            setTimeout(async () => {
                try {
                    console.log(`üîç –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –ø–æ–ª–∏–≥–æ–Ω–∞...`);
                    const osmAPI = new OSMOverpassAPI();
                    const foundAddress = await osmAPI.reverseGeocode(center.lat, center.lng);
                    
                    if (foundAddress) {
                        const addressField = document.getElementById('editAddressText');
                        if (addressField) {
                            addressField.value = foundAddress;
                            console.log(`‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω: ${foundAddress}`);
                        }
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞:', error);
                }
            }, 200);

        } catch (error) {
            console.error('Error opening add address form:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ' + error.message);
        }
    }


    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–¥—Ä–µ—Å–æ–≤
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞: areaPage.diagnosticAddressSystem()
     */
    async diagnosticAddressSystem() {
        console.log(`üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ê–î–†–ï–°–û–í ===`);
        
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –æ–±–ª–∞—Å—Ç—å
            console.log(`üè¢ –¢–µ–∫—É—â–∞—è –æ–±–ª–∞—Å—Ç—å:`, this.currentArea);
            
            if (!this.currentArea || !this.currentArea.polygon) {
                console.error(`‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–∞`);
                return;
            }
            
            console.log(`üìê –ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ (${this.currentArea.polygon.length} —Ç–æ—á–µ–∫):`, this.currentArea.polygon);
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            console.log(`üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
            const allAddresses = await db.getAddresses();
            console.log(`üìä –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤ –≤ –ë–î: ${allAddresses.length}`);
            
            if (allAddresses.length === 0) {
                console.warn(`‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–¥—Ä–µ—Å–æ–≤! –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑ OSM`);
                return;
            }
            
            // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∞–¥—Ä–µ—Å–æ–≤
            console.log(`üìã –ü—Ä–∏–º–µ—Ä—ã –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –ë–î:`);
            allAddresses.slice(0, 3).forEach((addr, index) => {
                console.log(`  ${index + 1}. ${addr.address} - ${addr.coordinates?.lat}, ${addr.coordinates?.lng}`);
            });
            
            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            console.log(`üóÇÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å...`);
            await this.ensureAddressesIndex(allAddresses);
            
            // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏
            console.log(`üéØ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏...`);
            const addressesInArea = this.spatialManager.findInArea('addresses', this.currentArea.polygon);
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å: ${addressesInArea.length}`);
            
            // 6. –ú–∞–Ω—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            console.log(`üß™ –ú–∞–Ω—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–µ–∫ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ...`);
            let manualCount = 0;
            allAddresses.forEach(address => {
                if (address.coordinates && address.coordinates.lat && address.coordinates.lng) {
                    const isInside = this.geoUtils.isPointInPolygon(address.coordinates, this.currentArea.polygon);
                    if (isInside) {
                        manualCount++;
                        console.log(`  ‚úì ${address.address} - –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–∏–≥–æ–Ω–∞`);
                    }
                }
            });
            console.log(`üß™ –ú–∞–Ω—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–æ: ${manualCount} –∞–¥—Ä–µ—Å–æ–≤`);
            
            // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞
            const center = this.geoUtils.getPolygonCenter(this.currentArea.polygon);
            console.log(`üìç –¶–µ–Ω—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞: ${center.lat}, ${center.lng}`);
            
            // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–æ—â–∞–¥—å –ø–æ–ª–∏–≥–æ–Ω–∞
            const area = this.geoUtils.getPolygonArea(this.currentArea.polygon);
            console.log(`üìè –ü–ª–æ—â–∞–¥—å –ø–æ–ª–∏–≥–æ–Ω–∞: ${(area / 1000000).toFixed(2)} –∫–º¬≤`);
            
            // 9. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            console.log(`üìà === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===`);
            console.log(`üìä –ê–¥—Ä–µ—Å–æ–≤ –≤ –ë–î: ${allAddresses.length}`);
            console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å: ${addressesInArea.length}`);
            console.log(`üß™ –ù–∞–π–¥–µ–Ω–æ –º–∞–Ω—É–∞–ª—å–Ω–æ: ${manualCount}`);
            console.log(`‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            
            if (addressesInArea.length !== manualCount) {
                console.error(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–¥–µ–∫—Å–∞ –∏ –º–∞–Ω—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!`);
            } else {
                console.log(`‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:`, error);
        }
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–∏ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ
     */
    testPointInPolygon(lat, lng) {
        const point = { lat: lat, lng: lng };
        console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫—É: lat=${lat}, lng=${lng}`);
        console.log(`üìê –ü–æ–ª–∏–≥–æ–Ω:`, this.currentArea.polygon);
        
        try {
            // –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
            const result1 = this.geoUtils.isPointInPolygon(point, this.currentArea.polygon);
            console.log(`üîç GeoUtils.isPointInPolygon: ${result1}`);
            
            // –¢–µ—Å—Ç —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º GeoJSON –≤—Ä—É—á–Ω—É—é
            const geoPoint = this.geoUtils.createPoint(lat, lng);
            const geoPolygon = this.geoUtils.createPolygon(this.currentArea.polygon);
            console.log(`üìç GeoJSON Point:`, geoPoint);
            console.log(`üó∫Ô∏è GeoJSON Polygon:`, geoPolygon);
            
            const result2 = turf.booleanPointInPolygon(geoPoint, geoPolygon);
            console.log(`üåç Turf.booleanPointInPolygon: ${result2}`);
            
            return { geoUtils: result1, turf: result2 };
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`, error);
            return null;
        }
    }

    async deleteAddress(addressId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?')) {
            try {
                await db.deleteAddress(addressId);
                await this.loadAddresses();
                await this.loadAreaStats();
                this.showSuccess('–ê–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω');
                this.refreshAddressData();
            } catch (error) {
                console.error('Error deleting address:', error);
                this.showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ' + error.message);
            }
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ Avito –¥–ª—è –æ–±–ª–∞—Å—Ç–∏
     */
    async parseAvitoForArea() {
        try {
            debugLogger.log('–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Avito –¥–ª—è –æ–±–ª–∞—Å—Ç–∏:', this.currentArea.name);
            
            return new Promise((resolve) => {
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∫–ª–∞–¥–∫–∏
                setTimeout(() => {
                    this.createTabWithRetry(this.currentArea.avito_filter_url, 3)
                        .then(async (newTab) => {
                            debugLogger.log('–û—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ Avito:', newTab.id);
                            
                            try {
                                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º content script
                                await this.waitForPageLoad(newTab.id);
                                await this.injectContentScript(newTab.id);
                                
                                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                                const response = await this.waitForContentScriptAndParse(newTab.id, {
                                    areaId: this.currentAreaId,
                                    areaName: this.currentArea.name,
                                    maxPages: 10, // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
                                    delay: 2000,
                                    avitoFilterUrl: this.currentArea.avito_filter_url,
                                    listingsContainer: '.styles-container-rnTvX',
                                    listingSelector: '.styles-snippet-ZgKUd',
                                    linkSelector: 'a[href*="/kvartiry/"]'
                                });

                                // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                debugLogger.log('–ü–∞—Ä—Å–∏–Ω–≥ Avito –∑–∞–≤–µ—Ä—à–µ–Ω, –≤–∫–ª–∞–¥–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');

                                if (response && response.success) {
                                    resolve({ parsed: response.parsed || 0, errors: response.errors || 0 });
                                } else {
                                    throw new Error(response?.error || '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Avito');
                                }
                            } catch (error) {
                                debugLogger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Avito:', error);
                                // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                debugLogger.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –≤–∫–ª–∞–¥–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
                                resolve({ parsed: 0, errors: 1 });
                            }
                        })
                        .catch((error) => {
                            debugLogger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É:', error);
                            resolve({ parsed: 0, errors: 1 });
                        });
                }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ 500–º—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∫–ª–∞–¥–∫–∏
            });
        } catch (error) {
            console.error('Error parsing Avito:', error);
            return { parsed: 0, errors: 1 };
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
     */
    async createTabWithRetry(url, maxRetries = 3) {
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                return await new Promise((resolve, reject) => {
                    chrome.tabs.create({ url: url, active: false }, (newTab) => {
                        if (chrome.runtime.lastError) {
                            reject(new Error(chrome.runtime.lastError.message));
                        } else {
                            resolve(newTab);
                        }
                    });
                });
            } catch (error) {
                debugLogger.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
                
                if (attempt === maxRetries) {
                    throw error;
                }
                
                // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                const delay = Math.pow(2, attempt) * 1000;
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }


    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
     */
    updateProgressBar(type, percentage, message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.showProgressBar(type);
        
        const progressElement = document.getElementById(`${type}Progress`);
        const progressBarElement = document.getElementById(`${type}ProgressBar`);
        
        if (progressElement) {
            progressElement.textContent = `${Math.round(percentage * 100) / 100}%`;
        }
        
        if (progressBarElement) {
            progressBarElement.style.width = `${percentage}%`;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (message) {
            const statusElement = document.getElementById(`${type}Status`);
            if (statusElement) {
                statusElement.textContent = message;
                statusElement.classList.remove('hidden');
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saveProgressState(type, percentage, message, percentage < 100);
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
     */
    hideProgressBar(type) {
        const progressContainer = document.querySelector(`[data-progress="${type}"]`);
        if (progressContainer) {
            progressContainer.classList.add('hidden');
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ —Å—Ç–∞—Ç—É—Å
        const statusElement = document.getElementById(`${type}Status`);
        if (statusElement) {
            statusElement.classList.add('hidden');
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        this.resetProgressBar(type);
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.clearProgressState(type);
    }

    /**
     * –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
     */
    showProgressBar(type) {
        const progressContainer = document.querySelector(`[data-progress="${type}"]`);
        if (progressContainer) {
            progressContainer.classList.remove('hidden');
        }
    }

    /**
     * –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
     */
    resetProgressBar(type) {
        const progressElement = document.getElementById(`${type}Progress`);
        const progressBarElement = document.getElementById(`${type}ProgressBar`);
        
        if (progressElement) {
            progressElement.textContent = '0%';
        }
        
        if (progressBarElement) {
            progressBarElement.style.width = '0%';
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async waitForPageLoad(tabId) {
        return new Promise((resolve) => {
            const checkPageLoad = () => {
                chrome.tabs.get(tabId, (tab) => {
                    if (chrome.runtime.lastError) {
                        resolve();
                        return;
                    }
                    
                    if (tab.status === 'complete') {
                        setTimeout(resolve, 2000); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    } else {
                        setTimeout(checkPageLoad, 500);
                    }
                });
            };
            
            checkPageLoad();
        });
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∂–µ–∫—Ü–∏—è content script
     */
    async injectContentScript(tabId) {
        try {
            debugLogger.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∂–µ–∫—Ü–∏—è content script...');
            
            // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            await chrome.scripting.executeScript({
                target: { tabId: tabId },
                files: ['data/database.js']
            });
            
            
            // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä
            await chrome.scripting.executeScript({
                target: { tabId: tabId },
                files: ['content-scripts/avito-parser.js']
            });
            
            debugLogger.log('Content script —É—Å–ø–µ—à–Ω–æ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω');
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await new Promise(resolve => setTimeout(resolve, 3000));
            
        } catch (error) {
            debugLogger.error('–û—à–∏–±–∫–∞ –∏–Ω–∂–µ–∫—Ü–∏–∏ content script:', error);
            throw error;
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ content script –∏ –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    async waitForContentScriptAndParse(tabId, settings) {
        const maxAttempts = 10;
        const attemptDelay = 2000;
        
        for (let attempt = 1; attempt <= maxAttempts; attempt++) {
            try {
                debugLogger.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts} —Å–≤—è–∑–∞—Ç—å—Å—è —Å content script...`);
                
                // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                const response = await chrome.tabs.sendMessage(tabId, {
                    action: 'parseMassByFilter',
                    areaId: settings.areaId,
                    areaName: settings.areaName,
                    maxPages: settings.maxPages || 10,
                    delay: settings.delay || 2000
                });
                
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                debugLogger.log('Content script –æ—Ç–≤–µ—Ç–∏–ª:', response);
                return response;
                
            } catch (error) {
                debugLogger.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
                
                if (attempt === maxAttempts) {
                    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å content script –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`);
                }
                
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await new Promise(resolve => setTimeout(resolve, attemptDelay));
            }
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    saveProgressState(type, percentage, message, isActive = true) {
        if (!this.currentAreaId) return;

        const stateKey = this.storageKey + this.currentAreaId;
        let savedState = {};
        
        try {
            const existing = localStorage.getItem(stateKey);
            if (existing) {
                savedState = JSON.parse(existing);
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }

        savedState[type] = {
            percentage: percentage,
            message: message,
            isActive: isActive,
            timestamp: new Date().toISOString()
        };

        try {
            localStorage.setItem(stateKey, JSON.stringify(savedState));
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    restoreProgressState() {
        if (!this.currentAreaId) return;

        const stateKey = this.storageKey + this.currentAreaId;
        
        try {
            const savedState = localStorage.getItem(stateKey);
            if (!savedState) return;

            const state = JSON.parse(savedState);
            const now = new Date();

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—ã–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞)
            for (const [type, data] of Object.entries(state)) {
                const timestamp = new Date(data.timestamp);
                const hoursDiff = (now - timestamp) / (1000 * 60 * 60);

                if (hoursDiff < 1 && data.isActive) {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    this.updateProgressBar(type, data.percentage, data.message);
                    
                    // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    if (data.percentage < 100) {
                        this.showInfo(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ "${type}": ${data.message}`);
                    }
                }
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    clearProgressState(type = null) {
        if (!this.currentAreaId) return;

        const stateKey = this.storageKey + this.currentAreaId;
        
        try {
            if (type === null) {
                // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                localStorage.removeItem(stateKey);
            } else {
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                const savedState = localStorage.getItem(stateKey);
                if (savedState) {
                    const state = JSON.parse(savedState);
                    delete state[type];
                    localStorage.setItem(stateKey, JSON.stringify(state));
                }
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }

    /**
     * –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showSuccess(message) {
        this.showNotification(message, 'success');
    }

    showError(message) {
        this.showNotification(message, 'error');
    }

    showInfo(message) {
        this.showNotification(message, 'info');
    }

    showWarning(message) {
        this.showNotification(message, 'warning');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ Avito –∏ Cian
     */
    updateFilterButtons() {
        const avitoUrl = document.getElementById('editAvitoUrl')?.value?.trim();
        const cianUrl = document.getElementById('editCianUrl')?.value?.trim();
        
        const avitoBtn = document.getElementById('openAvitoBtn');
        const cianBtn = document.getElementById('openCianBtn');
        
        if (avitoBtn) {
            avitoBtn.disabled = !avitoUrl || !this.isValidUrl(avitoUrl);
        }
        
        if (cianBtn) {
            cianBtn.disabled = !cianUrl || !this.isValidUrl(cianUrl);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL
     */
    isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ Avito –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
     */
    openAvitoFilter() {
        const avitoUrl = document.getElementById('editAvitoUrl')?.value?.trim();
        if (avitoUrl && this.isValidUrl(avitoUrl)) {
            chrome.tabs.create({ url: avitoUrl });
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ Cian –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
     */
    openCianFilter() {
        const cianUrl = document.getElementById('editCianUrl')?.value?.trim();
        if (cianUrl && this.isValidUrl(cianUrl)) {
            chrome.tabs.create({ url: cianUrl });
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async openProcessingFilter(id, type) {
        try {
            console.log(`–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è ${type} —Å ID: ${id}`);
            
            let dataForFilter = null;
            
            if (type === 'listing') {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                dataForFilter = await db.get('listings', id);
                if (!dataForFilter) {
                    this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
                    return;
                }
            } else if (type === 'object') {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                dataForFilter = await db.get('objects', id);
                if (!dataForFilter) {
                    this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏');
                    return;
                }
            } else {
                this.showError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞');
                return;
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã–º–∏
            await this.fillProcessingFilters(dataForFilter);
            
            const elementType = type === 'listing' ? '–æ–±—ä—è–≤–ª–µ–Ω–∏—è' : '–æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏';
            this.showSuccess(`–§–∏–ª—å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ ${elementType}`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ' + error.message);
        }
    }

    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    async fillProcessingFilters(data) {
        try {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
            if (data.address_id && this.processingAddressSlimSelect) {
                this.processingAddressSlimSelect.setSelected([data.address_id]);
                this.showClearButton('clearAddressFilterBtn');
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            if (data.property_type && this.processingPropertyTypeSlimSelect) {
                this.processingPropertyTypeSlimSelect.setSelected([data.property_type]);
                this.showClearButton('clearPropertyTypeFilterBtn');
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–∂
            if (data.floor) {
                const floorInput = document.getElementById('processingFloorFilter');
                if (floorInput) {
                    floorInput.value = data.floor;
                    this.showClearButton('clearFloorFilterBtn');
                }
            }
            
            // –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ù–ï –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É - –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            await this.applyProcessingFilters();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async getUpdateIntervalDays() {
        try {
            const updateDays = await db.getSetting('update_days');
            return updateDays || 7; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–Ω–µ–π
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ update_days:', error);
            return 7; // Fallback –Ω–∞ 7 –¥–Ω–µ–π
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ
     */
    async applyProcessingFilters() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ SlimSelect –∏ –æ–±—ã—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            let addressFilter = '';
            if (this.processingAddressSlimSelect) {
                const selected = this.processingAddressSlimSelect.getSelected();
                addressFilter = selected?.[0]?.value || selected?.[0] || '';
            }
            
            let propertyTypeFilter = '';
            if (this.processingPropertyTypeSlimSelect) {
                const selected = this.processingPropertyTypeSlimSelect.getSelected();
                propertyTypeFilter = selected?.[0]?.value || selected?.[0] || '';
            }
            
            let processingStatusFilter = '';
            if (this.processingStatusSlimSelect) {
                const selected = this.processingStatusSlimSelect.getSelected();
                processingStatusFilter = selected?.[0]?.value || selected?.[0] || '';
            }
            
            const floorFilter = document.getElementById('processingFloorFilter')?.value || '';
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
            const statusFilter = document.getElementById('duplicatesStatusFilter')?.value || 'all';
            
            console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', {
                addressFilter,
                propertyTypeFilter,
                floorFilter,
                processingStatusFilter,
                statusFilter
            });
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
            $.fn.dataTable.ext.search = $.fn.dataTable.ext.search.filter(fn => 
                !fn.toString().includes('duplicatesTable')
            );
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∫ DataTables
            $.fn.dataTable.ext.search.push((settings, data, dataIndex) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞
                if (settings.nTable.id !== 'duplicatesTable') {
                    return true;
                }
                
                const rowData = this.duplicatesTable.row(dataIndex).data();
                
                // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–∞–∫—Ç–∏–≤–Ω—ã–π/–∞—Ä—Ö–∏–≤–Ω—ã–π)
                if (statusFilter !== 'all' && rowData.status !== statusFilter) {
                    return false;
                }
                
                // –§–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                
                // –§–∏–ª—å—Ç—Ä –ø–æ –∞–¥—Ä–µ—Å—É (–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞)
                if (addressFilter && rowData.address_id !== addressFilter) {
                    return false;
                }
                
                // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                if (propertyTypeFilter && rowData.property_type !== propertyTypeFilter) {
                    return false;
                }
                
                // –§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–∂—É
                if (floorFilter && rowData.floor != parseInt(floorFilter)) {
                    return false;
                }
                
                // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
                if (processingStatusFilter) {
                    console.log('üîç Processing status filter:', processingStatusFilter, 'row type:', rowData.type, 'row processing_status:', rowData.processing_status, 'address_match_confidence:', rowData.address_match_confidence);
                    
                    // –û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–æ—ç—Ç–æ–º—É —Å–∫—Ä—ã–≤–∞–µ–º –∏—Ö –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    if (rowData.type === 'object') {
                        return false;
                    }
                    
                    // –î–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if (processingStatusFilter === 'address_needed') {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è:
                        // 1. –° processing_status === 'address_needed' 
                        // 2. –ò–õ–ò —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ (address_match_confidence: 'low' –∏–ª–∏ 'very_low')
                        // –ù–û –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'manual' (—É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ)
                        const hasAddressNeededStatus = rowData.processing_status === 'address_needed';
                        const hasLowAddressConfidence = rowData.address_match_confidence === 'low' || rowData.address_match_confidence === 'very_low';
                        const isManualConfidence = rowData.address_match_confidence === 'manual';
                        
                        console.log('üìç Address needed check:', {
                            hasAddressNeededStatus: hasAddressNeededStatus,
                            hasLowAddressConfidence: hasLowAddressConfidence,
                            isManualConfidence: isManualConfidence,
                            shouldShow: (hasAddressNeededStatus || hasLowAddressConfidence) && !isManualConfidence
                        });
                        
                        // –°–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ò–õ–ò –µ—Å–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤—Ä—É—á–Ω—É—é
                        if ((!hasAddressNeededStatus && !hasLowAddressConfidence) || isManualConfidence) {
                            return false;
                        }
                    } else {
                        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                        if (rowData.processing_status !== processingStatusFilter) {
                            return false;
                        }
                    }
                }
                
                return true;
            });
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            this.duplicatesTable.draw();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            this.updateActiveFiltersDisplay();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ' + error.message);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    clearAllProcessingFilters() {
        try {
            // –û—á–∏—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã SlimSelect
            if (this.processingAddressSlimSelect) {
                this.processingAddressSlimSelect.setSelected([]);
            }
            if (this.processingPropertyTypeSlimSelect) {
                this.processingPropertyTypeSlimSelect.setSelected([]);
            }
            if (this.processingStatusSlimSelect) {
                this.processingStatusSlimSelect.setSelected([]);
            }
            
            // –û—á–∏—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è
            const floorInput = document.getElementById('processingFloorFilter');
            if (floorInput) {
                floorInput.value = '';
            }
            
            // –ö–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã (—Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç—ã–µ)
            this.applyProcessingFilters();
            
            this.showSuccess('–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ' + error.message);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    clearSingleFilter(filterId) {
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –æ—á–∏—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
            switch (filterId) {
                case 'processingAddressFilter':
                    if (this.processingAddressSlimSelect) {
                        this.processingAddressSlimSelect.setSelected([]);
                    }
                    break;
                case 'processingPropertyTypeFilter':
                    if (this.processingPropertyTypeSlimSelect) {
                        this.processingPropertyTypeSlimSelect.setSelected([]);
                    }
                    break;
                case 'processingStatusFilter':
                    if (this.processingStatusSlimSelect) {
                        this.processingStatusSlimSelect.setSelected([]);
                    }
                    break;
                case 'processingFloorFilter':
                    const filterElement = document.getElementById(filterId);
                    if (filterElement) {
                        filterElement.value = '';
                    }
                    break;
            }
            
            // –ö–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            this.applyProcessingFilters();
            
            this.showSuccess('–§–∏–ª—å—Ç—Ä –æ—á–∏—â–µ–Ω');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    showClearButton(buttonId) {
        const button = document.getElementById(buttonId);
        if (button) {
            button.classList.remove('hidden');
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    hideClearButton(buttonId) {
        const button = document.getElementById(buttonId);
        if (button) {
            button.classList.add('hidden');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    updateActiveFiltersDisplay() {
        try {
            const addressFilter = this.processingAddressSlimSelect?.getSelected()?.[0] || '';
            const propertyTypeFilter = this.processingPropertyTypeSlimSelect?.getSelected()?.[0] || '';
            const floorFilter = document.getElementById('processingFloorFilter')?.value || '';
            const activeFilters = [];
            
            if (addressFilter) {
                // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ SlimSelect
                let addressText = addressFilter;
                
                try {
                    // –ü–æ–∏—Å–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º select —ç–ª–µ–º–µ–Ω—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                    const selectElement = document.getElementById('processingAddressFilter');
                    if (selectElement) {
                        const selectedOption = selectElement.querySelector(`option[value="${addressFilter}"]`);
                        if (selectedOption) {
                            const optionText = selectedOption.textContent;
                            if (optionText && optionText !== addressFilter) {
                                addressText = optionText;
                            }
                        }
                    }
                } catch (error) {
                    console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∞–¥—Ä–µ—Å–∞:', error);
                }
                
                activeFilters.push({ type: 'address', text: `–ê–¥—Ä–µ—Å: ${addressText}` });
            }
            
            if (propertyTypeFilter) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–µ
                const propertyTypeMap = {
                    'studio': '–°—Ç—É–¥–∏—è',
                    '1k': '1-–∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                    '2k': '2-–∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞', 
                    '3k': '3-–∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                    '4k+': '4+ –∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞'
                };
                const propertyTypeText = propertyTypeMap[propertyTypeFilter] || propertyTypeFilter;
                activeFilters.push({ type: 'property_type', text: `–¢–∏–ø: ${propertyTypeText}` });
            }
            
            if (floorFilter) {
                activeFilters.push({ type: 'floor', text: `–≠—Ç–∞–∂: ${floorFilter}` });
            }
            
            const container = document.getElementById('activeFiltersContainer');
            const tagsContainer = document.getElementById('activeFilterTags');
            
            if (activeFilters.length > 0) {
                container.classList.remove('hidden');
                tagsContainer.innerHTML = activeFilters.map(filter => 
                    `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        ${filter.text}
                        <button type="button" class="ml-1 text-blue-600 hover:text-blue-800 remove-filter-btn" data-filter-type="${filter.type}">
                            <svg class="h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </button>
                    </span>`
                ).join('');
            } else {
                container.classList.add('hidden');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    removeActiveFilter(filterType) {
        try {
            switch (filterType) {
                case 'address':
                    this.clearSingleFilter('processingAddressFilter');
                    break;
                case 'property_type':
                    this.clearSingleFilter('processingPropertyTypeFilter');
                    break;
                case 'floor':
                    this.clearSingleFilter('processingFloorFilter');
                    break;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    async initProcessingFilters() {
        try {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
            
            // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.cachedUpdateIntervalDays = await this.getUpdateIntervalDays();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
            await this.initAddressFilter();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect –¥–ª—è —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            await this.initPropertyTypeFilter();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await this.initProcessingStatusFilter();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.bindProcessingFilterEvents();
            
            console.log('‚úÖ –§–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ' + error.message);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
     */
    async initServicesIntegration() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –Ω–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
            this.servicesIntegration = await initializeAreaServicesIntegration(this);
            console.log('‚úÖ Services integration initialized');
            
        } catch (error) {
            console.error('‚ùå Failed to initialize services integration:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: ' + error.message, 'error');
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ localStorage
     */
    restoreAddressTableState() {
        const isCollapsed = localStorage.getItem('addressTableCollapsed');
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–∞–±–ª–∏—Ü–∞ –∞–¥—Ä–µ—Å–æ–≤ —Å–≤—ë—Ä–Ω—É—Ç–∞
        const shouldCollapse = isCollapsed === null || isCollapsed === 'true';
        
        if (shouldCollapse) {
            const content = document.getElementById('addressTableContent');
            const chevron = document.getElementById('addressTableChevron');
            
            if (content && chevron) {
                content.style.display = 'none';
                chevron.style.transform = 'rotate(-90deg)';
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∞–¥—Ä–µ—Å–æ–≤ (—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ)
     */
    toggleAddressTable() {
        const content = document.getElementById('addressTableContent');
        const chevron = document.getElementById('addressTableChevron');
        
        if (content && chevron) {
            const isHidden = content.style.display === 'none';
            
            if (isHidden) {
                content.style.display = 'block';
                chevron.style.transform = 'rotate(0deg)';
                localStorage.setItem('addressTableCollapsed', 'false');
            } else {
                content.style.display = 'none';
                chevron.style.transform = 'rotate(-90deg)';
                localStorage.setItem('addressTableCollapsed', 'true');
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ)
     */
    /**
     * –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    toggleStatisticsPanel() {
        const content = document.getElementById('statisticsPanelContent');
        const chevron = document.getElementById('statisticsPanelChevron');
        
        if (content && chevron) {
            const isHidden = content.classList.contains('hidden');
            
            if (isHidden) {
                content.classList.remove('hidden');
                chevron.style.transform = 'rotate(0deg)';
                localStorage.setItem('statisticsPanelCollapsed', 'false');
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
                setTimeout(() => {
                    this.updateSourcesChart();
                    this.updateAddressAnalyticsCharts();
                }, 100);
            } else {
                content.classList.add('hidden');
                chevron.style.transform = 'rotate(-90deg)';
                localStorage.setItem('statisticsPanelCollapsed', 'true');
            }
        }
    }

    toggleDataWorkPanel() {
        const content = document.getElementById('dataWorkPanelContent');
        const chevron = document.getElementById('dataWorkPanelChevron');
        
        if (content && chevron) {
            const isHidden = content.style.display === 'none';
            
            if (isHidden) {
                content.style.display = 'block';
                chevron.style.transform = 'rotate(0deg)';
                localStorage.setItem('dataWorkPanelCollapsed', 'false');
            } else {
                content.style.display = 'none';
                chevron.style.transform = 'rotate(-90deg)';
                localStorage.setItem('dataWorkPanelCollapsed', 'true');
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∫–∞—Ä—Ç—ã –æ–±–ª–∞—Å—Ç–∏
     */
    toggleMapPanel() {
        const content = document.getElementById('mapPanelContent');
        const chevron = document.getElementById('mapPanelChevron');
        
        if (content && chevron) {
            const isHidden = content.style.display === 'none';
            
            if (isHidden) {
                content.style.display = 'block';
                chevron.style.transform = 'rotate(0deg)';
                localStorage.setItem('mapPanelCollapsed', 'false');
                // –ü—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –∑—É–º
                setTimeout(() => {
                    if (this.map) {
                        this.map.invalidateSize();
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑—É–º –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏
                        if (this.areaPolygonLayer) {
                            this.map.fitBounds(this.areaPolygonLayer.getBounds());
                        }
                    }
                }, 100);
            } else {
                content.style.display = 'none';
                chevron.style.transform = 'rotate(-90deg)';
                localStorage.setItem('mapPanelCollapsed', 'true');
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª—è–º–∏
     */
    toggleDuplicatesPanel() {
        const content = document.getElementById('duplicatesPanelContent');
        const chevron = document.getElementById('duplicatesPanelChevron');
        
        if (content && chevron) {
            const isHidden = content.style.display === 'none';
            
            if (isHidden) {
                content.style.display = 'block';
                chevron.style.transform = 'rotate(0deg)';
                localStorage.setItem('duplicatesPanelCollapsed', 'false');
            } else {
                content.style.display = 'none';
                chevron.style.transform = 'rotate(-90deg)';
                localStorage.setItem('duplicatesPanelCollapsed', 'true');
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤ –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    switchDataWorkTab(tabId) {
        const navItems = document.querySelectorAll('.data-nav-item');
        const contentTabs = document.querySelectorAll('.data-content-tab');
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navItems.forEach(nav => {
            nav.classList.remove('bg-indigo-50', 'text-indigo-600');
            nav.classList.add('text-gray-700', 'hover:bg-gray-50', 'hover:text-indigo-600');
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        contentTabs.forEach(tab => {
            tab.classList.add('hidden');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        const activeNavItem = document.querySelector(`[data-tab="${tabId}"]`);
        const activeContentTab = document.getElementById(`content-${tabId}`);
        
        if (activeNavItem && activeContentTab) {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            activeNavItem.classList.remove('text-gray-700', 'hover:bg-gray-50', 'hover:text-indigo-600');
            activeNavItem.classList.add('bg-indigo-50', 'text-indigo-600');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
            activeContentTab.classList.remove('hidden');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
            localStorage.setItem('dataWorkActiveTab', tabId);
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ localStorage
     */
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    restoreStatisticsPanelState() {
        const content = document.getElementById('statisticsPanelContent');
        const chevron = document.getElementById('statisticsPanelChevron');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ä–Ω—É—Ç–∞)
        const isCollapsed = localStorage.getItem('statisticsPanelCollapsed');
        const shouldCollapse = isCollapsed === null || isCollapsed === 'true';
        
        if (content && chevron) {
            if (shouldCollapse) {
                content.classList.add('hidden');
                chevron.style.transform = 'rotate(-90deg)';
            } else {
                content.classList.remove('hidden');
                chevron.style.transform = 'rotate(0deg)';
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞
                setTimeout(() => {
                    this.updateSourcesChart();
                }, 100);
            }
        }
    }

    restoreDataWorkPanelState() {
        const content = document.getElementById('dataWorkPanelContent');
        const chevron = document.getElementById('dataWorkPanelChevron');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
        const isCollapsed = localStorage.getItem('dataWorkPanelCollapsed');
        const shouldCollapse = isCollapsed === null || isCollapsed === 'true';
        
        if (content && chevron) {
            if (shouldCollapse) {
                content.style.display = 'none';
                chevron.style.transform = 'rotate(-90deg)';
            } else {
                content.style.display = 'block';
                chevron.style.transform = 'rotate(0deg)';
            }
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
        const activeTab = localStorage.getItem('dataWorkActiveTab') || 'import-addresses';
        this.switchDataWorkTab(activeTab);
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∫–∞—Ä—Ç—ã –æ–±–ª–∞—Å—Ç–∏
     */
    restoreMapPanelState() {
        const content = document.getElementById('mapPanelContent');
        const chevron = document.getElementById('mapPanelChevron');
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞–Ω–µ–ª—å –∫–∞—Ä—Ç—ã —Å–≤–µ—Ä–Ω—É—Ç–∞
        const isCollapsed = localStorage.getItem('mapPanelCollapsed');
        const shouldCollapse = isCollapsed === null || isCollapsed === 'true';
        
        if (content && chevron) {
            if (shouldCollapse) {
                content.style.display = 'none';
                chevron.style.transform = 'rotate(-90deg)';
            } else {
                content.style.display = 'block';
                chevron.style.transform = 'rotate(0deg)';
                // –ü—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –∑—É–º
                setTimeout(() => {
                    if (this.map) {
                        this.map.invalidateSize();
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑—É–º –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏
                        if (this.areaPolygonLayer) {
                            this.map.fitBounds(this.areaPolygonLayer.getBounds());
                        }
                    }
                }, 100);
            }
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª—è–º–∏
     */
    restoreDuplicatesPanelState() {
        const content = document.getElementById('duplicatesPanelContent');
        const chevron = document.getElementById('duplicatesPanelChevron');
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª—è–º–∏ —Å–≤–µ—Ä–Ω—É—Ç–∞
        const isCollapsed = localStorage.getItem('duplicatesPanelCollapsed');
        const shouldCollapse = isCollapsed === null || isCollapsed === 'true';
        
        if (content && chevron) {
            if (shouldCollapse) {
                content.style.display = 'none';
                chevron.style.transform = 'rotate(-90deg)';
            } else {
                content.style.display = 'block';
                chevron.style.transform = 'rotate(0deg)';
            }
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤ —Å SlimSelect
     */
    async initAddressFilter() {
        try {
            const selectElement = document.getElementById('processingAddressFilter');
            if (!selectElement) {
                console.warn('–≠–ª–µ–º–µ–Ω—Ç processingAddressFilter –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –≤ –æ–±–ª–∞—Å—Ç–∏
            const addresses = await this.getAddressesInArea();
            
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π "–í—Å–µ –∞–¥—Ä–µ—Å–∞")
            while (selectElement.children.length > 1) {
                selectElement.removeChild(selectElement.lastChild);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            addresses.forEach(address => {
                const option = document.createElement('option');
                option.value = address.id;
                option.textContent = address.address;
                selectElement.appendChild(option);
            });

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
            this.processingAddressSlimSelect = new SlimSelect({
                select: selectElement,
                settings: {
                    searchPlaceholder: '–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤...',
                    searchText: '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å',
                    allowDeselect: true,
                    closeOnSelect: true
                },
                events: {
                    afterChange: (newVal) => {
                        this.onAddressFilterChange(newVal);
                    }
                }
            });

            console.log(`üìç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å SlimSelect
     */
    async initPropertyTypeFilter() {
        try {
            const selectElement = document.getElementById('processingPropertyTypeFilter');
            if (!selectElement) {
                console.warn('–≠–ª–µ–º–µ–Ω—Ç processingPropertyTypeFilter –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
            this.processingPropertyTypeSlimSelect = new SlimSelect({
                select: selectElement,
                settings: {
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø',
                    allowDeselect: true,
                    closeOnSelect: true
                },
                events: {
                    afterChange: (newVal) => {
                        this.onPropertyTypeFilterChange(newVal);
                    }
                }
            });

            console.log('üè† –§–∏–ª—å—Ç—Ä —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    async initProcessingStatusFilter() {
        try {
            const selectElement = document.getElementById('processingStatusFilter');
            if (!selectElement) {
                console.warn('–≠–ª–µ–º–µ–Ω—Ç processingStatusFilter –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
            this.processingStatusSlimSelect = new SlimSelect({
                select: selectElement,
                settings: {
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å',
                    allowDeselect: true,
                    closeOnSelect: true
                },
                events: {
                    afterChange: (newVal) => {
                        this.onProcessingStatusFilterChange(newVal);
                    }
                }
            });

            console.log('üìã –§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
            throw error;
        }
    }


    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    bindProcessingFilterEvents() {
        try {
            // –ö–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"
            const clearAllBtn = document.getElementById('clearProcessingFiltersBtn');
            if (clearAllBtn) {
                clearAllBtn.addEventListener('click', () => {
                    this.clearAllProcessingFilters();
                });
            }

            // –ö–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const clearButtons = [
                { id: 'clearAddressFilterBtn', filterId: 'processingAddressFilter' },
                { id: 'clearPropertyTypeFilterBtn', filterId: 'processingPropertyTypeFilter' },
                { id: 'clearFloorFilterBtn', filterId: 'processingFloorFilter' },
                { id: 'clearProcessingStatusFilterBtn', filterId: 'processingStatusFilter' }
            ];

            clearButtons.forEach(({ id, filterId }) => {
                const button = document.getElementById(id);
                if (button) {
                    button.addEventListener('click', () => {
                        this.clearSingleFilter(filterId, id);
                    });
                }
            });

            // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —ç—Ç–∞–∂–∞
            const floorInput = document.getElementById('processingFloorFilter');
            if (floorInput) {
                floorInput.addEventListener('input', (e) => {
                    const value = e.target.value;
                    if (value) {
                        this.showClearButton('clearFloorFilterBtn');
                    } else {
                        this.hideClearButton('clearFloorFilterBtn');
                    }
                    this.applyProcessingFilters();
                });

                floorInput.addEventListener('keyup', (e) => {
                    if (e.key === 'Enter') {
                        this.applyProcessingFilters();
                    }
                });
            }

            console.log('üîó –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Å–æ–±—ã—Ç–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤
     */
    onAddressFilterChange(newVal) {
        try {
            if (newVal && newVal.length > 0) {
                this.showClearButton('clearAddressFilterBtn');
            } else {
                this.hideClearButton('clearAddressFilterBtn');
            }
            this.applyProcessingFilters();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    onPropertyTypeFilterChange(newVal) {
        try {
            if (newVal && newVal.length > 0) {
                this.showClearButton('clearPropertyTypeFilterBtn');
            } else {
                this.hideClearButton('clearPropertyTypeFilterBtn');
            }
            this.applyProcessingFilters();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    onProcessingStatusFilterChange(newVal) {
        try {
            console.log('üîÑ Processing status filter changed:', newVal);
            
            if (newVal && newVal.length > 0) {
                this.showClearButton('clearProcessingStatusFilterBtn');
            } else {
                this.hideClearButton('clearProcessingStatusFilterBtn');
            }
            this.applyProcessingFilters();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
        }
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        const colors = {
            success: 'bg-green-100 border-green-500 text-green-700',
            error: 'bg-red-100 border-red-500 text-red-700',
            info: 'bg-blue-100 border-blue-500 text-blue-700',
            warning: 'bg-yellow-100 border-yellow-500 text-yellow-700'
        };

        notification.className = `border-l-4 p-4 mb-4 ${colors[type]} rounded shadow-lg`;
        notification.innerHTML = `
            <div class="flex justify-between items-center">
                <span>${message}</span>
                <button class="text-lg leading-none notification-close-btn">&times;</button>
            </div>
        `;

        // Add event listener for close button instead of inline onclick
        const closeBtn = notification.querySelector('.notification-close-btn');
        closeBtn.addEventListener('click', () => {
            notification.remove();
        });

        document.getElementById('notifications').appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }


    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
     */
    async showListingDetails(listingId) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ this.listings
            let listing = this.listings.find(l => l.id === listingId);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (!listing) {
                console.log('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ this.listings, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', listingId);
                const allListings = await db.getListings();
                listing = allListings.find(l => l.id === listingId);
            }
            
            if (!listing) {
                console.error('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                this.showError('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            const modalContent = document.getElementById('modalContent');
            modalContent.innerHTML = this.renderListingDetails(listing);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
            this.currentListingUrl = listing.url;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            document.getElementById('listingModal').classList.remove('hidden');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Fotorama –∏ –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            setTimeout(() => {
                const galleryElement = document.getElementById(`listing-gallery-${listingId}`);
                if (galleryElement && window.$ && $.fn.fotorama) {
                    $(galleryElement).fotorama();
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                this.renderPriceChart(listing);
                
                // –ö–∞—Ä—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                const locationHeader = document.getElementById(`locationPanelHeader-${listingId}`);
                if (locationHeader) {
                    locationHeader.addEventListener('click', async () => {
                        await this.toggleLocationPanel(listingId);
                    });
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–∞–º–∏
                this.initializeAddressSelector(listingId, listing.address_id);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
                const saveButton = document.getElementById(`saveAddress_${listingId}`);
                if (saveButton) {
                    saveButton.addEventListener('click', () => {
                        this.saveListingAddress(listingId);
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                const correctAddressModalButton = document.getElementById(`correctAddressModal_${listingId}`);
                console.log('üîç Modal button search:', {
                    listingId: listingId,
                    buttonId: `correctAddressModal_${listingId}`,
                    buttonFound: !!correctAddressModalButton
                });
                
                if (correctAddressModalButton) {
                    console.log('‚úÖ Adding click handler to modal button');
                    correctAddressModalButton.addEventListener('click', () => {
                        console.log('üîò Modal button clicked for listing:', listingId);
                        this.markSingleAddressAsCorrect(listingId);
                    });
                } else {
                    console.log('‚ùå Modal button not found');
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                const priceHistoryHeader = document.getElementById(`priceHistoryPanelHeader-${listingId}`);
                if (priceHistoryHeader) {
                    priceHistoryHeader.addEventListener('click', () => {
                        this.togglePriceHistoryPanel(listingId);
                    });
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                this.initializePriceHistoryTable(listingId, listing);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
                const addPriceButton = document.getElementById(`addPriceEntry-${listingId}`);
                if (addPriceButton) {
                    addPriceButton.addEventListener('click', () => {
                        this.addPriceEntry(listingId);
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                const savePriceHistoryButton = document.getElementById(`savePriceHistory-${listingId}`);
                if (savePriceHistoryButton) {
                    savePriceHistoryButton.addEventListener('click', () => {
                        this.savePriceHistory(listingId);
                    });
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
                this.initializePriceEditModal(listingId);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                this.initializeManagementPanel(listingId);
            }, 100);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π:', error);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    renderListingDetails(listing) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        const photos = this.getListingPhotos(listing);
        
        console.log(`üì∏ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${photos.length}`);
        console.log('üì∏ –ü–æ–ª—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:', {
            photos: listing.photos,
            images: listing.images,
            photo_urls: listing.photo_urls,
            main_photo: listing.main_photo,
            photo: listing.photo,
            image_url: listing.image_url
        });
        
        return `
            <!-- –ö–∞—Ä—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è -->
            <div class="mb-6">
                <div class="bg-white shadow overflow-hidden sm:rounded-md border border-gray-200">
                    <div class="px-4 py-3 cursor-pointer" id="locationPanelHeader-${listing.id}">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <span class="text-lg font-medium text-gray-900">üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</span>
                                <span class="text-sm ${this.getAddressStatusClass(listing)}">${this.getAddressStatusText(listing)}</span>
                            </div>
                            <svg id="locationPanelChevron-${listing.id}" class="h-5 w-5 text-gray-400 transform transition-transform duration-200" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                    <div id="locationPanelContent-${listing.id}" class="px-4 pb-4" style="display: none;">
                        ${this.renderAddressAccuracyInfo(listing)}
                        <div id="listing-map-${listing.id}" class="h-64 bg-gray-200 rounded-md mt-3">
                            <!-- –ö–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞ –∑–¥–µ—Å—å -->
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è -->
            <div class="mb-6">
                <h4 class="text-lg font-medium text-gray-900 mb-4">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ${photos.length > 0 ? `(${photos.length})` : '(–Ω–µ –Ω–∞–π–¥–µ–Ω—ã)'}</h4>
                ${photos.length > 0 ? `
                    <div class="fotorama" 
                         data-nav="thumbs" 
                         data-width="100%" 
                         data-height="400"
                         data-thumbheight="50"
                         data-thumbwidth="50"
                         data-allowfullscreen="true"
                         data-transition="slide"
                         data-loop="true"
                         id="listing-gallery-${listing.id}">
                        ${photos.map(photo => `<img src="${photo}" alt="–§–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è">`).join('')}
                    </div>
                ` : `
                    <div class="bg-gray-100 rounded-lg p-8 text-center text-gray-500">
                        üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    </div>
                `}
            </div>
            
            <!-- –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã -->
            <div class="mb-6">
                <h4 class="text-lg font-medium text-gray-900 mb-4">–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã</h4>
                <div id="listing-price-chart-${listing.id}" class="w-full">
                    <!-- –ì—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω –∑–¥–µ—Å—å -->
                </div>
            </div>
            
            <!-- –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω -->
            <div class="mb-6">
                <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                    <div id="priceHistoryPanelHeader-${listing.id}" class="px-4 py-3 border-b border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors duration-150">
                        <div class="flex items-center justify-between">
                            <h4 class="text-lg font-medium text-gray-900">–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω</h4>
                            <svg id="priceHistoryPanelChevron-${listing.id}" class="h-5 w-5 text-gray-400 transform transition-transform duration-200 rotate-[-90deg]" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                    <div id="priceHistoryPanelContent-${listing.id}" class="px-4 pb-4" style="display: none;">
                        <div class="mt-4 mb-4 flex items-center justify-between">
                            <button id="addPriceEntry-${listing.id}" class="px-4 py-2 bg-green-500 text-white text-sm rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500">
                                –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                            </button>
                            <button id="savePriceHistory-${listing.id}" class="px-4 py-2 bg-blue-500 text-white text-sm rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                            </button>
                        </div>
                        <div class="overflow-x-auto">
                            <table id="priceHistoryTable-${listing.id}" class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–î–∞—Ç–∞</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–¶–µ–Ω–∞</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–î–µ–π—Å—Ç–≤–∏—è</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    <!-- –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ DataTable -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º -->
            <div class="mb-6">
                <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                    <div class="px-4 py-3 border-b border-gray-200">
                        <h4 class="text-lg font-medium text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h4>
                    </div>
                    <div class="px-4 py-4">
                        <div class="flex items-center justify-between">
                            <!-- –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: –°—Ç–∞—Ç—É—Å –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è -->
                            <div class="flex items-center space-x-6">
                                <!-- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ -->
                                <div class="flex items-center">
                                    <label class="text-sm font-medium text-gray-700 mr-3">–°—Ç–∞—Ç—É—Å:</label>
                                    <select id="statusSelect-${listing.id}" class="form-select">
                                        <option value="active" ${listing.status === 'active' ? 'selected' : ''}>–ê–∫—Ç–∏–≤–Ω–æ–µ</option>
                                        <option value="archived" ${listing.status === 'archived' ? 'selected' : ''}>–ê—Ä—Ö–∏–≤</option>
                                    </select>
                                </div>
                                
                                <!-- –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ -->
                                <button id="actualizeBtn-${listing.id}" 
                                        class="px-4 py-2 bg-blue-500 text-white text-sm rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">
                                    üîÑ –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                                </button>
                            </div>
                            
                            <!-- –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: –£–¥–∞–ª–µ–Ω–∏–µ -->
                            <div class="flex items-center space-x-4">
                                <!-- –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è -->
                                <div class="flex items-center">
                                    <span class="text-sm text-gray-500">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
                                    <span id="lastUpdated-${listing.id}" class="ml-2 text-sm text-gray-900">
                                        ${listing.updated ? new Date(listing.updated).toLocaleDateString('ru-RU', {
                                            year: 'numeric', 
                                            month: 'short', 
                                            day: 'numeric',
                                            hour: '2-digit',
                                            minute: '2-digit'
                                        }) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                    </span>
                                </div>
                                
                                <!-- –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è -->
                                <button id="deleteBtn-${listing.id}" 
                                        class="px-4 py-2 bg-red-500 text-white text-sm rounded-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors">
                                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã -->
            <div id="editPriceModal-${listing.id}" class="hidden fixed inset-0 z-50 overflow-y-auto" aria-labelledby="edit-price-modal-title" role="dialog" aria-modal="true">
                <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-4 text-center sm:block sm:p-0">
                    <!-- Overlay -->
                    <div class="fixed inset-0 z-0 transition-opacity" style="background-color: rgba(0, 0, 0, 0.1);" aria-hidden="true"></div>
                    
                    <!-- –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ -->
                    <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
                    
                    <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ -->
                    <div class="inline-block align-bottom bg-white border rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-md relative z-10">
                        <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                            <div class="sm:flex sm:items-start">
                                <div class="w-full">
                                    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
                                    <div class="mb-4">
                                        <h3 class="text-lg font-medium leading-6 text-gray-900" id="editPriceModalTitle-${listing.id}">
                                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É
                                        </h3>
                                    </div>
                                    
                                    <!-- –§–æ—Ä–º–∞ -->
                                    <form id="editPriceForm-${listing.id}">
                                        <div class="mb-4">
                                            <label for="priceInput-${listing.id}" class="block text-sm font-medium text-gray-700 mb-2">
                                                –¶–µ–Ω–∞ (‚ÇΩ)
                                            </label>
                                            <input type="text" id="priceInput-${listing.id}" 
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                   placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É">
                                        </div>
                                        <div class="mb-6">
                                            <label for="dateInput-${listing.id}" class="block text-sm font-medium text-gray-700 mb-2">
                                                –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                            </label>
                                            <input type="datetime-local" id="dateInput-${listing.id}" 
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                        <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                            <button type="submit" form="editPriceForm-${listing.id}" id="saveEditPrice-${listing.id}" 
                                    class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm">
                                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </button>
                            <button type="button" id="cancelEditPrice-${listing.id}" 
                                    class="w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                                –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    </div>
                    </div>
                </div>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div>
                    <h4 class="text-lg font-medium text-gray-900 mb-4">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                    <dl class="space-y-3">
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ó–∞–≥–æ–ª–æ–≤–æ–∫</dt>
                            <dd class="text-sm text-gray-900">${this.escapeHtml(listing.title || '-')}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ê–¥—Ä–µ—Å</dt>
                            <dd class="text-sm text-gray-900">${this.escapeHtml(listing.address || '-')}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–¶–µ–Ω–∞</dt>
                            <dd class="text-sm text-gray-900">${this.formatPrice(listing.price)}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–¶–µ–Ω–∞ –∑–∞ –º¬≤</dt>
                            <dd class="text-sm text-gray-900">${listing.price_per_meter ? this.formatPrice(listing.price_per_meter) + '/–º¬≤' : '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ò—Å—Ç–æ—á–Ω–∏–∫</dt>
                            <dd class="text-sm text-gray-900">${listing.source}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–°—Ç–∞—Ç—É—Å</dt>
                            <dd class="text-sm text-gray-900">${this.getStatusText(listing.status)}</dd>
                        </div>
                    </dl>
                </div>

                <!-- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ -->
                <div>
                    <h4 class="text-lg font-medium text-gray-900 mb-4">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h4>
                    <dl class="space-y-3">
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</dt>
                            <dd class="text-sm text-gray-900">${this.formatPropertyType(listing.property_type)}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å</dt>
                            <dd class="text-sm text-gray-900">${listing.area_total ? listing.area_total + ' –º¬≤' : '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å</dt>
                            <dd class="text-sm text-gray-900">${listing.area_living ? listing.area_living + ' –º¬≤' : '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏</dt>
                            <dd class="text-sm text-gray-900">${listing.area_kitchen ? listing.area_kitchen + ' –º¬≤' : '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–≠—Ç–∞–∂</dt>
                            <dd class="text-sm text-gray-900">${listing.floor ? `${listing.floor}${listing.total_floors || listing.floors_total ? ` –∏–∑ ${listing.total_floors || listing.floors_total}` : ''}` : '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç</dt>
                            <dd class="text-sm text-gray-900">${listing.rooms || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–°–æ—Å—Ç–æ—è–Ω–∏–µ</dt>
                            <dd class="text-sm text-gray-900">${listing.condition || '-'}</dd>
                        </div>
                    </dl>
                </div>

                <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div class="lg:col-span-2">
                    <h4 class="text-lg font-medium text-gray-900 mb-4">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                    <dl class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</dt>
                            <dd class="text-sm text-gray-900">${this.formatDate(listing.created)}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">External ID</dt>
                            <dd class="text-sm text-gray-900">${listing.external_id || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</dt>
                            <dd class="text-sm text-gray-900">${this.formatDate(listing.updated)}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ü—Ä–æ–¥–∞–≤–µ—Ü</dt>
                            <dd class="text-sm text-gray-900">${listing.seller_name || '-'}</dd>
                        </div>
                    </dl>

                    ${listing.description ? `
                        <div class="mt-6">
                            <dt class="text-sm font-medium text-gray-500 mb-2">–û–ø–∏—Å–∞–Ω–∏–µ</dt>
                            <dd class="text-sm text-gray-900 bg-gray-50 p-3 rounded-md">${this.escapeHtml(listing.description)}</dd>
                        </div>
                    ` : ''}
                </div>
            </div>
        `;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    getListingPhotos(listing) {
        const photos = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        if (listing.photos && Array.isArray(listing.photos)) {
            photos.push(...listing.photos);
        } else if (listing.images && Array.isArray(listing.images)) {
            photos.push(...listing.images);
        } else if (listing.photo_urls && Array.isArray(listing.photo_urls)) {
            photos.push(...listing.photo_urls);
        } else if (listing.main_photo) {
            photos.push(listing.main_photo);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Å –æ–¥–∏–Ω–æ—á–Ω—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        if (listing.photo && !photos.includes(listing.photo)) {
            photos.push(listing.photo);
        }
        
        if (listing.image_url && !photos.includes(listing.image_url)) {
            photos.push(listing.image_url);
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ URL
        return photos.filter(photo => 
            photo && 
            typeof photo === 'string' && 
            (photo.startsWith('http://') || photo.startsWith('https://'))
        );
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    closeModal() {
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º Fotorama –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const galleries = document.querySelectorAll('.fotorama');
        galleries.forEach(gallery => {
            if (window.$ && $.fn.fotorama) {
                $(gallery).fotorama().data('fotorama')?.destroy();
            }
        });
        
        document.getElementById('listingModal').classList.add('hidden');
        this.currentListingUrl = null;
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
     */
    openCurrentListing() {
        if (this.currentListingUrl) {
            chrome.tabs.create({ url: this.currentListingUrl });
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    getStatusText(status) {
        const statusMap = {
            'active': '–ê–∫—Ç–∏–≤–Ω–æ–µ',
            'archived': '–ê—Ä—Ö–∏–≤–Ω–æ–µ',
            'sold': '–ü—Ä–æ–¥–∞–Ω–æ',
            'withdrawn': '–°–Ω—è—Ç–æ —Å –ø—Ä–æ–¥–∞–∂–∏'
        };
        return statusMap[status] || status;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    getSegmentName(segmentId) {
        if (!segmentId) return '-';
        const segment = this.segments.find(s => s.id === segmentId);
        return segment ? segment.name : `–°–µ–≥–º–µ–Ω—Ç ${segmentId}`;
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * –û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç
     */
    truncateText(text, maxLength) {
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ ID
     */
    getAddressNameById(addressId) {
        if (!addressId || !this.addresses) return '';
        const address = this.addresses.find(addr => addr.id === addressId);
        return address ? address.address : '';
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
     */
    formatPrice(price) {
        if (!price || price === 0) return '‚ÇΩ0';
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(price);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    formatDate(dateString) {
        if (!dateString) return '-';
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    formatPropertyType(type) {
        const types = {
            'studio': '–°—Ç—É–¥–∏—è',
            '1k': '1–∫',
            '2k': '2–∫', 
            '3k': '3–∫',
            '4k+': '4–∫+',
            'house': '–î–æ–º',
            'land': '–£—á–∞—Å—Ç–æ–∫',
            'commercial': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è'
        };
        return types[type] || type || '-';
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    renderPriceChart(listing) {
        try {
            const chartContainer = document.getElementById(`listing-price-chart-${listing.id}`);
            if (!chartContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            const priceHistory = this.preparePriceHistoryData(listing);
            
            if (priceHistory.length === 0) {
                chartContainer.innerHTML = '<div class="text-center text-gray-500 py-8">–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</div>';
                return;
            }

            const seriesData = priceHistory.map(item => [item.date, item.price]);
            const prices = priceHistory.map(item => item.price);
            const minPrice = Math.min(...prices);
            const maxPrice = Math.max(...prices);

            let series = [{
                "name": "<span class=\"text-sky-500\">—Ü–µ–Ω–∞</span>",
                "data": seriesData
            }];
            let colors = ["#56c2d6"];
            let widths = ["3"];

            var options = {
                chart: {
                    height: 300,
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": [
                                "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                                "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
                            ],
                            "shortMonths": [
                                "–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω",
                                "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"
                            ],
                            "days": [
                                "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", 
                                "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"
                            ],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    type: 'line',
                    shadow: {
                        enabled: false,
                        color: 'rgba(187,187,187,0.47)',
                        top: 3,
                        left: 2,
                        blur: 3,
                        opacity: 1
                    },
                    toolbar: {
                        show: false
                    }
                },
                stroke: {
                    curve: 'stepline',
                    width: widths
                },
                series: series,
                colors: colors,
                xaxis: {
                    type: 'datetime',
                    labels: {
                        format: 'dd MMM'
                    }
                },
                markers: {
                    size: 4,
                    opacity: 0.9,
                    colors: ["#56c2d6"],
                    strokeColor: "#fff",
                    strokeWidth: 2,
                    style: 'inverted',
                    hover: {
                        size: 8
                    }
                },
                tooltip: {
                    shared: false,
                    intersect: true,
                    x: {
                        format: 'dd MMM yyyy'
                    },
                    y: {
                        formatter: (value) => this.formatPrice(value)
                    }
                },
                yaxis: {
                    min: Math.floor(minPrice * 0.95),
                    max: Math.ceil(maxPrice * 1.05),
                    title: {
                        text: '–¶–µ–Ω–∞, ‚ÇΩ'
                    },
                    labels: {
                        formatter: (value) => this.formatPrice(value)
                    }
                },
                grid: {
                    show: true,
                    position: 'back',
                    xaxis: {
                        lines: {
                            show: true,
                        }
                    },
                    yaxis: {
                        lines: {
                            show: true,
                        }
                    },
                    borderColor: '#eeeeee',
                },
                legend: {
                    show: false
                },
                responsive: [{
                    breakpoint: 600,
                    options: {
                        chart: {
                            toolbar: {
                                show: false
                            }
                        }
                    }
                }]
            };

            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chartContainer.innerHTML = '';
            const chart = new ApexCharts(chartContainer, options);
            chart.render();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã:', error);
            const chartContainer = document.getElementById(`listing-price-chart-${listing.id}`);
            if (chartContainer) {
                chartContainer.innerHTML = '<div class="text-center text-red-500 py-8">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞</div>';
            }
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
     */
    preparePriceHistoryData(listing) {
        const history = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if (listing.price_history && Array.isArray(listing.price_history)) {
            listing.price_history.forEach(item => {
                if ((item.new_price || item.price) && item.date) {
                    history.push({
                        date: new Date(item.date).getTime(),
                        price: parseInt(item.new_price || item.price)
                    });
                }
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∞—Ç–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if (listing.price) {
            let endPriceDate;
            
            if (listing.status === 'active') {
                // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                endPriceDate = new Date();
            } else {
                // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π - –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                endPriceDate = new Date(listing.updated || listing.created || Date.now());
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
            const lastHistoryDate = history.length > 0 ? history[history.length - 1].date : 0;
            if (Math.abs(endPriceDate.getTime() - lastHistoryDate) > 24 * 60 * 60 * 1000) {
                history.push({
                    date: endPriceDate.getTime(),
                    price: parseInt(listing.price)
                });
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        history.sort((a, b) => a.date - b.date);
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ü–µ–Ω –ø–æ–¥—Ä—è–¥, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏
        const filtered = [];
        for (let i = 0; i < history.length; i++) {
            if (i === 0 || i === history.length - 1 || history[i].price !== history[i-1].price) {
                filtered.push(history[i]);
            }
        }

        return filtered;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç—ã –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @param {Object} listing - –û–±—ä—è–≤–ª–µ–Ω–∏–µ
     */
    renderListingMap(listing) {
        try {
            const mapContainer = document.getElementById(`listing-map-${listing.id}`);
            if (!mapContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const coords = this.getListingCoordinates(listing);
            if (!coords) {
                mapContainer.innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                return;
            }

            console.log(`üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id} —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:`, coords);

            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
            const listingMap = L.map(`listing-map-${listing.id}`, {
                center: [coords.lat, coords.lng],
                zoom: 16,
                zoomControl: true,
                scrollWheelZoom: false
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∫–∞—Ä—Ç—ã
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(listingMap);

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const listingMarker = L.marker([coords.lat, coords.lng], {
                icon: L.divIcon({
                    className: 'listing-marker',
                    html: `<div style="background: #3b82f6; color: white; border-radius: 50%; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; font-size: 12px; font-weight: bold; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);">üìç</div>`,
                    iconSize: [24, 24],
                    iconAnchor: [12, 12]
                })
            }).addTo(listingMap);

            // –î–æ–±–∞–≤–ª—è–µ–º popup –∫ –º–∞—Ä–∫–µ—Ä—É
            const markerPopupContent = `
                <div style="min-width: 200px;">
                    <strong>${this.escapeHtml(listing.title || '–û–±—ä—è–≤–ª–µ–Ω–∏–µ')}</strong><br>
                    <span style="color: #6b7280; font-size: 12px;">${this.escapeHtml(listing.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}</span><br>
                    <span style="color: #059669; font-weight: bold;">${this.formatPrice(listing.price)}</span>
                    ${listing.price_per_meter ? `<br><span style="color: #6b7280; font-size: 12px;">${this.formatPrice(listing.price_per_meter)}/–º¬≤</span>` : ''}
                </div>
            `;
            listingMarker.bindPopup(markerPopupContent);

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
            if (listing.address_id && listing.address_id !== coords.source) {
                const linkedAddress = this.addresses.find(addr => addr.id === listing.address_id);
                if (linkedAddress && linkedAddress.coordinates && 
                    linkedAddress.coordinates.lat && linkedAddress.coordinates.lng) {
                    
                    const addressCoords = {
                        lat: parseFloat(linkedAddress.coordinates.lat),
                        lng: parseFloat(linkedAddress.coordinates.lng)
                    };

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    const distance = this.calculateDistance(coords, addressCoords);
                    if (distance > 10) { // –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±–æ–ª—å—à–µ 10 –º–µ—Ç—Ä–æ–≤
                        const addressMarker = L.marker([addressCoords.lat, addressCoords.lng], {
                            icon: L.divIcon({
                                className: 'address-marker',
                                html: `<div style="background: #10b981; color: white; border-radius: 50%; width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; font-size: 10px; font-weight: bold; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);">üè†</div>`,
                                iconSize: [20, 20],
                                iconAnchor: [10, 10]
                            })
                        }).addTo(listingMap);

                        addressMarker.bindPopup(`
                            <div style="min-width: 150px;">
                                <strong>–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å</strong><br>
                                <span style="color: #6b7280; font-size: 12px;">${this.escapeHtml(linkedAddress.address || '–ê–¥—Ä–µ—Å')}</span><br>
                                <span style="color: #059669; font-size: 11px;">–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(distance)}–º</span>
                            </div>
                        `);

                        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏
                        L.polyline([
                            [coords.lat, coords.lng],
                            [addressCoords.lat, addressCoords.lng]
                        ], {
                            color: '#6b7280',
                            weight: 2,
                            opacity: 0.7,
                            dashArray: '5, 5'
                        }).addTo(listingMap);

                        // –ü–æ–¥–≥–æ–Ω—è–µ–º –≤–∏–¥ –∫–∞—Ä—Ç—ã –ø–æ–¥ –æ–±–∞ –º–∞—Ä–∫–µ—Ä–∞
                        const group = new L.featureGroup([listingMarker, addressMarker]);
                        listingMap.fitBounds(group.getBounds().pad(0.1));
                    }
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –æ–±–ª–∞—Å—Ç–∏
            this.addAddressLayerToListingMap(listingMap, coords, listing.id);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            mapContainer._leafletMap = listingMap;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            const mapContainer = document.getElementById(`listing-map-${listing.id}`);
            if (mapContainer) {
                mapContainer.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã</div>';
            }
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–π –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async addAddressLayerToListingMap(listingMap, centerCoords, listingId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –æ–±–ª–∞—Å—Ç–∏
            const addresses = await this.getAddressesInArea();
            
            if (!Array.isArray(addresses) || addresses.length === 0) {
                return;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–∏–∑–ª–µ–∂–∞—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ (–≤ –º–µ—Ç—Ä–∞—Ö)
            const radiusMeters = 500;
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            const nearbyAddresses = addresses.filter(address => {
                if (!address.coordinates || !address.coordinates.lat || !address.coordinates.lng) {
                    return false;
                }
                
                const addressCoords = {
                    lat: parseFloat(address.coordinates.lat),
                    lng: parseFloat(address.coordinates.lng)
                };
                
                const distance = this.calculateDistance(centerCoords, addressCoords);
                return distance <= radiusMeters;
            });

            console.log(`üó∫Ô∏è –ù–∞–π–¥–µ–Ω–æ ${nearbyAddresses.length} –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ ${radiusMeters}–º –æ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è`);

            // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –±–ª–∏–∑–ª–µ–∂–∞—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
            for (const address of nearbyAddresses) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω
                    let markerColor = '#3b82f6'; // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if (address.wall_material_id) {
                        try {
                            const wallMaterial = await db.get('wall_materials', address.wall_material_id);
                            if (wallMaterial && wallMaterial.color) {
                                markerColor = wallMaterial.color;
                            }
                        } catch (error) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –¥–ª—è –∞–¥—Ä–µ—Å–∞:', address.id);
                        }
                    }

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É –º–∞—Ä–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
                    const floorCount = address.floors_count || 0;
                    let markerHeight;
                    if (floorCount >= 1 && floorCount <= 5) {
                        markerHeight = 8;
                    } else if (floorCount > 5 && floorCount <= 10) {
                        markerHeight = 12;
                    } else if (floorCount > 10 && floorCount <= 20) {
                        markerHeight = 16;
                    } else if (floorCount > 20) {
                        markerHeight = 20;
                    } else {
                        markerHeight = 8; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
                    }

                    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –∞–¥—Ä–µ—Å–∞
                    const addressMarker = L.marker([address.coordinates.lat, address.coordinates.lng], {
                        icon: L.divIcon({
                            className: 'address-marker',
                            html: `
                                <div class="leaflet-marker-icon-wrapper" style="position: relative;">
                                    <div style="
                                        width: 0; 
                                        height: 0; 
                                        border-left: 6px solid transparent; 
                                        border-right: 6px solid transparent; 
                                        border-top: ${markerHeight}px solid ${markerColor};
                                        filter: drop-shadow(0 1px 2px rgba(0,0,0,0.2));
                                        opacity: 0.7;
                                    "></div>
                                    ${address.build_year ? `<span class="leaflet-marker-iconlabel" style="
                                        position: absolute; 
                                        left: 12px; 
                                        top: 0px; 
                                        font-size: 9px; 
                                        font-weight: 500; 
                                        color: #374151; 
                                        background: rgba(255,255,255,0.8); 
                                        padding: 1px 3px; 
                                        border-radius: 2px; 
                                        white-space: nowrap;
                                        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
                                    ">${address.build_year}</span>` : ''}
                                </div>
                            `,
                            iconSize: [12, markerHeight],
                            iconAnchor: [6, markerHeight]
                        })
                    }).addTo(listingMap);

                    // –î–æ–±–∞–≤–ª—è–µ–º popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–¥—Ä–µ—Å–µ
                    const typeText = this.getAddressTypeText(address.type);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω
                    let wallMaterialText = '–ù–µ —É–∫–∞–∑–∞–Ω';
                    if (address.wall_material_id) {
                        try {
                            const wallMaterial = await db.get('wall_materials', address.wall_material_id);
                            if (wallMaterial) {
                                wallMaterialText = wallMaterial.name;
                            }
                        } catch (error) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –¥–ª—è popup:', address.id);
                        }
                    }

                    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    const distance = this.calculateDistance(centerCoords, {
                        lat: parseFloat(address.coordinates.lat),
                        lng: parseFloat(address.coordinates.lng)
                    });
                    
                    addressMarker.bindPopup(`
                        <div class="address-popup" style="min-width: 200px;">
                            <div class="header">
                                <strong>üìç –ê–¥—Ä–µ—Å</strong><br>
                                <div class="address-title" style="font-size: 13px;">${address.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                            </div>
                            
                            <div class="meta" style="margin-top: 6px;">
                                <small>–¢–∏–ø: <strong>${typeText}</strong></small><br>
                                <small>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <strong>${Math.round(distance)}–º</strong></small>
                                ${address.floors_count ? `<br><small>–≠—Ç–∞–∂–µ–π: ${address.floors_count}</small>` : ''}
                                <br><small>–ú–∞—Ç–µ—Ä–∏–∞–ª: <strong>${wallMaterialText}</strong></small>
                                ${address.build_year ? `<br><small>–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: ${address.build_year}</small>` : ''}
                            </div>
                            
                            <div class="actions" style="margin-top: 12px;">
                                <button class="select-address-btn" 
                                        data-address-id="${address.id}" 
                                        data-address-name="${this.escapeHtml(address.address || '–ù–µ —É–∫–∞–∑–∞–Ω')}"
                                        style="width: 100%; padding: 6px 12px; background: #3b82f6; color: white; border: none; border-radius: 4px; font-size: 12px; cursor: pointer; transition: background-color 0.2s;">
                                    ‚úì –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å
                                </button>
                            </div>
                        </div>
                    `, {
                        maxWidth: 250,
                        className: 'address-popup-container'
                    });

                } catch (markerError) {
                    console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${address.id}:`, markerError);
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
            setTimeout(() => {
                this.attachAddressSelectionHandlers(listingId);
            }, 100);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—è –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –≤ popup-–∞—Ö –∫–∞—Ä—Ç—ã
     */
    attachAddressSelectionHandlers(listingId) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è CSP –æ—à–∏–±–æ–∫
        document.addEventListener('click', (event) => {
            if (event.target.classList.contains('select-address-btn')) {
                const addressId = event.target.getAttribute('data-address-id');
                const addressName = event.target.getAttribute('data-address-name');
                
                console.log(`üéØ –í—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å ${addressId}: ${addressName}`);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
                this.setAddressInSelector(listingId, addressId, addressName);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
                const popup = event.target.closest('.leaflet-popup');
                if (popup) {
                    popup.style.display = 'none';
                }
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞
        const style = document.createElement('style');
        style.textContent = `
            .select-address-btn:hover {
                background-color: #2563eb !important;
            }
        `;
        document.head.appendChild(style);
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
     */
    setAddressInSelector(listingId, addressId, addressName) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç select
            const selectElement = document.getElementById(`addressSelect_${listingId}`);
            if (!selectElement) {
                console.error('–≠–ª–µ–º–µ–Ω—Ç select –Ω–µ –Ω–∞–π–¥–µ–Ω:', `addressSelect_${listingId}`);
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–±—ã—á–Ω–æ–º select
            selectElement.value = addressId;

            // –ï—Å–ª–∏ –µ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä SlimSelect, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            const slimSelectInstance = this[`addressSlimSelect_${listingId}`];
            if (slimSelectInstance) {
                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ SlimSelect
                    slimSelectInstance.setSelected(addressId);
                    console.log(`üìç –ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ SlimSelect: ${addressName}`);
                } catch (slimError) {
                    console.warn('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ SlimSelect, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π select:', slimError);
                    // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π select
                    selectElement.value = addressId;
                    selectElement.dispatchEvent(new Event('change'));
                    console.log(`üìç –ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ–±—ã—á–Ω–æ–º select: ${addressName}`);
                }
            } else {
                console.log(`üìç –ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ–±—ã—á–Ω–æ–º select: ${addressName}`);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            this.showNotification(`–ê–¥—Ä–µ—Å "${addressName}" –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.`, 'success');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥—Ä–µ—Å–∞ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–¥—Ä–µ—Å–∞', 'error');
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    togglePriceHistoryPanel(listingId) {
        const content = document.getElementById(`priceHistoryPanelContent-${listingId}`);
        const chevron = document.getElementById(`priceHistoryPanelChevron-${listingId}`);
        
        if (!content || !chevron) return;

        const isHidden = content.style.display === 'none';
        
        if (isHidden) {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            content.style.display = 'block';
            chevron.style.transform = 'rotate(0deg)';
        } else {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            content.style.display = 'none';
            chevron.style.transform = 'rotate(-90deg)';
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    async initializePriceHistoryTable(listingId, listing) {
        try {
            const tableElement = document.getElementById(`priceHistoryTable-${listingId}`);
            if (!tableElement) return;

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            const tableData = this.preparePriceHistoryTableData(listing);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataTable
            const dataTable = $(tableElement).DataTable({
                data: tableData,
                language: {
                    url: '../libs/datatables/ru.json'
                },
                pageLength: 10,
                searching: false,
                ordering: true,
                order: [[0, 'asc']], // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
                columnDefs: [
                    {
                        targets: 2, // –ö–æ–ª–æ–Ω–∫–∞ "–î–µ–π—Å—Ç–≤–∏—è"
                        orderable: false,
                        searchable: false,
                        className: 'text-center',
                        width: '120px'
                    }
                ],
                columns: [
                    {
                        title: '–î–∞—Ç–∞',
                        data: 'date',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                const date = new Date(data);
                                return date.toLocaleDateString('ru-RU') + ' ' + date.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
                            } else if (type === 'sort' || type === 'type') {
                                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                                return new Date(data).getTime();
                            }
                            return data;
                        }
                    },
                    {
                        title: '–¶–µ–Ω–∞',
                        data: 'price',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                return new Intl.NumberFormat('ru-RU').format(data) + ' ‚ÇΩ';
                            }
                            return data;
                        }
                    },
                    {
                        title: '–î–µ–π—Å—Ç–≤–∏—è',
                        data: null,
                        render: function (data, type, row) {
                            return `
                                <div class="flex space-x-2 justify-center">
                                    <button class="edit-price-btn text-blue-600 hover:text-blue-800 text-sm" data-listing-id="${listingId}" data-index="${row.index}">
                                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                    </button>
                                    <button class="delete-price-btn text-red-600 hover:text-red-800 text-sm" data-listing-id="${listingId}" data-index="${row.index}">
                                        –£–¥–∞–ª–∏—Ç—å
                                    </button>
                                </div>
                            `;
                        }
                    }
                ]
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ DataTable
            this[`priceHistoryTable_${listingId}`] = dataTable;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
            $(tableElement).on('click', '.edit-price-btn', (e) => {
                const index = $(e.target).data('index');
                this.editPriceEntry(listingId, index);
            });

            $(tableElement).on('click', '.delete-price-btn', (e) => {
                const index = $(e.target).data('index');
                this.deletePriceEntry(listingId, index);
            });

            console.log(`üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId}`);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    preparePriceHistoryTableData(listing) {
        const data = [];
        let index = 0;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω (–±–µ–∑ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã)
        if (listing.price_history && Array.isArray(listing.price_history)) {
            listing.price_history.forEach(historyItem => {
                // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: new_price (Avito) –∏ price (Inpars)
                const price = historyItem.new_price || historyItem.price;
                if (historyItem.date && price) {
                    data.push({
                        date: historyItem.date,
                        price: price,
                        index: index++,
                        isCurrent: false
                    });
                }
            });
        }

        return data;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
     */
    initializePriceEditModal(listingId) {
        const modal = document.getElementById(`editPriceModal-${listingId}`);
        const form = document.getElementById(`editPriceForm-${listingId}`);
        const priceInput = document.getElementById(`priceInput-${listingId}`);
        const dateInput = document.getElementById(`dateInput-${listingId}`);
        const cancelButton = document.getElementById(`cancelEditPrice-${listingId}`);
        
        if (!modal || !form || !priceInput || !dateInput || !cancelButton) return;

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–∏ –≤–≤–æ–¥–µ
        priceInput.addEventListener('input', (e) => {
            let value = e.target.value.replace(/[^\d]/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            if (value) {
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
                value = parseInt(value).toLocaleString('ru-RU');
            }
            e.target.value = value;
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeModal = () => {
            modal.classList.add('hidden');
            form.reset();
            priceInput.value = '';
            dateInput.value = '';
            this.currentEditingPriceIndex = null;
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
        cancelButton.addEventListener('click', closeModal);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω (overlay)
        modal.addEventListener('click', (e) => {
            if (e.target === modal || e.target.classList.contains('z-0')) {
                closeModal();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const priceValue = priceInput.value.replace(/[^\d]/g, ''); // –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            const price = parseInt(priceValue);
            const date = new Date(dateInput.value);

            if (!price || price <= 0) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É');
                return;
            }

            if (!dateInput.value || isNaN(date.getTime())) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É');
                return;
            }

            this.savePriceEntry(listingId, this.currentEditingPriceIndex, price, date);
            closeModal();
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ —Ü–µ–Ω–µ
     */
    addPriceEntry(listingId) {
        this.currentEditingPriceIndex = null;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const modal = document.getElementById(`editPriceModal-${listingId}`);
        const title = document.getElementById(`editPriceModalTitle-${listingId}`);
        const dateInput = document.getElementById(`dateInput-${listingId}`);
        
        if (!modal || !title || !dateInput) return;

        title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã';
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        const now = new Date();
        const isoString = now.getFullYear() + '-' + 
            String(now.getMonth() + 1).padStart(2, '0') + '-' + 
            String(now.getDate()).padStart(2, '0') + 'T' +
            String(now.getHours()).padStart(2, '0') + ':' + 
            String(now.getMinutes()).padStart(2, '0');
        dateInput.value = isoString;
        
        modal.classList.remove('hidden');
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ü–µ–Ω–µ
     */
    editPriceEntry(listingId, index) {
        const listing = this.listings.find(l => l.id === listingId);
        if (!listing) return;

        const tableData = this.preparePriceHistoryTableData(listing);
        const entry = tableData.find(item => item.index === index);
        
        if (!entry) return;

        this.currentEditingPriceIndex = index;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const modal = document.getElementById(`editPriceModal-${listingId}`);
        const title = document.getElementById(`editPriceModalTitle-${listingId}`);
        const priceInput = document.getElementById(`priceInput-${listingId}`);
        const dateInput = document.getElementById(`dateInput-${listingId}`);
        
        if (!modal || !title || !priceInput || !dateInput) return;

        title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        priceInput.value = entry.price.toLocaleString('ru-RU');
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è datetime-local
        const date = new Date(entry.date);
        const isoString = date.getFullYear() + '-' + 
            String(date.getMonth() + 1).padStart(2, '0') + '-' + 
            String(date.getDate()).padStart(2, '0') + 'T' +
            String(date.getHours()).padStart(2, '0') + ':' + 
            String(date.getMinutes()).padStart(2, '0');
        dateInput.value = isoString;
        
        modal.classList.remove('hidden');
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ü–µ–Ω–µ
     */
    async deletePriceEntry(listingId, index) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω?')) {
            return;
        }

        try {
            const listing = await db.getListing(listingId);
            if (!listing) return;

            const tableData = this.preparePriceHistoryTableData(listing);
            const entry = tableData.find(item => item.index === index);
            
            if (!entry) return;


            // –£–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É
            if (listing.price_history && Array.isArray(listing.price_history)) {
                // –ò–Ω–¥–µ–∫—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Å—Å–∏–≤–µ price_history
                if (index >= 0 && index < listing.price_history.length) {
                    listing.price_history.splice(index, 1);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                if (listing.price_history.length > 0) {
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                    listing.price_history.sort((a, b) => new Date(a.date) - new Date(b.date));
                    const latestPrice = listing.price_history[listing.price_history.length - 1];
                    listing.price = latestPrice.price || latestPrice.new_price;
                    
                    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ –º2
                    if (listing.area_total && listing.area_total > 0) {
                        listing.price_per_meter = Math.round(listing.price / listing.area_total);
                    }
                }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await db.updateListing(listing);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ –æ–±—ä–µ–∫—Ç
            if (listing.object_id) {
                const oldListing = { ...listing, price_history: [] }; // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                await window.realEstateObjectManager.updateObjectOnListingChange(listingId, oldListing, listing);
                console.log(`üè† –û–±–Ω–æ–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç ${listing.object_id} –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId}`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            this.refreshPriceHistoryTable(listingId, listing);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
            this.renderPriceChart(listing);
            
            // –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
            await this.loadDuplicatesTable();

            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId}`);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ü–µ–Ω–µ
     */
    async savePriceEntry(listingId, index, price, date) {
        try {
            const listing = await db.getListing(listingId);
            if (!listing) return;

            if (!listing.price_history) {
                listing.price_history = [];
            }

            if (index !== null && index !== undefined) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                const tableData = this.preparePriceHistoryTableData(listing);
                const entry = tableData.find(item => item.index === index);
                
                if (entry && entry.isCurrent) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    listing.price = price;
                    listing.updated_at = date;
                } else if (entry) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
                    const historyIndex = listing.price_history.findIndex(item => {
                        const itemDate = new Date(item.date);
                        const entryDate = new Date(entry.date);
                        return itemDate.getTime() === entryDate.getTime() && item.new_price === entry.price;
                    });
                    
                    if (historyIndex !== -1) {
                        listing.price_history[historyIndex].new_price = price;
                        listing.price_history[historyIndex].date = date;
                    }
                }
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                listing.price_history.push({
                    date: date,
                    old_price: listing.price,
                    new_price: price
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –ø–æ–∑–∂–µ
                const currentDate = new Date(listing.updated_at || listing.created_at);
                if (date > currentDate) {
                    listing.price = price;
                    listing.updated_at = date;
                }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await db.updateListing(listing);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ –æ–±—ä–µ–∫—Ç
            if (listing.object_id) {
                const oldListing = { ...listing, price_history: [] }; // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                await window.realEstateObjectManager.updateObjectOnListingChange(listingId, oldListing, listing);
                console.log(`üè† –û–±–Ω–æ–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç ${listing.object_id} –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId}`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –≥—Ä–∞—Ñ–∏–∫
            this.refreshPriceHistoryTable(listingId, listing);

            console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId}`);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    refreshPriceHistoryTable(listingId, listing) {
        const dataTable = this[`priceHistoryTable_${listingId}`];
        if (dataTable) {
            const newData = this.preparePriceHistoryTableData(listing);
            dataTable.clear();
            dataTable.rows.add(newData);
            dataTable.draw();
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ Haversine)
     * @param {Object} point1 - –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ {lat, lng}
     * @param {Object} point2 - –í—Ç–æ—Ä–∞—è —Ç–æ—á–∫–∞ {lat, lng}
     * @returns {number} –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
     */
    calculateDistance(point1, point2) {
        const R = 6371e3; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        const œÜ1 = point1.lat * Math.PI / 180;
        const œÜ2 = point2.lat * Math.PI / 180;
        const ŒîœÜ = (point2.lat - point1.lat) * Math.PI / 180;
        const ŒîŒª = (point2.lng - point1.lng) * Math.PI / 180;

        const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
                  Math.cos(œÜ1) * Math.cos(œÜ2) *
                  Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

        return R * c;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–≤—ë—Ä–Ω—É—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @param {Object} listing - –û–±—ä—è–≤–ª–µ–Ω–∏–µ
     * @returns {string} –ö—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å –∞–¥—Ä–µ—Å–∞
     */
    getAddressStatusText(listing) {
        if (listing.address_id) {
            if (listing.address_match_confidence) {
                const confidence = this.getAddressConfidenceText(listing.address_match_confidence);
                const distance = listing.address_distance ? ` (${Math.round(listing.address_distance)}–º)` : '';
                return `${confidence}${distance}`;
            } else {
                return '–û–ø—Ä–µ–¥–µ–ª—ë–Ω';
            }
        } else {
            return '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω';
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞–¥—Ä–µ—Å–∞
     * @param {Object} listing - –û–±—ä—è–≤–ª–µ–Ω–∏–µ  
     * @returns {string} CSS –∫–ª–∞—Å—Å –¥–ª—è —Ü–≤–µ—Ç–∞
     */
    getAddressStatusClass(listing) {
        if (listing.address_id) {
            if (listing.address_match_confidence) {
                return this.getConfidenceColor(listing.address_match_confidence);
            } else {
                return 'text-green-600';
            }
        } else {
            return 'text-orange-600';
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
     * @param {string} listingId - ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async toggleLocationPanel(listingId) {
        const content = document.getElementById(`locationPanelContent-${listingId}`);
        const chevron = document.getElementById(`locationPanelChevron-${listingId}`);
        
        if (!content || !chevron) return;

        const isHidden = content.style.display === 'none';
        
        if (isHidden) {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            content.style.display = 'block';
            chevron.style.transform = 'rotate(0deg)';
            
            // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –µ—â—ë –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—ë
            const mapContainer = document.getElementById(`listing-map-${listingId}`);
            if (mapContainer && !mapContainer._leafletMap) {
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
                setTimeout(async () => {
                    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ this.listings
                    let listing = this.listings.find(l => l.id === listingId);
                    
                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    if (!listing) {
                        console.log('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ this.listings –¥–ª—è –∫–∞—Ä—Ç—ã, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', listingId);
                        const allListings = await db.getListings();
                        listing = allListings.find(l => l.id === listingId);
                    }
                    
                    if (listing) {
                        this.renderListingMap(listing);
                    } else {
                        console.warn('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:', listingId);
                        mapContainer.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã</div>';
                    }
                }, 100);
            }
        } else {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            content.style.display = 'none';
            chevron.style.transform = 'rotate(-90deg)';
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –æ–±–ª–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ç–∞–± "–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
     */
    async deleteDataFromTab() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–ª–∞—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!this.currentArea || !this.currentAreaId) {
                this.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            this.showProgressBar('delete-data');
            this.updateProgressBar('delete-data', 10, '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const allListings = await db.getListings();
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –≤—Ö–æ–¥—è—â–∏–µ –≤ –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏
            const listingsInArea = allListings.filter(listing => {
                if (!listing.coordinates || !listing.coordinates.lat || !(listing.coordinates.lng || listing.coordinates.lon)) {
                    return false;
                }
                
                const lat = listing.coordinates.lat;
                const lng = listing.coordinates.lng || listing.coordinates.lon;
                
                return this.currentArea.containsPoint(lat, lng);
            });

            this.updateProgressBar('delete-data', 30, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é...');

            if (listingsInArea.length === 0) {
                this.hideProgressBar('delete-data');
                this.showInfo('–í –æ–±–ª–∞—Å—Ç–∏ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            const confirmed = confirm(
                `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${listingsInArea.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –æ–±–ª–∞—Å—Ç–∏ "${this.currentArea.name}"?\n\n` +
                `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`
            );

            if (!confirmed) {
                this.hideProgressBar('delete-data');
                return;
            }

            this.updateProgressBar('delete-data', 50, '–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');

            // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            let deletedCount = 0;
            let errorCount = 0;
            const totalCount = listingsInArea.length;

            for (let i = 0; i < listingsInArea.length; i++) {
                const listing = listingsInArea[i];
                try {
                    await db.delete('listings', listing.id);
                    deletedCount++;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    const progress = 50 + (i + 1) / totalCount * 40; // –æ—Ç 50% –¥–æ 90%
                    this.updateProgressBar('delete-data', progress, `–£–¥–∞–ª–µ–Ω–æ ${deletedCount} –∏–∑ ${totalCount}`);
                    
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}:`, error);
                    errorCount++;
                }
            }

            this.updateProgressBar('delete-data', 95, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏ —Ç–∞–±–ª–∏—Ü—ã
            await this.loadMapData();
            if (this.duplicatesTable) {
                await this.loadDuplicatesTable();
            }

            this.updateProgressBar('delete-data', 100, '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (errorCount === 0) {
                this.showSuccess(`–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${deletedCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –æ–±–ª–∞—Å—Ç–∏`);
            } else {
                this.showWarning(`–£–¥–∞–ª–µ–Ω–æ ${deletedCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –æ—à–∏–±–æ–∫: ${errorCount}`);
            }

            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${deletedCount}, –æ—à–∏–±–æ–∫: ${errorCount}`);

            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                this.hideProgressBar('delete-data');
            }, 2000);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
            this.hideProgressBar('delete-data');
            this.showError(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${error.message}`);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async updateSourcesChart() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const allListings = await db.getListings();
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏
            const listings = await this.getListingsInArea();
            
            console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏`);
            
            if (listings.length === 0) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏, –æ—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                this.renderSourcesChart([], []);
                this.updateSourcesTable([]);
                return;
            }
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            const sourceCounts = {};
            const sourceNames = {
                'avito.ru': 'Avito',
                'avito': 'Avito',
                'cian.ru': 'Cian',
                'cian': 'Cian',
                'yandex.ru': '–Ø–Ω–¥–µ–∫—Å.–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                'yandex': '–Ø–Ω–¥–µ–∫—Å.–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                'domclick.ru': 'Domclick',
                'domclick': 'Domclick',
                'inpars': 'Inpars (–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä)',
                'manual': '–í—Ä—É—á–Ω—É—é',
                'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            };

            listings.forEach((listing, index) => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                let displaySource = 'unknown';
                
                
                if (listing.source_metadata && listing.source_metadata.original_source) {
                    displaySource = listing.source_metadata.original_source;
                } else if (listing.source) {
                    displaySource = listing.source;
                }
                
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                if (displaySource.includes('avito')) {
                    displaySource = 'avito';
                } else if (displaySource.includes('cian')) {
                    displaySource = 'cian';
                } else if (displaySource.includes('yandex')) {
                    displaySource = 'yandex';
                } else if (displaySource.includes('domclick')) {
                    displaySource = 'domclick';
                }
                
                sourceCounts[displaySource] = (sourceCounts[displaySource] || 0) + 1;
            });

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            const chartData = [];
            const tableData = [];
            const colors = ['#0ea5e9', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'];
            
            let colorIndex = 0;
            const totalListings = listings.length;
            
            console.log('üìà –ü–æ–¥—Å—á–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', sourceCounts);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π (—É–±—ã–≤–∞–Ω–∏–µ)
            const sortedSources = Object.entries(sourceCounts)
                .sort(([,a], [,b]) => b - a);
            
            sortedSources.forEach(([source, count]) => {
                const displayName = sourceNames[source] || source;
                const percentage = totalListings > 0 ? ((count / totalListings) * 100).toFixed(1) : 0;
                
                chartData.push({
                    name: displayName,
                    data: count
                });
                
                tableData.push({
                    source: displayName,
                    count: count,
                    percentage: percentage,
                    color: colors[colorIndex % colors.length]
                });
                
                colorIndex++;
            });

            // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            this.renderSourcesChart(chartData, colors);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            this.updateSourcesTable(tableData);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    renderSourcesChart(data, colors) {
        const chartElement = document.getElementById('sourcesChart');
        if (!chartElement) return;

        // –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –µ–≥–æ
        if (this.sourcesChartInstance) {
            this.sourcesChartInstance.destroy();
        }

        if (data.length === 0) {
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
            return;
        }

        const options = {
            series: data.map(item => item.data),
            chart: {
                type: 'pie',
                height: 320,
                toolbar: {
                    show: false
                }
            },
            labels: data.map(item => item.name),
            colors: colors,
            legend: {
                position: 'bottom',
                horizontalAlign: 'center'
            },
            plotOptions: {
                pie: {
                    donut: {
                        size: '45%'
                    }
                }
            },
            dataLabels: {
                enabled: true,
                formatter: function(val, opts) {
                    return Math.round(val) + '%';
                }
            },
            tooltip: {
                y: {
                    formatter: function(val) {
                        return val + ' –æ–±—ä—è–≤–ª–µ–Ω–∏–π';
                    }
                }
            },
            responsive: [{
                breakpoint: 480,
                options: {
                    chart: {
                        height: 300
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }]
        };

        try {
            this.sourcesChartInstance = new ApexCharts(chartElement, options);
            this.sourcesChartInstance.render().catch(error => {
                console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
                chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</div>';
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</div>';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    updateSourcesTable(data) {
        const tableElement = document.getElementById('sourcesTable');
        if (!tableElement) return;

        if (data.length === 0) {
            tableElement.innerHTML = '<div class="text-sm text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
            return;
        }

        const tableHTML = data.map(item => `
            <div class="flex justify-between items-center py-2 border-b border-gray-100 last:border-b-0">
                <div class="flex items-center">
                    <div class="w-3 h-3 rounded-full mr-3" style="background-color: ${item.color}"></div>
                    <span class="text-sm font-medium text-gray-900">${item.source}</span>
                </div>
                <div class="text-right">
                    <div class="text-sm font-semibold text-gray-900">${item.count}</div>
                    <div class="text-xs text-gray-500">${item.percentage}%</div>
                </div>
            </div>
        `).join('');

        tableElement.innerHTML = tableHTML;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
     */
    async updateAddressAnalyticsCharts() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏
            const listings = await this.getListingsInArea();
            
            console.log(`üìç –ê–Ω–∞–ª–∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏`);
            
            if (listings.length === 0) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –æ—á–∏—â–∞–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏
                this.renderAddressConfidenceChart([]);
                this.renderAddressMethodsChart([]);
                this.updateAddressStatsTable({});
                return;
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∞–¥—Ä–µ—Å–æ–≤
            const analytics = this.analyzeAddressDetectionData(listings);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            this.renderAddressConfidenceChart(analytics.confidenceData);
            
            setTimeout(() => {
                this.renderAddressMethodsChart(analytics.methodsData);
            }, 200);
            
            this.updateAddressStatsTable(analytics.stats);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤:', error);
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∞–¥—Ä–µ—Å–æ–≤
     */
    analyzeAddressDetectionData(listings) {
        const stats = {
            total: listings.length,
            withAddresses: 0,
            withoutAddresses: 0,
            high: 0,
            medium: 0,
            low: 0,
            veryLow: 0,
            manual: 0,
            noMatch: 0
        };
        
        const confidenceCounts = {};
        const methodCounts = {};
        
        listings.forEach(listing => {
            if (listing.address_id) {
                stats.withAddresses++;
                
                const confidence = listing.address_match_confidence || 'unknown';
                const method = listing.address_match_method || 'unknown';
                
                // –ü–æ–¥—Å—á–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º —Ç–æ—á–Ω–æ—Å—Ç–∏
                switch (confidence) {
                    case 'high':
                        stats.high++;
                        break;
                    case 'medium':
                        stats.medium++;
                        break;
                    case 'low':
                        stats.low++;
                        break;
                    case 'very_low':
                        stats.veryLow++;
                        break;
                    case 'manual':
                        stats.manual++;
                        break;
                    default:
                        stats.noMatch++;
                }
                
                // –ü–æ–¥—Å—á–µ—Ç –ø–æ –º–µ—Ç–æ–¥–∞–º
                methodCounts[method] = (methodCounts[method] || 0) + 1;
                confidenceCounts[confidence] = (confidenceCounts[confidence] || 0) + 1;
            } else {
                stats.withoutAddresses++;
                stats.noMatch++;
                confidenceCounts['no_address'] = (confidenceCounts['no_address'] || 0) + 1;
            }
        });
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        const confidenceData = this.prepareConfidenceChartData(confidenceCounts, stats.total);
        const methodsData = this.prepareMethodsChartData(methodCounts);
        
        return {
            stats,
            confidenceData,
            methodsData
        };
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
     */
    prepareConfidenceChartData(counts, total) {
        const labels = {
            'high': '–í—ã—Å–æ–∫–∞—è',
            'medium': '–°—Ä–µ–¥–Ω—è—è', 
            'low': '–ù–∏–∑–∫–∞—è',
            'very_low': '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è',
            'manual': '–í—Ä—É—á–Ω—É—é',
            'no_address': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
        };
        
        const colors = {
            'high': '#10b981',
            'medium': '#f59e0b',
            'low': '#ef4444',
            'very_low': '#dc2626',
            'manual': '#8b5cf6',
            'no_address': '#6b7280'
        };
        
        return Object.entries(counts).map(([confidence, count]) => ({
            name: labels[confidence] || confidence,
            value: count,
            percentage: total > 0 ? ((count / total) * 100).toFixed(1) : 0,
            color: colors[confidence] || '#6b7280'
        })).sort((a, b) => b.value - a.value);
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ—Ç–æ–¥–æ–≤
     */
    prepareMethodsChartData(counts) {
        const labels = {
            'exact_geo': '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ',
            'near_geo_text': '–ë–ª–∏–∑–∫–æ–µ + —Ç–µ–∫—Å—Ç',
            'extended_geo_text': '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫',
            'global_text': '–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫',
            'manual_selection': '–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä',
            'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        };
        
        return Object.entries(counts).map(([method, count]) => ({
            name: labels[method] || method,
            value: count
        })).sort((a, b) => b.value - a.value);
    }


    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     */
    renderAddressConfidenceChart(data) {
        const chartElement = document.getElementById('addressConfidenceChart');
        if (!chartElement) return;

        if (this.addressConfidenceChartInstance) {
            this.addressConfidenceChartInstance.destroy();
        }

        if (data.length === 0) {
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
            return;
        }

        const options = {
            series: data.map(item => item.value),
            chart: {
                type: 'pie',
                height: 250
            },
            labels: data.map(item => item.name),
            colors: data.map(item => item.color),
            legend: {
                position: 'bottom',
                fontSize: '12px'
            },
            dataLabels: {
                enabled: true,
                formatter: function(val) {
                    return Math.round(val) + '%';
                }
            },
            tooltip: {
                y: {
                    formatter: function(val) {
                        return val + ' –æ–±—ä—è–≤–ª–µ–Ω–∏–π';
                    }
                }
            }
        };

        this.addressConfidenceChartInstance = new ApexCharts(chartElement, options);
        this.addressConfidenceChartInstance.render();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     */
    renderAddressMethodsChart(data) {
        const chartElement = document.getElementById('addressMethodsChart');
        if (!chartElement) return;

        if (this.addressMethodsChartInstance) {
            this.addressMethodsChartInstance.destroy();
        }

        if (data.length === 0) {
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
            return;
        }

        const options = {
            series: [{
                data: data.map(item => item.value)
            }],
            chart: {
                type: 'bar',
                height: 250,
                horizontal: true
            },
            xaxis: {
                categories: data.map(item => item.name)
            },
            colors: ['#0ea5e9'],
            dataLabels: {
                enabled: false
            },
            tooltip: {
                y: {
                    formatter: function(val) {
                        return val + ' –æ–±—ä—è–≤–ª–µ–Ω–∏–π';
                    }
                }
            }
        };

        this.addressMethodsChartInstance = new ApexCharts(chartElement, options);
        this.addressMethodsChartInstance.render();
    }


    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
     */
    updateAddressStatsTable(stats) {
        const tableElement = document.getElementById('addressStatsTable');
        if (!tableElement) return;

        if (!stats || stats.total === 0) {
            tableElement.innerHTML = '<div class="text-sm text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
            return;
        }

        const tableHTML = `
            <div class="space-y-2">
                <div class="flex justify-between text-sm">
                    <span class="text-gray-600">–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</span>
                    <span class="font-semibold text-gray-900">${stats.total}</span>
                </div>
                <div class="flex justify-between text-sm">
                    <span class="text-gray-600">–° –∞–¥—Ä–µ—Å–∞–º–∏:</span>
                    <span class="font-semibold text-green-600">${stats.withAddresses}</span>
                </div>
                <div class="flex justify-between text-sm">
                    <span class="text-gray-600">–ë–µ–∑ –∞–¥—Ä–µ—Å–æ–≤:</span>
                    <span class="font-semibold text-red-600">${stats.withoutAddresses}</span>
                </div>
                <hr class="border-gray-200">
                <div class="flex justify-between text-sm">
                    <span class="text-green-600">–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:</span>
                    <span class="font-semibold">${stats.high}</span>
                </div>
                <div class="flex justify-between text-sm">
                    <span class="text-yellow-600">–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å:</span>
                    <span class="font-semibold">${stats.medium}</span>
                </div>
                <div class="flex justify-between text-sm">
                    <span class="text-red-600">–ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:</span>
                    <span class="font-semibold">${stats.low + stats.veryLow}</span>
                </div>
                <div class="flex justify-between text-sm">
                    <span class="text-purple-600">–í—Ä—É—á–Ω—É—é:</span>
                    <span class="font-semibold">${stats.manual}</span>
                </div>
            </div>
        `;

        tableElement.innerHTML = tableHTML;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
     */
    initializeManagementPanel(listingId) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        const statusSelect = document.getElementById(`statusSelect-${listingId}`);
        if (statusSelect) {
            const statusSlimSelect = new SlimSelect({
                select: statusSelect,
                settings: {
                    showSearch: false,
                    closeOnSelect: true
                }
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            statusSelect.addEventListener('change', (e) => {
                this.updateListingStatus(listingId, e.target.value);
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SlimSelect
            this[`statusSlimSelect_${listingId}`] = statusSlimSelect;
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
        const actualizeBtn = document.getElementById(`actualizeBtn-${listingId}`);
        if (actualizeBtn) {
            actualizeBtn.addEventListener('click', () => {
                this.actualizeListing(listingId);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        const deleteBtn = document.getElementById(`deleteBtn-${listingId}`);
        if (deleteBtn) {
            deleteBtn.addEventListener('click', () => {
                this.deleteListing(listingId);
            });
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async updateListingStatus(listingId, newStatus) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ this.listings
            let listing = this.listings.find(l => l.id === listingId);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (!listing) {
                console.log('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ this.listings, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', listingId);
                listing = await db.getListing(listingId);
            }
            
            if (!listing) {
                console.error('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                this.showError('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã updated)
            listing.status = newStatus;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await db.update('listings', listing);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ –æ–±—ä–µ–∫—Ç
            if (listing.object_id) {
                const oldListing = { ...listing, status: listing.status === 'active' ? 'archived' : 'active' }; // –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await window.realEstateObjectManager.updateObjectOnListingChange(listingId, oldListing, listing);
                console.log(`üè† –û–±–Ω–æ–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç ${listing.object_id} –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId}`);
            }

            // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏
            this.renderPriceChart(listing);
            
            // –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
            await this.loadDuplicatesTable();

            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${newStatus}`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ select
            const statusSelect = document.getElementById(`statusSelect-${listingId}`);
            if (statusSelect) {
                const listing = this.listings.find(l => l.id === listingId);
                if (listing) {
                    statusSelect.value = listing.status;
                    // –û–±–Ω–æ–≤–ª—è–µ–º SlimSelect –µ—Å–ª–∏ –µ—Å—Ç—å
                    const slimSelect = this[`statusSlimSelect_${listingId}`];
                    if (slimSelect) {
                        slimSelect.setSelected(listing.status);
                    }
                }
            }
        }
    }

    /**
     * –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã updated)
     */
    async actualizeListing(listingId) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ this.listings
            let listing = this.listings.find(l => l.id === listingId);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (!listing) {
                console.log('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ this.listings, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', listingId);
                listing = await db.getListing(listingId);
            }
            
            if (!listing) {
                console.error('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                this.showError('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            listing.updated = new Date().toISOString();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await db.update('listings', listing);

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            this.updateLastUpdatedDisplay(listingId, listing.updated);

            // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
            this.renderPriceChart(listing);
            
            // –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
            await this.loadDuplicatesTable();

            console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listingId} –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    updateLastUpdatedDisplay(listingId, updatedDate) {
        const lastUpdatedElement = document.getElementById(`lastUpdated-${listingId}`);
        if (lastUpdatedElement && updatedDate) {
            lastUpdatedElement.textContent = new Date(updatedDate).toLocaleDateString('ru-RU', {
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
     */
    async deleteListing(listingId) {
        const listing = this.listings.find(l => l.id === listingId);
        if (!listing) {
            console.error('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        const confirmed = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?\n\n"${listing.title || listing.address || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`);
        
        if (!confirmed) {
            return;
        }

        try {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await db.delete('listings', listingId);

            // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
            this.listings = this.listings.filter(l => l.id !== listingId);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            document.getElementById('listingModal').classList.add('hidden');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–∞—Ä—Ç—É
            await this.loadDuplicatesTable();
            this.loadMapData();

            console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listingId} —É–¥–∞–ª–µ–Ω–æ`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async savePriceHistory(listingId) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ this.listings
            let listing = this.listings.find(l => l.id === listingId);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (!listing) {
                console.log('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ this.listings, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', listingId);
                listing = await db.getListing(listingId);
            }
            
            if (!listing) {
                console.error('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                this.showError('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º DataTable instance
            const tableId = `priceHistoryTable-${listingId}`;
            const table = $(`#${tableId}`).DataTable();
            
            if (!table) {
                console.error('–¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            const rawTableData = table.data().toArray();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            const priceHistory = [];
            
            rawTableData.forEach(row => {
                if (row && row.date && row.price) {
                    priceHistory.push({
                        date: new Date(row.date).toISOString(),
                        price: parseInt(row.price),
                        change_amount: null,
                        change_type: null,
                        is_publication: false,
                        source_data: {
                            manual_entry: true,
                            created_at: new Date().toISOString()
                        }
                    });
                }
            });

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            priceHistory.sort((a, b) => new Date(a.date) - new Date(b.date));

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            listing.price_history = priceHistory;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            if (priceHistory.length > 0) {
                const latestPrice = priceHistory[priceHistory.length - 1];
                listing.price = latestPrice.price;
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ –º2
                if (listing.area_total && listing.area_total > 0) {
                    listing.price_per_meter = Math.round(listing.price / listing.area_total);
                }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await db.update('listings', listing);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ –æ–±—ä–µ–∫—Ç
            if (listing.object_id) {
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –ë–î –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                const oldListing = { ...listing, price_history: [] }; // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                await window.realEstateObjectManager.updateObjectOnListingChange(listingId, oldListing, listing);
                console.log(`üè† –û–±–Ω–æ–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç ${listing.object_id} –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId}`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
            this.renderPriceChart(listing);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            const listingIndex = this.listings.findIndex(l => l.id === listingId);
            if (listingIndex !== -1) {
                this.listings[listingIndex] = listing;
            }

            // –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
            await this.loadDuplicatesTable();

            console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`);
            
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            const button = document.getElementById(`savePriceHistory-${listingId}`);
            if (button) {
                const originalText = button.innerHTML;
                button.innerHTML = '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ';
                button.classList.remove('bg-blue-500', 'hover:bg-blue-600');
                button.classList.add('bg-green-500', 'hover:bg-green-600');
                
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.classList.remove('bg-green-500', 'hover:bg-green-600');
                    button.classList.add('bg-blue-500', 'hover:bg-blue-600');
                }, 2000);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
            
            // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ–± –æ—à–∏–±–∫–µ
            const button = document.getElementById(`savePriceHistory-${listingId}`);
            if (button) {
                const originalText = button.innerHTML;
                button.innerHTML = '‚ùå –û—à–∏–±–∫–∞';
                button.classList.remove('bg-blue-500', 'hover:bg-blue-600');
                button.classList.add('bg-red-500', 'hover:bg-red-600');
                
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.classList.remove('bg-red-500', 'hover:bg-red-600');
                    button.classList.add('bg-blue-500', 'hover:bg-blue-600');
                }, 2000);
            }
        }
    }

}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—Å–∞
let areaPage;

// –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.AreaPage = AreaPage;