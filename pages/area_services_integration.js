/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ area.js
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Inpars –Ω–∞ –Ω–æ–≤—É—é –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
 */

/**
 * –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Å—É AreaPage –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
 */
class AreaServicesIntegration {
    constructor(areaPageInstance) {
        this.areaPage = areaPageInstance;
        this.serviceManager = null;
        this.inparsService = null;
        this.inparsPanel = null;
        
        this.initialize();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    async initialize() {
        try {
            console.log('üöÄ Initializing service integration...');
            
            // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            this.serviceManager = await ServiceConfig.waitForServices();
            console.log('‚úÖ ServiceManager ready');
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Inpars
            this.inparsService = this.serviceManager.getService('inpars');
            console.log('‚úÖ InparsService ready');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –ø–∞–Ω–µ–ª—å
            await this.initInparsPanel();
            console.log('‚úÖ InparsPanel ready');
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventHandlers();
            console.log('‚úÖ Event handlers configured');
            
        } catch (error) {
            console.error('‚ùå Failed to initialize service integration:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: ' + error.message);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ Inpars
     */
    async initInparsPanel() {
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞–Ω–µ–ª–∏ –≤ HTML
        const panelContainer = document.getElementById('inparsPanelContainer');
        
        if (!panelContainer) {
            console.error('Inpars panel container not found in HTML');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º InparsPanel –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.inparsPanel = new InparsPanel(panelContainer, this.serviceManager);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞
        this.inparsPanel.setPolygonProvider(() => {
            return this.areaPage.currentArea?.polygon || [];
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –°–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
        if (this.inparsPanel && this.inparsPanel.container) {
            this.inparsPanel.container.addEventListener('import:completed', (event) => {
                this.onImportCompleted(event.detail);
            });
        }
        
        // –°–æ–±—ã—Ç–∏—è —Å–µ—Ä–≤–∏—Å–∞ Inpars
        this.inparsService.on('listings:loaded', (data) => {
            this.onListingsLoaded(data);
        });
        
        this.inparsService.on('listings:error', (data) => {
            this.onImportError(data.error);
        });
        
        this.inparsService.on('subscription:invalid', (data) => {
            this.onSubscriptionError(data.error);
        });
        
        // –°–æ–±—ã—Ç–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
        document.addEventListener('services:ready', () => {
            console.log('‚úÖ All services are ready');
        });
        
        document.addEventListener('inpars:ready', () => {
            console.log('‚úÖ Inpars service is ready');
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
     */
    async onImportCompleted(result) {
        try {
            console.log('üìä Import completed:', result);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
            if (result.listings && result.listings.length > 0) {
                await this.processImportedListings(result.listings);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await this.areaPage.loadListingsOnMap();
            await this.areaPage.loadAreaStats();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showSuccess(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${result.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            
        } catch (error) {
            console.error('‚ùå Error processing import results:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞: ' + error.message);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async processImportedListings(listings) {
        let newCount = 0;
        let updatedCount = 0;
        let errorCount = 0;
        
        for (const listing of listings) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                const existingListing = await db.getListingByExternalId(
                    listing.source,
                    listing.external_id
                );
                
                if (existingListing) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
                    await db.updateListing({
                        ...listing,
                        id: existingListing.id,
                        created_at: existingListing.created_at,
                        updated_at: new Date()
                    });
                    updatedCount++;
                } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                    listing.map_area_id = this.areaPage.currentAreaId;
                    listing.created_at = new Date();
                    listing.updated_at = new Date();
                    await db.addListing(listing);
                    newCount++;
                }
                
            } catch (error) {
                console.error('Error processing listing:', error);
                errorCount++;
            }
        }
        
        console.log(`üìä Import results: ${newCount} new, ${updatedCount} updated, ${errorCount} errors`);
        return { newCount, updatedCount, errorCount };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    onListingsLoaded(data) {
        console.log(`‚úÖ Loaded ${data.count} listings from Inpars`);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if (data.count === 0) {
            this.showWarning('–û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
     */
    onImportError(error) {
        console.error('‚ùå Import error:', error);
        this.showError('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    onSubscriptionError(error) {
        console.error('‚ùå Subscription error:', error);
        this.showError('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π Inpars: ' + error.message);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.showInfo('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–∏—Å–∞
     */
    async updateServiceSettings(settings) {
        try {
            if (settings.inparsToken && this.inparsService) {
                this.inparsService.setToken(settings.inparsToken);
            }
            
            if (settings.inparsEnabledSources && this.inparsService) {
                this.inparsService.setEnabledSources(settings.inparsEnabledSources);
            }
            
            console.log('‚úÖ Service settings updated');
            
        } catch (error) {
            console.error('‚ùå Failed to update service settings:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    getServicesStatus() {
        if (!this.serviceManager) {
            return { status: 'not_initialized' };
        }
        
        return this.serviceManager.getServicesStatus();
    }

    /**
     * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π)
     */
    showSuccess(message) {
        if (this.areaPage.showNotification) {
            this.areaPage.showNotification(message, 'success');
        } else {
            console.log('‚úÖ ' + message);
        }
    }

    showError(message) {
        if (this.areaPage.showNotification) {
            this.areaPage.showNotification(message, 'error');
        } else {
            console.error('‚ùå ' + message);
        }
    }

    showWarning(message) {
        if (this.areaPage.showNotification) {
            this.areaPage.showNotification(message, 'warning');
        } else {
            console.warn('‚ö†Ô∏è ' + message);
        }
    }

    showInfo(message) {
        if (this.areaPage.showNotification) {
            this.areaPage.showNotification(message, 'info');
        } else {
            console.info('‚ÑπÔ∏è ' + message);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        if (this.inparsPanel) {
            this.inparsPanel.destroy();
            this.inparsPanel = null;
        }
        
        this.serviceManager = null;
        this.inparsService = null;
    }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º area.js
 */
async function initializeAreaServicesIntegration(areaPageInstance) {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!window.serviceManager || !window.serviceManager.isInitialized) {
            console.log('üöÄ Initializing services...');
            window.serviceManager = await ServiceConfig.initializeServices();
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        const integration = new AreaServicesIntegration(areaPageInstance);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ area.js
        areaPageInstance.servicesIntegration = integration;
        
        return integration;
        
    } catch (error) {
        console.error('‚ùå Failed to initialize services integration:', error);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { AreaServicesIntegration, initializeAreaServicesIntegration };
} else {
    // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    window.AreaServicesIntegration = AreaServicesIntegration;
    window.initializeAreaServicesIntegration = initializeAreaServicesIntegration;
}