/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ area.js
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Inpars –Ω–∞ –Ω–æ–≤—É—é –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
 */

/**
 * –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Å—É AreaPage –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
 */
class AreaServicesIntegration {
    constructor(areaPageInstance) {
        this.areaPage = areaPageInstance;
        this.serviceManager = null;
        this.inparsService = null;
        this.inparsPanel = null;
        
        this.initialize();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    async initialize() {
        try {
            // console.log('üöÄ Initializing service integration...');
            
            // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            this.serviceManager = await ServiceConfig.waitForServices();
            // console.log('‚úÖ ServiceManager ready');
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Inpars
            this.inparsService = this.serviceManager.getService('inpars');
            // console.log('‚úÖ InparsService ready');
            
            // InparsPanel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ area.js —á–µ—Ä–µ–∑ initInparsPanel()
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventHandlers();
            // console.log('‚úÖ Event handlers configured');
            
        } catch (error) {
            console.error('‚ùå Failed to initialize service integration:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: ' + error.message);
        }
    }

    // –ú–µ—Ç–æ–¥ initInparsPanel —É–¥–∞–ª–µ–Ω - –ø–∞–Ω–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ area.js

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –°–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ - —Å–ª—É—à–∞–µ–º –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∏–∑ initInparsPanel
        const inparsContainer = document.getElementById('inparsPanelContainer');
        if (inparsContainer) {
            inparsContainer.addEventListener('import:completed', (event) => {
                this.onImportCompleted(event.detail);
            });
            // console.log('‚úÖ Event listener –¥–ª—è import:completed –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ inparsPanelContainer');
        } else {
            console.error('‚ùå inparsPanelContainer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è event listener');
        }
        
        // –°–æ–±—ã—Ç–∏—è —Å–µ—Ä–≤–∏—Å–∞ Inpars
        this.inparsService.on('listings:loaded', (data) => {
            this.onListingsLoaded(data);
        });
        
        this.inparsService.on('listings:error', (data) => {
            this.onImportError(data.error);
        });
        
        this.inparsService.on('subscription:invalid', (data) => {
            this.onSubscriptionError(data.error);
        });
        
        // –°–æ–±—ã—Ç–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
        document.addEventListener('services:ready', () => {
            // console.log('‚úÖ All services are ready');
        });
        
        document.addEventListener('inpars:ready', () => {
            // console.log('‚úÖ Inpars service is ready');
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
     */
    async onImportCompleted(result) {
        try {
            // console.log('üìä Import completed:', result);
            // console.log('üìä result.count:', result.count);
            // console.log('üìä result.listings:', result.listings);
            // console.log('üìä result.listings?.length:', result.listings?.length);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
            if (result.listings && result.listings.length > 0) {
                await this.processImportedListings(result.listings);
                
                // –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –æ–±–Ω–æ–≤–ª—è–µ–º DataState –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
                // console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º DataState –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞...');
                if (this.areaPage.addressManager) {
                    await this.areaPage.addressManager.loadListings();
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - —É–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            if (this.areaPage.eventBus) {
                this.areaPage.eventBus.emit(CONSTANTS.EVENTS.LISTINGS_IMPORTED, {
                    result,
                    timestamp: new Date()
                });
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const importedCount = (result.listings && result.listings.length) || result.count || 0;
            // console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: result =', result);
            // console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: importedCount =', importedCount);
            
            if (importedCount > 0) {
                this.showSuccess(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            } else {
                this.showSuccess('–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
            }
            
        } catch (error) {
            console.error('‚ùå Error processing import results:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞: ' + error.message);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async processImportedListings(listings) {
        // console.log(`üîç processImportedListings: –ü–æ–ª—É—á–µ–Ω–æ ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è`);
        // console.log(`üîç processImportedListings: currentAreaId = ${this.areaPage.currentAreaId}`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º map_area_id –¥–ª—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        const processedListings = listings.map(listing => ({
            ...listing,
            map_area_id: this.areaPage.currentAreaId,
            created_at: listing.created_at || new Date(),
            updated_at: new Date()
        }));
        
        // console.log(`üîç processImportedListings: –ü–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`, processedListings[0]);
        
        try {
            // console.log(`üíæ processImportedListings: –í—ã–∑—ã–≤–∞–µ–º db.saveListings —Å ${processedListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            const result = await window.db.saveListings(processedListings);
            
            // console.log(`üìä Import results: ${result.added} new, ${result.updated} updated, ${result.skipped} errors`);
            return { 
                newCount: result.added, 
                updatedCount: result.updated, 
                errorCount: result.skipped 
            };
            
        } catch (error) {
            console.error('‚ùå Error saving listings:', error);
            return { newCount: 0, updatedCount: 0, errorCount: listings.length };
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    onListingsLoaded(data) {
        // console.log(`‚úÖ Loaded ${data.count} listings from Inpars`);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if (data.count === 0) {
            this.showWarning('–û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
     */
    onImportError(error) {
        console.error('‚ùå Import error:', error);
        this.showError('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
     */
    onSubscriptionError(error) {
        console.error('‚ùå Subscription error:', error);
        this.showError('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π Inpars: ' + error.message);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.showInfo('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ç–æ–∫–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–∏—Å–∞
     */
    async updateServiceSettings(settings) {
        try {
            if (settings.inparsToken && this.inparsService) {
                this.inparsService.setToken(settings.inparsToken);
            }
            
            if (settings.inparsEnabledSources && this.inparsService) {
                this.inparsService.setEnabledSources(settings.inparsEnabledSources);
            }
            
            // console.log('‚úÖ Service settings updated');
            
        } catch (error) {
            console.error('‚ùå Failed to update service settings:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    getServicesStatus() {
        if (!this.serviceManager) {
            return { status: 'not_initialized' };
        }
        
        return this.serviceManager.getServicesStatus();
    }

    /**
     * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π)
     */
    showSuccess(message) {
        // console.log('üîç showSuccess –≤—ã–∑–≤–∞–Ω —Å message =', message, typeof message);
        if (this.areaPage.showSuccess) {
            this.areaPage.showSuccess(message);
        } else {
            // console.log('‚úÖ ' + message);
        }
    }

    showError(message) {
        if (this.areaPage.showError) {
            this.areaPage.showError(message);
        } else {
            console.error('‚ùå ' + message);
        }
    }

    showWarning(message) {
        if (this.areaPage.showInfo) {
            this.areaPage.showInfo(message);
        } else {
            console.warn('‚ö†Ô∏è ' + message);
        }
    }

    showInfo(message) {
        if (this.areaPage.showInfo) {
            this.areaPage.showInfo(message);
        } else {
            console.info('‚ÑπÔ∏è ' + message);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        if (this.inparsPanel) {
            this.inparsPanel.destroy();
            this.inparsPanel = null;
        }
        
        this.serviceManager = null;
        this.inparsService = null;
    }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º area.js
 */
async function initializeAreaServicesIntegration(areaPageInstance) {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!window.serviceManager || !window.serviceManager.isInitialized) {
            // console.log('üöÄ Initializing services...');
            window.serviceManager = await ServiceConfig.initializeServices();
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        const integration = new AreaServicesIntegration(areaPageInstance);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ area.js
        areaPageInstance.servicesIntegration = integration;
        
        return integration;
        
    } catch (error) {
        console.error('‚ùå Failed to initialize services integration:', error);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { AreaServicesIntegration, initializeAreaServicesIntegration };
} else {
    // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    window.AreaServicesIntegration = AreaServicesIntegration;
    window.initializeAreaServicesIntegration = initializeAreaServicesIntegration;
}