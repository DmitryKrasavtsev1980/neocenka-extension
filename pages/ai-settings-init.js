/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ DIContainer
 */

(function() {
    'use strict';
    
    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if (typeof window.DIContainer === 'undefined' || 
        typeof window.EventBus === 'undefined' ||
        typeof window.DataState === 'undefined') {
        console.warn('‚ö†Ô∏è AI Settings Init: –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
        setTimeout(arguments.callee, 100);
        return;
    }
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    
    // –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π DIContainer –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if (!window.diContainer) {
        window.diContainer = new DIContainer();
        console.log('‚úÖ DIContainer —Å–æ–∑–¥–∞–Ω');
    }
    
    const container = window.diContainer;
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    if (!container.has('EventBus')) {
        container.registerSingleton('EventBus', EventBus);
        console.log('‚úÖ EventBus –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    
    if (!container.has('DataState')) {
        container.registerSingleton('DataState', DataState);
        console.log('‚úÖ DataState –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    
    if (!container.has('ValidationService')) {
        container.registerSingleton('ValidationService', ValidationService);
        console.log('‚úÖ ValidationService –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    
    if (!container.has('ConfigService')) {
        // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        if (!window.configService) {
            window.configService = new ConfigService();
            console.log('üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π ConfigService');
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∫ —Ñ–∞–±—Ä–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        container.register('ConfigService', () => window.configService);
        console.log('‚úÖ ConfigService –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä)');
    }
    
    if (!container.has('ErrorHandlingService')) {
        container.registerSingleton('ErrorHandlingService', ErrorHandlingService);
        console.log('‚úÖ ErrorHandlingService –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    if (typeof YandexProvider !== 'undefined' && !container.has('YandexProvider')) {
        container.registerFactory('YandexProvider', (config) => new YandexProvider(config));
        console.log('‚úÖ YandexProvider –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    
    if (typeof ClaudeProvider !== 'undefined' && !container.has('ClaudeProvider')) {
        container.registerFactory('ClaudeProvider', (config) => new ClaudeProvider(config));
        console.log('‚úÖ ClaudeProvider –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è LLMProviderFactory
    if (typeof LLMProviderFactory !== 'undefined' && !container.has('LLMProviderFactory')) {
        container.registerSingleton('LLMProviderFactory', () => {
            const eventBus = container.get('EventBus');
            const configService = container.get('ConfigService');
            const factory = new LLMProviderFactory(container, eventBus, configService);
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if (typeof YandexProvider !== 'undefined' && !factory.hasProvider('yandex')) {
                factory.registerProvider('yandex', YandexProvider, {
                    name: 'YandexGPT',
                    description: '–†–æ—Å—Å–∏–π—Å–∫–∏–π AI —Å–µ—Ä–≤–∏—Å, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
                    features: ['russian-optimized', 'cost-effective', 'local-hosting'],
                    costLevel: 'low',
                    quality: 'good',
                    languages: ['ru', 'en'],
                    defaultConfig: {
                        model: 'yandexgpt-lite/latest',
                        temperature: 0.6,
                        maxTokens: 2000
                    }
                });
                console.log('‚úÖ YandexProvider –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–±—Ä–∏–∫–µ');
            }
            
            if (typeof ClaudeProvider !== 'undefined' && !factory.hasProvider('claude')) {
                factory.registerProvider('claude', ClaudeProvider, {
                    name: 'Claude (Anthropic)',
                    description: '–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π AI –æ—Ç Anthropic —Å –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º',
                    features: ['large-context', 'reasoning', 'coding', 'analysis'],
                    costLevel: 'high',
                    quality: 'excellent',
                    languages: ['en', 'ru', 'multi'],
                    defaultConfig: {
                        model: 'claude-3-sonnet-20240229',
                        temperature: 0.7,
                        maxTokens: 1024
                    }
                });
                console.log('‚úÖ ClaudeProvider –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–±—Ä–∏–∫–µ');
            }
            
            return factory;
        });
        console.log('‚úÖ LLMProviderFactory –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è UniversalAIService
    if (typeof UniversalAIService !== 'undefined' && !container.has('UniversalAIService')) {
        container.registerSingleton('UniversalAIService', () => {
            const factory = container.get('LLMProviderFactory');
            // –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ConfigService –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            const configService = window.configService || container.get('ConfigService');
            const eventBus = container.get('EventBus');
            const errorHandler = container.get('ErrorHandlingService');
            
            const service = new UniversalAIService(factory, configService, eventBus, errorHandler);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
            service.initialize().then(() => {
                console.log('‚úÖ UniversalAIService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }).catch(error => {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UniversalAIService:', error);
            });
            
            return service;
        });
        console.log('‚úÖ UniversalAIService –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    
    console.log('‚úÖ –í—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ DIContainer');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ AI
    if (window.EventBus) {
        const eventBus = container.get('EventBus');
        eventBus.emit('ai:services:ready', { container });
    }
    
})();