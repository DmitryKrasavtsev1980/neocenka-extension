/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–¥—Ä–µ—Å–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫–æ–π, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∞–¥—Ä–µ—Å–æ–≤
 */

class AddressManager {
    constructor(dataState, eventBus, progressManager) {
        this.dataState = dataState;
        this.eventBus = eventBus;
        this.progressManager = progressManager;
        
        // –¢–∞–±–ª–∏—Ü–∞ –∞–¥—Ä–µ—Å–æ–≤
        this.addressesTable = null;
        
        // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        this.houseSeries = [];
        this.houseClasses = [];
        this.wallMaterials = [];
        this.ceilingMaterials = [];
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.isLoading = false;
        this.currentEditingAddress = null;
        
        // SlimSelect —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.modalSlimSelects = {
            houseSeriesSelect: null,
            houseClassSelect: null,
            wallMaterialSelect: null,
            ceilingMaterialSelect: null,
            typeSelect: null,
            gasSupplySelect: null,
            individualHeatingSelect: null
        };
        
        // SlimSelect –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
        this.sourceFilterSlimSelect = null;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            pageLength: 10,
            osmAPI: null,
            smartMatcher: null
        };
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.bindEvents();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        if (this.eventBus) {
            this.eventBus.on(CONSTANTS.EVENTS.AREA_LOADED, async (area) => {
                await this.onAreaLoaded(area);
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.AREA_CHANGED, async (area) => {
                await this.onAreaChanged(area);
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.ADDRESS_DELETED, async (data) => {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
                await this.loadAddresses();
                console.log('‚úÖ AddressManager: –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞');
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.ADDRESS_EDIT_REQUESTED, async (address) => {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
                await this.editAddress(address.id);
                console.log('‚úÖ AddressManager: –û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞:', address.id);
            });
        }
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–Ω–æ–ø–∫–∞–º
        this.bindButtons();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ
        this.bindTableEvents();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–∞–º
        this.bindModalEvents();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–Ω–æ–ø–∫–∞–º
     */
    bindButtons() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        document.getElementById('addAddressBtn')?.addEventListener('click', () => {
            this.openAddAddressModal();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ API
        document.getElementById('loadAddressesBtn')?.addEventListener('click', () => {
            this.loadAddressesFromAPI();
        });
        
        // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤
        document.getElementById('exportAddressesBtn')?.addEventListener('click', () => {
            this.exportAddressesToFile();
        });
        
        // –ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤
        document.getElementById('importAddressesFile')?.addEventListener('change', (event) => {
            this.importAddressesFromFile(event);
        });
        
        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ –æ–±–ª–∞—Å—Ç–∏
        document.getElementById('deleteAllAddressesBtn')?.addEventListener('click', () => {
            this.deleteAllAddressesInArea();
        });
        
        // –ö–Ω–æ–ø–∫–∞ —É–º–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ (ML)
        document.getElementById('processAddressesSmartBtn')?.addEventListener('click', () => {
            this.processAddressesSmart();
        });
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–æ–±—ã—Ç–∏—è–º —Ç–∞–±–ª–∏—Ü—ã
     */
    bindTableEvents() {
        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('click', (e) => {
            const button = e.target.closest('[data-action]');
            if (!button) return;
            
            const action = button.getAttribute('data-action');
            const addressId = button.getAttribute('data-address-id');
            
            if (!addressId) return;
            
            switch (action) {
                case 'edit-address':
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
                    this.eventBus.emit(CONSTANTS.EVENTS.ADDRESS_EDIT_REQUESTED, { id: addressId });
                    break;
                case 'delete-address':
                    this.deleteAddress(addressId);
                    break;
            }
        });
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–æ–±—ã—Ç–∏—è–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    bindModalEvents() {
        // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('closeEditAddressModal')?.addEventListener('click', () => {
            this.closeEditAddressModal();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('cancelEditAddress')?.addEventListener('click', () => {
            this.closeEditAddressModal();
        });
        
        // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        document.getElementById('editAddressForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveAddressEdit();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        this.bindReferenceModalEvents();
        
        // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        document.getElementById('houseSeriesActionBtn')?.addEventListener('click', () => {
            this.openHouseSeriesModal();
        });
        
        document.getElementById('houseClassActionBtn')?.addEventListener('click', () => {
            this.openHouseClassModal();
        });
        
        document.getElementById('wallMaterialActionBtn')?.addEventListener('click', () => {
            this.openWallMaterialModal();
        });
        
        document.getElementById('ceilingMaterialActionBtn')?.addEventListener('click', () => {
            this.openCeilingMaterialModal();
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–∞—Å—Ç–∏
     */
    async onAreaLoaded(area) {
        await this.loadReferenceData();
        await this.initializeAddressTable();
        await this.loadAddresses();
        await this.loadListings();
        await this.loadObjects();
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
     */
    async onAreaChanged(area) {
        await this.loadAddresses();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∞–¥—Ä–µ—Å–æ–≤
     */
    async initializeAddressTable() {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const tableElement = document.getElementById('addressesTable');
            if (!tableElement) {
                console.error('‚ùå AddressManager: –≠–ª–µ–º–µ–Ω—Ç addressesTable –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
                return;
            }
            
            if (!$ || !$.fn.DataTable) {
                console.error('‚ùå AddressManager: jQuery –∏–ª–∏ DataTable –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                return;
            }
            
            console.log('üîÑ AddressManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∞–¥—Ä–µ—Å–æ–≤');
            
            if (this.addressesTable) {
                this.addressesTable.destroy();
            }
            
            this.addressesTable = $('#addressesTable').DataTable({
            ...CONSTANTS.TABLE_CONFIG,
            pageLength: this.config.pageLength,
            columns: [
                { 
                    data: 'source', 
                    title: '–ò—Å—Ç–æ—á–Ω–∏–∫',
                    render: (data) => this.renderSourceBadge(data)
                },
                { 
                    data: 'address', 
                    title: '–ê–¥—Ä–µ—Å',
                    render: (data) => Helpers.truncateText(data, 50)
                },
                {
                    data: 'type',
                    title: '–¢–∏–ø',
                    render: (data) => CONSTANTS.PROPERTY_TYPE_NAMES[data] || data
                },
                {
                    data: null,
                    title: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤',
                    render: (data) => this.renderConstructiveInfo(data)
                },
                { 
                    data: 'objects_count', 
                    title: '–û–±—ä–µ–∫—Ç–æ–≤', 
                    defaultContent: '0',
                    className: 'text-center'
                },
                { 
                    data: 'listings_count', 
                    title: '–û–±—ä—è–≤–ª–µ–Ω–∏–π', 
                    defaultContent: '0',
                    className: 'text-center'
                },
                {
                    data: null,
                    title: '–î–µ–π—Å—Ç–≤–∏—è',
                    orderable: false,
                    className: 'text-right',
                    render: (data, type, row) => this.renderActions(row)
                }
            ],
            drawCallback: () => {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è this.addressesTable
                setTimeout(() => {
                    this.onTableDraw();
                }, 0);
            }
            });
            
            console.log('‚úÖ AddressManager: –¢–∞–±–ª–∏—Ü–∞ –∞–¥—Ä–µ—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
            this.initSourceFilter();
            
        } catch (error) {
            console.error('‚ùå AddressManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∞–¥—Ä–µ—Å–æ–≤:', error);
        }
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±–µ–π–¥–∂–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     */
    renderSourceBadge(source) {
        const colors = {
            'osm': 'bg-blue-100 text-blue-800',
            'manual': 'bg-green-100 text-green-800',
            'ml': 'bg-purple-100 text-purple-800',
            'imported': 'bg-orange-100 text-orange-800',
            'avito': 'bg-red-100 text-red-800',
            'cian': 'bg-yellow-100 text-yellow-800'
        };
        
        const colorClass = colors[source] || 'bg-gray-100 text-gray-800';
        const sourceName = CONSTANTS.DATA_SOURCE_NAMES[source] || source;
        
        return `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${colorClass}">${sourceName}</span>`;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    renderConstructiveInfo(data) {
        const parts = [];
        
        if (data.house_series) parts.push(data.house_series);
        if (data.wall_material) parts.push(data.wall_material);
        if (data.building_type) parts.push(data.building_type);
        if (data.floors_count) parts.push(`${data.floors_count} —ç—Ç.`);
        if (data.build_year) parts.push(`${data.build_year} –≥.`);
        
        return parts.join(', ') || '-';
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π
     */
    renderActions(row) {
        return `
            <div class="flex space-x-2">
                <button data-action="edit-address" data-address-id="${row.id}" 
                        class="text-blue-600 hover:text-blue-900 text-sm">
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button data-action="delete-address" data-address-id="${row.id}" 
                        class="text-red-600 hover:text-red-900 text-sm">
                    –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        `;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
     */
    onTableDraw() {
        try {
            if (!this.addressesTable || !this.addressesTable.page || typeof this.addressesTable.page.info !== 'function') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
                if (!this.addressesTable) {
                    // –¢–∞–±–ª–∏—Ü–∞ –µ—â–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –≤—ã–∑–æ–≤
                    return;
                }
                console.warn('‚ö†Ô∏è AddressManager: Table not fully initialized for onTableDraw');
                return;
            }
        
        const info = this.addressesTable.page.info();
        
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            this.updateAddressCounters(info);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
            this.eventBus.emit(CONSTANTS.EVENTS.TABLE_UPDATED, {
                table: 'addresses',
                info,
                timestamp: new Date()
            });
            
        } catch (error) {
            console.error('‚ùå AddressManager: –û—à–∏–±–∫–∞ –≤ onTableDraw:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∞–¥—Ä–µ—Å–æ–≤
     */
    updateAddressCounters(info) {
        const counterElement = document.getElementById('addressesCount');
        if (counterElement) {
            counterElement.textContent = info.recordsTotal;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
     */
    async loadAddresses() {
        if (this.isLoading) return;
        
        try {
            this.isLoading = true;
            
            await Helpers.debugLog('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É...');
            
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea) {
                await Helpers.debugLog('‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
                return;
            }
            
            const addresses = await this.getAddressesInArea(currentArea.id);
            await Helpers.debugLog(`üìä –ê–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${addresses.length}`);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML-–∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
            await this.initializeSmartMatcher();
            
            // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑ –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');
            const allListings = await window.db.getAll('listings');
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ address_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
            const listingsByAddress = {};
            allListings.forEach(listing => {
                if (listing.address_id) {
                    if (!listingsByAddress[listing.address_id]) {
                        listingsByAddress[listing.address_id] = [];
                    }
                    listingsByAddress[listing.address_id].push(listing);
                }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            for (const address of addresses) {
                const addressListings = listingsByAddress[address.id] || [];
                address.objects_count = 0;
                address.listings_count = addressListings.length;
                
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è DataTables
                if (!address.source) {
                    address.source = 'manual';
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.dataState.setState('addresses', addresses);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
            // –≠—Ç–æ –∏–∑–±–µ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ loadListings()
            this.dataState.setState('allListingsCache', allListings);
            console.log('üíæ –ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', allListings.length);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            if (this.addressesTable) {
                this.addressesTable.clear();
                this.addressesTable.rows.add(addresses);
                this.addressesTable.draw();
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
                this.initSourceFilter();
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ
            this.eventBus.emit(CONSTANTS.EVENTS.ADDRESSES_LOADED, {
                addresses,
                count: addresses.length,
                area: currentArea,
                timestamp: new Date()
            });
            
            await Helpers.debugLog('‚úÖ –ê–¥—Ä–µ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            
        } catch (error) {
            console.error('Error loading addresses:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤: ' + error.message);
        } finally {
            this.isLoading = false;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Smart Matcher
     */
    async initializeSmartMatcher() {
        if (typeof SmartAddressMatcher !== 'undefined' && !this.config.smartMatcher) {
            try {
                this.config.smartMatcher = new SmartAddressMatcher();
                await Helpers.debugLog('üß† SmartAddressMatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } catch (error) {
                await Helpers.debugLog('Failed to initialize SmartAddressMatcher:', error);
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏
     */
    async getAddressesInArea(areaId) {
        try {
            const allAddresses = await window.db.getAll('addresses');
            return allAddresses.filter(address => address.map_area_id === areaId);
        } catch (error) {
            console.error('Error getting addresses in area:', error);
            return [];
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å—É
     */
    async getListingsByAddress(addressId) {
        try {
            const allListings = await window.db.getAll('listings');
            return allListings.filter(listing => listing.address_id === addressId);
        } catch (error) {
            console.error('Error getting listings by address:', error);
            return [];
        }
    }
    
    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
     */
    async editAddress(addressId) {
        try {
            await Helpers.debugLog(`üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${addressId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            const address = await window.db.get('addresses', addressId);
            if (!address) {
                console.warn('‚ùå AddressManager.editAddress: –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', addressId);
                this.progressManager.showError('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            this.currentEditingAddress = address;
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞
            await this.fillAddressForm(address);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.showAddressModal(address);
            
        } catch (error) {
            console.error('Error opening edit address modal:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
        }
    }
    
    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∞–¥—Ä–µ—Å–∞
     */
    async fillAddressForm(address) {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        const addressTextElement = document.getElementById('editAddressText');
        const addressTypeElement = document.getElementById('editAddressType');
        
        if (addressTextElement) {
            addressTextElement.value = address.address || '';
        }
        if (addressTypeElement) {
            addressTypeElement.value = address.type || 'house';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        await this.loadReferenceData();
        
        // –°–µ—Ä–∏—è –¥–æ–º–∞
        document.getElementById('editHouseSeries').value = address.house_series_id || '';
        
        // –ö–ª–∞—Å—Å –¥–æ–º–∞
        document.getElementById('editHouseClass').value = address.house_class_id || '';
        
        // –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω
        document.getElementById('editWallMaterial').value = address.wall_material_id || '';
        
        // –ú–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
        document.getElementById('editCeilingMaterial').value = address.ceiling_material_id || '';
        
        // –ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ
        const gasSupplyValue = address.gas_supply === null || address.gas_supply === undefined ? '' : address.gas_supply.toString();
        document.getElementById('editGasSupply').value = gasSupplyValue;
        
        // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ
        const individualHeatingValue = address.individual_heating === null || address.individual_heating === undefined ? '' : address.individual_heating.toString();
        const individualHeatingElement = document.getElementById('editIndividualHeating');
        if (individualHeatingElement) {
            individualHeatingElement.value = individualHeatingValue;
        }
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        document.getElementById('editFloorsCount').value = address.floors_count || '';
        document.getElementById('editBuildYear').value = address.build_year || '';
        document.getElementById('editEntrancesCount').value = address.entrances_count || '';
        document.getElementById('editLivingSpaces').value = address.living_spaces_count || '';
        
        // –ß–µ–∫–±–æ–∫—Å—ã
        document.getElementById('editHasPlayground').checked = address.has_playground || false;
        document.getElementById('editHasSportsArea').checked = address.has_sports_area || false;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        this.updateExternalServiceLinks(address);
    }
    
    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –ø–æ–ª–∏–≥–æ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏
     */
    getAreaPolygonCenter() {
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea || !currentArea.polygon) {
            return CONSTANTS.MAP_CONFIG.DEFAULT_CENTER;
        }
        
        const polygon = currentArea.polygon;
        let latSum = 0;
        let lngSum = 0;
        let pointCount = 0;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –º–∞—Å—Å –ø–æ–ª–∏–≥–æ–Ω–∞
        for (const point of polygon) {
            latSum += point.lat;
            lngSum += point.lng;
            pointCount++;
        }
        
        if (pointCount === 0) {
            return CONSTANTS.MAP_CONFIG.DEFAULT_CENTER;
        }
        
        return [latSum / pointCount, lngSum / pointCount];
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    initEditAddressMap(address) {
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É
        if (this.editAddressMap) {
            this.editAddressMap.remove();
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –∏ –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä
        let center;
        let shouldCreateMarker = false;
        let isNewAddress = !address.id && !address.coordinates;
        
        if (address.coordinates) {
            // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            center = [address.coordinates.lat, address.coordinates.lng];
            shouldCreateMarker = true;
        } else {
            // –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏
            center = this.getAreaPolygonCenter();
            shouldCreateMarker = true; // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        }
        
        this.editAddressMap = L.map('editAddressMap', {
            center: center,
            zoom: 16
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª—ã
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors'
        }).addTo(this.editAddressMap);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
        if (shouldCreateMarker) {
            this.editAddressMarker = L.marker([center[0], center[1]], {
                draggable: true
            }).addTo(this.editAddressMap);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
            this.editAddressMarker.on('dragend', async (event) => {
                const position = event.target.getLatLng();
                await this.updateAddressCoordinates(position.lat, position.lng);
            });
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞
            this.updateMapCoordinatesText(center[0], center[1]);
            
            // –î–ª—è –Ω–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            if (isNewAddress) {
                // –û–±–Ω–æ–≤–ª—è–µ–º currentEditingAddress —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                if (!this.currentEditingAddress) {
                    this.currentEditingAddress = {
                        coordinates: { lat: center[0], lng: center[1] }
                    };
                } else {
                    this.currentEditingAddress.coordinates = { lat: center[0], lng: center[1] };
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
                setTimeout(async () => {
                    await this.updateAddressCoordinates(center[0], center[1]);
                }, 500);
            }
        } else {
            // –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            this.resetMapCoordinatesText();
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
        this.editAddressMap.on('click', async (e) => {
            const { lat, lng } = e.latlng;
            
            if (this.editAddressMarker) {
                this.editAddressMarker.setLatLng([lat, lng]);
            } else {
                this.editAddressMarker = L.marker([lat, lng], {
                    draggable: true
                }).addTo(this.editAddressMap);
                
                this.editAddressMarker.on('dragend', async (event) => {
                    const position = event.target.getLatLng();
                    await this.updateAddressCoordinates(position.lat, position.lng);
                });
            }
            
            await this.updateAddressCoordinates(lat, lng);
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
        setTimeout(() => {
            if (this.editAddressMap) {
                this.editAddressMap.invalidateSize();
            }
        }, 200);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∞–¥—Ä–µ—Å–∞
     */
    async updateAddressCoordinates(lat, lng) {
        if (this.currentEditingAddress) {
            this.currentEditingAddress.coordinates = { lat, lng };
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
            const addressInput = document.getElementById('editAddressText');
            let originalPlaceholder = '';
            if (addressInput) {
                originalPlaceholder = addressInput.placeholder;
                addressInput.placeholder = '–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞...';
                addressInput.disabled = true;
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
            try {
                if (!this.config.osmAPI) {
                    this.config.osmAPI = new OSMOverpassAPI();
                }
                
                const geocodedAddress = await this.config.osmAPI.reverseGeocode(lat, lng);
                
                if (geocodedAddress) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞ –≤ —Ñ–æ—Ä–º–µ
                    if (addressInput) {
                        addressInput.value = geocodedAddress;
                        this.currentEditingAddress.address = geocodedAddress;
                    }
                    
                    await Helpers.debugLog(`üîÑ –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: ${geocodedAddress} –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ${lat}, ${lng}`);
                } else {
                    await Helpers.debugLog(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ${lat}, ${lng}`);
                }
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
                await Helpers.debugLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
            } finally {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞
                if (addressInput) {
                    addressInput.disabled = false;
                    addressInput.placeholder = originalPlaceholder;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ–¥ –∫–∞—Ä—Ç–æ–π
            this.updateMapCoordinatesText(lat, lng);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            this.updateExternalServiceLinks(this.currentEditingAddress);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ–¥ –∫–∞—Ä—Ç–æ–π
     */
    updateMapCoordinatesText(lat, lng) {
        const coordinatesText = document.getElementById('mapCoordinatesText');
        if (coordinatesText) {
            const formattedLat = parseFloat(lat).toFixed(6);
            const formattedLng = parseFloat(lng).toFixed(6);
            coordinatesText.textContent = `–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (${formattedLat}, ${formattedLng})`;
        }
    }
    
    /**
     * –°–±—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
     */
    resetMapCoordinatesText() {
        const coordinatesText = document.getElementById('mapCoordinatesText');
        if (coordinatesText) {
            coordinatesText.textContent = '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç';
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã (2–ì–ò–°, –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã, –ü–∞–Ω–æ—Ä–∞–º—ã)
     * @param {Object} address - –î–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
     */
    updateExternalServiceLinks(address) {
        if (!address || !address.coordinates) {
            return;
        }

        const { lat, lng } = address.coordinates;
        const addressText = address.address || '';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –¥–ª—è 2–ì–ò–° –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥—Ä–µ—Å–∞
        let cityFor2gis = 'novosibirsk'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (addressText.toLowerCase().includes('–º–æ—Å–∫–≤–∞')) {
            cityFor2gis = 'moscow';
        } else if (addressText.toLowerCase().includes('—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥') || addressText.toLowerCase().includes('—Å–ø–±')) {
            cityFor2gis = 'spb';
        } else if (addressText.toLowerCase().includes('–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥')) {
            cityFor2gis = 'ekaterinburg';
        } else if (addressText.toLowerCase().includes('–∫–∞–∑–∞–Ω—å')) {
            cityFor2gis = 'kazan';
        } else if (addressText.toLowerCase().includes('–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥')) {
            cityFor2gis = 'nizhniy_novgorod';
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
        const links = {
            '2gis': `https://2gis.ru/${cityFor2gis}/search/${encodeURIComponent(addressText)}`,
            'yandex': `https://yandex.ru/maps/?whatshere[point]=${lng},${lat}&whatshere[zoom]=17`,
            'panorama': `https://yandex.ru/maps/?panorama[point]=${lng},${lat}&panorama[direction]=0,0&panorama[span]=130.000000,71.919192`
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º href —É —Å—Å—ã–ª–æ–∫
        const link2gis = document.getElementById('url-2gis-address');
        const linkYandex = document.getElementById('url-yandex-address');
        const linkPanorama = document.getElementById('url-yandex-panorama-address');

        if (link2gis) {
            link2gis.href = links['2gis'];
        }
        if (linkYandex) {
            linkYandex.href = links['yandex'];
        }
        if (linkPanorama) {
            linkPanorama.href = links['panorama'];
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö SlimSelect —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    async initModalSlimSelects() {
        try {
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
            this.destroyModalSlimSelects();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è SlimSelect
            this.addSlimSelectCSS();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.loadReferenceData();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç—ã (—Ç–∏–ø, –≥–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ)
            this.initBasicModalSelects();
            
            await Helpers.debugLog('‚úÖ SlimSelect —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SlimSelect –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ:', error);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∞–¥—Ä–µ—Å–∞
     */
    showAddressModal(address) {
        const modal = document.getElementById('editAddressModal');
        if (modal) {
            modal.classList.remove('hidden');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –∞–¥—Ä–µ—Å
            this.currentEditingAddress = address.id ? { ...address } : {};
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const title = document.getElementById('address-modal-title');
            if (title) {
                title.textContent = address.id ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å' : '–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å';
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            setTimeout(async () => {
                await this.initModalSlimSelects();
                // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                if (!address.id) {
                    this.clearAddressForm();
                } else {
                    this.populateAddressForm(address);
                }
            }, 50);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞–Ω–µ—Ç –≤–∏–¥–∏–º—ã–º
            setTimeout(() => {
                this.initEditAddressMap(address);
            }, 100);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏
            this.eventBus.emit(CONSTANTS.EVENTS.MODAL_OPENED, {
                modalId: 'editAddressModal',
                type: CONSTANTS.MODAL_TYPES.ADDRESS_EDIT,
                data: address,
                timestamp: new Date()
            });
        }
    }
    
    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞
     */
    populateAddressForm(address) {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        const addressInput = document.getElementById('editAddressText');
        if (addressInput) {
            addressInput.value = address.address || '';
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ SlimSelect
        if (this.modalSlimSelects.typeSelect) {
            this.modalSlimSelects.typeSelect.setSelected(address.type || 'house');
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SlimSelect
        if (this.modalSlimSelects.gasSupplySelect) {
            this.modalSlimSelects.gasSupplySelect.setSelected(address.gas_supply !== undefined && address.gas_supply !== null ? address.gas_supply.toString() : '');
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SlimSelect
        if (this.modalSlimSelects.individualHeatingSelect) {
            this.modalSlimSelects.individualHeatingSelect.setSelected(address.individual_heating !== undefined && address.individual_heating !== null ? address.individual_heating.toString() : '');
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (this.modalSlimSelects.houseSeriesSelect && address.house_series_id) {
            this.modalSlimSelects.houseSeriesSelect.setSelected(address.house_series_id);
        }
        
        if (this.modalSlimSelects.houseClassSelect && address.house_class_id) {
            this.modalSlimSelects.houseClassSelect.setSelected(address.house_class_id);
        }
        
        if (this.modalSlimSelects.wallMaterialSelect && address.wall_material_id) {
            this.modalSlimSelects.wallMaterialSelect.setSelected(address.wall_material_id);
        }
        
        if (this.modalSlimSelects.ceilingMaterialSelect && address.ceiling_material_id) {
            this.modalSlimSelects.ceilingMaterialSelect.setSelected(address.ceiling_material_id);
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
        const floorsInput = document.getElementById('editFloorsCount');
        if (floorsInput) {
            floorsInput.value = address.floors_count || '';
        }
        
        const buildYearInput = document.getElementById('editBuildYear');
        if (buildYearInput) {
            buildYearInput.value = address.build_year || '';
        }
        
        const entrancesInput = document.getElementById('editEntrancesCount');
        if (entrancesInput) {
            entrancesInput.value = address.entrances_count || '';
        }
        
        const livingSpacesInput = document.getElementById('editLivingSpaces');
        if (livingSpacesInput) {
            livingSpacesInput.value = address.living_spaces_count || '';
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —á–µ–∫–±–æ–∫—Å—ã
        const playgroundCheckbox = document.getElementById('editHasPlayground');
        if (playgroundCheckbox) {
            playgroundCheckbox.checked = address.has_playground || false;
        }
        
        const sportsAreaCheckbox = document.getElementById('editHasSportsArea');
        if (sportsAreaCheckbox) {
            sportsAreaCheckbox.checked = address.has_sports_area || false;
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∞–¥—Ä–µ—Å–∞
     */
    clearAddressForm() {
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
        const addressInput = document.getElementById('editAddressText');
        if (addressInput) {
            addressInput.value = '';
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º SlimSelect –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        if (this.modalSlimSelects.typeSelect) {
            this.modalSlimSelects.typeSelect.setSelected('house');
        }
        
        if (this.modalSlimSelects.gasSupplySelect) {
            this.modalSlimSelects.gasSupplySelect.setSelected('');
        }
        
        if (this.modalSlimSelects.individualHeatingSelect) {
            this.modalSlimSelects.individualHeatingSelect.setSelected('');
        }
        
        if (this.modalSlimSelects.houseSeriesSelect) {
            this.modalSlimSelects.houseSeriesSelect.setSelected('');
        }
        
        if (this.modalSlimSelects.houseClassSelect) {
            this.modalSlimSelects.houseClassSelect.setSelected('');
        }
        
        if (this.modalSlimSelects.wallMaterialSelect) {
            this.modalSlimSelects.wallMaterialSelect.setSelected('');
        }
        
        if (this.modalSlimSelects.ceilingMaterialSelect) {
            this.modalSlimSelects.ceilingMaterialSelect.setSelected('');
        }
        
        // –û—á–∏—â–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
        const floorsInput = document.getElementById('editFloorsCount');
        if (floorsInput) {
            floorsInput.value = '';
        }
        
        const buildYearInput = document.getElementById('editBuildYear');
        if (buildYearInput) {
            buildYearInput.value = '';
        }
        
        const entrancesInput = document.getElementById('editEntrancesCount');
        if (entrancesInput) {
            entrancesInput.value = '';
        }
        
        const livingSpacesInput = document.getElementById('editLivingSpaces');
        if (livingSpacesInput) {
            livingSpacesInput.value = '';
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
        const playgroundCheckbox = document.getElementById('editHasPlayground');
        if (playgroundCheckbox) {
            playgroundCheckbox.checked = false;
        }
        
        const sportsAreaCheckbox = document.getElementById('editHasSportsArea');
        if (sportsAreaCheckbox) {
            sportsAreaCheckbox.checked = false;
        }
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    closeEditAddressModal() {
        const modal = document.getElementById('editAddressModal');
        if (modal) {
            modal.classList.add('hidden');
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∫–∞—Ä—Ç—É
        if (this.editAddressMap) {
            this.editAddressMap.remove();
            this.editAddressMap = null;
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º SlimSelect —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        this.destroyModalSlimSelects();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        this.resetMapCoordinatesText();
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –∞–¥—Ä–µ—Å
        this.currentEditingAddress = null;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
        this.eventBus.emit(CONSTANTS.EVENTS.MODAL_CLOSED, {
            modalId: 'editAddressModal',
            type: CONSTANTS.MODAL_TYPES.ADDRESS_EDIT,
            timestamp: new Date()
        });
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–¥—Ä–µ—Å–∞
     */
    async saveAddressEdit() {
        try {
            const form = document.getElementById('editAddressForm');
            if (!form) return;
            
            const formData = new FormData(form);
            
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            const addressData = {
                id: this.currentEditingAddress?.id || Helpers.generateId(),
                address: formData.get('address'),
                type: formData.get('type'),
                house_series_id: formData.get('house_series_id') || null,
                house_class_id: formData.get('house_class_id') || null,
                wall_material_id: formData.get('wall_material_id') || null,
                ceiling_material_id: formData.get('ceiling_material_id') || null,
                gas_supply: formData.get('gas_supply') ? formData.get('gas_supply') === 'true' : null,
                individual_heating: formData.get('individual_heating') ? formData.get('individual_heating') === 'true' : null,
                floors_count: formData.get('floors_count') ? parseInt(formData.get('floors_count')) : null,
                build_year: formData.get('build_year') ? parseInt(formData.get('build_year')) : null,
                entrances_count: formData.get('entrances_count') ? parseInt(formData.get('entrances_count')) : null,
                living_spaces_count: formData.get('living_spaces_count') ? parseInt(formData.get('living_spaces_count')) : null,
                has_playground: formData.get('has_playground') === 'on',
                has_sports_area: formData.get('has_sports_area') === 'on',
                coordinates: this.currentEditingAddress?.coordinates || null,
                map_area_id: this.dataState.getState('currentAreaId'),
                source: this.currentEditingAddress?.source || 'manual',
                created_at: this.currentEditingAddress?.created_at || new Date().toISOString(),
                updated_at: new Date().toISOString()
            };
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            const validation = Validators.validateAddress(addressData);
            if (!validation.isValid) {
                this.progressManager.showError('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' + validation.errors.join(', '));
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if (this.currentEditingAddress?.id) {
                await window.db.update('addresses', addressData);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                this.eventBus.emit(CONSTANTS.EVENTS.ADDRESS_UPDATED, {
                    address: addressData,
                    oldAddress: this.currentEditingAddress,
                    timestamp: new Date()
                });
            } else {
                await window.db.add('addresses', addressData);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                this.eventBus.emit(CONSTANTS.EVENTS.ADDRESS_ADDED, {
                    address: addressData,
                    timestamp: new Date()
                });
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.closeEditAddressModal();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.refreshAddressData();
            
            this.progressManager.showSuccess('–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
            
        } catch (error) {
            console.error('Error saving address:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ' + error.message);
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
     */
    async deleteAddress(addressId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            const address = await window.db.get('addresses', addressId);
            if (!address) {
                console.warn('‚ùå AddressManager.deleteAddress: –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', addressId);
                this.progressManager.showError('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            const confirmed = confirm(
                `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å?\n\n` +
                `"${address.address}"\n\n` +
                `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`
            );
            
            if (!confirmed) {
                return;
            }
            
            await Helpers.debugLog(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: ${addressId}`);
            
            // –£–¥–∞–ª—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await window.db.delete('addresses', addressId);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
            this.eventBus.emit(CONSTANTS.EVENTS.ADDRESS_DELETED, {
                address,
                timestamp: new Date()
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.refreshAddressData();
            
            this.progressManager.showSuccess('–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            
        } catch (error) {
            console.error('Error deleting address:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ' + error.message);
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏
     */
    async deleteAllAddressesInArea() {
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) {
            this.progressManager.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
            return;
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const allAddresses = await window.db.getAll('addresses');
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥—è—Ç –≤ –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏
            const areaAddresses = allAddresses.filter(address => {
                if (!address.coordinates || !address.coordinates.lat || !address.coordinates.lng) {
                    return false;
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–∫–∏ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                return window.db.isPointInPolygon(address.coordinates, currentArea.polygon);
            });
            
            if (areaAddresses.length === 0) {
                this.progressManager.showInfo('–í –æ–±–ª–∞—Å—Ç–∏ –Ω–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            const confirmed = confirm(
                `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∞–¥—Ä–µ—Å–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ "${currentArea.name}"?\n\n` +
                `–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: ${areaAddresses.length} –∞–¥—Ä–µ—Å–æ–≤\n\n` +
                `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –æ–±—ä–µ–∫—Ç—ã!`
            );
            
            if (!confirmed) {
                return;
            }
            
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            const button = document.getElementById('deleteAllAddressesBtn');
            if (button) {
                button.disabled = true;
                button.innerHTML = 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ...';
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            this.progressManager.createProgressBar('delete-data', 'delete-dataProgress');
            
            await Helpers.debugLog(`üóëÔ∏è === –ù–ê–ß–ê–õ–û –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ê–î–†–ï–°–û–í ===`);
            await Helpers.debugLog(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${areaAddresses.length} –∞–¥—Ä–µ—Å–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏: ${currentArea.name}`);
            
            let deletedCount = 0;
            let errorCount = 0;
            
            // –£–¥–∞–ª—è–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ –æ–¥–Ω–æ–º—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            for (let i = 0; i < areaAddresses.length; i++) {
                const address = areaAddresses[i];
                const progress = ((i + 1) / areaAddresses.length) * 100;
                
                try {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    this.progressManager.updateProgressBar(
                        'delete-data', 
                        progress, 
                        `–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ ${i + 1} –∏–∑ ${areaAddresses.length}: ${address.address || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`
                    );
                    
                    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    const listings = await window.db.getListingsByAddress(address.id);
                    for (const listing of listings) {
                        await window.db.deleteListing(listing.id);
                    }
                    
                    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                    const objects = await window.db.getObjectsByAddress(address.id);
                    for (const object of objects) {
                        await window.db.deleteObject(object.id);
                    }
                    
                    // –£–¥–∞–ª—è–µ–º —Å–∞–º –∞–¥—Ä–µ—Å
                    await window.db.delete('addresses', address.id);
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
                    this.eventBus.emit(CONSTANTS.EVENTS.ADDRESS_DELETED, {
                        address,
                        timestamp: new Date()
                    });
                    
                    deletedCount++;
                    
                    await Helpers.debugLog(`‚úÖ –£–¥–∞–ª–µ–Ω –∞–¥—Ä–µ—Å: ${address.address} (${address.id})`);
                    
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ ${address.id}:`, error);
                    errorCount++;
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è UI
                if (i % 10 === 0) {
                    await new Promise(resolve => setTimeout(resolve, 50));
                }
            }
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            this.progressManager.updateProgressBar('delete-data', 100, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.refreshAddressData();
            
            const resultMessage = `–£–¥–∞–ª–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: ${deletedCount}${errorCount > 0 ? `, –æ—à–∏–±–æ–∫: ${errorCount}` : ''}`;
            
            if (errorCount === 0) {
                this.progressManager.showSuccess(resultMessage);
            } else {
                this.progressManager.showWarning(resultMessage);
            }
            
            await Helpers.debugLog(`üóëÔ∏è === –ó–ê–í–ï–†–®–ï–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø ===`);
            await Helpers.debugLog(`üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç: —É–¥–∞–ª–µ–Ω–æ ${deletedCount}, –æ—à–∏–±–æ–∫ ${errorCount}`);
            
        } catch (error) {
            console.error('Error deleting all addresses in area:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: ' + error.message);
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            const button = document.getElementById('deleteAllAddressesBtn');
            if (button) {
                button.disabled = false;
                button.innerHTML = `
                    <svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –æ–±–ª–∞—Å—Ç–∏
                `;
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
     */
    async refreshAddressData() {
        try {
            await Helpers.debugLog('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å–∞ (—Å–æ–±—ã—Ç–∏–µ ADDRESSES_LOADED –≤—ã–∑–æ–≤–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            await this.loadAddresses();
            
        } catch (error) {
            console.error('Error refreshing address data:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
     */
    async forceRefreshAddressData() {
        try {
            await Helpers.debugLog('üîÑ === –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ê–î–†–ï–°–û–í ===');
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            const spatialManager = window.spatialIndexManager;
            if (spatialManager) {
                await Helpers.debugLog('üóëÔ∏è –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–¥—Ä–µ—Å–æ–≤');
                spatialManager.clearIndex('addresses');
                if (spatialManager.hasIndex('addresses')) {
                    spatialManager.removeIndex('addresses');
                }
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞
            await this.loadAddresses();
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            this.eventBus.emit(CONSTANTS.EVENTS.ADDRESSES_UPDATED, {
                forced: true,
                timestamp: new Date()
            });
            
        } catch (error) {
            console.error('Error force refreshing address data:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ API
     */
    async loadAddressesFromAPI() {
        await Helpers.debugLog('üöÄ === –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò –ê–î–†–ï–°–û–í –ò–ó OSM ===');
        
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea || !currentArea.polygon) {
            await Helpers.debugLog('‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤');
            this.progressManager.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤');
            return;
        }
        
        try {
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä OSM API
            if (!this.config.osmAPI) {
                this.config.osmAPI = new OSMOverpassAPI();
            }
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω
            const validation = this.config.osmAPI.validatePolygon(currentArea.polygon);
            if (!validation.valid) {
                await Helpers.debugLog(`‚ùå –ü–æ–ª–∏–≥–æ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: ${validation.error}`);
                this.progressManager.showError(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω: ${validation.error}`);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Overpass API
            const apiStatus = await this.config.osmAPI.getAPIStatus();
            if (!apiStatus.available) {
                await Helpers.debugLog('‚ùå Overpass API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', apiStatus);
                this.progressManager.showError('Overpass API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                return;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            this.progressManager.createProgressBar('import-addresses', 'import-addressesProgress');
            
            // –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const progressCallback = (message, percent) => {
                this.progressManager.updateProgressBar('import-addresses', percent, message);
            };
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞
            const osmAddresses = await this.config.osmAPI.loadAddressesForArea(currentArea, progressCallback);
            
            if (osmAddresses.length === 0) {
                this.progressManager.updateProgressBar('import-addresses', 100, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ');
                this.progressManager.showInfo('–í —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ OSM');
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            let savedCount = 0;
            let skippedCount = 0;
            
            for (const address of osmAddresses) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                const existingAddresses = await window.db.getAll('addresses');
                const duplicate = existingAddresses.find(existing => 
                    existing.source === 'osm' && 
                    existing.osm_id === address.osm_id && 
                    existing.osm_type === address.osm_type
                );
                
                if (duplicate) {
                    skippedCount++;
                    continue;
                }
                
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –∫ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏
                address.map_area_id = currentArea.id;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                await window.db.add('addresses', address);
                savedCount++;
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                this.eventBus.emit(CONSTANTS.EVENTS.ADDRESS_ADDED, {
                    address,
                    source: 'osm',
                    timestamp: new Date()
                });
            }
            
            this.progressManager.updateProgressBar('import-addresses', 100, '–ó–∞–≤–µ—Ä—à–µ–Ω–æ');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.refreshAddressData();
            
            const message = `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${savedCount} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ OSM${skippedCount > 0 ? `, –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${skippedCount}` : ''}`;
            this.progressManager.showSuccess(message);
            
        } catch (error) {
            console.error('Error loading addresses from API:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤: ' + error.message);
        }
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ñ–∞–π–ª
     */
    async exportAddressesToFile() {
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) {
            this.progressManager.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
            return;
        }
        
        try {
            const button = document.getElementById('exportAddressesBtn');
            if (button) {
                button.disabled = true;
                button.innerHTML = 'üì§ –≠–∫—Å–ø–æ—Ä—Ç...';
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const allAddresses = await window.db.getAll('addresses');
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥—è—Ç –≤ –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏
            const areaAddresses = allAddresses.filter(address => {
                if (!address.coordinates || !address.coordinates.lat || !address.coordinates.lng) {
                    return false;
                }
                
                const addressModel = new AddressModel(address);
                const mapAreaModel = new MapAreaModel(currentArea);
                return addressModel.belongsToMapArea(mapAreaModel);
            });
            
            if (areaAddresses.length === 0) {
                this.progressManager.showWarning('–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            const referenceData = await this.getReferenceDataForExport();
            
            // –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
            const exportData = {
                metadata: {
                    export_date: new Date().toISOString(),
                    area_name: currentArea.name,
                    area_id: currentArea.id,
                    total_addresses: areaAddresses.length,
                    export_version: '1.2',
                    includes_polygon: currentArea.polygon && currentArea.polygon.length > 0,
                    includes_references: true
                },
                area_polygon: currentArea.polygon || [],
                addresses: areaAddresses,
                reference_data: referenceData
            };
            
            // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const fileName = `addresses_${currentArea.name}_${new Date().toISOString().split('T')[0]}.json`;
            Helpers.downloadFile(JSON.stringify(exportData, null, 2), fileName, 'application/json');
            
            this.progressManager.showSuccess(`–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${areaAddresses.length} –∞–¥—Ä–µ—Å–æ–≤`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∞–¥—Ä–µ—Å–æ–≤');
        } finally {
            const button = document.getElementById('exportAddressesBtn');
            if (button) {
                button.disabled = false;
                button.innerHTML = 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤';
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    async getReferenceDataForExport() {
        const [houseSeries, houseClasses, wallMaterials, ceilingMaterials] = await Promise.all([
            window.db.getAll('house_series'),
            window.db.getAll('house_classes'),
            window.db.getAll('wall_materials'),
            window.db.getAll('ceiling_materials')
        ]);
        
        return {
            house_series: houseSeries,
            house_classes: houseClasses,
            wall_materials: wallMaterials,
            ceiling_materials: ceilingMaterials
        };
    }
    
    /**
     * –ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
     */
    async importAddressesFromFile(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) {
            this.progressManager.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
            return;
        }
        
        try {
            const button = document.getElementById('importAddressesBtn');
            if (button) {
                button.disabled = true;
                button.innerHTML = 'üì• –ò–º–ø–æ—Ä—Ç...';
            }
            
            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            const fileContent = await Helpers.readFile(file);
            let importData;
            
            try {
                importData = JSON.parse(fileContent);
            } catch (parseError) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª–∞');
            }
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
            this.validateImportData(importData);
            
            const addresses = importData.addresses;
            if (!Array.isArray(addresses) || addresses.length === 0) {
                throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏
            const polygonImported = await this.handlePolygonImport(importData, currentArea);
            
            // –ò–º–ø–æ—Ä—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç)
            if (importData.reference_data) {
                await this.importReferenceData(importData.reference_data);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–º)
            const actualArea = this.dataState.getState('currentArea');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
            let areaAddresses;
            
            if (actualArea.polygon && Array.isArray(actualArea.polygon) && actualArea.polygon.length >= 3) {
                // –£ –æ–±–ª–∞—Å—Ç–∏ –µ—Å—Ç—å –ø–æ–ª–∏–≥–æ–Ω - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ –Ω–µ–º—É
                console.log('üîç –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª–∏–≥–æ–Ω—É –æ–±–ª–∞—Å—Ç–∏');
                areaAddresses = addresses.filter(address => {
                    if (!address.coordinates || !address.coordinates.lat || !address.coordinates.lng) {
                        return false;
                    }
                    
                    const addressModel = new AddressModel(address);
                    const mapAreaModel = new MapAreaModel(actualArea);
                    return addressModel.belongsToMapArea(mapAreaModel);
                });
            } else if (polygonImported) {
                // –ü–æ–ª–∏–≥–æ–Ω –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ —Ñ–∞–π–ª–∞ - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞
                console.log('üì• –ü–æ–ª–∏–≥–æ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞');
                areaAddresses = addresses.filter(address => {
                    return address.coordinates && address.coordinates.lat && address.coordinates.lng;
                });
            } else {
                // –ù–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–∏ –≤ –æ–±–ª–∞—Å—Ç–∏, –Ω–∏ –≤ —Ñ–∞–π–ª–µ - –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å
                console.log('‚ùå –ù–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤');
                areaAddresses = [];
            }
            
            if (areaAddresses.length === 0) {
                const message = polygonImported ? 
                    '–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏' :
                    '–ù–∏ –æ–¥–∏–Ω –∞–¥—Ä–µ—Å –∏–∑ —Ñ–∞–π–ª–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ç–µ–∫—É—â—É—é –æ–±–ª–∞—Å—Ç—å';
                this.progressManager.showWarning(message);
                return;
            }
            
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞
            const { importedCount, skippedCount } = await this.importAddresses(areaAddresses, actualArea);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.refreshAddressData();
            
            let importMessage = `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount} –∞–¥—Ä–µ—Å–æ–≤${skippedCount > 0 ? `, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}` : ''}`;
            if (polygonImported) {
                importMessage += '. –ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞';
            }
            this.progressManager.showSuccess(importMessage);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∞–¥—Ä–µ—Å–æ–≤:', error);
            this.progressManager.showError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${error.message}`);
        } finally {
            const button = document.getElementById('importAddressesBtn');
            if (button) {
                button.disabled = false;
                button.innerHTML = 'üì• –ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤';
            }
            
            // –û—á–∏—â–∞–µ–º input
            event.target.value = '';
        }
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∞
     */
    validateImportData(data) {
        if (!data || typeof data !== 'object') {
            throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞');
        }
        
        if (!data.metadata) {
            throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö');
        }
        
        if (!data.addresses || !Array.isArray(data.addresses)) {
            throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤–∞ –∞–¥—Ä–µ—Å–æ–≤');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é —Ñ–æ—Ä–º–∞—Ç–∞
        const version = data.metadata.export_version;
        if (version && !['1.0', '1.1', '1.2'].includes(version)) {
            console.warn('–í–µ—Ä—Å–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö (1.0, 1.1, 1.2)');
        }
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (data.area_polygon !== undefined) {
            if (!Array.isArray(data.area_polygon)) {
                throw new Error('–ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
            }
            
            if (data.area_polygon.length > 0) {
                data.area_polygon.forEach((point, i) => {
                    if (!point || typeof point !== 'object' || 
                        typeof point.lat !== 'number' || typeof point.lng !== 'number') {
                        throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—á–∫–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ ${i}`);
                    }
                });
                
                if (data.area_polygon.length < 3) {
                    console.warn('–ü–æ–ª–∏–≥–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω–µ–µ 3 —Ç–æ—á–µ–∫ –∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω');
                }
            }
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–ª–∏–≥–æ–Ω–∞
     */
    async handlePolygonImport(importData, currentArea) {
        if (!importData.area_polygon || !Array.isArray(importData.area_polygon) || importData.area_polygon.length < 3) {
            return false;
        }
        
        // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–∞–π–ª–∞
        const hasExistingPolygon = currentArea.polygon && Array.isArray(currentArea.polygon) && currentArea.polygon.length >= 3;
        console.log(`üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω –∏–∑ —Ñ–∞–π–ª–∞ (${hasExistingPolygon ? '–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π' : '—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π'})`);
        
        try {
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω
            const updatedArea = {
                ...currentArea,
                polygon: importData.area_polygon,
                updated_at: new Date()
            };
            
            await window.db.update('map_areas', updatedArea);
            this.dataState.setState('currentArea', updatedArea);
            
            console.log('‚úÖ –ü–æ–ª–∏–≥–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –æ–±–ª–∞—Å—Ç—å:', updatedArea.polygon.length, '—Ç–æ—á–µ–∫');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            this.eventBus.emit(CONSTANTS.EVENTS.AREA_UPDATED, {
                area: updatedArea,
                polygonImported: true,
                timestamp: new Date()
            });
            
            return true;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ–ª–∏–≥–æ–Ω–∞:', error);
            return false;
        }
    }
    
    /**
     * –ò–º–ø–æ—Ä—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async importReferenceData(referenceData) {
        if (!referenceData || typeof referenceData !== 'object') {
            return;
        }
        
        const referenceTypes = ['house_series', 'house_classes', 'wall_materials', 'ceiling_materials'];
        
        for (const refType of referenceTypes) {
            if (referenceData[refType] && Array.isArray(referenceData[refType])) {
                await this.importReferenceType(refType, referenceData[refType]);
            }
        }
    }
    
    /**
     * –ò–º–ø–æ—Ä—Ç –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async importReferenceType(refType, refData) {
        try {
            const existing = await window.db.getAll(refType);
            
            for (const item of refData) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                const duplicate = existing.find(e => e.name === item.name);
                if (duplicate) {
                    continue;
                }
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                const newItem = {
                    ...item,
                    id: item.id || Helpers.generateId(),
                    created_at: item.created_at || new Date().toISOString(),
                    updated_at: new Date().toISOString()
                };
                
                await window.db.add(refType, newItem);
            }
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ ${refType}:`, error);
        }
    }
    
    /**
     * –ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤
     */
    async importAddresses(addresses, currentArea) {
        let importedCount = 0;
        let skippedCount = 0;
        
        console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤:', addresses.length, '–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const existingAddresses = await window.db.getAll('addresses');
        console.log('üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ –±–∞–∑–µ:', existingAddresses.length);
        
        for (const address of addresses) {
            try {
                console.log('üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞:', address.address);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                const duplicate = existingAddresses.find(existing => 
                    existing.address === address.address && 
                    existing.coordinates &&
                    Math.abs(existing.coordinates.lat - address.coordinates.lat) < 0.0001 &&
                    Math.abs(existing.coordinates.lng - address.coordinates.lng) < 0.0001
                );
                
                if (duplicate) {
                    console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç:', address.address);
                    skippedCount++;
                    continue;
                }
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
                const newAddress = {
                    ...address,
                    id: Helpers.generateId(),
                    map_area_id: currentArea.id,
                    source: 'imported',
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                };
                
                // –í–∞–ª–∏–¥–∏—Ä—É–µ–º
                const validation = Validators.validateAddress(newAddress);
                if (!validation.isValid) {
                    console.log('‚ùå –ê–¥—Ä–µ—Å –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é:', address.address, validation.errors);
                    skippedCount++;
                    continue;
                }
                
                await window.db.add('addresses', newAddress);
                importedCount++;
                console.log('‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', address.address);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
                this.eventBus.emit(CONSTANTS.EVENTS.ADDRESS_ADDED, {
                    address: newAddress,
                    source: 'import',
                    timestamp: new Date()
                });
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∞–¥—Ä–µ—Å–∞:', error);
                skippedCount++;
            }
        }
        
        return { importedCount, skippedCount };
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–ª–∞—Å—Ç–∏
     */
    async loadListings() {
        try {
            console.log('üöÄ AddressManager.loadListings: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–ª–∞—Å—Ç–∏');
            console.log('üîç AddressManager.loadListings: DataState —ç–∫–∑–µ–º–ø–ª—è—Ä:', this.dataState);
            await Helpers.debugLog('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–ª–∞—Å—Ç–∏...');
            
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea) {
                console.log('‚ùå AddressManager.loadListings: –û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
                await Helpers.debugLog('‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
                return;
            }
            
            console.log('üìç AddressManager.loadListings: –û–±–ª–∞—Å—Ç—å:', currentArea.name, 'ID:', currentArea.id);
            
            // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            let allListings = this.dataState.getState('allListingsCache');
            if (!allListings) {
                console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –ë–î (–∫–µ—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)');
                allListings = await window.db.getAll('listings');
            } else {
                console.log('‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', allListings.length);
            }
            let areaListings = [];
            
            await Helpers.debugLog(`üìä –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ: ${allListings.length}`);
            await Helpers.debugLog(`üîç –ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏: ${currentArea.polygon ? currentArea.polygon.length : 0} —Ç–æ—á–µ–∫`);
            
            if (currentArea.polygon && currentArea.polygon.length >= 3) {
                // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É –æ–±–ª–∞—Å—Ç–∏
                areaListings = allListings.filter(listing => {
                    if (!listing.coordinates || !listing.coordinates.lat || !listing.coordinates.lng) {
                        return false;
                    }
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–∫–∏ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    const isInside = window.db.isPointInPolygon(listing.coordinates, currentArea.polygon);
                    if (isInside) {
                        //console.log('üéØ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏:', listing.title, listing.coordinates);
                    }
                    return isInside;
                });
                
                await Helpers.debugLog(`üîç –û–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${allListings.filter(l => l.coordinates && l.coordinates.lat && l.coordinates.lng).length}`);
                
                // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                const debugListings = allListings.slice(0, 3);
                for (const listing of debugListings) {
                    if (listing.coordinates) {
                        const isInside = window.db.isPointInPolygon(listing.coordinates, currentArea.polygon);
                        console.log(`üîç –û—Ç–ª–∞–¥–∫–∞: ${listing.title} (${listing.coordinates.lat}, ${listing.coordinates.lng}) -> ${isInside ? '–í–ù–£–¢–†–ò' : '–í–ù–ï'} –æ–±–ª–∞—Å—Ç–∏`);
                    }
                }
            } else {
                await Helpers.debugLog('‚ö†Ô∏è –û–±–ª–∞—Å—Ç—å –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–∞, –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                if (!currentArea.polygon) {
                    await Helpers.debugLog('‚ùå –ü–æ–ª–∏–≥–æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                } else {
                    await Helpers.debugLog(`‚ùå –ü–æ–ª–∏–≥–æ–Ω —Å–ª–∏—à–∫–æ–º –º–∞–ª: ${currentArea.polygon.length} —Ç–æ—á–µ–∫ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3)`);
                }
            }
            
            await Helpers.debugLog(`üìä –û–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–æ: ${areaListings.length}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            console.log(`üîß AddressManager.loadListings: –°–æ—Ö—Ä–∞–Ω—è–µ–º ${areaListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ DataState`);
            this.dataState.setState('listings', areaListings);
            console.log(`‚úÖ AddressManager.loadListings: –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä–∫–∞:`, this.dataState.getState('listings')?.length);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            this.eventBus.emit(CONSTANTS.EVENTS.LISTINGS_LOADED, {
                listings: areaListings,
                count: areaListings.length,
                area: currentArea,
                timestamp: new Date()
            });
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–æ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
            this.eventBus.emit(CONSTANTS.EVENTS.AREA_UPDATED, currentArea);
            
            await Helpers.debugLog('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ' + error.message);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadReferenceData() {
        try {
            const [houseSeries, houseClasses, wallMaterials, ceilingMaterials] = await Promise.all([
                window.db.getAll('house_series'),
                window.db.getAll('house_classes'),
                window.db.getAll('wall_materials'),
                window.db.getAll('ceiling_materials')
            ]);
            
            this.houseSeries = houseSeries;
            this.houseClasses = houseClasses;
            this.wallMaterials = wallMaterials;
            this.ceilingMaterials = ceilingMaterials;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç—ã
            this.updateReferenceSelects();
            
        } catch (error) {
            console.error('Error loading reference data:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    updateReferenceSelects() {
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ SlimSelect —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        this.destroyModalSlimSelects();
        
        // –°–µ—Ä–∏–∏ –¥–æ–º–æ–≤
        const houseSeriesSelect = document.getElementById('editHouseSeries');
        if (houseSeriesSelect) {
            houseSeriesSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é...</option>';
            this.houseSeries.forEach(series => {
                houseSeriesSelect.innerHTML += `<option value="${series.id}">${series.name}</option>`;
            });
            
            this.modalSlimSelects.houseSeriesSelect = new SlimSelect({
                select: '#editHouseSeries',
                settings: {
                    searchText: '–ü–æ–∏—Å–∫...',
                    searchPlaceholder: '–ü–æ–∏—Å–∫ —Å–µ—Ä–∏–∏ –¥–æ–º–∞',
                    searchingText: '–ü–æ–∏—Å–∫...',
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é...'
                },
                events: {
                    afterChange: (newVal) => {
                        this.updateReferenceActionButton('houseSeriesActionBtn', newVal);
                    }
                }
            });
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ Tailwind –∫ SlimSelect
            this.applySlimSelectStyles('#editHouseSeries');
        }
        
        // –ö–ª–∞—Å—Å—ã –¥–æ–º–æ–≤
        const houseClassSelect = document.getElementById('editHouseClass');
        if (houseClassSelect) {
            houseClassSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å...</option>';
            this.houseClasses.forEach(houseClass => {
                houseClassSelect.innerHTML += `<option value="${houseClass.id}">${houseClass.name}</option>`;
            });
            
            this.modalSlimSelects.houseClassSelect = new SlimSelect({
                select: '#editHouseClass',
                settings: {
                    searchText: '–ü–æ–∏—Å–∫...',
                    searchPlaceholder: '–ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞ –¥–æ–º–∞',
                    searchingText: '–ü–æ–∏—Å–∫...',
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å...'
                },
                events: {
                    afterChange: (newVal) => {
                        this.updateReferenceActionButton('houseClassActionBtn', newVal);
                    }
                }
            });
            this.applySlimSelectStyles('#editHouseClass');
        }
        
        // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ç–µ–Ω
        const wallMaterialSelect = document.getElementById('editWallMaterial');
        if (wallMaterialSelect) {
            wallMaterialSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª...</option>';
            this.wallMaterials.forEach(material => {
                wallMaterialSelect.innerHTML += `<option value="${material.id}">${material.name}</option>`;
            });
            
            this.modalSlimSelects.wallMaterialSelect = new SlimSelect({
                select: '#editWallMaterial',
                settings: {
                    searchText: '–ü–æ–∏—Å–∫...',
                    searchPlaceholder: '–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω',
                    searchingText: '–ü–æ–∏—Å–∫...',
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª...'
                },
                events: {
                    afterChange: (newVal) => {
                        this.updateReferenceActionButton('wallMaterialActionBtn', newVal);
                    }
                }
            });
            this.applySlimSelectStyles('#editWallMaterial');
        }
        
        // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
        const ceilingMaterialSelect = document.getElementById('editCeilingMaterial');
        if (ceilingMaterialSelect) {
            ceilingMaterialSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª...</option>';
            this.ceilingMaterials.forEach(material => {
                ceilingMaterialSelect.innerHTML += `<option value="${material.id}">${material.name}</option>`;
            });
            
            this.modalSlimSelects.ceilingMaterialSelect = new SlimSelect({
                select: '#editCeilingMaterial',
                settings: {
                    searchText: '–ü–æ–∏—Å–∫...',
                    searchPlaceholder: '–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π',
                    searchingText: '–ü–æ–∏—Å–∫...',
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª...'
                },
                events: {
                    afterChange: (newVal) => {
                        this.updateReferenceActionButton('ceilingMaterialActionBtn', newVal);
                    }
                }
            });
            this.applySlimSelectStyles('#editCeilingMaterial');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ–≤
        this.initBasicModalSelects();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö SlimSelect –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    initBasicModalSelects() {
        // –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        const typeSelect = document.getElementById('editAddressType');
        if (typeSelect && !this.modalSlimSelects.typeSelect) {
            this.modalSlimSelects.typeSelect = new SlimSelect({
                select: '#editAddressType',
                settings: {
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø...'
                }
            });
            this.applySlimSelectStyles('#editAddressType');
        }
        
        // –ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ
        const gasSupplySelect = document.getElementById('editGasSupply');
        if (gasSupplySelect && !this.modalSlimSelects.gasSupplySelect) {
            this.modalSlimSelects.gasSupplySelect = new SlimSelect({
                select: '#editGasSupply',
                settings: {
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ...'
                }
            });
            this.applySlimSelectStyles('#editGasSupply');
        }
        
        // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ
        const individualHeatingSelect = document.getElementById('editIndividualHeating');
        if (individualHeatingSelect && !this.modalSlimSelects.individualHeatingSelect) {
            this.modalSlimSelects.individualHeatingSelect = new SlimSelect({
                select: '#editIndividualHeating',
                settings: {
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ...'
                }
            });
            this.applySlimSelectStyles('#editIndividualHeating');
        }
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
     */
    bindReferenceModalEvents() {
        // –°–µ—Ä–∏—è –¥–æ–º–∞
        document.getElementById('saveHouseSeries')?.addEventListener('click', () => {
            this.saveHouseSeries();
        });
        document.getElementById('cancelHouseSeries')?.addEventListener('click', () => {
            this.closeModal('houseSeriesModal');
        });
        
        // –ö–ª–∞—Å—Å –¥–æ–º–∞
        document.getElementById('saveHouseClass')?.addEventListener('click', () => {
            this.saveHouseClass();
        });
        document.getElementById('cancelHouseClass')?.addEventListener('click', () => {
            this.closeModal('houseClassModal');
        });
        
        // –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω
        document.getElementById('saveWallMaterial')?.addEventListener('click', () => {
            this.saveWallMaterial();
        });
        document.getElementById('cancelWallMaterial')?.addEventListener('click', () => {
            this.closeModal('wallMaterialModal');
        });
        
        // –ú–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
        document.getElementById('saveCeilingMaterial')?.addEventListener('click', () => {
            this.saveCeilingMaterial();
        });
        document.getElementById('cancelCeilingMaterial')?.addEventListener('click', () => {
            this.closeModal('ceilingMaterialModal');
        });
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('hidden');
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            const form = modal.querySelector('form');
            if (form) {
                form.reset();
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
     */
    updateReferenceActionButton(buttonId, selectedValue) {
        const button = document.getElementById(buttonId);
        if (!button) return;
        
        if (selectedValue && selectedValue.length > 0 && selectedValue[0] && selectedValue[0].value) {
            // –ï—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
            button.innerHTML = '<svg class="-ml-0.5 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path></svg>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
            button.className = button.className.replace('bg-blue-600 hover:bg-blue-700', 'bg-green-600 hover:bg-green-700');
        } else {
            // –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–î–æ–±–∞–≤–∏—Ç—å"
            button.innerHTML = '+ –î–æ–±–∞–≤–∏—Ç—å';
            button.className = button.className.replace('bg-green-600 hover:bg-green-700', 'bg-blue-600 hover:bg-blue-700');
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π –¥–ª—è SlimSelect
     */
    addSlimSelectCSS() {
        if (!document.getElementById('slimselect-tailwind-styles')) {
            const style = document.createElement('style');
            style.id = 'slimselect-tailwind-styles';
            style.textContent = `
                /* SlimSelect —Å—Ç–∏–ª–∏ –≤ —Å—Ç–∏–ª–µ Tailwind –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ */
                #editAddressModal .ss-main {
                    margin-top: 0.25rem !important;
                    margin-bottom: 0 !important;
                    width: 100% !important;
                    position: relative !important;
                    flex: 1 !important;
                }
                
                #editAddressModal .ss-single-selected {
                    display: flex !important;
                    align-items: center !important;
                    width: 100% !important;
                    height: 2.375rem !important;
                    min-height: 2.375rem !important;
                    max-height: 2.375rem !important;
                    padding: 0.375rem 2.5rem 0.375rem 0.75rem !important;
                    font-size: 0.875rem !important;
                    line-height: 1.5rem !important;
                    color: #111827 !important;
                    background-color: white !important;
                    background-image: none !important;
                    border: 1px solid #d1d5db !important;
                    border-radius: 0.375rem !important;
                    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05) !important;
                    transition: all 0.15s ease-in-out !important;
                    cursor: pointer !important;
                    box-sizing: border-box !important;
                }
                
                #editAddressModal .ss-single-selected:hover {
                    border-color: #9ca3af !important;
                }
                
                #editAddressModal .ss-single-selected:focus,
                #editAddressModal .ss-main:focus-within .ss-single-selected,
                #editAddressModal .ss-main.ss-open .ss-single-selected {
                    outline: 2px solid #4f46e5 !important;
                    outline-offset: 2px !important;
                    border-color: #4f46e5 !important;
                    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1) !important;
                }
                
                #editAddressModal .ss-arrow {
                    position: absolute !important;
                    top: 50% !important;
                    right: 0.75rem !important;
                    transform: translateY(-50%) !important;
                    width: 0 !important;
                    height: 0 !important;
                    border: 4px solid transparent !important;
                    border-top-color: #6b7280 !important;
                    border-bottom: none !important;
                    transition: transform 0.15s ease-in-out !important;
                }
                
                #editAddressModal .ss-main.ss-open .ss-arrow {
                    transform: translateY(-50%) rotate(180deg) !important;
                }
                
                #editAddressModal .ss-content {
                    position: absolute !important;
                    z-index: 9999 !important;
                    width: 100% !important;
                    max-height: 200px !important;
                    margin-top: 0.25rem !important;
                    background-color: white !important;
                    border: 1px solid #d1d5db !important;
                    border-radius: 0.375rem !important;
                    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05) !important;
                    overflow: hidden !important;
                }
                
                #editAddressModal .ss-list {
                    max-height: 160px !important;
                    overflow-y: auto !important;
                    padding: 0.25rem 0 !important;
                }
                
                #editAddressModal .ss-option {
                    display: flex !important;
                    align-items: center !important;
                    padding: 0.5rem 0.75rem !important;
                    font-size: 0.875rem !important;
                    line-height: 1.25rem !important;
                    color: #111827 !important;
                    cursor: pointer !important;
                    transition: background-color 0.15s ease-in-out !important;
                }
                
                #editAddressModal .ss-option:hover {
                    background-color: #f3f4f6 !important;
                }
                
                #editAddressModal .ss-option.ss-highlighted {
                    background-color: #4f46e5 !important;
                    color: white !important;
                }
                
                #editAddressModal .ss-option.ss-disabled {
                    color: #9ca3af !important;
                    cursor: not-allowed !important;
                    background-color: transparent !important;
                }
                
                #editAddressModal .ss-search {
                    padding: 0.5rem !important;
                    border-bottom: 1px solid #e5e7eb !important;
                }
                
                #editAddressModal .ss-search input {
                    width: 100% !important;
                    padding: 0.375rem 0.75rem !important;
                    font-size: 0.875rem !important;
                    line-height: 1.25rem !important;
                    color: #111827 !important;
                    background-color: white !important;
                    border: 1px solid #d1d5db !important;
                    border-radius: 0.25rem !important;
                    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05) !important;
                    transition: all 0.15s ease-in-out !important;
                    box-sizing: border-box !important;
                }
                
                #editAddressModal .ss-search input:focus {
                    outline: 2px solid #4f46e5 !important;
                    outline-offset: 2px !important;
                    border-color: #4f46e5 !important;
                }
                
                #editAddressModal .ss-search input::placeholder {
                    color: #9ca3af !important;
                }
                
                /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è placeholder */
                #editAddressModal .ss-placeholder {
                    color: #9ca3af !important;
                    font-style: normal !important;
                }
                
                /* –°—Ç–∏–ª–∏ –¥–ª—è –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) */
                #editAddressModal .ss-values {
                    display: flex !important;
                    flex-wrap: wrap !important;
                    gap: 0.25rem !important;
                }
                
                #editAddressModal .ss-value {
                    display: flex !important;
                    align-items: center !important;
                    padding: 0.25rem 0.5rem !important;
                    background-color: #e5e7eb !important;
                    border-radius: 0.25rem !important;
                    font-size: 0.75rem !important;
                    line-height: 1rem !important;
                    color: #374151 !important;
                }
                
                #editAddressModal .ss-value-delete {
                    margin-left: 0.25rem !important;
                    cursor: pointer !important;
                    color: #6b7280 !important;
                }
                
                #editAddressModal .ss-value-delete:hover {
                    color: #374151 !important;
                }
                
                /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ flex –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö */
                #editAddressModal .flex.gap-2 {
                    align-items: flex-start !important;
                }
                
                #editAddressModal .flex.gap-2 .ss-main {
                    margin-top: 0.25rem !important;
                    flex: 1 !important;
                }
                
                /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ flex –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö */
                #editAddressModal .flex.gap-2 button {
                    margin-top: 0.25rem !important;
                    height: 2.375rem !important;
                    min-height: 2.375rem !important;
                }
            `;
            document.head.appendChild(style);
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π Tailwind –∫ SlimSelect
     */
    applySlimSelectStyles(selectId) {
        // –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑
        this.addSlimSelectCSS();
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ SlimSelect —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    destroyModalSlimSelects() {
        Object.keys(this.modalSlimSelects).forEach(key => {
            if (this.modalSlimSelects[key]) {
                this.modalSlimSelects[key].destroy();
                this.modalSlimSelects[key] = null;
            }
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
     */
    initSourceFilter() {
        const addresses = this.dataState.getState('addresses') || [];
        const sources = [...new Set(addresses.map(addr => addr.source))];
        
        const filterSelect = document.getElementById('sourceFilter');
        if (filterSelect && this.sourceFilterSlimSelect) {
            this.sourceFilterSlimSelect.destroy();
        }
        
        if (filterSelect) {
            // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏–∏
            filterSelect.innerHTML = '<option value="">–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</option>';
            sources.forEach(source => {
                const sourceName = CONSTANTS.DATA_SOURCE_NAMES[source] || source;
                filterSelect.innerHTML += `<option value="${source}">${sourceName}</option>`;
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
            this.sourceFilterSlimSelect = new SlimSelect({
                select: '#sourceFilter',
                placeholder: '–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏',
                allowDeselect: true,
                showSearch: false
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
            this.sourceFilterSlimSelect.onChange = (info) => {
                this.applySourceFilter(info.value);
            };
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
     */
    applySourceFilter(source) {
        if (!this.addressesTable) return;
        
        if (source) {
            this.addressesTable.column(0).search(source).draw();
        } else {
            this.addressesTable.column(0).search('').draw();
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
     */
    openAddAddressModal() {
        this.currentEditingAddress = null;
        this.showAddressModal({});
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
     */
    openHouseSeriesModal() {
        // –õ–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ—Ä–∏–π –¥–æ–º–æ–≤
        this.eventBus.emit(CONSTANTS.EVENTS.MODAL_OPENED, {
            modalId: 'houseSeriesModal',
            timestamp: new Date()
        });
    }
    
    openHouseSeriesModal() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å
        const select = document.getElementById('editHouseSeries');
        if (select && select.value) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Ä–∏–∏
            this.showEditHouseSeriesModal(select.value);
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏
            this.showHouseSeriesModal();
        }
    }

    showHouseSeriesModal() {
        const modal = document.getElementById('houseSeriesModal');
        const form = document.getElementById('houseSeriesForm');
        const title = document.getElementById('house-series-modal-title');
        
        if (modal && form) {
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏
            form.reset();
            document.getElementById('houseSeriesId').value = '';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if (title) {
                title.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏—é –¥–æ–º–∞';
            }
            
            modal.classList.remove('hidden');
        } else {
            console.warn('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ houseSeriesModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    }

    async showEditHouseSeriesModal(seriesId) {
        try {
            const series = await window.db.get('house_series', seriesId);
            if (!series) {
                this.progressManager.showError('–°–µ—Ä–∏—è –¥–æ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            const modal = document.getElementById('houseSeriesModal');
            const form = document.getElementById('houseSeriesForm');
            const title = document.getElementById('house-series-modal-title');
            
            if (modal && form) {
                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–∏–∏
                document.getElementById('houseSeriesId').value = series.id;
                document.getElementById('houseSeriesName').value = series.name || '';
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if (title) {
                    title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–∏—é –¥–æ–º–∞';
                }
                
                modal.classList.remove('hidden');
            }
        } catch (error) {
            console.error('Error loading house series for edit:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–∏–∏ –¥–æ–º–∞');
        }
    }
    
    openHouseClassModal() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å
        const select = document.getElementById('editHouseClass');
        if (select && select.value) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
            this.showEditHouseClassModal(select.value);
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
            this.showHouseClassModal();
        }
    }

    showHouseClassModal() {
        const modal = document.getElementById('houseClassModal');
        const form = document.getElementById('houseClassForm');
        const title = document.getElementById('house-class-modal-title');
        
        if (modal && form) {
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
            form.reset();
            document.getElementById('houseClassId').value = '';
            document.getElementById('houseClassColor').value = '#3b82f6';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if (title) {
                title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å –¥–æ–º–∞';
            }
            
            modal.classList.remove('hidden');
        } else {
            console.warn('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ houseClassModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    }

    async showEditHouseClassModal(classId) {
        try {
            const houseClass = await window.db.get('house_classes', classId);
            if (!houseClass) {
                this.progressManager.showError('–ö–ª–∞—Å—Å –¥–æ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const modal = document.getElementById('houseClassModal');
            const form = document.getElementById('houseClassForm');
            const title = document.getElementById('house-class-modal-title');
            
            if (modal && form) {
                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞
                document.getElementById('houseClassId').value = houseClass.id;
                document.getElementById('houseClassName').value = houseClass.name || '';
                document.getElementById('houseClassColor').value = houseClass.color || '#3b82f6';
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if (title) {
                    title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å –¥–æ–º–∞';
                }
                
                modal.classList.remove('hidden');
            }
        } catch (error) {
            console.error('Error loading house class for edit:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞—Å—Å–∞ –¥–æ–º–∞');
        }
    }
    
    openWallMaterialModal() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å
        const select = document.getElementById('editWallMaterial');
        if (select && select.value) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            this.showEditWallMaterialModal(select.value);
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            this.showWallMaterialModal();
        }
    }

    showWallMaterialModal() {
        const modal = document.getElementById('wallMaterialModal');
        const form = document.getElementById('wallMaterialForm');
        const title = document.getElementById('wall-material-modal-title');
        
        if (modal && form) {
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            form.reset();
            document.getElementById('wallMaterialId').value = '';
            document.getElementById('wallMaterialColor').value = '#3b82f6';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if (title) {
                title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω';
            }
            
            modal.classList.remove('hidden');
        } else {
            console.warn('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ wallMaterialModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    }

    async showEditWallMaterialModal(materialId) {
        try {
            const material = await window.db.get('wall_materials', materialId);
            if (!material) {
                this.progressManager.showError('–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const modal = document.getElementById('wallMaterialModal');
            const form = document.getElementById('wallMaterialForm');
            const title = document.getElementById('wall-material-modal-title');
            
            if (modal && form) {
                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                document.getElementById('wallMaterialId').value = material.id;
                document.getElementById('wallMaterialName').value = material.name || '';
                document.getElementById('wallMaterialColor').value = material.color || '#3b82f6';
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if (title) {
                    title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω';
                }
                
                modal.classList.remove('hidden');
            }
        } catch (error) {
            console.error('Error loading wall material for edit:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω');
        }
    }
    
    openCeilingMaterialModal() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å
        const select = document.getElementById('editCeilingMaterial');
        if (select && select.value) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            this.showEditCeilingMaterialModal(select.value);
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            this.showCeilingMaterialModal();
        }
    }

    showCeilingMaterialModal() {
        const modal = document.getElementById('ceilingMaterialModal');
        const form = document.getElementById('ceilingMaterialForm');
        const title = document.getElementById('ceiling-material-modal-title');
        
        if (modal && form) {
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            form.reset();
            document.getElementById('ceilingMaterialId').value = '';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if (title) {
                title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π';
            }
            
            modal.classList.remove('hidden');
        } else {
            console.warn('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ ceilingMaterialModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    }

    async showEditCeilingMaterialModal(materialId) {
        try {
            const material = await window.db.get('ceiling_materials', materialId);
            if (!material) {
                this.progressManager.showError('–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const modal = document.getElementById('ceilingMaterialModal');
            const form = document.getElementById('ceilingMaterialForm');
            const title = document.getElementById('ceiling-material-modal-title');
            
            if (modal && form) {
                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                document.getElementById('ceilingMaterialId').value = material.id;
                document.getElementById('ceilingMaterialName').value = material.name || '';
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if (title) {
                    title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π';
                }
                
                modal.classList.remove('hidden');
            }
        } catch (error) {
            console.error('Error loading ceiling material for edit:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π');
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ –¥–æ–º–∞
     */
    async saveHouseSeries() {
        try {
            const form = document.getElementById('houseSeriesForm');
            const formData = new FormData(form);
            
            const seriesId = formData.get('id');
            const series = {
                name: formData.get('name').trim()
            };

            if (!series.name) {
                this.progressManager.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –¥–æ–º–∞');
                return;
            }

            if (seriesId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Ä–∏–∏
                series.id = seriesId;
                series.updated_at = new Date().toISOString();
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è created_at
                const existingSeries = await window.db.get('house_series', seriesId);
                if (existingSeries) {
                    series.created_at = existingSeries.created_at;
                }
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏
                series.id = Helpers.generateId();
                series.created_at = new Date().toISOString();
                series.updated_at = series.created_at;
            }

            if (seriesId) {
                await window.db.update('house_series', series);
            } else {
                await window.db.add('house_series', series);
            }
            
            this.closeModal('houseSeriesModal');
            await this.loadReferenceData();
            
            this.progressManager.showSuccess(seriesId ? '–°–µ—Ä–∏—è –¥–æ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–°–µ—Ä–∏—è –¥–æ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');

        } catch (error) {
            console.error('Error saving house series:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–∏–∏ –¥–æ–º–∞: ' + error.message);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–æ–º–∞
     */
    async saveHouseClass() {
        try {
            const form = document.getElementById('houseClassForm');
            const formData = new FormData(form);
            
            const classId = formData.get('id');
            const houseClass = {
                name: formData.get('name').trim(),
                color: formData.get('color') || '#3b82f6'
            };

            if (!houseClass.name) {
                this.progressManager.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–æ–º–∞');
                return;
            }

            if (classId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
                houseClass.id = classId;
                houseClass.updated_at = new Date().toISOString();
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è created_at
                const existingClass = await window.db.get('house_classes', classId);
                if (existingClass) {
                    houseClass.created_at = existingClass.created_at;
                }
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
                houseClass.id = Helpers.generateId();
                houseClass.created_at = new Date().toISOString();
                houseClass.updated_at = houseClass.created_at;
            }

            if (classId) {
                await window.db.update('house_classes', houseClass);
            } else {
                await window.db.add('house_classes', houseClass);
            }
            
            this.closeModal('houseClassModal');
            await this.loadReferenceData();
            
            this.progressManager.showSuccess(classId ? '–ö–ª–∞—Å—Å –¥–æ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω' : '–ö–ª–∞—Å—Å –¥–æ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω');

        } catch (error) {
            console.error('Error saving house class:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –¥–æ–º–∞: ' + error.message);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω
     */
    async saveWallMaterial() {
        try {
            const form = document.getElementById('wallMaterialForm');
            const formData = new FormData(form);
            
            const materialId = formData.get('id');
            const material = {
                name: formData.get('name').trim(),
                color: formData.get('color') || '#3b82f6'
            };

            if (!material.name) {
                this.progressManager.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω');
                return;
            }

            if (materialId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                material.id = materialId;
                material.updated_at = new Date().toISOString();
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è created_at
                const existingMaterial = await window.db.get('wall_materials', materialId);
                if (existingMaterial) {
                    material.created_at = existingMaterial.created_at;
                }
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                material.id = Helpers.generateId();
                material.created_at = new Date().toISOString();
                material.updated_at = material.created_at;
            }

            if (materialId) {
                await window.db.update('wall_materials', material);
            } else {
                await window.db.add('wall_materials', material);
            }
            
            this.closeModal('wallMaterialModal');
            await this.loadReferenceData();
            
            this.progressManager.showSuccess(materialId ? '–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω' : '–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω');

        } catch (error) {
            console.error('Error saving wall material:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω: ' + error.message);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
     */
    async saveCeilingMaterial() {
        try {
            const form = document.getElementById('ceilingMaterialForm');
            const formData = new FormData(form);
            
            const materialId = formData.get('id');
            const material = {
                name: formData.get('name').trim()
            };

            if (!material.name) {
                this.progressManager.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π');
                return;
            }

            if (materialId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                material.id = materialId;
                material.updated_at = new Date().toISOString();
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è created_at
                const existingMaterial = await window.db.get('ceiling_materials', materialId);
                if (existingMaterial) {
                    material.created_at = existingMaterial.created_at;
                }
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                material.id = Helpers.generateId();
                material.created_at = new Date().toISOString();
                material.updated_at = material.created_at;
            }

            if (materialId) {
                await window.db.update('ceiling_materials', material);
            } else {
                await window.db.add('ceiling_materials', material);
            }
            
            this.closeModal('ceilingMaterialModal');
            await this.loadReferenceData();
            
            this.progressManager.showSuccess(materialId ? '–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω' : '–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω');

        } catch (error) {
            console.error('Error saving ceiling material:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π: ' + error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    getState() {
        return {
            isLoading: this.isLoading,
            addressesCount: this.dataState.getState('addresses')?.length || 0,
            currentEditingAddress: this.currentEditingAddress,
            tableInitialized: !!this.addressesTable
        };
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∞–¥—Ä–µ—Å–æ–≤
     */
    initSourceFilter() {
        try {
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SlimSelect –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.sourceFilterSlimSelect) {
                this.sourceFilterSlimSelect.destroy();
                this.sourceFilterSlimSelect = null;
            }

            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞
            const sourceFilterContainer = document.getElementById('sourceFilter');
            if (!sourceFilterContainer) {
                console.warn('‚ö†Ô∏è AddressManager: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä sourceFilter –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            sourceFilterContainer.innerHTML = '';

            if (!this.addressesTable) {
                console.warn('‚ö†Ô∏è AddressManager: –¢–∞–±–ª–∏—Ü–∞ –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ (–ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞, –∏–Ω–¥–µ–∫—Å 0)
            const column = this.addressesTable.column(0);
            
            // –°–æ–∑–¥–∞–µ–º select —ç–ª–µ–º–µ–Ω—Ç
            const select = document.createElement('select');
            select.id = 'sourceFilterSelect';
            select.className = 'text-sm';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
            const allOption = document.createElement('option');
            allOption.value = '';
            allOption.textContent = '–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏';
            select.appendChild(allOption);
            
            // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∏
            const uniqueSources = [];
            column.data().unique().each(function(value) {
                if (value && value.trim() && !uniqueSources.includes(value.trim())) {
                    uniqueSources.push(value.trim());
                }
            });

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            uniqueSources.sort();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            uniqueSources.forEach(source => {
                const option = document.createElement('option');
                option.value = source;
                option.textContent = CONSTANTS.DATA_SOURCE_NAMES[source] || source;
                select.appendChild(option);
            });
            
            sourceFilterContainer.appendChild(select);

            console.log('üîç –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞:', uniqueSources);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
            this.sourceFilterSlimSelect = new SlimSelect({
                select: '#sourceFilterSelect',
                settings: {
                    showSearch: false,
                    placeholderText: '–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏'
                },
                events: {
                    afterChange: (newVal) => {
                        const val = newVal && newVal.length > 0 ? newVal[0].value : '';
                        const searchVal = val ? '^' + $.fn.dataTable.util.escapeRegex(val) + '$' : '';
                        column.search(searchVal, true, false).draw();
                        
                        console.log('üîç –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω:', val || '–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏');
                    }
                }
            });
            
            console.log('‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏
     */
    async loadObjects() {
        try {
            await Helpers.debugLog('üè¢ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏...');
            
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea) {
                await Helpers.debugLog('‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const allObjects = await window.db.getAll('objects');
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
            const addresses = await window.db.getAll('addresses');
            const areaAddresses = addresses.filter(address => address.map_area_id === currentArea.id);
            const areaAddressIds = new Set(areaAddresses.map(addr => addr.id));
            const addressesMap = new Map(addresses.map(addr => [addr.id, addr]));
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º –≤ –æ–±–ª–∞—Å—Ç–∏
            const areaObjects = allObjects.filter(object => 
                object.address_id && 
                areaAddressIds.has(object.address_id) && 
                object.status !== 'deleted'
            ).map(object => ({
                ...object,
                address: addressesMap.get(object.address_id)
            })).filter(object => object.address);
            
            await Helpers.debugLog(`üìä –û–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω–æ: ${areaObjects.length}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.dataState.setState('objects', areaObjects);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤
            this.eventBus.emit(CONSTANTS.EVENTS.DATA_LOADED, {
                type: 'objects',
                objects: areaObjects,
                count: areaObjects.length,
                area: currentArea,
                timestamp: new Date()
            });
            
            await Helpers.debugLog('‚úÖ –û–±—ä–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤: ' + error.message);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–º–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å ML
     */
    async processAddressesSmart() {
        if (this.isLoading) {
            console.log('‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return;
        }

        try {
            this.isLoading = true;
            console.log('üß† –ù–∞—á–∏–Ω–∞–µ–º —É–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ —Å ML');
            this.progressManager.updateProgressBar('addresses', 0, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞...');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–º–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
            const allListings = await window.db.getAll('listings');
            const targetListings = allListings.filter(listing => {
                const needsProcessing = 
                    !listing.address_id || 
                    listing.address_match_confidence === 'very_low' ||
                    listing.address_match_confidence === 'low' ||
                    (listing.address_match_confidence === 'medium' && listing.address_match_score < 0.75);
                
                const hasCoordinates = listing.coordinates && 
                    listing.coordinates.lat && 
                    (listing.coordinates.lng || listing.coordinates.lon);
                
                return needsProcessing && hasCoordinates;
            });

            if (targetListings.length === 0) {
                this.progressManager.showInfo('–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–º–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º');
                return;
            }

            this.progressManager.updateProgressBar('addresses', 10, 
                `üß† –ù–∞–π–¥–µ–Ω–æ ${targetListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞
            const allAddresses = await window.db.getAll('addresses');
            if (allAddresses.length === 0) {
                this.progressManager.showError('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è');
                return;
            }

            this.progressManager.updateProgressBar('addresses', 20, 
                `üìç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allAddresses.length} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –±–∞–∑—ã`);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            if (!window.smartAddressMatcher) {
                this.progressManager.showError('–£–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return;
            }

            const smartMatcher = window.smartAddressMatcher;
            if (window.spatialIndexManager) {
                smartMatcher.spatialIndex = window.spatialIndexManager;
            }

            this.progressManager.updateProgressBar('addresses', 30, 
                'üß† –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º...');

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–µ–Ω—å—à–∏–º–∏ –±–∞—Ç—á–∞–º–∏ –¥–ª—è ML-–∞–ª–≥–æ—Ä–∏—Ç–º–∞
            const batchSize = 20;
            let processedCount = 0;
            let significantImprovements = 0;
            let results = {
                processed: 0,
                matched: 0,
                improved: 0,
                significantlyImproved: 0,
                perfect: 0,
                high: 0,
                medium: 0,
                low: 0,
                veryLow: 0,
                noMatch: 0,
                errors: 0,
                methodStats: {},
                avgProcessingTime: 0,
                totalProcessingTime: 0
            };

            const startTime = Date.now();

            for (let i = 0; i < targetListings.length; i += batchSize) {
                const batch = targetListings.slice(i, i + batchSize);
                const progress = 30 + ((i / targetListings.length) * 60);
                
                this.progressManager.updateProgressBar('addresses', progress, 
                    `üß† –£–º–Ω–∞—è ML-–æ–±—Ä–∞–±–æ—Ç–∫–∞ ${i + 1}-${Math.min(i + batchSize, targetListings.length)} –∏–∑ ${targetListings.length}`);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                for (const listing of batch) {
                    try {
                        const oldConfidence = listing.address_match_confidence;
                        const oldScore = listing.address_match_score || 0;

                        const matchResult = await smartMatcher.matchAddressSmart(listing, allAddresses);
                        processedCount++;
                        results.processed++;
                        results.totalProcessingTime += matchResult.processingTime || 0;

                        console.log(`üß† ML-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${listing.id}: ${matchResult.confidence} (${matchResult.method}), —Å–∫–æ—Ä: ${matchResult.score?.toFixed(3)}, –≤—Ä–µ–º—è: ${matchResult.processingTime}ms`);

                        if (matchResult.address) {
                            results.matched++;

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
                            const confidenceLevels = ['none', 'very_low', 'low', 'medium', 'high', 'perfect'];
                            const oldLevel = confidenceLevels.indexOf(oldConfidence || 'none');
                            const newLevel = confidenceLevels.indexOf(matchResult.confidence);
                            
                            if (newLevel > oldLevel || matchResult.score > oldScore + 0.1) {
                                results.improved++;
                                
                                // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
                                if (newLevel > oldLevel + 1 || matchResult.score > oldScore + 0.2) {
                                    significantImprovements++;
                                    results.significantlyImproved++;
                                    console.log(`üéØ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è ${listing.id}: ${oldConfidence}(${oldScore.toFixed(3)}) ‚Üí ${matchResult.confidence}(${matchResult.score.toFixed(3)})`);
                                } else {
                                    console.log(`‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –¥–ª—è ${listing.id}: ${oldConfidence}(${oldScore.toFixed(3)}) ‚Üí ${matchResult.confidence}(${matchResult.score.toFixed(3)})`);
                                }
                            }

                            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                            listing.address_id = matchResult.address.id;
                            listing.address_match_confidence = matchResult.confidence;
                            listing.address_match_method = matchResult.method;
                            listing.address_match_score = matchResult.score;
                            listing.address_distance = matchResult.distance;
                            listing.updated_at = new Date();

                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç —É–º–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
                            if (matchResult.textSimilarity !== undefined) {
                                listing.address_text_similarity = matchResult.textSimilarity;
                            }
                            if (matchResult.semanticSimilarity !== undefined) {
                                listing.address_semantic_similarity = matchResult.semanticSimilarity;
                            }
                            if (matchResult.structuralSimilarity !== undefined) {
                                listing.address_structural_similarity = matchResult.structuralSimilarity;
                            }
                            if (matchResult.fuzzyScore !== undefined) {
                                listing.address_fuzzy_score = matchResult.fuzzyScore;
                            }

                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                            if (listing.processing_status === 'address_needed') {
                                listing.processing_status = 'duplicate_check_needed';
                            }

                            await window.db.update('listings', listing);

                            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–æ–≤–µ—Ä–∏—è
                            switch (matchResult.confidence) {
                                case 'perfect':
                                    results.perfect++;
                                    break;
                                case 'high':
                                    results.high++;
                                    break;
                                case 'medium':
                                    results.medium++;
                                    break;
                                case 'low':
                                    results.low++;
                                    break;
                                case 'very_low':
                                    results.veryLow++;
                                    break;
                            }

                            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–¥–æ–≤
                            const method = matchResult.method;
                            results.methodStats[method] = (results.methodStats[method] || 0) + 1;

                        } else {
                            results.noMatch++;
                        }
                    } catch (error) {
                        results.errors++;
                        console.error('–û—à–∏–±–∫–∞ —É–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
                    }
                }

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è ML-–∞–ª–≥–æ—Ä–∏—Ç–º–∞
                await new Promise(resolve => setTimeout(resolve, 200));
            }

            const totalTime = Date.now() - startTime;
            results.avgProcessingTime = results.totalProcessingTime / results.processed;

            this.progressManager.updateProgressBar('addresses', 100, 'üß† –£–º–Ω–∞—è ML-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            const algorithmStats = smartMatcher.getStats();

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–±—ã—Ç–∏—è
            await this.loadAddresses();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const methodStatsText = Object.entries(results.methodStats)
                .map(([method, count]) => `  ‚Ä¢ ${method}: ${count}`)
                .join('\n');

            const message = `üß† –£–º–Ω–∞—è ML-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.processed}
‚Ä¢ –ù–∞–π–¥–µ–Ω—ã –∞–¥—Ä–µ—Å–∞: ${results.matched}
‚Ä¢ –£–ª—É—á—à–µ–Ω–æ: ${results.improved}
‚Ä¢ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–æ: ${results.significantlyImproved}

üéØ –ü–æ —É—Ä–æ–≤–Ω—è–º —Ç–æ—á–Ω–æ—Å—Ç–∏:
‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${results.perfect}
‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${results.high}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${results.medium}
‚Ä¢ –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${results.low}
‚Ä¢ –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è: ${results.veryLow}
‚Ä¢ –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${results.noMatch}
‚Ä¢ –û—à–∏–±–æ–∫: ${results.errors}

üîß ML-–º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:
${methodStatsText}

‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: ${(totalTime / 1000).toFixed(1)}—Å
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${results.avgProcessingTime.toFixed(1)}–º—Å
‚Ä¢ –ö—ç—à —Ä–∞–∑–º–µ—Ä: ${algorithmStats.cacheSize}
‚Ä¢ –û–±—â–∏–π —É—Å–ø–µ—Ö ML: ${algorithmStats.overallSuccessRate.toFixed(1)}%

üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —É–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º!`;

            this.progressManager.showSuccess(message);

        } catch (error) {
            console.error('‚ùå Error in smart ML address processing:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: ' + error.message);
        } finally {
            this.isLoading = false;
            // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ 100%
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        if (this.addressesTable) {
            this.addressesTable.destroy();
            this.addressesTable = null;
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º SlimSelect
        if (this.sourceFilterSlimSelect) {
            this.sourceFilterSlimSelect.destroy();
            this.sourceFilterSlimSelect = null;
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∫–∞—Ä—Ç—É
        if (this.editAddressMap) {
            this.editAddressMap.remove();
            this.editAddressMap = null;
        }
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
        if (this.eventBus) {
            this.eventBus.offAll(CONSTANTS.EVENTS.AREA_LOADED);
            this.eventBus.offAll(CONSTANTS.EVENTS.AREA_CHANGED);
        }
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.removeEventListener('click', this.bindTableEvents);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AddressManager;
} else {
    window.AddressManager = AddressManager;
}