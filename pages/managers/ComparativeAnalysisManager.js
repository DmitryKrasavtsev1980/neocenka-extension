/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
 */
class ComparativeAnalysisManager {
    constructor(areaPage) {
        this.areaPage = areaPage;
        this.reportsManager = areaPage.reportsManager;
        
        // –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
        this.currentObjects = [];
        this.selectedObjectId = null;
        this.selectedListingId = null;
        this.evaluations = new Map(); // objectId -> evaluation
        this.statusFilter = 'all';
        
        // –ö–æ—Ä–∏–¥–æ—Ä—ã —Ü–µ–Ω
        this.corridors = {
            active: { min: null, max: null },
            archive: { min: null, max: null },
            optimal: { min: null, max: null }
        };
        
        // –ì—Ä–∞—Ñ–∏–∫
        this.comparativeChart = null;
        this.debugEnabled = false;
        
        // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.isInitialized = false;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async initialize() {
        if (this.isInitialized) return;
        
        try {
            await this.initializeEventListeners();
            this.debugEnabled = await this.getDebugSetting();
            this.isInitialized = true;
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
     */
    async getDebugSetting() {
        try {
            const settings = await chrome.storage.local.get(['debugEnabled']);
            return settings.debugEnabled || false;
        } catch (error) {
            return false;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    async initializeEventListeners() {
        // –§–∏–ª—å—Ç—Ä—ã —Å—Ç–∞—Ç—É—Å–æ–≤
        document.querySelectorAll('.status-filter .filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.setStatusFilter(e.target.dataset.status);
            });
        });
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–º
        document.getElementById('newAnalysisBtn')?.addEventListener('click', () => {
            this.startNewAnalysis();
        });
        
        document.getElementById('saveAnalysisBtn')?.addEventListener('click', () => {
            this.saveCurrentAnalysis();
        });
        
        document.getElementById('loadAnalysisBtn')?.addEventListener('click', () => {
            this.showLoadAnalysisModal();
        });
        
        // –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
        document.querySelectorAll('.eval-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                if (this.selectedObjectId) {
                    this.evaluateObject(this.selectedObjectId, e.target.dataset.evaluation);
                }
            });
        });
        
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
        window.comparativeAnalysisManager = this;
    }
    
    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    async showComparativeAnalysis() {
        try {
            // –°–∫—Ä—ã–≤–∞–µ–º placeholder –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            const placeholder = document.getElementById('comparativeAnalysisPlaceholder');
            const content = document.getElementById('comparativeAnalysisContent');
            
            if (placeholder) placeholder.classList.add('hidden');
            if (content) content.classList.remove('hidden');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            await this.startNewAnalysis();
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:', error);
        }
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    hideComparativeAnalysis() {
        const placeholder = document.getElementById('comparativeAnalysisPlaceholder');
        const content = document.getElementById('comparativeAnalysisContent');
        
        if (placeholder) placeholder.classList.remove('hidden');
        if (content) content.classList.add('hidden');
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    async startNewAnalysis() {
        try {
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
            }
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.evaluations.clear();
            this.selectedObjectId = null;
            this.selectedListingId = null;
            this.resetCorridors();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å —É—á–µ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            await this.loadObjectsForAnalysis();
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateObjectsDisplay();
            this.updateChart();
            this.updateCorridorInfo();
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å —É—á–µ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async loadObjectsForAnalysis() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ ReportsManager
            const currentArea = this.areaPage.dataState?.getState('currentArea');
            if (!currentArea) {
                this.currentObjects = [];
                return;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç—á–µ—Ç–æ–≤
            const segmentId = this.reportsManager.currentSegment?.id;
            const subsegmentId = this.reportsManager.currentSubsegment?.id;
            const dateFrom = new Date(this.reportsManager.dateFromFilter?.value || '2023-01-01');
            const dateTo = new Date(this.reportsManager.dateToFilter?.value || new Date().toISOString().split('T')[0]);
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', {
                    areaId: currentArea.id,
                    segmentId,
                    subsegmentId,
                    dateFrom: dateFrom.toISOString(),
                    dateTo: dateTo.toISOString()
                });
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–º–æ—â—å—é ReportsManager (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            this.currentObjects = await this.reportsManager.getFilteredRealEstateObjects(
                currentArea.id, segmentId, subsegmentId, dateFrom, dateTo
            );
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:', this.currentObjects.length);
            }
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', error);
            this.currentObjects = [];
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
     */
    setStatusFilter(status) {
        this.statusFilter = status;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.status-filter .filter-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.status === status);
        });
        
        this.updateObjectsDisplay();
        
        if (this.debugEnabled) {
            console.log('üîç ComparativeAnalysisManager: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞:', status);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
     */
    updateObjectsDisplay() {
        const grid = document.getElementById('objectsGrid');
        if (!grid) return;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        let filteredObjects = this.currentObjects;
        if (this.statusFilter !== 'all') {
            filteredObjects = this.currentObjects.filter(obj => 
                obj.status === this.statusFilter
            );
        }
        
        if (filteredObjects.length === 0) {
            grid.innerHTML = '<div class="text-center text-gray-500 col-span-4 py-4">–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
        grid.innerHTML = filteredObjects.map(obj => {
            const evaluation = this.evaluations.get(obj.id);
            const evaluationClass = evaluation ? `evaluated-${this.getEvaluationClass(evaluation)}` : '';
            const selectedClass = obj.id === this.selectedObjectId ? 'selected' : '';
            
            return `
                <div class="object-block ${evaluationClass} ${selectedClass}" 
                     data-object-id="${obj.id}">
                    <div class="object-id">Id ${obj.id}</div>
                    <div class="object-price">${this.formatPrice(obj.current_price)}</div>
                    <div class="object-info">${obj.rooms || obj.property_type || '–Ω/–¥'}, ${obj.area_total || 0}–º¬≤</div>
                </div>
            `;
        }).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–ª–æ–∫–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        grid.querySelectorAll('.object-block').forEach(block => {
            block.addEventListener('click', () => {
                const objectId = block.dataset.objectId;
                this.selectObject(objectId);
            });
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
     */
    getEvaluationClass(evaluation) {
        switch (evaluation) {
            case 'better': return 'better';
            case 'worse': return 'worse';  
            case 'equal': return 'equal';
            case 'fake':
            case 'not-competitor':
            case 'not-sold':
                return 'excluded';
            default: return '';
        }
    }
    
    /**
     * –í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    async selectObject(objectId) {
        try {
            this.selectedObjectId = objectId;
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç:', objectId);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
            this.updateObjectsDisplay();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
            await this.loadObjectListings(objectId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
            this.updateEvaluationButtons();
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
     */
    async loadObjectListings(objectId) {
        try {
            const objectWithData = await window.realEstateObjectManager.getObjectWithListings(objectId);
            const listings = objectWithData.listings || [];
            
            const listingsList = document.getElementById('listingsList');
            if (!listingsList) return;
            
            if (listings.length === 0) {
                listingsList.innerHTML = '<div class="text-sm text-gray-500">–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞</div>';
                return;
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–≤–µ–∂–∏–µ —Å–≤–µ—Ä—Ö—É)
            listings.sort((a, b) => new Date(b.updated) - new Date(a.updated));
            
            listingsList.innerHTML = listings.map(listing => {
                const selectedClass = listing.id === this.selectedListingId ? 'selected' : '';
                const updateDate = new Date(listing.updated).toLocaleDateString('ru-RU');
                
                return `
                    <div class="listing-block ${selectedClass}"
                         data-listing-id="${listing.id}">
                        <div>Id ${listing.id}</div>
                        <div class="text-xs text-gray-500">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateDate}</div>
                    </div>
                `;
            }).join('');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–ª–æ–∫–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            listingsList.querySelectorAll('.listing-block').forEach(block => {
                block.addEventListener('click', () => {
                    const listingId = block.dataset.listingId;
                    this.selectListing(listingId);
                });
            });
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            if (listings.length > 0) {
                this.selectListing(listings[0].id);
            }
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
            const listingsList = document.getElementById('listingsList');
            if (listingsList) {
                listingsList.innerHTML = '<div class="text-sm text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</div>';
            }
        }
    }
    
    /**
     * –í—ã–±–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    async selectListing(listingId) {
        try {
            this.selectedListingId = listingId;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
            document.querySelectorAll('.listing-block').forEach(block => {
                block.classList.toggle('selected', block.dataset.listingId === listingId);
            });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            await this.loadListingDetails(listingId);
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async loadListingDetails(listingId) {
        try {
            const listing = await window.db.getListing(listingId);
            if (!listing) return;
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            const photosGallery = document.getElementById('photosGallery');
            if (photosGallery) {
                if (listing.photos && listing.photos.length > 0) {
                    photosGallery.innerHTML = listing.photos.slice(0, 8).map(photo => `
                        <div class="photo-thumb">
                            <img src="${photo}" alt="–§–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" data-photo-url="${photo}">
                        </div>
                    `).join('');
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    photosGallery.querySelectorAll('.photo-thumb img').forEach(img => {
                        img.addEventListener('click', () => {
                            const photoUrl = img.dataset.photoUrl;
                            window.open(photoUrl, '_blank');
                        });
                    });
                } else {
                    photosGallery.innerHTML = '<div class="text-xs text-gray-500">–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</div>';
                }
            }
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            const descriptionDiv = document.getElementById('listingDescription');
            if (descriptionDiv) {
                const description = listing.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
                descriptionDiv.innerHTML = description.length > 300 ? 
                    description.substring(0, 300) + '...' : description;
            }
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏
     */
    updateEvaluationButtons() {
        const currentEvaluation = this.selectedObjectId ? 
            this.evaluations.get(this.selectedObjectId) : null;
            
        document.querySelectorAll('.eval-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.evaluation === currentEvaluation);
        });
    }
    
    /**
     * –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    evaluateObject(objectId, evaluation) {
        try {
            this.evaluations.set(objectId, evaluation);
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–∫—Ç–∞:', objectId, evaluation);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∏–¥–æ—Ä—ã
            this.updateCorridors();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.updateObjectsDisplay();
            this.updateChart();
            this.updateCorridorInfo();
            this.updateEvaluationButtons();
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }
    
    /**
     * –°–±—Ä–æ—Å –∫–æ—Ä–∏–¥–æ—Ä–æ–≤ —Ü–µ–Ω
     */
    resetCorridors() {
        this.corridors = {
            active: { min: null, max: null },
            archive: { min: null, max: null },
            optimal: { min: null, max: null }
        };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∏–¥–æ—Ä–æ–≤ —Ü–µ–Ω
     */
    updateCorridors() {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä–∏–¥–æ—Ä—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.corridors.active = this.calculateCorridorBounds('active');
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä–∏–¥–æ—Ä—ã –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤  
        this.corridors.archive = this.calculateCorridorBounds('archive');
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–æ—Ä–∏–¥–æ—Ä–æ–≤)
        this.corridors.optimal = this.calculateOptimalRange();
        
        if (this.debugEnabled) {
            console.log('üîç ComparativeAnalysisManager: –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä–∏–¥–æ—Ä—ã:', this.corridors);
        }
    }
    
    /**
     * –†–∞—Å—á–µ—Ç –≥—Ä–∞–Ω–∏—Ü –∫–æ—Ä–∏–¥–æ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
     */
    calculateCorridorBounds(objectStatus) {
        let minPrice = null;
        let maxPrice = null;
        
        for (let [objectId, evaluation] of this.evaluations) {
            const object = this.currentObjects.find(obj => obj.id === objectId);
            if (!object || object.status !== objectStatus) continue;
            
            // –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –∏—Å–∫–ª—é—á–∞—é—â–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏
            if (['fake', 'not-competitor', 'not-sold'].includes(evaluation)) {
                continue;
            }
            
            const price = object.current_price;
            if (!price || price <= 0) continue;
            
            switch (evaluation) {
                case 'better':
                    // –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –ª—É—á—à–µ - –æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
                    if (maxPrice === null || price < maxPrice) {
                        maxPrice = price;
                    }
                    break;
                    
                case 'worse':
                    // –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç —Ö—É–∂–µ - –ø–æ–¥–Ω–∏–º–∞–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
                    if (minPrice === null || price > minPrice) {
                        minPrice = price;
                    }
                    break;
                    
                case 'equal':
                    // –†–∞–≤–Ω—ã–µ - –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                    break;
            }
        }
        
        return { min: minPrice, max: maxPrice };
    }
    
    /**
     * –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–æ—Ä–∏–¥–æ—Ä–æ–≤)
     */
    calculateOptimalRange() {
        const activeMin = this.corridors.active.min;
        const activeMax = this.corridors.active.max;
        const archiveMin = this.corridors.archive.min;
        const archiveMax = this.corridors.archive.max;
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        let optimalMin = null;
        let optimalMax = null;
        
        if (activeMin !== null && archiveMin !== null) {
            optimalMin = Math.max(activeMin, archiveMin);
        } else if (activeMin !== null) {
            optimalMin = activeMin;
        } else if (archiveMin !== null) {
            optimalMin = archiveMin;
        }
        
        if (activeMax !== null && archiveMax !== null) {
            optimalMax = Math.min(activeMax, archiveMax);
        } else if (activeMax !== null) {
            optimalMax = activeMax;
        } else if (archiveMax !== null) {
            optimalMax = archiveMax;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (optimalMin !== null && optimalMax !== null && optimalMin > optimalMax) {
            return { min: null, max: null }; // –î–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
        }
        
        return { min: optimalMin, max: optimalMax };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–∏–¥–æ—Ä–∞—Ö
     */
    updateCorridorInfo() {
        const activeDiv = document.getElementById('activeCorridor');
        const archiveDiv = document.getElementById('archiveCorridor');
        const optimalDiv = document.getElementById('optimalRange');
        
        if (activeDiv) {
            activeDiv.textContent = this.formatCorridorRange(this.corridors.active);
        }
        
        if (archiveDiv) {
            archiveDiv.textContent = this.formatCorridorRange(this.corridors.archive);
        }
        
        if (optimalDiv) {
            const optimalText = this.formatCorridorRange(this.corridors.optimal);
            optimalDiv.textContent = optimalText;
            optimalDiv.style.fontWeight = optimalText !== '-' ? 'bold' : 'normal';
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞
     */
    formatCorridorRange(corridor) {
        if (corridor.min === null && corridor.max === null) {
            return '-';
        } else if (corridor.min === null) {
            return `–¥–æ ${this.formatPrice(corridor.max)}`;
        } else if (corridor.max === null) {
            return `–æ—Ç ${this.formatPrice(corridor.min)}`;
        } else {
            return `${this.formatPrice(corridor.min)} - ${this.formatPrice(corridor.max)}`;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    async updateChart() {
        const chartContainer = document.getElementById('comparativeChart');
        if (!chartContainer) return;
        
        try {
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            const chartData = this.generateChartData();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            if (this.comparativeChart) {
                this.comparativeChart.destroy();
            }
            
            const options = {
                chart: {
                    type: 'scatter',
                    height: 400,
                    toolbar: { show: false },
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
                            "shortMonths": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
                            "days": ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"]
                        }
                    }],
                    defaultLocale: "ru"
                },
                series: chartData.series,
                colors: chartData.colors,
                xaxis: {
                    type: 'datetime',
                    title: { text: '–î–∞—Ç–∞' }
                },
                yaxis: {
                    title: { text: '–¶–µ–Ω–∞, ‚ÇΩ' },
                    labels: {
                        formatter: (value) => this.formatPrice(value)
                    }
                },
                tooltip: {
                    shared: false,
                    intersect: true,
                    custom: (tooltipModel) => {
                        return this.generateTooltip(tooltipModel);
                    }
                },
                markers: {
                    size: 6,
                    strokeWidth: 2,
                    strokeColor: '#fff'
                },
                legend: {
                    show: false
                },
                annotations: {
                    yaxis: this.generateCorridorAnnotations()
                }
            };
            
            this.comparativeChart = new ApexCharts(chartContainer, options);
            await this.comparativeChart.render();
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', error);
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
     */
    generateChartData() {
        const series = [];
        const colors = [];
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –æ—Ü–µ–Ω–∫–µ
        const groups = {
            'active-better': { objects: [], color: '#93c5fd', name: '–ê–∫—Ç–∏–≤–Ω—ã–µ (–ª—É—á—à–µ)' },
            'active-equal': { objects: [], color: '#3b82f6', name: '–ê–∫—Ç–∏–≤–Ω—ã–µ (—Ä–∞–≤–Ω–æ)' },  
            'active-worse': { objects: [], color: '#1e40af', name: '–ê–∫—Ç–∏–≤–Ω—ã–µ (—Ö—É–∂–µ)' },
            'active-unevaluated': { objects: [], color: '#60a5fa', name: '–ê–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ –æ—Ü–µ–Ω–µ–Ω—ã)' },
            'archive-better': { objects: [], color: '#86efac', name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ (–ª—É—á—à–µ)' },
            'archive-equal': { objects: [], color: '#22c55e', name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ (—Ä–∞–≤–Ω–æ)' },
            'archive-worse': { objects: [], color: '#15803d', name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ (—Ö—É–∂–µ)' },
            'archive-unevaluated': { objects: [], color: '#4ade80', name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ (–Ω–µ –æ—Ü–µ–Ω–µ–Ω—ã)' },
            'excluded': { objects: [], color: '#dc2626', name: '–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ' }
        };
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
        this.currentObjects.forEach(obj => {
            const evaluation = this.evaluations.get(obj.id);
            
            let groupKey;
            if (['fake', 'not-competitor', 'not-sold'].includes(evaluation)) {
                groupKey = 'excluded';
            } else if (evaluation) {
                groupKey = `${obj.status}-${evaluation}`;
            } else {
                groupKey = `${obj.status}-unevaluated`;
            }
            
            if (groups[groupKey]) {
                groups[groupKey].objects.push(obj);
            }
        });
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–π –¥–ª—è ApexCharts
        Object.entries(groups).forEach(([groupKey, group]) => {
            if (group.objects.length > 0) {
                series.push({
                    name: group.name,
                    data: group.objects.map(obj => [
                        new Date(obj.updated || obj.created).getTime(), 
                        obj.current_price
                    ])
                });
                colors.push(group.color);
            }
        });
        
        return { series, colors };
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∫–æ—Ä–∏–¥–æ—Ä–æ–≤
     */
    generateCorridorAnnotations() {
        const annotations = [];
        
        // –ö–æ—Ä–∏–¥–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (this.corridors.active.min !== null) {
            annotations.push({
                y: this.corridors.active.min,
                borderColor: '#3b82f6',
                borderWidth: 2,
                strokeDashArray: 5,
                label: {
                    text: '–ê–∫—Ç–∏–≤–Ω—ã–µ: –º–∏–Ω',
                    style: { background: '#3b82f6', color: '#fff' }
                }
            });
        }
        
        if (this.corridors.active.max !== null) {
            annotations.push({
                y: this.corridors.active.max,
                borderColor: '#3b82f6',
                borderWidth: 2,
                strokeDashArray: 5,
                label: {
                    text: '–ê–∫—Ç–∏–≤–Ω—ã–µ: –º–∞–∫—Å',
                    style: { background: '#3b82f6', color: '#fff' }
                }
            });
        }
        
        // –ö–æ—Ä–∏–¥–æ—Ä –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (this.corridors.archive.min !== null) {
            annotations.push({
                y: this.corridors.archive.min,
                borderColor: '#22c55e',
                borderWidth: 2,
                strokeDashArray: 5,
                label: {
                    text: '–ê—Ä—Ö–∏–≤–Ω—ã–µ: –º–∏–Ω',
                    style: { background: '#22c55e', color: '#fff' }
                }
            });
        }
        
        if (this.corridors.archive.max !== null) {
            annotations.push({
                y: this.corridors.archive.max,
                borderColor: '#22c55e',
                borderWidth: 2,
                strokeDashArray: 5,
                label: {
                    text: '–ê—Ä—Ö–∏–≤–Ω—ã–µ: –º–∞–∫—Å',
                    style: { background: '#22c55e', color: '#fff' }
                }
            });
        }
        
        // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–∑–∞–ª–∏–≤–∫–∞ –º–µ–∂–¥—É –ª–∏–Ω–∏—è–º–∏)
        if (this.corridors.optimal.min !== null && this.corridors.optimal.max !== null) {
            annotations.push({
                y: this.corridors.optimal.min,
                y2: this.corridors.optimal.max,
                fillColor: '#10b981',
                opacity: 0.1,
                label: {
                    text: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω',
                    style: { background: '#10b981', color: '#fff' }
                }
            });
        }
        
        return annotations;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è tooltip –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
     */
    generateTooltip(tooltipModel) {
        const { seriesIndex, dataPointIndex, w } = tooltipModel;
        
        if (!w.config.series[seriesIndex] || !w.config.series[seriesIndex].data[dataPointIndex]) {
            return '<div style="padding: 8px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
        }
        
        const [timestamp, price] = w.config.series[seriesIndex].data[dataPointIndex];
        const date = new Date(timestamp).toLocaleDateString('ru-RU');
        const formattedPrice = this.formatPrice(price);
        
        // –ù–∞–π–¥–µ–º –æ–±—ä–µ–∫—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        const object = this.currentObjects.find(obj => 
            Math.abs(new Date(obj.updated || obj.created).getTime() - timestamp) < 86400000 && 
            Math.abs(obj.current_price - price) < 1000
        );
        
        if (!object) {
            return '<div style="padding: 8px;">–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>';
        }
        
        const evaluation = this.evaluations.get(object.id);
        const evaluationText = this.getEvaluationDisplayName(evaluation);
        const rooms = object.rooms || object.property_type || '–Ω/–¥';
        const area = object.area_total ? `${object.area_total} –º¬≤` : '–Ω/–¥';
        
        return `
            <div style="background: white; border: 1px solid #d1d5db; border-radius: 8px; 
                        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); padding: 12px; max-width: 250px;">
                <div style="font-weight: 600; color: #1f2937; margin-bottom: 8px;">
                    Id ${object.id}: ${rooms}, ${area}
                </div>
                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">
                    –°—Ç–∞—Ç—É—Å: ${object.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ê—Ä—Ö–∏–≤'}
                </div>
                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">
                    –î–∞—Ç–∞: ${date}
                </div>
                ${evaluation ? `
                    <div style="font-size: 14px; color: #059669; margin-bottom: 4px; font-weight: 500;">
                        –û—Ü–µ–Ω–∫–∞: ${evaluationText}
                    </div>
                ` : ''}
                <div style="font-weight: bold; font-size: 16px; color: #2563eb;">
                    ${formattedPrice}
                </div>
            </div>
        `;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
     */
    getEvaluationDisplayName(evaluation) {
        const names = {
            'better': '–õ—É—á—à–µ',
            'worse': '–•—É–∂–µ',
            'equal': '–†–∞–≤–Ω–æ',
            'fake': '–§–µ–π–∫',
            'not-competitor': '–ù–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç',
            'not-sold': '–ù–µ –ø—Ä–æ–¥–∞–Ω'
        };
        return names[evaluation] || '–ù–µ –æ—Ü–µ–Ω–µ–Ω';
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    async saveCurrentAnalysis() {
        if (this.evaluations.size === 0) {
            alert('–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }
        
        const analysisName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞:');
        if (!analysisName) return;
        
        const analysisData = {
            name: analysisName,
            evaluations: Object.fromEntries(this.evaluations),
            corridors: this.corridors,
            filters: {
                segmentId: this.reportsManager.currentSegment?.id,
                subsegmentId: this.reportsManager.currentSubsegment?.id,
                dateFrom: this.reportsManager.dateFromFilter?.value,
                dateTo: this.reportsManager.dateToFilter?.value
            },
            timestamp: new Date().toISOString()
        };
        
        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ IndexedDB —á–µ—Ä–µ–∑ database.js
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞:', analysisData);
            alert('–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)');
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
     */
    async showLoadAnalysisModal() {
        alert('–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
     */
    formatPrice(price) {
        if (!price) return '0 ‚ÇΩ';
        return new Intl.NumberFormat('ru-RU').format(price) + ' ‚ÇΩ';
    }
}