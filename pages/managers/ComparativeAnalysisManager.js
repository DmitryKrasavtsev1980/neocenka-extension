/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
 */
class ComparativeAnalysisManager {
    constructor(areaPage) {
        this.areaPage = areaPage;
        this.reportsManager = areaPage.reportsManager;
        
        // –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
        this.currentObjects = [];
        this.selectedObjectId = null;
        this.selectedListingId = null;
        this.evaluations = new Map(); // objectId -> evaluation
        this.statusFilter = 'all';
        this.addresses = []; // –∫—ç—à –∞–¥—Ä–µ—Å–æ–≤
        
        // –ö–æ—Ä–∏–¥–æ—Ä—ã —Ü–µ–Ω
        this.corridors = {
            active: { min: null, max: null },
            archive: { min: null, max: null },
            optimal: { min: null, max: null }
        };
        
        // –ì—Ä–∞—Ñ–∏–∫
        this.comparativeChart = null;
        this.isUpdatingChart = false; // —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        this.updateChartTimeout = null; // —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∞
        this.debugEnabled = false;
        
        // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.isInitialized = false;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);
        document.addEventListener('visibilitychange', this.handleVisibilityChange);
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ApexCharts
        this.handleApexChartsError = this.handleApexChartsError.bind(this);
        window.addEventListener('error', this.handleApexChartsError);
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async initialize() {
        if (this.isInitialized) return;
        
        try {
            await this.initializeEventListeners();
            this.debugEnabled = await this.getDebugSetting();
            this.isInitialized = true;
            
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
            this.restoreComparativeState();
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
     */
    async getDebugSetting() {
        try {
            const settings = await chrome.storage.local.get(['debugEnabled']);
            return settings.debugEnabled || false;
        } catch (error) {
            return false;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    async initializeEventListeners() {
        // –§–∏–ª—å—Ç—Ä—ã —Å—Ç–∞—Ç—É—Å–æ–≤
        document.querySelectorAll('.status-filter .filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.setStatusFilter(e.target.dataset.status);
            });
        });
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–º
        document.getElementById('resetComparisonBtn')?.addEventListener('click', () => {
            this.resetComparison();
        });
        
        // –ö–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
        document.querySelectorAll('.eval-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                if (this.selectedObjectId) {
                    this.evaluateObject(this.selectedObjectId, e.target.dataset.evaluation);
                }
            });
        });
        
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
        window.comparativeAnalysisManager = this;
    }
    
    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    async showComparativeAnalysis() {
        try {
            // –°–∫—Ä—ã–≤–∞–µ–º placeholder –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            const placeholder = document.getElementById('comparativeAnalysisPlaceholder');
            const content = document.getElementById('comparativeAnalysisContent');
            
            if (placeholder) placeholder.classList.add('hidden');
            if (content) content.classList.remove('hidden');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞
            await this.loadAddresses();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            await this.startNewAnalysis();
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:', error);
        }
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    hideComparativeAnalysis() {
        const placeholder = document.getElementById('comparativeAnalysisPlaceholder');
        const content = document.getElementById('comparativeAnalysisContent');
        
        if (placeholder) placeholder.classList.remove('hidden');
        if (content) content.classList.add('hidden');
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    async startNewAnalysis() {
        try {
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
            }
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.evaluations.clear();
            this.selectedObjectId = null;
            this.selectedListingId = null;
            this.resetCorridors();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å —É—á–µ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            await this.loadObjectsForAnalysis();
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateObjectsDisplay();
            this.updateChartDebounced();
            this.updateCorridorInfo();
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
        }
    }
    
    /**
     * –°–±—Ä–æ—Å —Ç–µ–∫—É—â–∏—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
     */
    resetComparison() {
        try {
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –°–±—Ä–æ—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–π');
            }
            
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (this.evaluations.size > 0) {
                if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
                    return;
                }
            }
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.evaluations.clear();
            this.selectedObjectId = null;
            this.selectedListingId = null;
            this.resetCorridors();
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const areaId = this.areaPage.dataState?.getState('currentArea')?.id;
            if (areaId) {
                const stateKey = `comparative_state_${areaId}`;
                localStorage.removeItem(stateKey);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.updateObjectsDisplay();
            this.updateChartDebounced();
            this.updateCorridorInfo();
            this.updateEvaluationButtons();
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å —É—á–µ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async loadObjectsForAnalysis() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ ReportsManager
            const currentArea = this.areaPage.dataState?.getState('currentArea');
            if (!currentArea) {
                this.currentObjects = [];
                return;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç—á–µ—Ç–æ–≤
            const segmentId = this.reportsManager.currentSegment?.id;
            const subsegmentId = this.reportsManager.currentSubsegment?.id;
            const dateFrom = new Date(this.reportsManager.dateFromFilter?.value || '2023-01-01');
            const dateTo = new Date(this.reportsManager.dateToFilter?.value || new Date().toISOString().split('T')[0]);
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', {
                    areaId: currentArea.id,
                    segmentId,
                    subsegmentId,
                    dateFrom: dateFrom.toISOString(),
                    dateTo: dateTo.toISOString()
                });
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–º–æ—â—å—é ReportsManager (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            this.currentObjects = await this.reportsManager.getFilteredRealEstateObjects(
                currentArea.id, segmentId, subsegmentId, dateFrom, dateTo
            );
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:', this.currentObjects.length);
            }
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', error);
            this.currentObjects = [];
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
     */
    setStatusFilter(status) {
        this.statusFilter = status;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.status-filter .filter-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.status === status);
        });
        
        this.updateObjectsDisplay();
        
        if (this.debugEnabled) {
            console.log('üîç ComparativeAnalysisManager: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞:', status);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
     */
    updateObjectsDisplay() {
        const grid = document.getElementById('objectsGrid');
        if (!grid) return;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        let filteredObjects = this.currentObjects;
        if (this.statusFilter !== 'all') {
            filteredObjects = this.currentObjects.filter(obj => 
                obj.status === this.statusFilter
            );
        }
        
        if (filteredObjects.length === 0) {
            grid.innerHTML = '<div class="text-center text-gray-500 col-span-4 py-4">–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
        grid.innerHTML = filteredObjects.map(obj => {
            const evaluation = this.evaluations.get(obj.id);
            const evaluationClass = evaluation ? `evaluated-${this.getEvaluationClass(evaluation)}` : '';
            const selectedClass = obj.id === this.selectedObjectId ? 'selected' : '';
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–µ–∑ —Ü–µ–Ω—ã
            const characteristics = this.formatObjectCharacteristics(obj);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            const price = obj.current_price || 0;
            const formattedPrice = this.formatPrice(price);
            
            // –¶–µ–Ω–∞ –∑–∞ –∫–≤.–º –±–µ–∑ —Å–∫–æ–±–æ–∫
            let pricePerSqm = '';
            if (price > 0 && obj.area_total > 0) {
                const perSqm = Math.round(price / obj.area_total);
                pricePerSqm = `${new Intl.NumberFormat('ru-RU').format(perSqm)} ‚ÇΩ/–º¬≤`;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ address_id
            const address = this.getAddressNameById(obj.address_id) || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            let dateInfo = '';
            if (obj.status === 'archive') {
                // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö: –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                const createdDate = obj.created ? new Date(obj.created).toLocaleDateString('ru-RU') : '';
                const updatedDate = obj.updated ? new Date(obj.updated).toLocaleDateString('ru-RU') : '';
                if (createdDate && updatedDate) {
                    dateInfo = `–ê—Ä—Ö–∏–≤: ${createdDate} - ${updatedDate}`;
                } else if (createdDate) {
                    dateInfo = `${createdDate}`;
                } else if (updatedDate) {
                    dateInfo = `${updatedDate}`;
                }
            } else {
                // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö: —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                const createdDate = obj.created ? new Date(obj.created).toLocaleDateString('ru-RU') : '';
                const currentDate = new Date().toLocaleDateString('ru-RU');
                dateInfo = `–ê–∫—Ç–∏–≤–Ω—ã–π: ${createdDate} - ${currentDate}`;
            }
            
            return `
                <div class="object-block ${evaluationClass} ${selectedClass}" 
                     data-object-id="${obj.id}">
                    <div class="flex justify-between items-start mb-2">
                        <div class="flex-1 mr-2">
                            <div class="object-characteristics font-semibold text-sm">${characteristics}</div>
                        </div>
                        <div class="flex-shrink-0 text-right">
                            <div class="object-price" style="font-size: 16px !important; color: #059669 !important; font-weight: 600 !important;">${formattedPrice}</div>
                            ${pricePerSqm ? `<div class="price-per-sqm" style="font-size: 10px !important; color: #10b981 !important; font-weight: 400 !important;">${pricePerSqm}</div>` : ''}
                        </div>
                    </div>
                    <div class="object-address text-xs text-gray-500">${address}</div>
                    ${dateInfo ? `<div class="object-dates text-xs text-gray-400 mt-1">${dateInfo}</div>` : ''}
                </div>
            `;
        }).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–ª–æ–∫–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        grid.querySelectorAll('.object-block').forEach(block => {
            block.addEventListener('click', () => {
                const objectId = block.dataset.objectId;
                
                // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                if (this.selectedObjectId === objectId) {
                    this.showObjectModal(objectId);
                } else {
                    // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç
                    this.selectObject(objectId);
                }
            });
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
     */
    getEvaluationClass(evaluation) {
        switch (evaluation) {
            case 'better': return 'better';
            case 'worse': return 'worse';  
            case 'equal': return 'equal';
            case 'fake':
            case 'not-competitor':
            case 'not-sold':
                return 'excluded';
            default: return '';
        }
    }
    
    /**
     * –í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    async selectObject(objectId) {
        try {
            this.selectedObjectId = objectId;
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç:', objectId);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
            this.updateObjectsDisplay();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.saveComparativeState();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ (–≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å—Ç–∞–Ω–µ—Ç —Ä–æ–∑–æ–≤—ã–º)
            this.updateChartDebounced();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
            await this.loadObjectListings(objectId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
            this.updateEvaluationButtons();
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }
    
    /**
     * –í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
     */
    async selectObjectWithScroll(objectId) {
        await this.selectObject(objectId);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã UI —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
        setTimeout(() => {
            this.scrollToSelectedObject(objectId);
        }, 100);
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
     */
    async loadObjectListings(objectId) {
        try {
            const objectWithData = await window.realEstateObjectManager.getObjectWithListings(objectId);
            const listings = objectWithData.listings || [];
            
            const listingsList = document.getElementById('listingsList');
            if (!listingsList) return;
            
            if (listings.length === 0) {
                listingsList.innerHTML = '<div class="text-sm text-gray-500">–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞</div>';
                return;
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–≤–µ–∂–∏–µ —Å–≤–µ—Ä—Ö—É)
            listings.sort((a, b) => new Date(b.updated) - new Date(a.updated));
            
            listingsList.innerHTML = listings.map(listing => {
                const selectedClass = listing.id === this.selectedListingId ? 'selected' : '';
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                let dateInfo = '';
                if (listing.status === 'archived') {
                    // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö: –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    const createdDate = listing.created ? new Date(listing.created).toLocaleDateString('ru-RU') : '';
                    const updatedDate = listing.updated ? new Date(listing.updated).toLocaleDateString('ru-RU') : '';
                    if (createdDate && updatedDate) {
                        dateInfo = `–ê—Ä—Ö–∏–≤: ${createdDate} - ${updatedDate}`;
                    } else if (createdDate) {
                        dateInfo = `${createdDate}`;
                    } else if (updatedDate) {
                        dateInfo = `${updatedDate}`;
                    }
                } else {
                    // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö: —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                    const createdDate = listing.created ? new Date(listing.created).toLocaleDateString('ru-RU') : '';
                    const currentDate = new Date().toLocaleDateString('ru-RU');
                    dateInfo = `–ê–∫—Ç–∏–≤–Ω—ã–π:  ${createdDate} - ${currentDate}`;
                }
                
                // –°–æ–∑–¥–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–±–µ–∑ –∞–¥—Ä–µ—Å–∞)
                const characteristics = this.formatObjectCharacteristics(listing);
                const price = this.formatPrice(listing.price);
                
                return `
                    <div class="listing-block ${selectedClass}"
                         data-listing-id="${listing.id}">
                        <div class="listing-characteristics text-sm font-medium">${characteristics}</div>
                        <div class="listing-price text-sm text-blue-600">${price}</div>
                        <div class="text-xs text-gray-500 mt-1">${dateInfo}</div>
                    </div>
                `;
            }).join('');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–ª–æ–∫–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            listingsList.querySelectorAll('.listing-block').forEach(block => {
                block.addEventListener('click', () => {
                    const listingId = block.dataset.listingId;
                    
                    // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    if (this.selectedListingId === listingId) {
                        this.showListingModal(listingId);
                    } else {
                        // –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                        this.selectListing(listingId);
                    }
                });
            });
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            if (listings.length > 0) {
                this.selectListing(listings[0].id);
            }
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
            const listingsList = document.getElementById('listingsList');
            if (listingsList) {
                listingsList.innerHTML = '<div class="text-sm text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</div>';
            }
        }
    }
    
    /**
     * –í—ã–±–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    async selectListing(listingId) {
        try {
            this.selectedListingId = listingId;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
            document.querySelectorAll('.listing-block').forEach(block => {
                block.classList.toggle('selected', block.dataset.listingId === listingId);
            });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            await this.loadListingDetails(listingId);
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async loadListingDetails(listingId) {
        try {
            const listing = await window.db.getListing(listingId);
            if (!listing) return;
            
            // –ù–∞–π–¥–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            let detailsContainer = document.getElementById('listingDetails');
            if (!detailsContainer) {
                // Fallback - –∏—â–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                const photosGallery = document.getElementById('photosGallery');
                const descriptionDiv = document.getElementById('listingDescription');
                if (photosGallery && descriptionDiv) {
                    detailsContainer = photosGallery.parentElement;
                }
            }
            
            if (detailsContainer) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–µ—Ç–∞–ª–µ–π, –µ—Å–ª–∏ –æ–Ω —Å–∫—Ä—ã—Ç
                if (detailsContainer.classList.contains('hidden')) {
                    detailsContainer.classList.remove('hidden');
                }
                
                // –£–±–∏—Ä–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ
                detailsContainer.style.padding = '0 8px';
                detailsContainer.style.margin = '0';
                
                // –°–æ–∑–¥–∞—ë–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–µ–π —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ UIManager
                if (listing.photos && listing.photos.length > 0) {
                    detailsContainer.innerHTML = `
                        <div class="grid grid-cols-2 gap-x-6" style="height: 380px;">
                            <!-- –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è -->
                            <div class="fotorama-container">
                                <div class="fotorama" 
                                     data-nav="thumbs" 
                                     data-width="100%" 
                                     data-height="300"
                                     data-thumbheight="50"
                                     data-thumbwidth="50"
                                     data-allowfullscreen="true"
                                     data-transition="slide"
                                     data-loop="true"
                                     id="comparative-gallery-${listingId}">
                                    ${listing.photos.map(photo => `<img src="${photo}" alt="–§–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" class="listing-photo">`).join('')}
                                </div>
                            </div>
                            
                            <!-- –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –æ–ø–∏—Å–∞–Ω–∏–µ -->
                            <div class="description-container h-80 flex flex-col">
                                <div class="mb-3 font-medium text-gray-800 flex-shrink-0">–û–ø–∏—Å–∞–Ω–∏–µ:</div>
                                <div class="bg-gray-50 border border-gray-200 rounded p-4 overflow-y-auto flex-1">
                                    <div id="fullDescription" class="text-sm text-gray-700 leading-relaxed"></div>
                                </div>
                            </div>
                        </div>
                    `;
                } else {
                    detailsContainer.innerHTML = `
                        <div class="grid grid-cols-2 gap-4" style="height: 380px;">
                            <!-- –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∑–∞–≥–ª—É—à–∫–∞ -->
                            <div class="fotorama-container">
                                <div class="bg-gray-100 rounded-lg p-8 text-center text-gray-500" style="height: 380px;">
                                    üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                                </div>
                            </div>
                            
                            <!-- –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –æ–ø–∏—Å–∞–Ω–∏–µ -->
                            <div class="description-container h-80 flex flex-col">
                                <div class="mb-3 font-medium text-gray-800 flex-shrink-0">–û–ø–∏—Å–∞–Ω–∏–µ:</div>
                                <div class="bg-gray-50 border border-gray-200 rounded p-4 overflow-y-auto flex-1">
                                    <div id="fullDescription" class="text-sm text-gray-700 leading-relaxed"></div>
                                </div>
                            </div>
                        </div>
                    `;
                }
                
                // –°—Ä–∞–∑—É –∑–∞–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (—É–±–∏—Ä–∞–µ–º –º–∏–≥–∞–Ω–∏–µ)
                const fullDescriptionDiv = document.getElementById('fullDescription');
                if (fullDescriptionDiv) {
                    if (listing.description && listing.description.trim()) {
                        fullDescriptionDiv.innerHTML = `<div class="whitespace-pre-wrap">${listing.description}</div>`;
                    } else {
                        fullDescriptionDiv.innerHTML = '<div class="text-gray-500">–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</div>';
                    }
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Fotorama (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ)
                if (listing.photos && listing.photos.length > 0) {
                    setTimeout(() => {
                        const galleryElement = document.getElementById(`comparative-gallery-${listingId}`);
                        if (galleryElement && window.$ && $.fn.fotorama) {
                            $(galleryElement).fotorama();
                            if (this.debugEnabled) {
                                console.log('üì∏ Fotorama –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', listingId);
                            }
                        }
                    }, 100);
                }
            }
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏
     */
    updateEvaluationButtons() {
        const currentEvaluation = this.selectedObjectId ? 
            this.evaluations.get(this.selectedObjectId) : null;
            
        document.querySelectorAll('.eval-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.evaluation === currentEvaluation);
        });
    }
    
    /**
     * –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    evaluateObject(objectId, evaluation) {
        try {
            this.evaluations.set(objectId, evaluation);
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–∫—Ç–∞:', objectId, evaluation);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∏–¥–æ—Ä—ã
            this.updateCorridors();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.updateObjectsDisplay();
            this.updateChartDebounced();
            this.updateCorridorInfo();
            this.updateEvaluationButtons();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.saveComparativeState();
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }
    
    /**
     * –°–±—Ä–æ—Å –∫–æ—Ä–∏–¥–æ—Ä–æ–≤ —Ü–µ–Ω
     */
    resetCorridors() {
        this.corridors = {
            active: { min: null, max: null },
            archive: { min: null, max: null },
            optimal: { min: null, max: null }
        };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∏–¥–æ—Ä–æ–≤ —Ü–µ–Ω
     */
    updateCorridors() {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä–∏–¥–æ—Ä—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.corridors.active = this.calculateCorridorBounds('active');
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä–∏–¥–æ—Ä—ã –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤  
        this.corridors.archive = this.calculateCorridorBounds('archive');
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–æ—Ä–∏–¥–æ—Ä–æ–≤)
        this.corridors.optimal = this.calculateOptimalRange();
        
        if (this.debugEnabled) {
            console.log('üîç ComparativeAnalysisManager: –û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä–∏–¥–æ—Ä—ã:', this.corridors);
        }
    }
    
    /**
     * –†–∞—Å—á–µ—Ç –≥—Ä–∞–Ω–∏—Ü –∫–æ—Ä–∏–¥–æ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
     */
    calculateCorridorBounds(objectStatus) {
        let minPrice = null;
        let maxPrice = null;
        
        for (let [objectId, evaluation] of this.evaluations) {
            const object = this.currentObjects.find(obj => obj.id === objectId);
            if (!object || object.status !== objectStatus) continue;
            
            // –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –∏—Å–∫–ª—é—á–∞—é—â–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏
            if (['fake', 'not-competitor', 'not-sold'].includes(evaluation)) {
                continue;
            }
            
            const price = object.current_price;
            if (!price || price <= 0) continue;
            
            switch (evaluation) {
                case 'better':
                    // –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –ª—É—á—à–µ - –æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
                    if (maxPrice === null || price < maxPrice) {
                        maxPrice = price;
                    }
                    break;
                    
                case 'worse':
                    // –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç —Ö—É–∂–µ - –ø–æ–¥–Ω–∏–º–∞–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
                    if (minPrice === null || price > minPrice) {
                        minPrice = price;
                    }
                    break;
                    
                case 'equal':
                    // –†–∞–≤–Ω—ã–µ - –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                    break;
            }
        }
        
        return { min: minPrice, max: maxPrice };
    }
    
    /**
     * –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–æ—Ä–∏–¥–æ—Ä–æ–≤)
     */
    calculateOptimalRange() {
        const activeMin = this.corridors.active.min;
        const activeMax = this.corridors.active.max;
        const archiveMin = this.corridors.archive.min;
        const archiveMax = this.corridors.archive.max;
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        let optimalMin = null;
        let optimalMax = null;
        
        if (activeMin !== null && archiveMin !== null) {
            optimalMin = Math.max(activeMin, archiveMin);
        } else if (activeMin !== null) {
            optimalMin = activeMin;
        } else if (archiveMin !== null) {
            optimalMin = archiveMin;
        }
        
        if (activeMax !== null && archiveMax !== null) {
            optimalMax = Math.min(activeMax, archiveMax);
        } else if (activeMax !== null) {
            optimalMax = activeMax;
        } else if (archiveMax !== null) {
            optimalMax = archiveMax;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (optimalMin !== null && optimalMax !== null && optimalMin > optimalMax) {
            return { min: null, max: null }; // –î–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
        }
        
        return { min: optimalMin, max: optimalMax };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–∏–¥–æ—Ä–∞—Ö
     */
    updateCorridorInfo() {
        const activeDiv = document.getElementById('activeCorridor');
        const archiveDiv = document.getElementById('archiveCorridor');
        const optimalDiv = document.getElementById('optimalRange');
        
        if (activeDiv) {
            activeDiv.textContent = this.formatCorridorRange(this.corridors.active);
        }
        
        if (archiveDiv) {
            archiveDiv.textContent = this.formatCorridorRange(this.corridors.archive);
        }
        
        if (optimalDiv) {
            const optimalText = this.formatCorridorRange(this.corridors.optimal);
            optimalDiv.textContent = optimalText;
            optimalDiv.style.fontWeight = optimalText !== '-' ? 'bold' : 'normal';
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞
     */
    formatCorridorRange(corridor) {
        if (corridor.min === null && corridor.max === null) {
            return '-';
        } else if (corridor.min === null) {
            return `–¥–æ ${this.formatPrice(corridor.max)}`;
        } else if (corridor.max === null) {
            return `–æ—Ç ${this.formatPrice(corridor.min)}`;
        } else {
            return `${this.formatPrice(corridor.min)} - ${this.formatPrice(corridor.max)}`;
        }
    }
    
    /**
     * –î–µ–±–∞—É–Ω—Å-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
     */
    updateChartDebounced(delay = 300) {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (this.updateChartTimeout) {
            clearTimeout(this.updateChartTimeout);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç
        this.updateChartTimeout = setTimeout(async () => {
            await this.updateChart();
            this.updateChartTimeout = null;
        }, delay);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    async updateChart() {
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (this.isUpdatingChart) {
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –ì—Ä–∞—Ñ–∏–∫ —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            }
            return;
        }
        
        this.isUpdatingChart = true;
        
        try {
            const chartContainer = document.getElementById('comparativeChart');
            if (!chartContainer) {
                if (this.debugEnabled) {
                    console.log('üîç ComparativeAnalysisManager: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
                return;
            }
            
            // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if (!this.isContainerReady(chartContainer)) {
                if (this.debugEnabled) {
                    console.log('üîç ComparativeAnalysisManager: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤');
                }
                return;
            }
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            const chartData = this.generateChartData();
            
            // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            await this.destroyChart();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
            await new Promise(resolve => setTimeout(resolve, 150));
            
            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
            if (!this.isContainerReady(chartContainer)) {
                if (this.debugEnabled) {
                    console.log('üîç ComparativeAnalysisManager: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏');
                }
                return;
            }
            
            const options = {
                chart: {
                    type: 'scatter',
                    height: 400,
                    toolbar: { show: false },
                    events: {
                        dataPointSelection: (event, chartContext, config) => {
                            // –û–±–µ—Ä–Ω—ë–º –≤ setTimeout, —Ç–∞–∫ –∫–∞–∫ ApexCharts –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç async –∫–æ–ª–ª–±—ç–∫–∏
                            setTimeout(async () => {
                                await this.onChartPointClick(config);
                            }, 0);
                        }
                    },
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
                            "shortMonths": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
                            "days": ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"]
                        }
                    }],
                    defaultLocale: "ru"
                },
                series: chartData.series,
                colors: chartData.colors,
                xaxis: {
                    type: 'datetime',
                    title: { text: '–î–∞—Ç–∞' }
                },
                yaxis: {
                    title: { text: '–¶–µ–Ω–∞, ‚ÇΩ' },
                    labels: {
                        formatter: (value) => this.formatPrice(value)
                    }
                },
                tooltip: {
                    shared: false,
                    intersect: true,
                    custom: ({ series, seriesIndex, dataPointIndex, w }) => {
                        return this.generateTooltip({ series, seriesIndex, dataPointIndex, w });
                    }
                },
                markers: {
                    size: 6,
                    strokeWidth: 2,
                    strokeColor: '#fff'
                },
                legend: {
                    show: false
                },
                annotations: {
                    yaxis: this.generateCorridorAnnotations()
                }
            };
            
            try {
                this.comparativeChart = new ApexCharts(chartContainer, options);
                await this.comparativeChart.render();
                
                if (this.debugEnabled) {
                    console.log('üîç ComparativeAnalysisManager: –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
                }
                
            } catch (renderError) {
                console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≥—Ä–∞—Ñ–∏–∫–∞:', renderError);
                await this.destroyChart();
            }
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', error);
            await this.destroyChart();
        } finally {
            this.isUpdatingChart = false;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
     */
    isContainerReady(container) {
        if (!container) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DOM
        if (!container.isConnected) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
        if (container.offsetParent === null) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        if (container.offsetWidth === 0 || container.offsetHeight === 0) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ CSS
        const computedStyle = window.getComputedStyle(container);
        if (computedStyle.display === 'none' || computedStyle.visibility === 'hidden') return false;
        
        return true;
    }
    
    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    async destroyChart() {
        // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (this.updateChartTimeout) {
            clearTimeout(this.updateChartTimeout);
            this.updateChartTimeout = null;
        }
        
        if (this.comparativeChart) {
            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                if (this.comparativeChart.w && this.comparativeChart.w.globals) {
                    this.comparativeChart.w.globals.resized = true;
                }
                
                // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫—Ä—ã—Ç—å tooltip –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                if (this.comparativeChart.w && this.comparativeChart.w.globals.dom) {
                    const tooltips = this.comparativeChart.w.globals.dom.baseEl.querySelectorAll('.apexcharts-tooltip');
                    tooltips.forEach(tooltip => {
                        if (tooltip && tooltip.style) {
                            tooltip.style.display = 'none';
                        }
                    });
                }
                
                // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                await this.comparativeChart.destroy();
                
                if (this.debugEnabled) {
                    console.log('üîç ComparativeAnalysisManager: –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
                }
            } catch (error) {
                console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
                
                // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
                try {
                    if (this.comparativeChart.w && this.comparativeChart.w.globals.dom && this.comparativeChart.w.globals.dom.baseEl) {
                        this.comparativeChart.w.globals.dom.baseEl.innerHTML = '';
                    }
                } catch (cleanupError) {
                    console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:', cleanupError);
                }
            } finally {
                this.comparativeChart = null;
            }
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
     */
    generateChartData() {
        const series = [];
        const colors = [];
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –æ—Ü–µ–Ω–∫–µ
        const groups = {
            'active-better': { objects: [], color: '#93c5fd', name: '–ê–∫—Ç–∏–≤–Ω—ã–µ (–ª—É—á—à–µ)' },
            'active-equal': { objects: [], color: '#3b82f6', name: '–ê–∫—Ç–∏–≤–Ω—ã–µ (—Ä–∞–≤–Ω–æ)' },  
            'active-worse': { objects: [], color: '#1e40af', name: '–ê–∫—Ç–∏–≤–Ω—ã–µ (—Ö—É–∂–µ)' },
            'active-unevaluated': { objects: [], color: '#60a5fa', name: '–ê–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ –æ—Ü–µ–Ω–µ–Ω—ã)' },
            'archive-better': { objects: [], color: '#86efac', name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ (–ª—É—á—à–µ)' },
            'archive-equal': { objects: [], color: '#22c55e', name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ (—Ä–∞–≤–Ω–æ)' },
            'archive-worse': { objects: [], color: '#15803d', name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ (—Ö—É–∂–µ)' },
            'archive-unevaluated': { objects: [], color: '#4ade80', name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ (–Ω–µ –æ—Ü–µ–Ω–µ–Ω—ã)' },
            'excluded': { objects: [], color: '#dc2626', name: '–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ' }
        };
        
        // –û—Ç–¥–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        let selectedObject = null;
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
        this.currentObjects.forEach(obj => {
            // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –≤—ã–±—Ä–∞–Ω, –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
            if (this.selectedObjectId && obj.id === this.selectedObjectId) {
                selectedObject = obj;
                return; // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—ã—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            }
            
            const evaluation = this.evaluations.get(obj.id);
            
            let groupKey;
            if (['fake', 'not-competitor', 'not-sold'].includes(evaluation)) {
                groupKey = 'excluded';
            } else if (evaluation) {
                groupKey = `${obj.status}-${evaluation}`;
            } else {
                groupKey = `${obj.status}-unevaluated`;
            }
            
            if (groups[groupKey]) {
                groups[groupKey].objects.push(obj);
            }
        });
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        Object.entries(groups).forEach(([groupKey, group]) => {
            if (group.objects.length > 0) {
                series.push({
                    name: group.name,
                    data: group.objects.map(obj => {
                        let dateForChart;
                        
                        if (obj.status === 'active') {
                            // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                            dateForChart = new Date().getTime();
                        } else {
                            // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                            dateForChart = new Date(obj.updated || obj.created).getTime();
                        }
                        
                        return {
                            x: dateForChart,
                            y: obj.current_price,
                            objectData: obj // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è tooltip –∏ –∫–ª–∏–∫–æ–≤
                        };
                    })
                });
                colors.push(group.color);
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é —Å —Ä–æ–∑–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º
        if (selectedObject) {
            let dateForChart;
            
            if (selectedObject.status === 'active') {
                dateForChart = new Date().getTime();
            } else {
                dateForChart = new Date(selectedObject.updated || selectedObject.created).getTime();
            }
            
            series.push({
                name: '–í—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç',
                data: [{
                    x: dateForChart,
                    y: selectedObject.current_price,
                    objectData: selectedObject // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
                }],
                marker: {
                    size: 10, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                    strokeWidth: 3,
                    strokeColor: '#fff'
                }
            });
            colors.push('#ec4899'); // –†–æ–∑–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        }
        
        return { series, colors };
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∫–æ—Ä–∏–¥–æ—Ä–æ–≤
     */
    generateCorridorAnnotations() {
        const annotations = [];
        
        // –ö–æ—Ä–∏–¥–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (this.corridors.active.min !== null) {
            annotations.push({
                y: this.corridors.active.min,
                borderColor: '#3b82f6',
                borderWidth: 2,
                strokeDashArray: 5,
                label: {
                    text: '–ê–∫—Ç–∏–≤–Ω—ã–µ: –º–∏–Ω',
                    style: { background: '#3b82f6', color: '#fff' }
                }
            });
        }
        
        if (this.corridors.active.max !== null) {
            annotations.push({
                y: this.corridors.active.max,
                borderColor: '#3b82f6',
                borderWidth: 2,
                strokeDashArray: 5,
                label: {
                    text: '–ê–∫—Ç–∏–≤–Ω—ã–µ: –º–∞–∫—Å',
                    style: { background: '#3b82f6', color: '#fff' }
                }
            });
        }
        
        // –ö–æ—Ä–∏–¥–æ—Ä –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (this.corridors.archive.min !== null) {
            annotations.push({
                y: this.corridors.archive.min,
                borderColor: '#22c55e',
                borderWidth: 2,
                strokeDashArray: 5,
                label: {
                    text: '–ê—Ä—Ö–∏–≤–Ω—ã–µ: –º–∏–Ω',
                    style: { background: '#22c55e', color: '#fff' }
                }
            });
        }
        
        if (this.corridors.archive.max !== null) {
            annotations.push({
                y: this.corridors.archive.max,
                borderColor: '#22c55e',
                borderWidth: 2,
                strokeDashArray: 5,
                label: {
                    text: '–ê—Ä—Ö–∏–≤–Ω—ã–µ: –º–∞–∫—Å',
                    style: { background: '#22c55e', color: '#fff' }
                }
            });
        }
        
        // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–∑–∞–ª–∏–≤–∫–∞ –º–µ–∂–¥—É –ª–∏–Ω–∏—è–º–∏)
        if (this.corridors.optimal.min !== null && this.corridors.optimal.max !== null) {
            annotations.push({
                y: this.corridors.optimal.min,
                y2: this.corridors.optimal.max,
                fillColor: '#10b981',
                opacity: 0.1,
                label: {
                    text: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω',
                    style: { background: '#10b981', color: '#fff' }
                }
            });
        }
        
        return annotations;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è tooltip –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
     */
    generateTooltip(tooltipModel) {
        const { seriesIndex, dataPointIndex, w } = tooltipModel;
        
        if (!w.config.series[seriesIndex] || !w.config.series[seriesIndex].data[dataPointIndex]) {
            return '<div style="padding: 8px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
        }
        
        const [timestamp, price] = w.config.series[seriesIndex].data[dataPointIndex];
        const date = new Date(timestamp).toLocaleDateString('ru-RU');
        const formattedPrice = this.formatPrice(price);
        
        // –ù–∞–π–¥–µ–º –æ–±—ä–µ–∫—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        const object = this.currentObjects.find(obj => 
            Math.abs(new Date(obj.updated || obj.created).getTime() - timestamp) < 86400000 && 
            Math.abs(obj.current_price - price) < 1000
        );
        
        if (!object) {
            return '<div style="padding: 8px;">–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>';
        }
        
        const evaluation = this.evaluations.get(object.id);
        const evaluationText = this.getEvaluationDisplayName(evaluation);
        const rooms = object.rooms || object.property_type || '–Ω/–¥';
        const area = object.area_total ? `${object.area_total} –º¬≤` : '–Ω/–¥';
        
        return `
            <div style="background: white; border: 1px solid #d1d5db; border-radius: 8px; 
                        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); padding: 12px; max-width: 250px;">
                <div style="font-weight: 600; color: #1f2937; margin-bottom: 8px;">
                    Id ${object.id}: ${rooms}, ${area}
                </div>
                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">
                    –°—Ç–∞—Ç—É—Å: ${object.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ê—Ä—Ö–∏–≤'}
                </div>
                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">
                    –î–∞—Ç–∞: ${date}
                </div>
                ${evaluation ? `
                    <div style="font-size: 14px; color: #059669; margin-bottom: 4px; font-weight: 500;">
                        –û—Ü–µ–Ω–∫–∞: ${evaluationText}
                    </div>
                ` : ''}
                <div style="font-weight: bold; font-size: 16px; color: #2563eb;">
                    ${formattedPrice}
                </div>
            </div>
        `;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
     */
    getEvaluationDisplayName(evaluation) {
        const names = {
            'better': '–õ—É—á—à–µ',
            'worse': '–•—É–∂–µ',
            'equal': '–†–∞–≤–Ω–æ',
            'fake': '–§–µ–π–∫',
            'not-competitor': '–ù–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç',
            'not-sold': '–ù–µ –ø—Ä–æ–¥–∞–Ω'
        };
        return names[evaluation] || '–ù–µ –æ—Ü–µ–Ω–µ–Ω';
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    async saveCurrentAnalysis() {
        if (this.evaluations.size === 0) {
            alert('–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }
        
        const analysisName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞:');
        if (!analysisName) return;
        
        const analysisData = {
            name: analysisName,
            evaluations: Object.fromEntries(this.evaluations),
            corridors: this.corridors,
            filters: {
                segmentId: this.reportsManager.currentSegment?.id,
                subsegmentId: this.reportsManager.currentSubsegment?.id,
                dateFrom: this.reportsManager.dateFromFilter?.value,
                dateTo: this.reportsManager.dateToFilter?.value
            },
            timestamp: new Date().toISOString()
        };
        
        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ IndexedDB —á–µ—Ä–µ–∑ database.js
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞:', analysisData);
            alert('–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)');
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞');
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
     */
    async showLoadAnalysisModal() {
        alert('–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
     */
    formatPrice(price) {
        if (!price) return '0 ‚ÇΩ';
        return new Intl.NumberFormat('ru-RU').format(price) + ' ‚ÇΩ';
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±—ä–µ–∫—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ DuplicatesManager)
     */
    formatObjectCharacteristics(realEstateObject) {
        const parts = [];
        
        // –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if (realEstateObject.property_type) {
            const types = {
                'studio': '–°—Ç—É–¥–∏—è',
                '1k': '1-–∫',
                '2k': '2-–∫',
                '3k': '3-–∫',
                '4k+': '4-–∫+'
            };
            parts.push(types[realEstateObject.property_type] || realEstateObject.property_type);
            parts.push('–∫–≤–∞—Ä—Ç–∏—Ä–∞');
        }
        
        // –ü–ª–æ—â–∞–¥–∏
        const areas = [];
        if (realEstateObject.area_total) areas.push(realEstateObject.area_total);
        if (realEstateObject.area_living) areas.push(realEstateObject.area_living);
        if (realEstateObject.area_kitchen) areas.push(realEstateObject.area_kitchen);
        if (areas.length > 0) parts.push(`${areas.join('/')}–º¬≤`);
        
        // –≠—Ç–∞–∂/—ç—Ç–∞–∂–Ω–æ—Å—Ç—å
        if (realEstateObject.floor && realEstateObject.total_floors) {
            parts.push(`${realEstateObject.floor}/${realEstateObject.total_floors} —ç—Ç.`);
        }
        
        return parts.length > 0 ? parts.join(', ') : '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∏ —Ü–µ–Ω–æ–π
     */
    formatObjectFullInfo(obj) {
        const characteristics = this.formatObjectCharacteristics(obj);
        const price = obj.current_price || 0;
        const formattedPrice = this.formatPrice(price);
        
        // –¶–µ–Ω–∞ –∑–∞ –∫–≤.–º –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å
        let pricePerSqm = '';
        if (price > 0 && obj.area_total > 0) {
            const perSqm = Math.round(price / obj.area_total);
            pricePerSqm = ` (${new Intl.NumberFormat('ru-RU').format(perSqm)})`;
        }
        
        return `${characteristics} ${formattedPrice}${pricePerSqm}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ ID
     */
    getAddressNameById(addressId) {
        if (!addressId || !this.addresses) return '';
        const address = this.addresses.find(addr => addr.id === addressId);
        return address ? address.address : '';
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
     */
    async loadAddresses() {
        try {
            const areaId = this.areaPage.currentAreaId;
            if (!areaId) {
                this.addresses = [];
                return;
            }

            this.addresses = await window.db.getAddressesInMapArea(areaId);
            if (this.debugEnabled) {
                console.log(`üìç ComparativeAnalysisManager: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.addresses.length} –∞–¥—Ä–µ—Å–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ ${areaId}`);
            }
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤:', error);
            this.addresses = [];
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    async showObjectModal(objectId) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–∑ DuplicatesManager
            if (this.areaPage && this.areaPage.duplicatesManager) {
                await this.areaPage.duplicatesManager.showObjectDetails(objectId);
            } else {
                console.error('‚ùå ComparativeAnalysisManager: DuplicatesManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—ä–µ–∫—Ç–∞:', objectId);
            }
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async showListingModal(listingId) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –∏–∑ DuplicatesManager
            if (this.areaPage && this.areaPage.duplicatesManager) {
                await this.areaPage.duplicatesManager.showListingDetails(listingId);
            } else {
                console.error('‚ùå ComparativeAnalysisManager: DuplicatesManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', listingId);
            }
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ tooltip –¥–ª—è —Ç–æ—á–µ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    generateTooltip({ series, seriesIndex, dataPointIndex, w }) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
            const chartData = w.globals.initialSeries[seriesIndex].data[dataPointIndex];
            const objectData = chartData?.objectData;
            
            if (!objectData) {
                return '<div class="custom-tooltip">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
            }
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–∫—Ç–∞
            const characteristics = this.formatObjectCharacteristics(objectData);
            const price = this.formatPrice(objectData.current_price);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            let dateInfo = '';
            if (objectData.status === 'archive') {
                const createdDate = objectData.created ? new Date(objectData.created).toLocaleDateString('ru-RU') : '';
                const updatedDate = objectData.updated ? new Date(objectData.updated).toLocaleDateString('ru-RU') : '';
                if (createdDate && updatedDate) {
                    dateInfo = `–ê—Ä—Ö–∏–≤: ${createdDate} - ${updatedDate}`;
                } else if (createdDate) {
                    dateInfo = `${createdDate}`;
                } else if (updatedDate) {
                    dateInfo = `${updatedDate}`;
                }
            } else {
                const createdDate = objectData.created ? new Date(objectData.created).toLocaleDateString('ru-RU') : '';
                const currentDate = new Date().toLocaleDateString('ru-RU');
                dateInfo = `–ê–∫—Ç–∏–≤–Ω—ã–π: ${createdDate} - ${currentDate}`;
            }
            
            return `
                <div class="custom-tooltip bg-white p-3 rounded-lg shadow-lg border max-w-xs">
                    <div class="font-semibold text-sm mb-2">${characteristics}</div>
                    <div class="font-bold text-blue-600 text-sm mb-1">${price}</div>
                    <div class="text-xs text-gray-500">${dateInfo}</div>
                    <div class="text-xs text-gray-400 mt-1">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</div>
                </div>
            `;
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ tooltip:', error);
            return '<div class="custom-tooltip">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>';
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ —Ç–æ—á–∫–∞–º –≥—Ä–∞—Ñ–∏–∫–∞
     */
    async onChartPointClick(config) {
        try {
            const { seriesIndex, dataPointIndex } = config;
            
            if (seriesIndex === undefined || dataPointIndex === undefined) return;
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            const chartSeries = this.comparativeChart.w.globals.initialSeries[seriesIndex];
            const pointData = chartSeries?.data?.[dataPointIndex];
            const objectData = pointData?.objectData;
            
            if (objectData && objectData.id) {
                // –í—ã–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
                await this.selectObjectWithScroll(objectData.id);
                
                if (this.debugEnabled) {
                    console.log('üîç ComparativeAnalysisManager: –í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –∫–ª–∏–∫ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:', objectData.id);
                }
            }
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:', error);
        }
    }
    
    /**
     * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –±–ª–æ–∫—É –æ–±—ä–µ–∫—Ç–∞
     */
    scrollToSelectedObject(objectId) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ –æ–±—ä–µ–∫—Ç–∞ –ø–æ data-object-id
            const objectBlock = document.querySelector(`[data-object-id="${objectId}"]`);
            if (!objectBlock) {
                if (this.debugEnabled) {
                    console.log('üîç ComparativeAnalysisManager: –ë–ª–æ–∫ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏:', objectId);
                }
                return;
            }
            
            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            const objectsContainer = document.getElementById('objectsGrid');
            if (!objectsContainer) {
                if (this.debugEnabled) {
                    console.log('üîç ComparativeAnalysisManager: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏');
                }
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å overflow
            let scrollContainer = objectsContainer;
            
            // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π, –µ—Å–ª–∏ —Å–∞–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ—Ç—Å—è
            while (scrollContainer && scrollContainer !== document.body) {
                const styles = window.getComputedStyle(scrollContainer);
                if (styles.overflowY === 'scroll' || styles.overflowY === 'auto' || 
                    (styles.overflow === 'scroll' || styles.overflow === 'auto')) {
                    break;
                }
                scrollContainer = scrollContainer.parentElement;
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º window
            if (!scrollContainer || scrollContainer === document.body) {
                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—Å–µ–≥–æ –æ–∫–Ω–∞
                objectBlock.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center',
                    inline: 'nearest'
                });
            } else {
                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                const containerRect = scrollContainer.getBoundingClientRect();
                const blockRect = objectBlock.getBoundingClientRect();
                
                // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
                const scrollTop = scrollContainer.scrollTop;
                const targetScrollTop = scrollTop + (blockRect.top - containerRect.top) - 
                                     (containerRect.height - blockRect.height) / 2;
                
                // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
                scrollContainer.scrollTo({
                    top: Math.max(0, targetScrollTop),
                    behavior: 'smooth'
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –º–µ—Ä—Ü–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
            objectBlock.style.transition = 'box-shadow 0.3s ease';
            objectBlock.style.boxShadow = '0 0 20px rgba(236, 72, 153, 0.5)';
            
            setTimeout(() => {
                objectBlock.style.boxShadow = '';
                setTimeout(() => {
                    objectBlock.style.transition = '';
                }, 300);
            }, 1000);
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –æ–±—ä–µ–∫—Ç—É:', objectId);
            }
            
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –æ–±—ä–µ–∫—Ç—É:', error);
        }
    }
    
    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ/—Å–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏
     */
    async safeUpdateChart() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
        return new Promise((resolve) => {
            requestAnimationFrame(async () => {
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if (document.hidden) {
                    if (this.debugEnabled) {
                        console.log('üîç ComparativeAnalysisManager: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º safeUpdateChart');
                    }
                    resolve();
                    return;
                }
                
                try {
                    await this.updateChart();
                    resolve();
                } catch (error) {
                    console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –≤ safeUpdateChart:', error);
                    resolve();
                }
            });
        });
    }
    
    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    async onPanelActivated() {
        if (this.debugEnabled) {
            console.log('üîç ComparativeAnalysisManager: –ü–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–∞–Ω–µ–ª—å –≤–∏–¥–∏–º–∞
        setTimeout(async () => {
            await this.safeUpdateChart();
        }, 200);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    handleVisibilityChange() {
        if (document.hidden) {
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞, –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫');
            }
        } else {
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω–∞ - –º–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω–∞');
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            setTimeout(async () => {
                const chartContainer = document.getElementById('comparativeChart');
                if (chartContainer && this.isContainerReady(chartContainer)) {
                    await this.safeUpdateChart();
                }
            }, 300);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ ApexCharts
     */
    handleApexChartsError(event) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å ApexCharts –∏ getBoundingClientRect
        if (event.error && event.filename && 
            event.filename.includes('apexcharts') && 
            event.message && event.message.includes('getBoundingClientRect')) {
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ ApexCharts, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫');
            }
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
            event.preventDefault();
            event.stopPropagation();
            
            // –ü—ã—Ç–∞–µ–º—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(async () => {
                try {
                    await this.destroyChart();
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º
                    setTimeout(() => {
                        this.updateChartDebounced(500);
                    }, 200);
                } catch (recoveryError) {
                    console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', recoveryError);
                }
            }, 100);
            
            return false;
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –≤ localStorage
     */
    saveComparativeState() {
        try {
            const areaId = this.areaPage.dataState?.getState('currentArea')?.id;
            if (!areaId) return;
            
            const stateKey = `comparative_state_${areaId}`;
            const state = {
                evaluations: Object.fromEntries(this.evaluations),
                selectedObjectId: this.selectedObjectId,
                selectedListingId: this.selectedListingId,
                corridors: this.corridors,
                statusFilter: this.statusFilter,
                timestamp: Date.now()
            };
            
            localStorage.setItem(stateKey, JSON.stringify(state));
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', state);
            }
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –∏–∑ localStorage
     */
    restoreComparativeState() {
        try {
            const areaId = this.areaPage.dataState?.getState('currentArea')?.id;
            if (!areaId) return;
            
            const stateKey = `comparative_state_${areaId}`;
            const savedState = localStorage.getItem(stateKey);
            
            if (!savedState) return;
            
            const state = JSON.parse(savedState);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
            if (Date.now() - state.timestamp > maxAge) {
                localStorage.removeItem(stateKey);
                return;
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.evaluations = new Map(Object.entries(state.evaluations || {}));
            this.selectedObjectId = state.selectedObjectId;
            this.selectedListingId = state.selectedListingId;
            this.corridors = state.corridors || {
                active: { min: null, max: null },
                archive: { min: null, max: null },
                optimal: { min: null, max: null }
            };
            this.statusFilter = state.statusFilter || 'all';
            
            if (this.debugEnabled) {
                console.log('üîç ComparativeAnalysisManager: –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', state);
            }
        } catch (error) {
            console.error('‚ùå ComparativeAnalysisManager: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.removeEventListener('visibilitychange', this.handleVisibilityChange);
        window.removeEventListener('error', this.handleApexChartsError);
        
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if (this.updateChartTimeout) {
            clearTimeout(this.updateChartTimeout);
            this.updateChartTimeout = null;
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        this.destroyChart();
        
        if (this.debugEnabled) {
            console.log('üîç ComparativeAnalysisManager: –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
        }
    }
}