/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 */

class SegmentsManager {
    constructor(dataState, eventBus, progressManager) {
        this.dataState = dataState;
        this.eventBus = eventBus;
        this.progressManager = progressManager;
        
        // –¢–∞–±–ª–∏—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        this.segmentsTable = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        this.segmentsState = {
            segments: [],
            expandedRows: new Set(),
            selectedSegment: null,
            editingSegment: null,
            modalOpen: false
        };
        
        // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        this.houseSeries = [];
        this.houseClasses = [];
        this.wallMaterials = [];
        this.ceilingMaterials = [];
        this.houseProblems = [];
        
        // –ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        this.activeSegmentMapFilter = 'year';
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            pageLength: 10,
            maxSegments: 50,
            defaultFilters: {
                type: ['apartment'],
                floors_from: 1,
                floors_to: 25,
                build_year_from: 1950,
                build_year_to: new Date().getFullYear()
            }
        };
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.bindEvents();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        if (this.eventBus) {
            this.eventBus.on(CONSTANTS.EVENTS.AREA_LOADED, async (area) => {
                await this.onAreaLoaded(area);
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.ADDRESSES_LOADED, async () => {
                await this.updateSegmentsData();
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.AREA_CHANGED, async (area) => {
                await this.onAreaChanged(area);
            });
        }
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–Ω–æ–ø–∫–∞–º
        this.bindButtons();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–∞–º
        this.bindModalEvents();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º –∫–∞—Ä—Ç—ã
        this.bindMapFilterEvents();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —Ç–∞–±–ª–∏—Ü—ã)
        this.bindPanelEvents();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    initializeTable() {
        const tableElement = document.getElementById('segmentsTable');
        if (!tableElement) {
            console.warn('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        if (this.segmentsTable) {
            this.segmentsTable.destroy();
        }
        
        try {
            this.segmentsTable = $('#segmentsTable').DataTable({
                responsive: true,
                pageLength: 25,
                lengthChange: false,
                searching: false,
                ordering: true,
                info: true,
                autoWidth: false,
                language: {
                    "processing": "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
                    "search": "–ü–æ–∏—Å–∫:",
                    "lengthMenu": "–ü–æ–∫–∞–∑–∞—Ç—å _MENU_ –∑–∞–ø–∏—Å–µ–π",
                    "info": "–ó–∞–ø–∏—Å–∏ —Å _START_ –¥–æ _END_ –∏–∑ _TOTAL_ –∑–∞–ø–∏—Å–µ–π",
                    "infoEmpty": "–ó–∞–ø–∏—Å–∏ —Å 0 –¥–æ 0 –∏–∑ 0 –∑–∞–ø–∏—Å–µ–π",
                    "infoFiltered": "(–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∏–∑ _MAX_ –∑–∞–ø–∏—Å–µ–π)",
                    "loadingRecords": "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π...",
                    "zeroRecords": "–ó–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
                    "emptyTable": "–í —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ",
                    "paginate": {
                        "first": "–ü–µ—Ä–≤–∞—è",
                        "previous": "–ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                        "next": "–°–ª–µ–¥—É—é—â–∞—è",
                        "last": "–ü–æ—Å–ª–µ–¥–Ω—è—è"
                    }
                },
                columnDefs: [
                    {
                        targets: 0,
                        orderable: false,
                        className: 'details-control text-center',
                        width: '30px',
                        render: function(data, type, row) {
                            return '<i class="fas fa-plus-circle text-gray-400 hover:text-blue-600 cursor-pointer"></i>';
                        }
                    },
                    {
                        targets: 1,
                        render: function(data, type, row) {
                            return `<span class="font-medium text-gray-900">${data || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</span>`;
                        }
                    },
                    {
                        targets: 2,
                        className: 'text-center',
                        render: function(data, type, row) {
                            return `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">${data || 0}</span>`;
                        }
                    },
                    {
                        targets: 3,
                        className: 'text-center',
                        render: function(data, type, row) {
                            return `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">${data || 0}</span>`;
                        }
                    },
                    {
                        targets: 4,
                        orderable: false,
                        className: 'text-right',
                        width: '120px',
                        render: function(data, type, row) {
                            return `
                                <div class="flex justify-end space-x-2">
                                    <button type="button" class="edit-segment-btn inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200" data-segment-id="${row.id}">
                                        –ò–∑–º–µ–Ω–∏—Ç—å
                                    </button>
                                    <button type="button" class="delete-segment-btn inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded text-red-700 bg-red-100 hover:bg-red-200" data-segment-id="${row.id}">
                                        –£–¥–∞–ª–∏—Ç—å
                                    </button>
                                </div>
                            `;
                        }
                    }
                ],
                drawCallback: () => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    const info = this.segmentsTable.page.info();
                    if (info.recordsTotal === 0) {
                        $('#segmentsTableEmpty').removeClass('hidden');
                        $('#segmentsTable_wrapper').addClass('hidden');
                    } else {
                        $('#segmentsTableEmpty').addClass('hidden');
                        $('#segmentsTable_wrapper').removeClass('hidden');
                    }
                }
            });
            
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', error);
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–Ω–æ–ø–∫–∞–º
     */
    bindButtons() {
        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞
        const createBtn = document.getElementById('createSegmentBtn');
        if (createBtn) {
            createBtn.addEventListener('click', () => {
                console.log('üîµ SegmentsManager: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞');
                this.openCreateSegmentModal();
            });
            console.log('‚úÖ SegmentsManager: –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞');
        } else {
            console.warn('‚ö†Ô∏è SegmentsManager: –ö–Ω–æ–ø–∫–∞ #createSegmentBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
        document.getElementById('createSubsegmentBtn')?.addEventListener('click', () => {
            this.openCreateSubsegmentModal();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        document.getElementById('refreshSegmentsBtn')?.addEventListener('click', () => {
            this.refreshSegments();
        });
        
        // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        document.getElementById('exportSegmentsBtn')?.addEventListener('click', () => {
            this.exportSegments();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        document.getElementById('importSegmentsFile')?.addEventListener('change', (event) => {
            this.importSegments(event);
        });
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–∞–º
     */
    bindModalEvents() {
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        document.getElementById('segmentModal')?.addEventListener('click', (e) => {
            if (e.target.id === 'segmentModal') {
                this.closeSegmentModal();
            }
        });
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('closeSegmentModalBtn')?.addEventListener('click', () => {
            this.closeSegmentModal();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        document.getElementById('cancelSegmentBtn')?.addEventListener('click', () => {
            this.closeSegmentModal();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤ —Ñ—É—Ç–µ—Ä–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('closeSegmentModalFooterBtn')?.addEventListener('click', () => {
            this.closeSegmentModal();
        });
        
        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞
        document.getElementById('saveSegmentBtn')?.addEventListener('click', () => {
            this.saveSegment();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
        document.getElementById('cancelChangesBtn')?.addEventListener('click', () => {
            this.cancelChanges();
        });
        
        // –§–æ—Ä–º–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
        document.getElementById('segmentForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveSegment();
        });
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.bindFilterChangeEvents();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    bindFilterChangeEvents() {
        const form = document.getElementById('segmentForm');
        if (!form) return;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
        const updateHandler = async () => {
            await this.updateSegmentNameFromFilters();
            this.updateSegmentMapWithFilters();
            // checkForChanges –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ updateSegmentNameFromFilters
        };
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filterSelectors = [
            'select[name="type"]',
            'select[name="house_class_id"]', 
            'select[name="house_series_id"]',
            'select[name="wall_material_id"]',
            'select[name="ceiling_material_id"]',
            'select[name="gas_supply"]',
            'select[name="individual_heating"]',
            'select[name="closed_territory"]',
            'select[name="underground_parking"]',
            'select[name="commercial_spaces"]',
            'input[name="floors_from"]',
            'input[name="floors_to"]',
            'input[name="build_year_from"]',
            'input[name="build_year_to"]',
            'input[name="ceiling_height_from"]',
            'input[name="ceiling_height_to"]',
            'select[name="addresses"]'
        ];
        
        filterSelectors.forEach(selector => {
            const elements = form.querySelectorAll(selector);
            elements.forEach(element => {
                if (element.tagName === 'SELECT') {
                    element.addEventListener('change', updateHandler);
                    
                    // –î–ª—è SlimSelect –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –æ–±—ä–µ–∫—Ç —Å–ª–∏–º—Å–µ–ª–µ–∫—Ç–∞
                    setTimeout(() => {
                        if (element.slimSelect) {
                            element.slimSelect.onChange = updateHandler;
                        }
                    }, 100);
                } else if (element.tagName === 'INPUT') {
                    element.addEventListener('input', updateHandler);
                }
            });
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async updateSegmentNameFromFilters() {
        const form = document.getElementById('segmentForm');
        const nameInput = document.getElementById('segmentName');
        if (!form || !nameInput) return;
        
        try {
            const filters = this.getSegmentFormData().filters;
            const generatedName = await this.generateSegmentName(filters);
            nameInput.value = generatedName;
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞:', error);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        this.checkForChanges();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ
     */
    checkForChanges() {
        if (!this.segmentsState.savedSegmentData) {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            this.updateSaveButtonState(true);
            return;
        }
        
        const currentData = this.getSegmentFormData();
        const hasChanges = JSON.stringify(currentData) !== JSON.stringify(this.segmentsState.savedSegmentData);
        
        this.updateSaveButtonState(hasChanges);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    updateSaveButtonState(hasChanges = false) {
        const saveBtn = document.getElementById('saveSegmentBtn');
        const indicator = document.getElementById('unsavedChangesIndicator');
        
        if (saveBtn) {
            saveBtn.disabled = !hasChanges;
        }
        
        if (indicator) {
            if (hasChanges) {
                indicator.classList.remove('hidden');
            } else {
                indicator.classList.add('hidden');
            }
        }
    }
    
    /**
     * –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
     */
    cancelChanges() {
        if (!this.segmentsState.savedSegmentData) return;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        this.fillSegmentForm(this.segmentsState.savedSegmentData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.updateSaveButtonState(false);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        this.updateSegmentMapWithFilters();
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     * –§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏, –°–µ—Ä–∏–∏ [—Å–ø–∏—Å–æ–∫], –ö–ª–∞—Å—Å—ã [—Å–ø–∏—Å–æ–∫], –ì–æ–¥–∞ [—Å–ø–∏—Å–æ–∫], –≠—Ç–∞–∂–Ω–æ—Å—Ç—å [—Å–ø–∏—Å–æ–∫]
     */
    async generateSegmentName(filters) {
        const parts = [];
        
        try {
            // 1. –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
            const currentArea = this.dataState.getState('currentArea');
            if (currentArea && currentArea.name) {
                parts.push(currentArea.name);
            }
            
            // 2. –°–µ—Ä–∏–∏ –¥–æ–º–æ–≤
            if (filters.house_series_id && filters.house_series_id.length > 0) {
                const seriesNames = [];
                for (const seriesId of filters.house_series_id) {
                    try {
                        const series = await window.db.get('house_series', seriesId);
                        if (series && series.name) {
                            seriesNames.push(series.name);
                        }
                    } catch (error) {
                        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–∏—é:', seriesId);
                    }
                }
                if (seriesNames.length > 0) {
                    parts.push(`–°–µ—Ä–∏–∏ [${seriesNames.join(', ')}]`);
                }
            }
            
            // 3. –ö–ª–∞—Å—Å—ã –¥–æ–º–æ–≤
            if (filters.house_class_id && filters.house_class_id.length > 0) {
                const classNames = [];
                for (const classId of filters.house_class_id) {
                    try {
                        const houseClass = await window.db.get('house_classes', classId);
                        if (houseClass && houseClass.name) {
                            classNames.push(houseClass.name);
                        }
                    } catch (error) {
                        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å –¥–æ–º–∞:', classId);
                    }
                }
                if (classNames.length > 0) {
                    parts.push(`–ö–ª–∞—Å—Å [${classNames.join(', ')}]`);
                }
            }
            
            // 4. –ì–æ–¥—ã –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥–æ–¥–æ–≤)
            if (filters.build_year_from || filters.build_year_to) {
                const fromYear = filters.build_year_from || 1800;
                const toYear = filters.build_year_to || new Date().getFullYear();
                
                // –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–±–æ–ª—å—à–æ–π (–¥–æ 10 –ª–µ—Ç), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≥–æ–¥—ã
                if (toYear - fromYear <= 10) {
                    const years = [];
                    for (let year = fromYear; year <= toYear; year++) {
                        years.push(year.toString());
                    }
                    parts.push(`–ì–æ–¥–∞ [${years.join(', ')}]`);
                } else {
                    // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                    parts.push(`–ì–æ–¥–∞ [${fromYear}-${toYear}]`);
                }
            }
            
            // 5. –≠—Ç–∞–∂–Ω–æ—Å—Ç—å (–¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç—Ç–∞–∂–µ–π)
            if (filters.floors_from || filters.floors_to) {
                const fromFloors = filters.floors_from || 1;
                const toFloors = filters.floors_to || 100;
                
                // –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–±–æ–ª—å—à–æ–π (–¥–æ 15 —ç—Ç–∞–∂–µ–π), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —ç—Ç–∞–∂–∏
                if (toFloors - fromFloors <= 15) {
                    const floors = [];
                    for (let floor = fromFloors; floor <= toFloors; floor++) {
                        floors.push(floor.toString());
                    }
                    parts.push(`–≠—Ç–∞–∂–Ω–æ—Å—Ç—å [${floors.join(', ')}]`);
                } else {
                    // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                    parts.push(`–≠—Ç–∞–∂–Ω–æ—Å—Ç—å [${fromFloors}-${toFloors}]`);
                }
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞:', error);
        }
        
        return parts.length > 0 ? parts.join(', ') : '–ù–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ä–æ–≤)
     */
    updateSegmentMapWithFilters() {
        if (!this.segmentMap || !this.segmentAddressesLayer) return;
        
        try {
            const filters = this.getSegmentFormData().filters;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            setTimeout(() => {
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
                this.segmentAddressesLayer.eachLayer((marker) => {
                    const address = marker.addressData;
                    if (address) {
                        const matchesFilters = this.addressMatchesFilters(address, filters);
                        const element = marker.getElement();
                        
                        if (element) {
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: 0% –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö, 50% –¥–ª—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
                            element.style.opacity = matchesFilters ? '1.0' : '0.5';
                        }
                    }
                });
            }, 10);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞:', error);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–¥—Ä–µ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    addressMatchesFilters(address, filters) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if (filters.type && filters.type.length > 0) {
            if (!filters.type.includes(address.type)) {
                return false;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
        if (filters.floors_from && address.floors_count < filters.floors_from) {
            return false;
        }
        if (filters.floors_to && address.floors_count > filters.floors_to) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        if (filters.build_year_from && address.build_year < filters.build_year_from) {
            return false;
        }
        if (filters.build_year_to && address.build_year > filters.build_year_to) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ—Ç—ã –ø–æ—Ç–æ–ª–∫–æ–≤
        if (filters.ceiling_height_from && address.ceiling_height && 
            parseFloat(address.ceiling_height) < filters.ceiling_height_from) {
            return false;
        }
        if (filters.ceiling_height_to && address.ceiling_height &&
            parseFloat(address.ceiling_height) > filters.ceiling_height_to) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–ª–µ–≤—ã—Ö –ø–æ–ª–µ–π
        const booleanFields = [
            'gas_supply', 'individual_heating', 'closed_territory', 
            'underground_parking', 'commercial_spaces'
        ];
        
        for (const field of booleanFields) {
            if (filters[field] && filters[field].length > 0) {
                const addressValue = address[field];
                let addressValueStr;
                
                if (addressValue === undefined || addressValue === null) {
                    addressValueStr = '';
                } else {
                    addressValueStr = addressValue.toString();
                }
                
                if (!filters[field].includes(addressValueStr)) {
                    return false;
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –ø–æ–ª–µ–π (—Å–µ—Ä–∏–∏, –∫–ª–∞—Å—Å—ã, –º–∞—Ç–µ—Ä–∏–∞–ª—ã)
        const referenceFields = [
            'house_series_id', 'house_class_id', 'wall_material_id', 'ceiling_material_id'
        ];
        
        for (const field of referenceFields) {
            if (filters[field] && filters[field].length > 0) {
                if (!address[field] || !filters[field].includes(address[field])) {
                    return false;
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        if (filters.addresses && filters.addresses.length > 0) {
            if (!filters.addresses.includes(address.id)) {
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º –∫–∞—Ä—Ç—ã
     */
    bindMapFilterEvents() {
        const filterButtons = [
            'segmentFilterByYear',
            'segmentFilterBySeries', 
            'segmentFilterByFloors',
            'segmentFilterByObjects',
            'segmentFilterByListings',
            'segmentFilterByHouseClass',
            'segmentFilterByHouseProblems',
            'segmentFilterByCommercialSpaces',
            'segmentFilterByComment'
        ];
        
        filterButtons.forEach(buttonId => {
            const button = document.getElementById(buttonId);
            if (button) {
                button.addEventListener('click', (e) => {
                    const filter = e.target.getAttribute('data-filter');
                    this.setSegmentMapFilter(filter);
                });
            }
        });
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ä—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    setSegmentMapFilter(filterType) {
        this.activeSegmentMapFilter = filterType;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
        this.updateSegmentFilterButtons(filterType);
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã
        this.redrawSegmentMapMarkers();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    updateSegmentFilterButtons(activeFilter) {
        const filterButtons = document.querySelectorAll('[data-filter]');
        filterButtons.forEach(button => {
            const filter = button.getAttribute('data-filter');
            if (filter === activeFilter) {
                button.classList.remove('bg-white', 'border-gray-300', 'text-gray-700');
                button.classList.add('bg-indigo-50', 'border-indigo-500', 'text-indigo-700');
            } else {
                button.classList.remove('bg-indigo-50', 'border-indigo-500', 'text-indigo-700');
                button.classList.add('bg-white', 'border-gray-300', 'text-gray-700');
            }
        });
    }
    
    /**
     * –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    async redrawSegmentMapMarkers() {
        if (!this.segmentMap || !this.segmentAddressesLayer) return;
        
        try {
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            this.segmentMap.removeLayer(this.segmentAddressesLayer);
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞
            const addresses = this.dataState.getState('addresses') || [];
            const addressesWithCoords = addresses.filter(addr => 
                addr.coordinates && 
                addr.coordinates.lat && 
                addr.coordinates.lng
            );
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞)
            let filters = {};
            try {
                filters = this.getSegmentFormData().filters;
            } catch (error) {
                // –§–æ—Ä–º–∞ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                filters = {};
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –º–∞—Ä–∫–µ—Ä–æ–≤
            this.segmentAddressesLayer = L.layerGroup();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å –Ω–æ–≤—ã–º —Å—Ç–∏–ª–µ–º
            for (const address of addressesWithCoords) {
                const marker = await this.createTriangularAddressMarker(address);
                this.segmentAddressesLayer.addLayer(marker);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –Ω–∞ –∫–∞—Ä—Ç—É
            this.segmentAddressesLayer.addTo(this.segmentMap);
            
            // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç—É –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            setTimeout(() => {
                this.segmentAddressesLayer.eachLayer((marker) => {
                    const address = marker.addressData;
                    if (address) {
                        const matchesFilters = this.addressMatchesFilters(address, filters);
                        const element = marker.getElement();
                        
                        if (element) {
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: 0% –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö, 50% –¥–ª—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
                            element.style.opacity = matchesFilters ? '1.0' : '0.5';
                        }
                    }
                });
            }, 50);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤:', error);
        }
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    bindPanelEvents() {
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—å—é –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ UIManager
        // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        
        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        document.addEventListener('click', (e) => {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å data-action
            const actionButton = e.target.closest('[data-action]');
            if (actionButton) {
                const action = actionButton.getAttribute('data-action');
                const segmentId = actionButton.getAttribute('data-segment-id');
                
                if (segmentId) {
                    switch (action) {
                        case 'edit-segment':
                            this.editSegment(segmentId);
                            break;
                        case 'delete-segment':
                            this.deleteSegment(segmentId);
                            break;
                        case 'create-subsegment':
                            this.createSubsegment(segmentId);
                            break;
                        case 'view-segment':
                            this.viewSegment(segmentId);
                            break;
                        case 'toggle-segment':
                            this.toggleSegmentExpansion(segmentId);
                            break;
                    }
                }
                return;
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –∫–ª–∞—Å—Å–∞–º–∏ (–¥–ª—è DataTables)
            const editBtn = e.target.closest('.edit-segment-btn');
            if (editBtn) {
                const segmentId = editBtn.getAttribute('data-segment-id');
                if (segmentId) {
                    this.editSegment(segmentId);
                }
                return;
            }
            
            const deleteBtn = e.target.closest('.delete-segment-btn');
            if (deleteBtn) {
                const segmentId = deleteBtn.getAttribute('data-segment-id');
                if (segmentId) {
                    this.deleteSegment(segmentId);
                }
                return;
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–∞—Å—Ç–∏
     */
    async onAreaLoaded(area) {
        try {
            await this.loadReferenceData();
            await this.loadSegments();
            await this.initializeSegmentsTable();
            await this.updateSegmentsData();
            
        } catch (error) {
            console.error('Error on area loaded:', error);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
     */
    async onAreaChanged(area) {
        try {
            await this.loadSegments();
            await this.updateSegmentsData();
            
        } catch (error) {
            console.error('Error on area changed:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadReferenceData() {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            this.houseSeries = await window.db.getAll('house_series') || [];
            this.houseClasses = await window.db.getAll('house_classes') || [];
            this.wallMaterials = await window.db.getAll('wall_materials') || [];
            this.ceilingMaterials = await window.db.getAll('ceiling_materials') || [];
            this.houseProblems = await window.db.getAll('house_problems') || [];
            
            console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
            console.log('- –°–µ—Ä–∏–∏ –¥–æ–º–æ–≤:', this.houseSeries.length, this.houseSeries);
            console.log('- –ö–ª–∞—Å—Å—ã –¥–æ–º–æ–≤:', this.houseClasses.length, this.houseClasses);
            console.log('- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ç–µ–Ω:', this.wallMaterials.length, this.wallMaterials);
            console.log('- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π:', this.ceilingMaterials.length, this.ceilingMaterials);
            console.log('- –ü—Ä–æ–±–ª–µ–º—ã –¥–æ–º–æ–≤:', this.houseProblems.length, this.houseProblems);
            
            console.log('‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.houseSeries = [];
            this.houseClasses = [];
            this.wallMaterials = [];
            this.ceilingMaterials = [];
            this.houseProblems = [];
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    async loadSegments() {
        try {
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea) {
                this.segmentsState.segments = [];
                return;
            }
            
            const allSegments = await window.db.getAll('segments');
            this.segmentsState.segments = allSegments.filter(segment => 
                segment.map_area_id === currentArea.id
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.dataState.setState('segments', this.segmentsState.segments);
            
            await Helpers.debugLog(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.segmentsState.segments.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤`);
            
        } catch (error) {
            console.error('Error loading segments:', error);
            this.segmentsState.segments = [];
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    async initializeSegmentsTable() {
        const tableElement = document.getElementById('segmentsTable');
        if (!tableElement) {
            await Helpers.debugLog('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
        if (this.segmentsTable) {
            this.segmentsTable.destroy();
        }
        
        this.segmentsTable = new DataTable(tableElement, {
            pageLength: this.config.pageLength,
            lengthMenu: [[10, 25, 50, -1], [10, 25, 50, '–í—Å–µ']],
            language: {
                "processing": "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...",
                "search": "–ü–æ–∏—Å–∫:",
                "lengthMenu": "–ü–æ–∫–∞–∑–∞—Ç—å _MENU_ –∑–∞–ø–∏—Å–µ–π",
                "info": "–ó–∞–ø–∏—Å–∏ —Å _START_ –¥–æ _END_ –∏–∑ _TOTAL_ –∑–∞–ø–∏—Å–µ–π",
                "infoEmpty": "–ó–∞–ø–∏—Å–∏ —Å 0 –¥–æ 0 –∏–∑ 0 –∑–∞–ø–∏—Å–µ–π",
                "infoFiltered": "(–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∏–∑ _MAX_ –∑–∞–ø–∏—Å–µ–π)",
                "loadingRecords": "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π...",
                "zeroRecords": "–ó–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
                "emptyTable": "–í —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ",
                "paginate": {
                    "first": "–ü–µ—Ä–≤–∞—è",
                    "previous": "–ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                    "next": "–°–ª–µ–¥—É—é—â–∞—è",
                    "last": "–ü–æ—Å–ª–µ–¥–Ω—è—è"
                }
            },
            order: [[1, 'asc']], // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            columnDefs: [
                { 
                    targets: 0, 
                    orderable: false,
                    className: 'details-control',
                    width: '30px',
                    render: (data, type, row) => this.renderExpandColumn(data, type, row)
                },
                { 
                    targets: 1, 
                    render: (data, type, row) => this.renderNameColumn(data, type, row)
                },
                { 
                    targets: 2, 
                    render: (data, type, row) => this.renderAddressesColumn(data, type, row)
                },
                { 
                    targets: 3, 
                    render: (data, type, row) => this.renderSubsegmentsColumn(data, type, row)
                },
                { 
                    targets: 4, 
                    render: (data, type, row) => this.renderFiltersColumn(data, type, row)
                },
                { 
                    targets: 5, 
                    orderable: false,
                    render: (data, type, row) => this.renderActionsColumn(data, type, row)
                }
            ],
            initComplete: () => {
                // –ü–∞–Ω–µ–ª—å —É–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ area.js, –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫
        this.segmentsTable.on('click', 'td.details-control', (e) => {
            const tr = e.target.closest('tr');
            const row = this.segmentsTable.row(tr);
            
            if (row.child.isShown()) {
                row.child.hide();
                tr.classList.remove('shown');
            } else {
                row.child(this.createSegmentChildContent(row.data())).show();
                tr.classList.add('shown');
            }
        });
        
        await Helpers.debugLog('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    async updateSegmentsData() {
        if (!this.segmentsTable) return;
        
        try {
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea) return;
            
            const addresses = this.dataState.getState('addresses') || [];
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            const segmentsWithStats = await Promise.all(
                this.segmentsState.segments.map(async (segment) => {
                    const stats = await this.calculateSegmentStats(segment, addresses);
                    return {
                        ...segment,
                        stats
                    };
                })
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            this.segmentsTable.clear();
            this.segmentsTable.rows.add(segmentsWithStats);
            this.segmentsTable.draw();
            
            await Helpers.debugLog('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            
        } catch (error) {
            console.error('Error updating segments data:', error);
        }
    }
    
    /**
     * –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    async calculateSegmentStats(segment, addresses) {
        try {
            const filteredAddresses = this.filterAddressesBySegment(addresses, segment);
            
            const stats = {
                addressesCount: filteredAddresses.length,
                subsegmentsCount: segment.subsegments?.length || 0,
                averagePrice: 0,
                priceRange: { min: 0, max: 0 },
                typeDistribution: {},
                floorDistribution: {},
                yearDistribution: {}
            };
            
            if (filteredAddresses.length > 0) {
                // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
                filteredAddresses.forEach(address => {
                    const type = address.type || 'unknown';
                    stats.typeDistribution[type] = (stats.typeDistribution[type] || 0) + 1;
                });
                
                // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
                filteredAddresses.forEach(address => {
                    if (address.floors_count) {
                        const floors = address.floors_count;
                        stats.floorDistribution[floors] = (stats.floorDistribution[floors] || 0) + 1;
                    }
                });
                
                // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º
                filteredAddresses.forEach(address => {
                    if (address.build_year) {
                        const decade = Math.floor(address.build_year / 10) * 10;
                        stats.yearDistribution[decade] = (stats.yearDistribution[decade] || 0) + 1;
                    }
                });
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω
                const listings = await this.getListingsForAddresses(filteredAddresses);
                const prices = listings.filter(l => l.price).map(l => l.price);
                
                if (prices.length > 0) {
                    stats.averagePrice = prices.reduce((sum, price) => sum + price, 0) / prices.length;
                    stats.priceRange.min = Math.min(...prices);
                    stats.priceRange.max = Math.max(...prices);
                }
            }
            
            return stats;
            
        } catch (error) {
            console.error('Error calculating segment stats:', error);
            return {
                addressesCount: 0,
                subsegmentsCount: 0,
                averagePrice: 0,
                priceRange: { min: 0, max: 0 },
                typeDistribution: {},
                floorDistribution: {},
                yearDistribution: {}
            };
        }
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
     */
    filterAddressesBySegment(addresses, segment) {
        if (!segment.filters) return addresses;
        
        return addresses.filter(address => {
            const filters = segment.filters;
            
            // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            if (filters.type && filters.type.length > 0) {
                if (!filters.type.includes(address.type)) {
                    return false;
                }
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
            if (filters.floors_from && address.floors_count < filters.floors_from) {
                return false;
            }
            if (filters.floors_to && address.floors_count > filters.floors_to) {
                return false;
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            if (filters.build_year_from && address.build_year < filters.build_year_from) {
                return false;
            }
            if (filters.build_year_to && address.build_year > filters.build_year_to) {
                return false;
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ —Å–µ—Ä–∏–∏ –¥–æ–º–∞
            if (filters.house_series_id && filters.house_series_id.length > 0) {
                if (!filters.house_series_id.includes(address.house_series_id)) {
                    return false;
                }
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É –¥–æ–º–∞
            if (filters.house_class_id && filters.house_class_id.length > 0) {
                if (!filters.house_class_id.includes(address.house_class_id)) {
                    return false;
                }
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É —Å—Ç–µ–Ω
            if (filters.wall_material_id && filters.wall_material_id.length > 0) {
                if (!filters.wall_material_id.includes(address.wall_material_id)) {
                    return false;
                }
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
            if (filters.ceiling_material_id && filters.ceiling_material_id.length > 0) {
                if (!filters.ceiling_material_id.includes(address.ceiling_material_id)) {
                    return false;
                }
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –≥–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏—é
            if (filters.gas_supply && filters.gas_supply.length > 0) {
                const gasSupplyStr = address.gas_supply ? 'true' : 'false';
                if (!filters.gas_supply.includes(gasSupplyStr)) {
                    return false;
                }
            }
            
            return true;
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
     */
    async getListingsForAddresses(addresses) {
        try {
            const addressIds = addresses.map(addr => addr.id);
            const allListings = await window.db.getAll('listings');
            
            return allListings.filter(listing => 
                addressIds.includes(listing.address_id)
            );
            
        } catch (error) {
            console.error('Error getting listings for addresses:', error);
            return [];
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    openCreateSegmentModal() {
        console.log('üîµ SegmentsManager: –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞');
        
        this.segmentsState.editingSegment = null;
        this.segmentsState.modalOpen = true;
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        try {
            this.clearSegmentForm();
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º ID –æ–±–ª–∞—Å—Ç–∏
            const currentArea = this.dataState.getState('currentArea');
            if (currentArea) {
                const mapAreaIdField = document.getElementById('segmentMapAreaId');
                if (mapAreaIdField) {
                    mapAreaIdField.value = currentArea.id;
                }
            }
        } catch (error) {
            console.error('‚ùå SegmentsManager: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ä–º—ã:', error);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.getElementById('segmentModal');
        if (modal) {
            console.log('‚úÖ SegmentsManager: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º');
            
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å hidden –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modal.classList.remove('hidden');
            modal.style.display = 'flex';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const title = document.getElementById('segment-modal-title');
            if (title) {
                title.textContent = '–°–æ–∑–¥–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç';
                console.log('‚úÖ SegmentsManager: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            } else {
                console.warn('‚ö†Ô∏è SegmentsManager: –ó–∞–≥–æ–ª–æ–≤–æ–∫ #segment-modal-title –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
            setTimeout(async () => {
                try {
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
                    await this.loadReferenceData();
                    
                    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç—ã –¥–∞–Ω–Ω—ã–º–∏
                    await this.populateSegmentFormSelects();
                    
                    // –ó–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
                    this.initializeSlimSelects();
                    
                    // –ò –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
                    this.initializeSegmentMap();
                    
                    // –î–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø—É—Å—Ç–∞—è —Ñ–æ—Ä–º–∞)
                    this.updateSaveButtonState(true);
                    
                } catch (error) {
                    console.error('‚ùå SegmentsManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
                }
            }, 100);
            
            console.log('‚úÖ SegmentsManager: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–∏–º—ã–º');
        } else {
            console.error('‚ùå SegmentsManager: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ #segmentModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
     */
    openCreateSubsegmentModal() {
        // –ü–æ–¥—Å–µ–≥–º–µ–Ω—Ç - —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º ID
        this.openCreateSegmentModal();
        
        // –ú–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const title = document.getElementById('segmentModalTitle');
        if (title) {
            title.textContent = '–°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç';
        }
    }
    
    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    editSegment(segmentId) {
        const segment = this.segmentsState.segments.find(s => s.id === segmentId);
        if (!segment) return;
        
        this.segmentsState.editingSegment = segment;
        this.segmentsState.modalOpen = true;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.getElementById('segmentModal');
        if (modal) {
            modal.style.display = 'flex';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const title = document.getElementById('segmentModalTitle');
            if (title) {
                title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç';
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
            setTimeout(async () => {
                try {
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                    await this.loadReferenceData();
                    
                    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç—ã –¥–∞–Ω–Ω—ã–º–∏
                    await this.populateSegmentFormSelects();
                    
                    // –ó–∞—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
                    this.initializeSlimSelects();
                    
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
                    this.populateSegmentForm(segment);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    this.segmentsState.savedSegmentData = { ...this.getSegmentFormData() };
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                    this.updateSaveButtonState(false);
                    
                    // –ò –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
                    this.initializeSegmentMap();
                    
                } catch (error) {
                    console.error('‚ùå SegmentsManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
                }
            }, 100);
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    async deleteSegment(segmentId) {
        const segment = this.segmentsState.segments.find(s => s.id === segmentId);
        if (!segment) return;
        
        const confirmed = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç "${segment.name}"?`);
        if (!confirmed) return;
        
        try {
            await window.db.delete('segments', segmentId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadSegments();
            await this.updateSegmentsData();
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
            this.eventBus.emit(CONSTANTS.EVENTS.SEGMENT_DELETED, {
                segmentId,
                segment,
                timestamp: new Date()
            });
            
            this.progressManager.showSuccess('–°–µ–≥–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
            
        } catch (error) {
            console.error('Error deleting segment:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞');
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
     */
    createSubsegment(parentSegmentId) {
        const parentSegment = this.segmentsState.segments.find(s => s.id === parentSegmentId);
        if (!parentSegment) return;
        
        this.segmentsState.editingSegment = null;
        this.segmentsState.modalOpen = true;
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        this.clearSegmentForm();
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        this.populateSegmentFormSelects();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–µ–≥–º–µ–Ω—Ç
        const parentIdField = document.getElementById('segmentParentId');
        if (parentIdField) {
            parentIdField.value = parentSegmentId;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.getElementById('segmentModal');
        if (modal) {
            modal.style.display = 'flex';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const title = document.getElementById('segmentModalTitle');
            if (title) {
                title.textContent = `–°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç –¥–ª—è "${parentSegment.name}"`;
            }
        }
    }
    
    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    viewSegment(segmentId) {
        const segment = this.segmentsState.segments.find(s => s.id === segmentId);
        if (!segment) return;
        
        // –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏
        this.segmentsState.selectedSegment = segment;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã–±–æ—Ä–µ —Å–µ–≥–º–µ–Ω—Ç–∞
        this.eventBus.emit(CONSTANTS.EVENTS.SEGMENT_SELECTED, {
            segment,
            timestamp: new Date()
        });
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –∫–∞—Ä—Ç–µ
        this.eventBus.emit(CONSTANTS.EVENTS.MAP_FILTER_CHANGED, {
            filterType: 'segment',
            segmentId,
            timestamp: new Date()
        });
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    toggleSegmentExpansion(segmentId) {
        if (this.segmentsState.expandedRows.has(segmentId)) {
            this.segmentsState.expandedRows.delete(segmentId);
        } else {
            this.segmentsState.expandedRows.add(segmentId);
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect –¥–ª—è –≤—Å–µ—Ö —Å–µ–ª–µ–∫—Ç–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
     */
    initializeSlimSelects() {
        const selectors = [
            'segmentType',
            'segmentHouseClass', 
            'segmentHouseSeries',
            'segmentWallMaterial',
            'segmentCeilingMaterial',
            'segmentGasSupply',
            'segmentIndividualHeating',
            'segmentClosedTerritory',
            'segmentUndergroundParking',
            'segmentCommercialSpaces',
            'segmentAddresses'
        ];
        
        selectors.forEach(selectorId => {
            const element = document.getElementById(selectorId);
            if (element && !element.slimSelect) {
                try {
                    element.slimSelect = new SlimSelect({
                        select: element,
                        settings: {
                            searchPlaceholder: '–ü–æ–∏—Å–∫...',
                            searchText: '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
                            searchHighlight: true,
                            closeOnSelect: false,
                            showSearch: true,
                            placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è...'
                        }
                    });
                    
                    console.log(`‚úÖ SlimSelect –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${selectorId}`);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SlimSelect –¥–ª—è ${selectorId}:`, error);
                }
            }
        });
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    closeSegmentModal() {
        this.segmentsState.modalOpen = false;
        this.segmentsState.editingSegment = null;
        
        const modal = document.getElementById('segmentModal');
        if (modal) {
            modal.style.display = 'none';
            modal.classList.add('hidden');
        }
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        this.clearSegmentForm();
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    async saveSegment() {
        try {
            const formData = this.getSegmentFormData();
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            const validation = Validators.validateSegment(formData);
            if (!validation.isValid) {
                this.progressManager.showError('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' + validation.errors.join(', '));
                return;
            }
            
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea) {
                this.progressManager.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
                return;
            }
            
            let segment;
            
            if (this.segmentsState.editingSegment) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
                segment = {
                    ...this.segmentsState.editingSegment,
                    ...formData,
                    updated_at: new Date()
                };
                
                await window.db.update('segments', segment);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                this.eventBus.emit(CONSTANTS.EVENTS.SEGMENT_UPDATED, {
                    segment,
                    timestamp: new Date()
                });
                
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
                segment = {
                    id: 'seg_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                    map_area_id: currentArea.id,
                    ...formData,
                    created_at: new Date(),
                    updated_at: new Date()
                };
                
                await window.db.add('segments', segment);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏
                this.eventBus.emit(CONSTANTS.EVENTS.SEGMENT_CREATED, {
                    segment,
                    timestamp: new Date()
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadSegments();
            await this.updateSegmentsData();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ
            this.segmentsState.savedSegmentData = { ...formData };
            this.segmentsState.editingSegment = segment;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            this.updateSaveButtonState();
            
            // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            // this.closeSegmentModal();
            
            this.progressManager.showSuccess(
                this.segmentsState.editingSegment ? '–°–µ–≥–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω' : '–°–µ–≥–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω'
            );
            
        } catch (error) {
            console.error('Error saving segment:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞');
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    getSegmentFormData() {
        const form = document.getElementById('segmentForm');
        if (!form) return {};
        
        const formData = new FormData(form);
        const data = {};
        
        // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—è
        data.name = formData.get('name')?.trim() || '';
        data.description = formData.get('description')?.trim() || '';
        data.parent_id = formData.get('parent_id') || null;
        data.map_area_id = formData.get('map_area_id') || null;
        
        // –§–∏–ª—å—Ç—Ä—ã
        data.filters = {};
        
        // –¢–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
        const types = formData.getAll('type');
        if (types.length > 0) {
            data.filters.type = types;
        }
        
        // –≠—Ç–∞–∂–Ω–æ—Å—Ç—å
        const floorsFrom = formData.get('floors_from');
        const floorsTo = formData.get('floors_to');
        if (floorsFrom) data.filters.floors_from = parseInt(floorsFrom);
        if (floorsTo) data.filters.floors_to = parseInt(floorsTo);
        
        // –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        const yearFrom = formData.get('build_year_from');
        const yearTo = formData.get('build_year_to');
        if (yearFrom) data.filters.build_year_from = parseInt(yearFrom);
        if (yearTo) data.filters.build_year_to = parseInt(yearTo);
        
        // –°–µ—Ä–∏–∏ –¥–æ–º–æ–≤ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
        const houseSeries = formData.getAll('house_series_id');
        if (houseSeries.length > 0) {
            data.filters.house_series_id = houseSeries;
        }
        
        // –ö–ª–∞—Å—Å—ã –¥–æ–º–æ–≤ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
        const houseClasses = formData.getAll('house_class_id');
        if (houseClasses.length > 0) {
            data.filters.house_class_id = houseClasses;
        }
        
        // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ç–µ–Ω (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
        const wallMaterials = formData.getAll('wall_material_id');
        if (wallMaterials.length > 0) {
            data.filters.wall_material_id = wallMaterials;
        }
        
        // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
        const ceilingMaterials = formData.getAll('ceiling_material_id');
        if (ceilingMaterials.length > 0) {
            data.filters.ceiling_material_id = ceilingMaterials;
        }
        
        // –ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
        const gasSupply = formData.getAll('gas_supply');
        if (gasSupply.length > 0) {
            data.filters.gas_supply = gasSupply;
        }
        
        // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
        const individualHeating = formData.getAll('individual_heating');
        if (individualHeating.length > 0) {
            data.filters.individual_heating = individualHeating;
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
        const closedTerritory = formData.getAll('closed_territory');
        if (closedTerritory.length > 0) {
            data.filters.closed_territory = closedTerritory;
        }
        
        // –ü–æ–¥–∑–µ–º–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
        const undergroundParking = formData.getAll('underground_parking');
        if (undergroundParking.length > 0) {
            data.filters.underground_parking = undergroundParking;
        }
        
        // –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
        const commercialSpaces = formData.getAll('commercial_spaces');
        if (commercialSpaces.length > 0) {
            data.filters.commercial_spaces = commercialSpaces;
        }
        
        // –í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤
        const ceilingHeightFrom = formData.get('ceiling_height_from');
        const ceilingHeightTo = formData.get('ceiling_height_to');
        if (ceilingHeightFrom) data.filters.ceiling_height_from = parseFloat(ceilingHeightFrom);
        if (ceilingHeightTo) data.filters.ceiling_height_to = parseFloat(ceilingHeightTo);
        
        // –ê–¥—Ä–µ—Å–∞ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
        const addresses = formData.getAll('addresses');
        if (addresses.length > 0) {
            data.filters.addresses = addresses;
        }
        
        return data;
    }
    
    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    populateSegmentForm(segment) {
        const form = document.getElementById('segmentForm');
        if (!form) return;
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        form.querySelector('[name="name"]').value = segment.name || '';
        form.querySelector('[name="description"]').value = segment.description || '';
        form.querySelector('[name="parent_id"]').value = segment.parent_id || '';
        
        if (segment.filters) {
            // –¢–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            if (segment.filters.type) {
                segment.filters.type.forEach(type => {
                    const checkbox = form.querySelector(`[name="type"][value="${type}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
            
            // –≠—Ç–∞–∂–Ω–æ—Å—Ç—å
            if (segment.filters.floors_from) {
                form.querySelector('[name="floors_from"]').value = segment.filters.floors_from;
            }
            if (segment.filters.floors_to) {
                form.querySelector('[name="floors_to"]').value = segment.filters.floors_to;
            }
            
            // –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            if (segment.filters.build_year_from) {
                form.querySelector('[name="build_year_from"]').value = segment.filters.build_year_from;
            }
            if (segment.filters.build_year_to) {
                form.querySelector('[name="build_year_to"]').value = segment.filters.build_year_to;
            }
            
            // –°–µ—Ä–∏–∏ –¥–æ–º–æ–≤
            if (segment.filters.house_series_id) {
                segment.filters.house_series_id.forEach(seriesId => {
                    const checkbox = form.querySelector(`[name="house_series_id"][value="${seriesId}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
            
            // –ö–ª–∞—Å—Å—ã –¥–æ–º–æ–≤
            if (segment.filters.house_class_id) {
                segment.filters.house_class_id.forEach(classId => {
                    const checkbox = form.querySelector(`[name="house_class_id"][value="${classId}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
            
            // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ç–µ–Ω
            if (segment.filters.wall_material_id) {
                segment.filters.wall_material_id.forEach(materialId => {
                    const checkbox = form.querySelector(`[name="wall_material_id"][value="${materialId}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
            
            // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
            if (segment.filters.ceiling_material_id) {
                segment.filters.ceiling_material_id.forEach(materialId => {
                    const checkbox = form.querySelector(`[name="ceiling_material_id"][value="${materialId}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
            
            // –ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ
            if (segment.filters.gas_supply) {
                segment.filters.gas_supply.forEach(gasValue => {
                    const checkbox = form.querySelector(`[name="gas_supply"][value="${gasValue}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
            
            // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ
            if (segment.filters.individual_heating) {
                segment.filters.individual_heating.forEach(heatingValue => {
                    const checkbox = form.querySelector(`[name="individual_heating"][value="${heatingValue}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
            
            // –ó–∞–∫—Ä—ã—Ç–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è
            if (segment.filters.closed_territory) {
                segment.filters.closed_territory.forEach(territoryValue => {
                    const checkbox = form.querySelector(`[name="closed_territory"][value="${territoryValue}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
            
            // –ü–æ–¥–∑–µ–º–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞
            if (segment.filters.underground_parking) {
                segment.filters.underground_parking.forEach(parkingValue => {
                    const checkbox = form.querySelector(`[name="underground_parking"][value="${parkingValue}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
            
            // –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è
            if (segment.filters.commercial_spaces) {
                segment.filters.commercial_spaces.forEach(spacesValue => {
                    const checkbox = form.querySelector(`[name="commercial_spaces"][value="${spacesValue}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
            
            // –í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤
            if (segment.filters.ceiling_height_from) {
                form.querySelector('[name="ceiling_height_from"]').value = segment.filters.ceiling_height_from;
            }
            if (segment.filters.ceiling_height_to) {
                form.querySelector('[name="ceiling_height_to"]').value = segment.filters.ceiling_height_to;
            }
            
            // –ê–¥—Ä–µ—Å–∞
            if (segment.filters.addresses) {
                segment.filters.addresses.forEach(addressId => {
                    const checkbox = form.querySelector(`[name="addresses"][value="${addressId}"]`);
                    if (checkbox) checkbox.checked = true;
                });
            }
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    clearSegmentForm() {
        const form = document.getElementById('segmentForm');
        if (!form) return;
        
        form.reset();
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã
        const checkboxes = form.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.segmentsState.savedSegmentData = null;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.updateSaveButtonState(true); // –ù–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –∏–º–µ–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    }
    
    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    fillSegmentForm(segmentData) {
        const form = document.getElementById('segmentForm');
        if (!form || !segmentData) return;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        const nameInput = document.getElementById('segmentName');
        if (nameInput) nameInput.value = segmentData.name || '';
        
        const descriptionInput = document.getElementById('segmentDescription');
        if (descriptionInput) descriptionInput.value = segmentData.description || '';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if (segmentData.filters) {
            const filters = segmentData.filters;
            
            // –¢–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            if (filters.type) {
                const typeSelect = document.getElementById('segmentType');
                if (typeSelect && typeSelect.slimSelect) {
                    typeSelect.slimSelect.setSelected(filters.type);
                }
            }
            
            // –≠—Ç–∞–∂–Ω–æ—Å—Ç—å
            if (filters.floors_from) {
                const floorsFromInput = document.getElementById('segmentFloorsFrom');
                if (floorsFromInput) floorsFromInput.value = filters.floors_from;
            }
            if (filters.floors_to) {
                const floorsToInput = document.getElementById('segmentFloorsTo');
                if (floorsToInput) floorsToInput.value = filters.floors_to;
            }
            
            // –ì–æ–¥—ã –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            if (filters.build_year_from) {
                const yearFromInput = document.getElementById('segmentBuildYearFrom');
                if (yearFromInput) yearFromInput.value = filters.build_year_from;
            }
            if (filters.build_year_to) {
                const yearToInput = document.getElementById('segmentBuildYearTo');
                if (yearToInput) yearToInput.value = filters.build_year_to;
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç—ã
            const multiSelects = [
                { fieldName: 'house_class_id', elementId: 'segmentHouseClass' },
                { fieldName: 'house_series_id', elementId: 'segmentHouseSeries' },
                { fieldName: 'wall_material_id', elementId: 'segmentWallMaterial' },
                { fieldName: 'ceiling_material_id', elementId: 'segmentCeilingMaterial' },
                { fieldName: 'gas_supply', elementId: 'segmentGasSupply' },
                { fieldName: 'individual_heating', elementId: 'segmentIndividualHeating' },
                { fieldName: 'closed_territory', elementId: 'segmentClosedTerritory' },
                { fieldName: 'underground_parking', elementId: 'segmentUndergroundParking' },
                { fieldName: 'commercial_spaces', elementId: 'segmentCommercialSpaces' },
                { fieldName: 'addresses', elementId: 'segmentAddresses' }
            ];
            
            multiSelects.forEach(({ fieldName, elementId }) => {
                if (filters[fieldName]) {
                    const element = document.getElementById(elementId);
                    if (element && element.slimSelect) {
                        element.slimSelect.setSelected(filters[fieldName]);
                    }
                }
            });
            
            // –í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤
            if (filters.ceiling_height_from) {
                const ceilingFromInput = document.getElementById('segmentCeilingHeightFrom');
                if (ceilingFromInput) ceilingFromInput.value = filters.ceiling_height_from;
            }
            if (filters.ceiling_height_to) {
                const ceilingToInput = document.getElementById('segmentCeilingHeightTo');
                if (ceilingToInput) ceilingToInput.value = filters.ceiling_height_to;
            }
        }
    }
    
    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–µ —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    async populateSegmentFormSelects() {
        try {
            console.log('üîÑ SegmentsManager: –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç—ã —Ñ–æ—Ä–º—ã —Å–µ–≥–º–µ–Ω—Ç–∞');
            
            // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            if (!this.houseClasses || !this.houseSeries || !this.wallMaterials || !this.ceilingMaterials) {
                console.warn('‚ö†Ô∏è SegmentsManager: –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞');
                await this.loadReferenceData();
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Å—ã –¥–æ–º–æ–≤
            const houseClassSelect = document.getElementById('segmentHouseClass');
            if (houseClassSelect) {
                console.log('üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ –¥–æ–º–æ–≤:', this.houseClasses);
                houseClassSelect.innerHTML = this.houseClasses.map(houseClass => 
                    `<option value="${houseClass.id}">${houseClass.name}</option>`
                ).join('');
                console.log(`‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω —Å–µ–ª–µ–∫—Ç –∫–ª–∞—Å—Å–æ–≤ –¥–æ–º–æ–≤: ${this.houseClasses.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                console.log('üîç HTML –∫–ª–∞—Å—Å–æ–≤ –¥–æ–º–æ–≤:', houseClassSelect.innerHTML);
            } else {
                console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç #segmentHouseClass –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä–∏–∏ –¥–æ–º–æ–≤
            const houseSeriesSelect = document.getElementById('segmentHouseSeries');
            if (houseSeriesSelect) {
                console.log('üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–π –¥–æ–º–æ–≤:', this.houseSeries);
                houseSeriesSelect.innerHTML = this.houseSeries.map(series => 
                    `<option value="${series.id}">${series.name}</option>`
                ).join('');
                console.log(`‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω —Å–µ–ª–µ–∫—Ç —Å–µ—Ä–∏–π –¥–æ–º–æ–≤: ${this.houseSeries.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                console.log('üîç HTML —Å–µ—Ä–∏–π –¥–æ–º–æ–≤:', houseSeriesSelect.innerHTML);
            } else {
                console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç #segmentHouseSeries –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ç–µ–Ω
            const wallMaterialSelect = document.getElementById('segmentWallMaterial');
            if (wallMaterialSelect) {
                console.log('üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—Ç–µ–Ω:', this.wallMaterials);
                wallMaterialSelect.innerHTML = this.wallMaterials.map(material => 
                    `<option value="${material.id}">${material.name}</option>`
                ).join('');
                console.log(`‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω —Å–µ–ª–µ–∫—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—Ç–µ–Ω: ${this.wallMaterials.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                console.log('üîç HTML –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—Ç–µ–Ω:', wallMaterialSelect.innerHTML);
            } else {
                console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç #segmentWallMaterial –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
            const ceilingMaterialSelect = document.getElementById('segmentCeilingMaterial');
            if (ceilingMaterialSelect) {
                console.log('üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π:', this.ceilingMaterials);
                ceilingMaterialSelect.innerHTML = this.ceilingMaterials.map(material => 
                    `<option value="${material.id}">${material.name}</option>`
                ).join('');
                console.log(`‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω —Å–µ–ª–µ–∫—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π: ${this.ceilingMaterials.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                console.log('üîç HTML –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π:', ceilingMaterialSelect.innerHTML);
            } else {
                console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç #segmentCeilingMaterial –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏
            await this.populateAddressesSelect();
            
            console.log('‚úÖ SegmentsManager: –í—Å–µ —Å–µ–ª–µ–∫—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå SegmentsManager: –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ–≤:', error);
        }
    }
    
    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
     */
    async populateAddressesSelect() {
        try {
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea) {
                console.error('‚ùå SegmentsManager: –ù–µ—Ç —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏');
                console.log('üîç –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è dataState:', this.dataState.getAllStates());
                return;
            }
            
            const addresses = this.dataState.getState('addresses') || [];
            // –í—Å–µ –∞–¥—Ä–µ—Å–∞ - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–±–ª–∞—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
            const addressesInArea = addresses.filter(addr => 
                addr.coordinates && addr.coordinates.lat && addr.coordinates.lng
            );
            
            console.log(`üîÑ SegmentsManager: –ó–∞–≥—Ä—É–∂–∞–µ–º ${addressesInArea.length} –∞–¥—Ä–µ—Å–æ–≤ –≤ —Å–µ–ª–µ–∫—Ç`);
            console.log('üîç –¢–µ–∫—É—â–∞—è –æ–±–ª–∞—Å—Ç—å:', currentArea.name, 'ID:', currentArea.id);
            console.log('üîç –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤:', addresses.length);
            
            const addressesSelect = document.getElementById('segmentAddresses');
            if (addressesSelect) {
                addressesSelect.innerHTML = addressesInArea.map(address => 
                    `<option value="${address.id}">${address.address}</option>`
                ).join('');
                
                console.log('‚úÖ SegmentsManager: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω');
            } else {
                console.error('‚ùå SegmentsManager: –≠–ª–µ–º–µ–Ω—Ç #segmentAddresses –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
        } catch (error) {
            console.error('‚ùå SegmentsManager: –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤:', error);
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    initializeSegmentMap() {
        try {
            const mapContainer = document.getElementById('segmentMap');
            if (!mapContainer) {
                console.error('‚ùå SegmentsManager: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            console.log('üîÑ SegmentsManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Å–µ–≥–º–µ–Ω—Ç–∞');
            console.log('üîç –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã:', mapContainer);
            console.log('üîç –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', mapContainer.offsetWidth, 'x', mapContainer.offsetHeight);
            
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É
            if (this.segmentMap) {
                console.log('üîÑ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É');
                this.segmentMap.remove();
                this.segmentMap = null;
                this.segmentAreaPolygon = null;
                this.segmentAddressesLayer = null;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
            this.segmentMap = L.map('segmentMap').setView([55.7558, 37.6176], 10);
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', this.segmentMap);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª–æ–≤—ã–π —Å–ª–æ–π
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(this.segmentMap);
            console.log('‚úÖ –¢–∞–π–ª–æ–≤—ã–π —Å–ª–æ–π –¥–æ–±–∞–≤–ª–µ–Ω');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã
            setTimeout(() => {
                if (this.segmentMap) {
                    this.segmentMap.invalidateSize();
                    console.log('‚úÖ –†–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                    
                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    this.setSegmentMapFilter('year');
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –æ–±–ª–∞—Å—Ç–∏
                    this.loadAddressesOnMap();
                }
            }, 200);
            
            console.log('‚úÖ SegmentsManager: –ö–∞—Ä—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå SegmentsManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
     */
    async loadAddressesOnMap() {
        try {
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea || !this.segmentMap) {
                console.error('‚ùå SegmentsManager: –ù–µ—Ç —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏ –∏–ª–∏ –∫–∞—Ä—Ç—ã');
                console.log('üîç currentArea:', currentArea);
                console.log('üîç segmentMap:', this.segmentMap);
                console.log('üîç –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è dataState:', this.dataState.getAllStates());
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É
            this.displayAreaPolygon(currentArea);
            
            const addresses = this.dataState.getState('addresses') || [];
            // –í—Å–µ –∞–¥—Ä–µ—Å–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É –¥–µ–ª–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            const addressesWithCoords = addresses.filter(addr => 
                addr.coordinates && 
                addr.coordinates.lat && 
                addr.coordinates.lng
            );
            
            console.log(`üîÑ SegmentsManager: –ó–∞–≥—Ä—É–∂–∞–µ–º ${addressesWithCoords.length} –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É`);
            
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            if (this.segmentAddressesLayer) {
                this.segmentMap.removeLayer(this.segmentAddressesLayer);
            }
            
            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
            this.segmentAddressesLayer = L.layerGroup();
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞)
            let filters = {};
            try {
                filters = this.getSegmentFormData().filters;
            } catch (error) {
                // –§–æ—Ä–º–∞ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                filters = {};
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            for (const address of addressesWithCoords) {
                const marker = await this.createTriangularAddressMarker(address);
                this.segmentAddressesLayer.addLayer(marker);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –Ω–∞ –∫–∞—Ä—Ç—É
            this.segmentAddressesLayer.addTo(this.segmentMap);
            
            // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç—É –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            setTimeout(() => {
                this.segmentAddressesLayer.eachLayer((marker) => {
                    const address = marker.addressData;
                    if (address) {
                        const matchesFilters = this.addressMatchesFilters(address, filters);
                        const element = marker.getElement();
                        
                        if (element) {
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: 0% –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö, 50% –¥–ª—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
                            element.style.opacity = matchesFilters ? '1.0' : '0.5';
                        }
                    }
                });
            }, 50);
            
            // –ü–æ–¥–≥–æ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã –ø–æ–¥ –æ–±–ª–∞—Å—Ç—å –∏–ª–∏ –∞–¥—Ä–µ—Å–∞
            if (this.segmentAreaPolygon) {
                this.segmentMap.fitBounds(this.segmentAreaPolygon.getBounds(), { padding: [20, 20] });
            } else if (addressesWithCoords.length > 0) {
                const bounds = L.latLngBounds(
                    addressesWithCoords.map(addr => [addr.coordinates.lat, addr.coordinates.lng])
                );
                this.segmentMap.fitBounds(bounds, { padding: [20, 20] });
            }
            
            console.log(`‚úÖ SegmentsManager: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${addressesWithCoords.length} –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É`);
            
        } catch (error) {
            console.error('‚ùå SegmentsManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É:', error);
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ (–∫–∞–∫ –≤ MapManager)
     */
    displayAreaPolygon(area) {
        try {
            if (!area || !this.hasAreaPolygon(area)) {
                console.warn('‚ö†Ô∏è SegmentsManager: –£ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–∞ –∏–ª–∏ –æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
                return;
            }
            
            // –ï—Å–ª–∏ –ø–æ–ª–∏–≥–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
            if (this.segmentAreaPolygon) {
                console.log('üî∑ –ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ');
                return;
            }
            
            console.log('üî∑ –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µ');
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Leaflet
            const latLngs = area.polygon.map(point => [point.lat, point.lng]);
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–π
            this.segmentAreaPolygon = L.polygon(latLngs, {
                color: '#3b82f6',
                fillColor: '#3b82f6',
                fillOpacity: 0.1,
                weight: 2,
                opacity: 0.8
            }).addTo(this.segmentMap);
            
            // –î–æ–±–∞–≤–ª—è–µ–º popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–ª–∞—Å—Ç–∏
            this.segmentAreaPolygon.bindPopup(`
                <div class="text-sm">
                    <strong>–û–±–ª–∞—Å—Ç—å: ${area.name}</strong><br>
                    –°–æ–∑–¥–∞–Ω–∞: ${new Date(area.created_at).toLocaleDateString()}
                </div>
            `);
            
            console.log('‚úÖ SegmentsManager: –ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É');
            
        } catch (error) {
            console.error('‚ùå SegmentsManager: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏:', error);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ (–∫–∞–∫ –≤ MapManager)
     */
    hasAreaPolygon(area) {
        return area && 
               area.polygon && 
               Array.isArray(area.polygon) && 
               area.polygon.length >= 3;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –∞–¥—Ä–µ—Å–∞ (–∫–∞–∫ –≤ MapManager)
     */
    async createTriangularAddressMarker(address) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É –º–∞—Ä–∫–µ—Ä–∞ –ø–æ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
        const floorCount = address.floors_count || 0;
        let markerHeight;
        if (floorCount >= 1 && floorCount <= 5) {
            markerHeight = 10;
        } else if (floorCount > 5 && floorCount <= 10) {
            markerHeight = 15;
        } else if (floorCount > 10 && floorCount <= 20) {
            markerHeight = 20;
        } else if (floorCount > 20) {
            markerHeight = 25;
        } else {
            markerHeight = 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞
        let markerColor = '#3b82f6'; // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (address.wall_material_id) {
            try {
                const wallMaterial = await window.db.get('wall_materials', address.wall_material_id);
                if (wallMaterial && wallMaterial.color) {
                    markerColor = wallMaterial.color;
                }
            } catch (error) {
                console.warn('SegmentsManager: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –¥–ª—è –∞–¥—Ä–µ—Å–∞:', address.id);
            }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ä–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        let labelText = '';
        switch (this.activeSegmentMapFilter) {
            case 'year':
                labelText = address.build_year || '';
                break;
            case 'series':
                if (address.house_series_id) {
                    try {
                        const houseSeries = await window.db.get('house_series', address.house_series_id);
                        labelText = houseSeries ? houseSeries.name : '';
                    } catch (error) {
                        console.warn('SegmentsManager: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–∏—é –¥–æ–º–∞:', address.house_series_id);
                    }
                }
                break;
            case 'floors':
                labelText = address.floors_count || '';
                break;
            case 'objects':
                try {
                    const objects = await window.db.getObjectsByAddress(address.id);
                    labelText = objects.length > 0 ? objects.length.toString() : '';
                } catch (error) {
                    console.warn('SegmentsManager: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞:', address.id);
                }
                break;
            case 'listings':
                try {
                    const listings = await window.db.getListingsByAddress(address.id);
                    labelText = listings.length > 0 ? listings.length.toString() : '';
                } catch (error) {
                    console.warn('SegmentsManager: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥—Ä–µ—Å–∞:', address.id);
                }
                break;
            case 'house_class':
                if (address.house_class_id) {
                    try {
                        const houseClass = await window.db.get('house_classes', address.house_class_id);
                        labelText = houseClass ? houseClass.name : '';
                    } catch (error) {
                        console.warn('SegmentsManager: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å –¥–æ–º–∞:', address.house_class_id);
                    }
                }
                break;
            case 'house_problems':
                if (address.house_problem_id) {
                    try {
                        const houseProblem = await window.db.get('house_problems', address.house_problem_id);
                        labelText = houseProblem ? houseProblem.name : '';
                    } catch (error) {
                        console.warn('SegmentsManager: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥–æ–º–∞:', address.house_problem_id);
                    }
                }
                break;
            case 'commercial_spaces':
                if (address.commercial_spaces !== undefined) {
                    const commercialSpacesOptions = ['–ù–µ —É–∫–∞–∑–∞–Ω–æ', '–î–∞', '–ù–µ—Ç'];
                    labelText = commercialSpacesOptions[address.commercial_spaces] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                }
                break;
            case 'comment':
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                labelText = address.comment && address.comment.trim() ? '–ï—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' : '';
                break;
            default:
                labelText = address.build_year || '';
        }
        
        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ —Å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
        let markerHtml = `
            <div class="leaflet-marker-icon-wrapper" style="position: relative;">
                <div style="
                    width: 0; 
                    height: 0; 
                    border-left: 7.5px solid transparent; 
                    border-right: 7.5px solid transparent; 
                    border-top: ${markerHeight}px solid ${markerColor};
                    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.2));
                "></div>`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ–Ω—É –¥–ª—è –∫–ª–∞—Å—Å–∞ –¥–æ–º–∞
        if (this.activeSegmentMapFilter === 'house_class' && address.house_class_id) {
            try {
                const houseClass = await window.db.get('house_classes', address.house_class_id);
                if (houseClass && houseClass.color) {
                    markerHtml += `
                        <div style="
                            position: absolute;
                            top: -12px;
                            left: 0px;
                            width: 15px;
                            height: 12px;
                            background: ${houseClass.color};
                            clip-path: polygon(0% 100%, 20% 0%, 40% 70%, 60% 0%, 80% 70%, 100% 0%, 100% 100%);
                            filter: drop-shadow(0 1px 2px rgba(0,0,0,0.2));
                        "></div>`;
                }
            } catch (error) {
                console.warn('SegmentsManager: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å –¥–æ–º–∞ –¥–ª—è –∫–æ—Ä–æ–Ω—ã:', address.house_class_id);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–±–ª–µ–º –¥–æ–º–∞
        if (this.activeSegmentMapFilter === 'house_problems' && address.house_problem_id) {
            try {
                const houseProblem = await window.db.get('house_problems', address.house_problem_id);
                if (houseProblem && houseProblem.color) {
                    markerHtml += `
                        <div style="
                            position: absolute;
                            top: -12px;
                            left: 0px;
                            width: 15px;
                            height: 12px;
                            background: ${houseProblem.color};
                            border-radius: 1px;
                            filter: drop-shadow(0 1px 2px rgba(0,0,0,0.2));
                        "></div>`;
                }
            } catch (error) {
                console.warn('SegmentsManager: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥–æ–º–∞ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞:', address.house_problem_id);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ—Ç–∫–∏
        if (labelText) {
            markerHtml += `
                <span class="leaflet-marker-iconlabel" style="
                    position: absolute; 
                    left: 15px; 
                    top: 0px; 
                    font-size: 11px; 
                    font-weight: 600; 
                    color: #374151; 
                    background: rgba(255,255,255,0.9); 
                    padding: 1px 4px; 
                    border-radius: 3px; 
                    white-space: nowrap;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                ">${labelText}</span>`;
        }
        
        markerHtml += '</div>';
        
        const marker = L.marker([address.coordinates.lat, address.coordinates.lng], {
            addressId: address.id,
            icon: L.divIcon({
                className: 'address-marker',
                html: markerHtml,
                iconSize: [15, markerHeight],
                iconAnchor: [7.5, markerHeight]
            })
        });
        
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π popup, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        marker.bindPopup('–ó–∞–≥—Ä—É–∑–∫–∞...', {
            maxWidth: 300,
            className: 'segment-address-popup-container'
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ popup
        marker.on('popupopen', async () => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ popup —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const popupContent = await this.createSegmentAddressPopup(address);
            marker.setPopupContent(popupContent);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã popup —É—Å–ø–µ–ª –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è
            setTimeout(() => {
                this.bindSegmentPopupEvents(address);
            }, 10);
        });
        
        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä
        // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ popup
        // marker.on('click', () => {
        //     this.toggleAddressSelection(address.id);
        // });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ –º–∞—Ä–∫–µ—Ä–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        marker.addressData = address;
        
        return marker;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ popup –¥–ª—è –∞–¥—Ä–µ—Å–∞ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
     */
    async createSegmentAddressPopup(address) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        let houseSeriesText = '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        let houseClassText = '–ù–µ —É–∫–∞–∑–∞–Ω';
        let wallMaterialText = '–ù–µ —É–∫–∞–∑–∞–Ω';
        let ceilingMaterialText = '–ù–µ —É–∫–∞–∑–∞–Ω';
        
        try {
            // –°–µ—Ä–∏—è –¥–æ–º–∞
            if (address.house_series_id) {
                const houseSeries = await window.db.get('house_series', address.house_series_id);
                if (houseSeries) houseSeriesText = houseSeries.name;
            }
            
            // –ö–ª–∞—Å—Å –¥–æ–º–∞
            if (address.house_class_id) {
                const houseClass = await window.db.get('house_classes', address.house_class_id);
                if (houseClass) houseClassText = houseClass.name;
            }
            
            // –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω
            if (address.wall_material_id) {
                const wallMaterial = await window.db.get('wall_materials', address.wall_material_id);
                if (wallMaterial) wallMaterialText = wallMaterial.name;
            }
            
            // –ú–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
            if (address.ceiling_material_id) {
                const ceilingMaterial = await window.db.get('ceiling_materials', address.ceiling_material_id);
                if (ceilingMaterial) ceilingMaterialText = ceilingMaterial.name;
            }
        } catch (error) {
            console.warn('SegmentsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const typeText = CONSTANTS.PROPERTY_TYPE_NAMES[address.type] || address.type || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const sourceText = CONSTANTS.DATA_SOURCE_NAMES[address.source] || address.source || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const gasSupplyText = address.gas_supply ? '–î–∞' : (address.gas_supply === false ? '–ù–µ—Ç' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
        const individualHeatingText = address.individual_heating ? '–î–∞' : (address.individual_heating === false ? '–ù–µ—Ç' : '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –≤ —Ç–µ–∫—É—â–µ–º —Ñ–∏–ª—å—Ç—Ä–µ
        const currentFilters = this.getSegmentFormData().filters;
        const isInFilter = currentFilters.addresses && currentFilters.addresses.includes(address.id);
        
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        const filterButtonText = isInFilter ? '- –£–¥–∞–ª–∏—Ç—å –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞' : '+ –î–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–∏–ª—å—Ç—Ä';
        const filterButtonClass = isInFilter ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700';
        
        return `
            <div class="segment-address-popup" style="width: 280px; max-width: 280px;">
                <div class="header mb-2">
                    <div class="font-bold text-gray-900 text-sm">üìç –ê–¥—Ä–µ—Å</div>
                    <div class="address-title font-medium text-gray-800 text-xs mb-1">${address.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                </div>
                
                <div class="space-y-0.5 text-xs text-gray-600 mb-2">
                    <div><strong>–°–µ—Ä–∏—è –¥–æ–º–∞:</strong> ${houseSeriesText}</div>
                    <div><strong>–ö–ª–∞—Å—Å –¥–æ–º–∞:</strong> ${houseClassText}</div>
                    <div><strong>–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω:</strong> ${wallMaterialText}</div>
                    <div><strong>–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π:</strong> ${ceilingMaterialText}</div>
                    <div><strong>–ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ:</strong> ${gasSupplyText}</div>
                    <div><strong>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ:</strong> ${individualHeatingText}</div>
                    <div><strong>–≠—Ç–∞–∂–µ–π:</strong> ${address.floors_count || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                    <div><strong>–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:</strong> ${address.build_year || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                </div>
                
                <div class="actions flex gap-1">
                    <button data-action="edit-address" data-address-id="${address.id}" 
                            class="px-2 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button data-action="delete-address" data-address-id="${address.id}" 
                            class="px-2 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                    <button data-action="toggle-filter" data-address-id="${address.id}" 
                            class="px-2 py-1 text-xs ${filterButtonClass} text-white rounded transition-colors">
                        ${filterButtonText}
                    </button>
                </div>
            </div>
        `;
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ popup —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    bindSegmentPopupEvents(address) {
        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        const editBtn = document.querySelector(`[data-action="edit-address"][data-address-id="${address.id}"]`);
        if (editBtn) {
            editBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.editAddress(address);
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        const deleteBtn = document.querySelector(`[data-action="delete-address"][data-address-id="${address.id}"]`);
        if (deleteBtn) {
            deleteBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.deleteAddress(address);
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        const toggleBtn = document.querySelector(`[data-action="toggle-filter"][data-address-id="${address.id}"]`);
        if (toggleBtn) {
            toggleBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.toggleAddressInFilter(address.id);
            });
        }
    }
    
    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ AddressManager)
     */
    editAddress(address) {
        // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑ AddressManager, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.areaPage && window.areaPage.addressManager) {
            window.areaPage.addressManager.editAddress(address.id);
        } else {
            console.warn('AddressManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ AddressManager)
     */
    deleteAddress(address) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if (confirm(`–£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å "${address.address}"?`)) {
            if (window.areaPage && window.areaPage.addressManager) {
                window.areaPage.addressManager.deleteAddress(address.id);
            } else {
                console.warn('AddressManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    toggleAddressInFilter(addressId) {
        const addressesSelect = document.getElementById('segmentAddresses');
        if (!addressesSelect || !addressesSelect.slimSelect) {
            console.warn('–°–µ–ª–µ–∫—Ç –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        const currentSelected = addressesSelect.slimSelect.getSelected();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å –≤ –≤—ã–±–æ—Ä–µ
        const isSelected = currentSelected.includes(addressId);
        
        let newSelected;
        if (isSelected) {
            // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—ã–±–æ—Ä–∫–∏
            newSelected = currentSelected.filter(id => id !== addressId);
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±–æ—Ä–∫—É
            newSelected = [...currentSelected, addressId];
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É
        addressesSelect.slimSelect.setSelected(newSelected);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const message = isSelected ? '–ê–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞' : '–ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ–∏–ª—å—Ç—Ä';
        if (this.progressManager) {
            this.progressManager.showSuccess(message);
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ popup
        if (this.segmentMap) {
            this.segmentMap.closePopup();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.updateSegmentMapWithFilters();
        this.checkForChanges();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –∞–¥—Ä–µ—Å–∞ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    createAddressMarker(address) {
        const color = this.getAddressColor(address);
        
        const marker = L.marker([address.coordinates.lat, address.coordinates.lng], {
            addressId: address.id,
            icon: L.divIcon({
                className: 'address-marker',
                html: `<div style="background: ${color}; width: 12px; height: 12px; border-radius: 50%; border: 2px solid white; box-shadow: 0 1px 3px rgba(0,0,0,0.3);"></div>`,
                iconSize: [16, 16],
                iconAnchor: [8, 8]
            })
        });
        
        marker.bindPopup(this.createAddressPopup(address));
        
        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
        // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ popup
        // marker.on('click', () => {
        //     this.toggleAddressSelection(address.id);
        // });
        
        return marker;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ popup –¥–ª—è –∞–¥—Ä–µ—Å–∞ (–∫–∞–∫ –≤ MapManager)
     */
    createAddressPopup(address) {
        const propertyTypeNames = {
            'house': '–î–æ–º',
            'house_with_land': '–î–æ–º —Å —É—á–∞—Å—Ç–∫–æ–º',
            'land': '–£—á–∞—Å—Ç–æ–∫',
            'commercial': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è',
            'building': '–ó–¥–∞–Ω–∏–µ'
        };
        
        return `
            <div class="max-w-xs">
                <div class="font-medium text-gray-900 mb-2">üìç ${address.address}</div>
                <div class="text-sm text-gray-600 space-y-1">
                    <div>–¢–∏–ø: ${propertyTypeNames[address.type] || address.type}</div>
                    ${address.floors_count ? `<div>–≠—Ç–∞–∂–µ–π: ${address.floors_count}</div>` : ''}
                    ${address.build_year ? `<div>–ì–æ–¥: ${address.build_year}</div>` : ''}
                </div>
            </div>
        `;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞ (–∫–∞–∫ –≤ MapManager)
     */
    getAddressColor(address) {
        const typeColors = {
            'house': '#3b82f6',
            'house_with_land': '#10b981',
            'land': '#f59e0b',
            'commercial': '#ef4444',
            'building': '#8b5cf6'
        };
        
        return typeColors[address.type] || '#6b7280';
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ toggleAddressInFilter)
     * –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
     */
    toggleAddressSelection(addressId) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        this.toggleAddressInFilter(addressId);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
     */
    updateMapMarkersStyle() {
        if (!this.segmentAddressesLayer || !this.segmentMap) return;
        
        const addressSelect = document.getElementById('segmentAddresses');
        const selectedAddresses = addressSelect?.slimSelect?.getSelected() || [];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        this.segmentAddressesLayer.eachLayer(layer => {
            if (layer.options && layer.options.addressId) {
                const isSelected = selectedAddresses.includes(layer.options.addressId);
                layer.setOpacity(isSelected ? 1.0 : 0.5);
                
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
                if (isSelected) {
                    layer.getElement()?.style.setProperty('filter', 'hue-rotate(120deg)');
                } else {
                    layer.getElement()?.style.removeProperty('filter');
                }
            }
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    async refreshSegments() {
        try {
            await this.loadSegments();
            await this.updateSegmentsData();
            this.progressManager.showSuccess('–°–µ–≥–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            
        } catch (error) {
            console.error('Error refreshing segments:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤');
        }
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    async exportSegments() {
        try {
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea) {
                this.progressManager.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
                return;
            }
            
            const exportData = {
                area: {
                    id: currentArea.id,
                    name: currentArea.name
                },
                segments: this.segmentsState.segments,
                reference_data: {
                    house_series: this.houseSeries,
                    house_classes: this.houseClasses,
                    wall_materials: this.wallMaterials,
                    ceiling_materials: this.ceilingMaterials
                },
                exported_at: new Date().toISOString(),
                version: '1.0'
            };
            
            const blob = new Blob([JSON.stringify(exportData, null, 2)], {
                type: 'application/json'
            });
            
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `segments_${currentArea.name}_${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            
            URL.revokeObjectURL(url);
            
            this.progressManager.showSuccess('–°–µ–≥–º–µ–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
            
        } catch (error) {
            console.error('Error exporting segments:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤');
        }
    }
    
    /**
     * –ò–º–ø–æ—Ä—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    async importSegments(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        try {
            const text = await file.text();
            const importData = JSON.parse(text);
            
            if (!importData.segments || !Array.isArray(importData.segments)) {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
            }
            
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea) {
                this.progressManager.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
                return;
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏–º–ø–æ—Ä—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            let importedCount = 0;
            
            for (const segment of importData.segments) {
                const validation = Validators.validateSegment(segment);
                if (validation.isValid) {
                    const newSegment = {
                        ...segment,
                        id: 'seg_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                        map_area_id: currentArea.id,
                        created_at: new Date(),
                        updated_at: new Date()
                    };
                    
                    await window.db.add('segments', newSegment);
                    importedCount++;
                }
            }
            
            // –ò–º–ø–æ—Ä—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (importData.reference_data) {
                await this.importReferenceData(importData.reference_data);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadSegments();
            await this.updateSegmentsData();
            
            this.progressManager.showSuccess(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} —Å–µ–≥–º–µ–Ω—Ç–æ–≤`);
            
        } catch (error) {
            console.error('Error importing segments:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: ' + error.message);
        }
        
        // –û—á–∏—â–∞–µ–º input
        event.target.value = '';
    }
    
    /**
     * –ò–º–ø–æ—Ä—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async importReferenceData(referenceData) {
        try {
            const tables = ['house_series', 'house_classes', 'wall_materials', 'ceiling_materials'];
            
            for (const table of tables) {
                if (referenceData[table] && Array.isArray(referenceData[table])) {
                    for (const item of referenceData[table]) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç
                        const existing = await window.db.get(table, item.id);
                        if (!existing) {
                            await window.db.add(table, item);
                        }
                    }
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.loadReferenceData();
            
        } catch (error) {
            console.error('Error importing reference data:', error);
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª—å—é —É–¥–∞–ª–µ–Ω—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ UIManager
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
     */
    renderExpandColumn(data, type, row) {
        const hasSubsegments = row.subsegments && row.subsegments.length > 0;
        const isExpanded = this.segmentsState.expandedRows.has(row.id);
        
        if (hasSubsegments) {
            return `<span class="cursor-pointer" data-action="toggle-segment" data-segment-id="${row.id}">
                ${isExpanded ? '‚ñº' : '‚ñ∂'}
            </span>`;
        }
        
        return '<span class="text-gray-400">‚Äî</span>';
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
     */
    renderNameColumn(data, type, row) {
        const icon = row.parent_id ? '‚îî‚îÄ' : 'üìä';
        const nameClass = row.parent_id ? 'text-gray-700 text-sm' : 'font-medium text-gray-900';
        
        return `<div class="flex items-center">
            <span class="mr-2">${icon}</span>
            <span class="${nameClass}">${row.name}</span>
        </div>`;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
     */
    renderAddressesColumn(data, type, row) {
        const count = row.stats?.addressesCount || 0;
        return `<span class="text-gray-900">${count}</span>`;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    renderSubsegmentsColumn(data, type, row) {
        const count = row.stats?.subsegmentsCount || 0;
        return `<span class="text-gray-700">${count}</span>`;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    renderFiltersColumn(data, type, row) {
        const filters = row.filters || {};
        const filterCount = Object.keys(filters).filter(key => filters[key] && filters[key].length > 0).length;
        
        return `<span class="text-sm text-gray-600">${filterCount} —Ñ–∏–ª—å—Ç—Ä–æ–≤</span>`;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
     */
    renderActionsColumn(data, type, row) {
        const actions = [];
        
        actions.push(`<button class="text-blue-600 hover:text-blue-800 text-xs" data-action="view-segment" data-segment-id="${row.id}">–ü—Ä–æ—Å–º–æ—Ç—Ä</button>`);
        actions.push(`<button class="text-green-600 hover:text-green-800 text-xs" data-action="edit-segment" data-segment-id="${row.id}">–ò–∑–º–µ–Ω–∏—Ç—å</button>`);
        actions.push(`<button class="text-purple-600 hover:text-purple-800 text-xs" data-action="create-subsegment" data-segment-id="${row.id}">–ü–æ–¥—Å–µ–≥–º–µ–Ω—Ç</button>`);
        actions.push(`<button class="text-red-600 hover:text-red-800 text-xs" data-action="delete-segment" data-segment-id="${row.id}">–£–¥–∞–ª–∏—Ç—å</button>`);
        
        return actions.join(' | ');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    createSegmentChildContent(segment) {
        const stats = segment.stats || {};
        
        return `
            <div class="p-4 bg-gray-50 rounded">
                <div class="grid grid-cols-3 gap-6">
                    <div>
                        <h6 class="font-medium text-gray-900 mb-2">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h6>
                        <div class="text-sm space-y-1">
                            <div>–ê–¥—Ä–µ—Å–æ–≤: ${stats.addressesCount || 0}</div>
                            <div>–ü–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤: ${stats.subsegmentsCount || 0}</div>
                            <div>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${stats.averagePrice ? Helpers.formatPrice(stats.averagePrice) : '‚Äî'}</div>
                            <div>–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ${stats.priceRange && stats.priceRange.min ? 
                                `${Helpers.formatPrice(stats.priceRange.min)} - ${Helpers.formatPrice(stats.priceRange.max)}` : '‚Äî'}</div>
                        </div>
                    </div>
                    <div>
                        <h6 class="font-medium text-gray-900 mb-2">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º</h6>
                        <div class="text-sm space-y-1">
                            ${Object.entries(stats.typeDistribution || {}).map(([type, count]) => `
                                <div>${CONSTANTS.PROPERTY_TYPE_NAMES[type] || type}: ${count}</div>
                            `).join('')}
                        </div>
                    </div>
                    <div>
                        <h6 class="font-medium text-gray-900 mb-2">–§–∏–ª—å—Ç—Ä—ã</h6>
                        <div class="text-sm space-y-1">
                            ${this.renderSegmentFiltersInfo(segment.filters || {})}
                        </div>
                    </div>
                </div>
                ${segment.description ? `<div class="mt-4">
                    <h6 class="font-medium text-gray-900 mb-2">–û–ø–∏—Å–∞–Ω–∏–µ</h6>
                    <p class="text-sm text-gray-600">${segment.description}</p>
                </div>` : ''}
            </div>
        `;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    renderSegmentFiltersInfo(filters) {
        const info = [];
        
        if (filters.type && filters.type.length > 0) {
            info.push(`–¢–∏–ø—ã: ${filters.type.map(t => CONSTANTS.PROPERTY_TYPE_NAMES[t] || t).join(', ')}`);
        }
        
        if (filters.floors_from || filters.floors_to) {
            const from = filters.floors_from || '‚Äî';
            const to = filters.floors_to || '‚Äî';
            info.push(`–≠—Ç–∞–∂–Ω–æ—Å—Ç—å: ${from} - ${to}`);
        }
        
        if (filters.build_year_from || filters.build_year_to) {
            const from = filters.build_year_from || '‚Äî';
            const to = filters.build_year_to || '‚Äî';
            info.push(`–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: ${from} - ${to}`);
        }
        
        if (filters.house_series_id && filters.house_series_id.length > 0) {
            info.push(`–°–µ—Ä–∏–π –¥–æ–º–æ–≤: ${filters.house_series_id.length}`);
        }
        
        if (filters.house_class_id && filters.house_class_id.length > 0) {
            info.push(`–ö–ª–∞—Å—Å–æ–≤ –¥–æ–º–æ–≤: ${filters.house_class_id.length}`);
        }
        
        if (filters.wall_material_id && filters.wall_material_id.length > 0) {
            info.push(`–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—Ç–µ–Ω: ${filters.wall_material_id.length}`);
        }
        
        if (filters.ceiling_material_id && filters.ceiling_material_id.length > 0) {
            info.push(`–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π: ${filters.ceiling_material_id.length}`);
        }
        
        if (filters.gas_supply && filters.gas_supply.length > 0) {
            info.push(`–ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ: ${filters.gas_supply.join(', ')}`);
        }
        
        return info.length > 0 ? info.map(i => `<div>${i}</div>`).join('') : '<div class="text-gray-500">–§–∏–ª—å—Ç—Ä—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</div>';
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    getSegmentsState() {
        return {
            segments: this.segmentsState.segments,
            selectedSegment: this.segmentsState.selectedSegment,
            expandedRows: Array.from(this.segmentsState.expandedRows),
            modalOpen: this.segmentsState.modalOpen
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ ID
     */
    getSegmentById(segmentId) {
        return this.segmentsState.segments.find(s => s.id === segmentId);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
     */
    getSubsegments(parentId) {
        return this.segmentsState.segments.filter(s => s.parent_id === parentId);
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    destroy() {
        if (this.segmentsTable) {
            this.segmentsTable.destroy();
            this.segmentsTable = null;
        }
        
        if (this.eventBus) {
            this.eventBus.offAll(CONSTANTS.EVENTS.AREA_LOADED);
            this.eventBus.offAll(CONSTANTS.EVENTS.ADDRESSES_LOADED);
            this.eventBus.offAll(CONSTANTS.EVENTS.AREA_CHANGED);
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        document.getElementById('createSegmentBtn')?.removeEventListener('click', this.openCreateSegmentModal);
        document.getElementById('createSubsegmentBtn')?.removeEventListener('click', this.openCreateSubsegmentModal);
        document.getElementById('refreshSegmentsBtn')?.removeEventListener('click', this.refreshSegments);
        document.getElementById('exportSegmentsBtn')?.removeEventListener('click', this.exportSegments);
        document.getElementById('importSegmentsFile')?.removeEventListener('change', this.importSegments);
        
        document.getElementById('closeSegmentModal')?.removeEventListener('click', this.closeSegmentModal);
        document.getElementById('cancelSegmentBtn')?.removeEventListener('click', this.closeSegmentModal);
        document.getElementById('saveSegmentBtn')?.removeEventListener('click', this.saveSegment);
        
        document.getElementById('segmentsPanelHeader')?.removeEventListener('click', this.toggleSegmentsPanel);
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.segmentsState.expandedRows.clear();
        this.segmentsState.segments = [];
        this.segmentsState.selectedSegment = null;
        this.segmentsState.editingSegment = null;
        this.segmentsState.modalOpen = false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SegmentsManager;
} else {
    window.SegmentsManager = SegmentsManager;
}