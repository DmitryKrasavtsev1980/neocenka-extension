/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –ø–∞–Ω–µ–ª—è–º–∏, –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –∏ –æ–±—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */

class UIManager {
    constructor(dataState, eventBus, progressManager) {
        this.dataState = dataState;
        this.eventBus = eventBus;
        this.progressManager = progressManager;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
        this.uiState = {
            panels: {
                statistics: { visible: true, expanded: false },
                dataWork: { visible: true, expanded: false },
                map: { visible: true, expanded: true },
                addresses: { visible: true, expanded: false },
                segments: { visible: true, expanded: false },
                duplicates: { visible: true, expanded: false }
            },
            modals: {
                addressModal: false,
                segmentModal: false,
                settingsModal: false
            },
            loading: {
                global: false,
                addresses: false,
                segments: false,
                duplicates: false,
                parsing: false
            },
            notifications: []
        };
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–Ω–µ–ª–µ–π
        this.panelConfig = {
            statistics: {
                container: 'statisticsPanelContainer',
                content: 'statisticsPanelContent',
                header: 'statisticsPanelHeader',
                chevron: 'statisticsPanelChevron',
                checkbox: 'statisticsPanel'
            },
            dataWork: {
                container: 'dataWorkPanelContainer',
                content: 'dataWorkPanelContent',
                header: 'dataWorkPanelHeader',
                chevron: 'dataWorkPanelChevron',
                checkbox: 'dataWorkPanel'
            },
            map: {
                container: 'mapPanelContainer',
                content: 'mapPanelContent',
                header: 'mapPanelHeader',
                chevron: 'mapPanelChevron',
                checkbox: 'mapPanel'
            },
            addresses: {
                container: 'addressesPanelContainer',
                content: 'addressesPanelContent',
                header: 'addressesPanelHeader',
                chevron: 'addressesPanelChevron',
                checkbox: 'addressesPanel'
            },
            segments: {
                container: 'segmentsPanelContainer',
                content: 'segmentsPanelContent',
                header: 'segmentsPanelHeader',
                chevron: 'segmentsPanelChevron',
                checkbox: 'segmentsPanel'
            },
            duplicates: {
                container: 'duplicatesPanelContainer',
                content: 'duplicatesPanelContent',
                header: 'duplicatesPanelHeader',
                chevron: 'duplicatesPanelChevron',
                checkbox: 'duplicatesPanel'
            }
        };
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.bindEvents();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        if (this.eventBus) {
            this.eventBus.on(CONSTANTS.EVENTS.AREA_LOADED, async (area) => {
                this.onAreaLoaded(area);
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.LOADING_STARTED, (data) => {
                this.setLoading(data.type, true);
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.LOADING_FINISHED, (data) => {
                this.setLoading(data.type, false);
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.NOTIFICATION_SHOW, (notification) => {
                this.showNotification(notification);
            });
        }
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–∞–Ω–µ–ª—è–º
        this.bindPanelEvents();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–∞–º
        this.bindModalEvents();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º UI —Å–æ–±—ã—Ç–∏—è–º
        this.bindGlobalEvents();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–∞–Ω–µ–ª—è–º
     */
    bindPanelEvents() {
        Object.keys(this.panelConfig).forEach(panelName => {
            const config = this.panelConfig[panelName];
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –ø–∞–Ω–µ–ª–∏
            const header = document.getElementById(config.header);
            if (header) {
                header.addEventListener('click', () => {
                    console.log(`üîµ UIManager: –ö–ª–∏–∫ –ø–æ –ø–∞–Ω–µ–ª–∏ "${panelName}"`);
                    this.togglePanel(panelName);
                });
                console.log(`‚úÖ UIManager: –ü–∞–Ω–µ–ª—å "${panelName}" –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É #${config.header}`);
            } else {
                // –ü–∞–Ω–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                console.debug(`üí° UIManager: –ü–∞–Ω–µ–ª—å "${panelName}" –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—ç–ª–µ–º–µ–Ω—Ç #${config.header} –Ω–µ –Ω–∞–π–¥–µ–Ω)`);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–±–æ–∫—Å–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏
            const checkbox = document.getElementById(config.checkbox);
            if (checkbox) {
                checkbox.addEventListener('change', (e) => {
                    this.togglePanelVisibility(panelName, e.target.checked);
                });
            }
        });
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–∞–º
     */
    bindModalEvents() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal-backdrop')) {
                this.closeModal(e.target.dataset.modal);
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeAllModals();
            }
        });
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º
     */
    bindGlobalEvents() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', Helpers.debounce(() => {
            this.onWindowResize();
        }, 250));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        window.addEventListener('error', (e) => {
            this.handleGlobalError(e);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ unhandled promise rejections
        window.addEventListener('unhandledrejection', (e) => {
            this.handleGlobalError(e);
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–∞—Å—Ç–∏
     */
    onAreaLoaded(area) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.updatePageTitle(area);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π
        this.restorePanelStates(area);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.initializeUIElements();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification({
            type: 'success',
            message: `–û–±–ª–∞—Å—Ç—å "${area.name}" –∑–∞–≥—Ä—É–∂–µ–Ω–∞`,
            duration: 3000
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    updatePageTitle(area) {
        const titleElement = document.getElementById('pageTitle');
        if (titleElement) {
            titleElement.textContent = `–û–±–ª–∞—Å—Ç—å: ${area.name}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º title –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document.title = `Neocenka - ${area.name}`;
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
     */
    togglePanel(panelName) {
        const config = this.panelConfig[panelName];
        if (!config) return;
        
        const content = document.getElementById(config.content);
        const chevron = document.getElementById(config.chevron);
        
        if (!content || !chevron) return;
        
        const isExpanded = this.uiState.panels[panelName].expanded;
        
        if (isExpanded) {
            content.style.display = 'none';
            chevron.style.transform = 'rotate(0deg)';
        } else {
            content.style.display = 'block';
            chevron.style.transform = 'rotate(90deg)';
        }
        
        this.uiState.panels[panelName].expanded = !isExpanded;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.savePanelState(panelName);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.eventBus.emit(CONSTANTS.EVENTS.PANEL_TOGGLED, {
            panelName,
            expanded: !isExpanded,
            timestamp: new Date()
        });
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏
     */
    togglePanelVisibility(panelName, visible) {
        const config = this.panelConfig[panelName];
        if (!config) return;
        
        const container = document.getElementById(config.container);
        if (!container) return;
        
        container.style.display = visible ? 'block' : 'none';
        this.uiState.panels[panelName].visible = visible;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.savePanelState(panelName);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.eventBus.emit(CONSTANTS.EVENTS.PANEL_VISIBILITY_CHANGED, {
            panelName,
            visible,
            timestamp: new Date()
        });
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π
     */
    restorePanelStates(area) {
        Object.keys(this.panelConfig).forEach(panelName => {
            const savedState = localStorage.getItem(`panel_${panelName}_${area.id}`);
            if (savedState) {
                try {
                    const state = JSON.parse(savedState);
                    this.uiState.panels[panelName] = { ...this.uiState.panels[panelName], ...state };
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ UI
                    this.applyPanelState(panelName);
                } catch (error) {
                    console.error(`Error restoring panel state for ${panelName}:`, error);
                }
            }
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–µ–π
        this.restorePanelVisibilityStates();
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–µ–π
     */
    restorePanelVisibilityStates() {
        Object.keys(this.panelConfig).forEach(panelName => {
            const config = this.panelConfig[panelName];
            const checkbox = document.getElementById(config.checkbox);
            
            if (checkbox) {
                checkbox.checked = this.uiState.panels[panelName].visible;
                this.togglePanelVisibility(panelName, checkbox.checked);
            }
        });
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∫ UI
     */
    applyPanelState(panelName) {
        const config = this.panelConfig[panelName];
        const state = this.uiState.panels[panelName];
        
        const container = document.getElementById(config.container);
        const content = document.getElementById(config.content);
        const chevron = document.getElementById(config.chevron);
        const checkbox = document.getElementById(config.checkbox);
        
        if (container) {
            container.style.display = state.visible ? 'block' : 'none';
        }
        
        if (content) {
            content.style.display = state.expanded ? 'block' : 'none';
        }
        
        if (chevron) {
            chevron.style.transform = state.expanded ? 'rotate(90deg)' : 'rotate(0deg)';
        }
        
        if (checkbox) {
            checkbox.checked = state.visible;
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏
     */
    savePanelState(panelName) {
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) return;
        
        const state = this.uiState.panels[panelName];
        localStorage.setItem(`panel_${panelName}_${currentArea.id}`, JSON.stringify(state));
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    openModal(modalName, options = {}) {
        const modal = document.getElementById(modalName);
        if (!modal) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.style.display = 'flex';
        modal.classList.add('modal-open');
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª body
        document.body.style.overflow = 'hidden';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.uiState.modals[modalName] = true;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ü–∏–∏
        if (options.title) {
            const titleElement = modal.querySelector('.modal-title');
            if (titleElement) {
                titleElement.textContent = options.title;
            }
        }
        
        if (options.size) {
            const content = modal.querySelector('.modal-content');
            if (content) {
                content.className = `modal-content ${options.size}`;
            }
        }
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        const firstFocusable = modal.querySelector('input, textarea, select, button');
        if (firstFocusable) {
            setTimeout(() => firstFocusable.focus(), 100);
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏
        this.eventBus.emit(CONSTANTS.EVENTS.MODAL_OPENED, {
            modalName,
            options,
            timestamp: new Date()
        });
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    closeModal(modalName) {
        const modal = document.getElementById(modalName);
        if (!modal) return;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.style.display = 'none';
        modal.classList.remove('modal-open');
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª body
        document.body.style.overflow = '';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.uiState.modals[modalName] = false;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
        this.eventBus.emit(CONSTANTS.EVENTS.MODAL_CLOSED, {
            modalName,
            timestamp: new Date()
        });
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    closeAllModals() {
        Object.keys(this.uiState.modals).forEach(modalName => {
            if (this.uiState.modals[modalName]) {
                this.closeModal(modalName);
            }
        });
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setLoading(type, isLoading) {
        this.uiState.loading[type] = isLoading;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
        this.updateLoadingIndicators();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.eventBus.emit(CONSTANTS.EVENTS.LOADING_STATE_CHANGED, {
            type,
            isLoading,
            timestamp: new Date()
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    updateLoadingIndicators() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const globalLoader = document.getElementById('globalLoader');
        if (globalLoader) {
            globalLoader.style.display = this.uiState.loading.global ? 'block' : 'none';
        }
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        const loadingTypes = ['addresses', 'segments', 'duplicates', 'parsing'];
        
        loadingTypes.forEach(type => {
            const indicator = document.getElementById(`${type}LoadingIndicator`);
            if (indicator) {
                indicator.style.display = this.uiState.loading[type] ? 'inline-block' : 'none';
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.updateButtonStates();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
     */
    updateButtonStates() {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
        const buttons = document.querySelectorAll('[data-loading-disable]');
        buttons.forEach(button => {
            const loadingType = button.getAttribute('data-loading-disable');
            button.disabled = this.uiState.loading[loadingType] || this.uiState.loading.global;
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(notification) {
        const { type = 'info', message, duration = 5000, actions = [] } = notification;
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notificationElement = this.createNotificationElement(type, message, actions);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const container = this.getNotificationContainer();
        container.appendChild(notificationElement);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const notificationData = {
            id: Date.now() + Math.random(),
            type,
            message,
            duration,
            actions,
            element: notificationElement,
            timestamp: new Date()
        };
        
        this.uiState.notifications.push(notificationData);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        if (duration > 0) {
            setTimeout(() => {
                this.hideNotification(notificationData.id);
            }, duration);
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–∫–∞–∑–µ
        this.eventBus.emit(CONSTANTS.EVENTS.NOTIFICATION_SHOWN, notificationData);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    createNotificationElement(type, message, actions) {
        const typeClasses = {
            success: 'bg-green-100 border-green-500 text-green-700',
            error: 'bg-red-100 border-red-500 text-red-700',
            warning: 'bg-yellow-100 border-yellow-500 text-yellow-700',
            info: 'bg-blue-100 border-blue-500 text-blue-700'
        };
        
        const typeIcons = {
            success: '‚úì',
            error: '‚úó',
            warning: '‚ö†',
            info: '‚Ñπ'
        };
        
        const element = document.createElement('div');
        element.className = `notification border-l-4 p-4 mb-3 rounded ${typeClasses[type] || typeClasses.info}`;
        
        let actionsHTML = '';
        if (actions.length > 0) {
            actionsHTML = `
                <div class="flex mt-2 space-x-2">
                    ${actions.map(action => `
                        <button class="text-sm font-medium underline hover:no-underline" 
                                onclick="${action.handler}">${action.text}</button>
                    `).join('')}
                </div>
            `;
        }
        
        element.innerHTML = `
            <div class="flex">
                <div class="flex-shrink-0">
                    <span class="text-lg font-bold">${typeIcons[type] || typeIcons.info}</span>
                </div>
                <div class="ml-3 flex-1">
                    <p class="text-sm font-medium">${message}</p>
                    ${actionsHTML}
                </div>
                <div class="flex-shrink-0 ml-4">
                    <button class="text-lg font-bold hover:opacity-75" onclick="this.parentElement.parentElement.parentElement.remove()">
                        √ó
                    </button>
                </div>
            </div>
        `;
        
        return element;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    getNotificationContainer() {
        let container = document.getElementById('notificationContainer');
        
        if (!container) {
            container = document.createElement('div');
            container.id = 'notificationContainer';
            container.className = 'fixed top-4 right-4 z-50 max-w-md';
            document.body.appendChild(container);
        }
        
        return container;
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    hideNotification(notificationId) {
        const notification = this.uiState.notifications.find(n => n.id === notificationId);
        if (!notification) return;
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
        if (notification.element && notification.element.parentNode) {
            notification.element.parentNode.removeChild(notification.element);
        }
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.uiState.notifications = this.uiState.notifications.filter(n => n.id !== notificationId);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–∫—Ä—ã—Ç–∏–∏
        this.eventBus.emit(CONSTANTS.EVENTS.NOTIFICATION_HIDDEN, {
            notificationId,
            timestamp: new Date()
        });
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    clearAllNotifications() {
        this.uiState.notifications.forEach(notification => {
            if (notification.element && notification.element.parentNode) {
                notification.element.parentNode.removeChild(notification.element);
            }
        });
        
        this.uiState.notifications = [];
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    initializeUIElements() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.initializeSlimSelects();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è tooltips
        this.initializeTooltips();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.initializeSortables();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect
     */
    initializeSlimSelects() {
        const slimSelects = document.querySelectorAll('.slim-select');
        slimSelects.forEach(select => {
            if (!select.slimSelect) {
                try {
                    select.slimSelect = new SlimSelect({
                        select: select,
                        settings: {
                            searchPlaceholder: '–ü–æ–∏—Å–∫...',
                            searchText: '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
                            searchHighlight: true,
                            closeOnSelect: select.multiple ? false : true
                        }
                    });
                } catch (error) {
                    console.error('Error initializing SlimSelect:', error);
                }
            }
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è tooltips
     */
    initializeTooltips() {
        const tooltips = document.querySelectorAll('[data-tooltip]');
        tooltips.forEach(element => {
            if (!element.tooltip) {
                element.tooltip = new Tooltip(element, {
                    title: element.getAttribute('data-tooltip'),
                    placement: element.getAttribute('data-tooltip-placement') || 'top'
                });
            }
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    initializeSortables() {
        const sortables = document.querySelectorAll('.sortable');
        sortables.forEach(element => {
            if (!element.sortable) {
                try {
                    element.sortable = new Sortable(element, {
                        animation: 150,
                        ghostClass: 'sortable-ghost',
                        chosenClass: 'sortable-chosen',
                        dragClass: 'sortable-drag',
                        onEnd: (evt) => {
                            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
                            this.eventBus.emit(CONSTANTS.EVENTS.SORTABLE_CHANGED, {
                                element: element,
                                oldIndex: evt.oldIndex,
                                newIndex: evt.newIndex,
                                timestamp: new Date()
                            });
                        }
                    });
                } catch (error) {
                    console.error('Error initializing Sortable:', error);
                }
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    onWindowResize() {
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
        if (window.DataTable && window.$) {
            const tables = document.querySelectorAll('.dataTable');
            tables.forEach(table => {
                try {
                    const $table = window.$(table);
                    if ($table.length && $table.DataTable) {
                        const dt = $table.DataTable();
                        if (dt) {
                            dt.columns.adjust();
                        }
                    }
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                }
            });
        }
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
        if (window.ApexCharts) {
            const charts = document.querySelectorAll('.apexcharts-canvas');
            charts.forEach(chart => {
                const chartInstance = chart._chartInstance;
                if (chartInstance) {
                    chartInstance.resize();
                }
            });
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        this.eventBus.emit(CONSTANTS.EVENTS.WINDOW_RESIZED, {
            width: window.innerWidth,
            height: window.innerHeight,
            timestamp: new Date()
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
     */
    handleGlobalError(error) {
        console.error('Global error:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        this.showNotification({
            type: 'error',
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
            duration: 10000,
            actions: [
                {
                    text: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å',
                    handler: 'location.reload()'
                }
            ]
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–µ
        this.eventBus.emit(CONSTANTS.EVENTS.GLOBAL_ERROR, {
            error,
            timestamp: new Date()
        });
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    setTheme(theme) {
        const validThemes = ['light', 'dark', 'auto'];
        if (!validThemes.includes(theme)) {
            theme = 'light';
        }
        
        document.documentElement.setAttribute('data-theme', theme);
        localStorage.setItem('ui-theme', theme);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã
        this.eventBus.emit(CONSTANTS.EVENTS.THEME_CHANGED, {
            theme,
            timestamp: new Date()
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
     */
    getTheme() {
        return document.documentElement.getAttribute('data-theme') || 'light';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    updateProgress(operation, percentage, message = '') {
        const progressBar = document.getElementById(`${operation}ProgressBar`);
        const progressMessage = document.getElementById(`${operation}ProgressMessage`);
        
        if (progressBar) {
            progressBar.style.width = `${percentage}%`;
            progressBar.setAttribute('aria-valuenow', percentage);
        }
        
        if (progressMessage) {
            progressMessage.textContent = message;
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.eventBus.emit(CONSTANTS.EVENTS.PROGRESS_UPDATED, {
            operation,
            percentage,
            message,
            timestamp: new Date()
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —É—Å–ª–æ–≤–∏—é
     */
    toggleElementsByCondition(selector, condition) {
        const elements = document.querySelectorAll(selector);
        elements.forEach(element => {
            element.style.display = condition ? 'block' : 'none';
        });
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    toggleElementsState(selector, enabled) {
        const elements = document.querySelectorAll(selector);
        elements.forEach(element => {
            element.disabled = !enabled;
            if (enabled) {
                element.classList.remove('opacity-50', 'cursor-not-allowed');
            } else {
                element.classList.add('opacity-50', 'cursor-not-allowed');
            }
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
     */
    getUIState() {
        return {
            panels: { ...this.uiState.panels },
            modals: { ...this.uiState.modals },
            loading: { ...this.uiState.loading },
            notifications: this.uiState.notifications.length,
            theme: this.getTheme()
        };
    }
    
    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
     */
    resetUIState() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.closeAllModals();
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.clearAllNotifications();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        Object.keys(this.uiState.loading).forEach(key => {
            this.uiState.loading[key] = false;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateLoadingIndicators();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–±—Ä–æ—Å–µ
        this.eventBus.emit(CONSTANTS.EVENTS.UI_STATE_RESET, {
            timestamp: new Date()
        });
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
     */
    saveUIState() {
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) return;
        
        const stateToSave = {
            panels: this.uiState.panels,
            theme: this.getTheme()
        };
        
        localStorage.setItem(`ui-state_${currentArea.id}`, JSON.stringify(stateToSave));
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
     */
    restoreUIState() {
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) return;
        
        const savedState = localStorage.getItem(`ui-state_${currentArea.id}`);
        if (savedState) {
            try {
                const state = JSON.parse(savedState);
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π
                if (state.panels) {
                    this.uiState.panels = { ...this.uiState.panels, ...state.panels };
                    Object.keys(state.panels).forEach(panelName => {
                        this.applyPanelState(panelName);
                    });
                }
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É
                if (state.theme) {
                    this.setTheme(state.theme);
                }
                
            } catch (error) {
                console.error('Error restoring UI state:', error);
            }
        }
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ UI
     */
    destroy() {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.clearAllNotifications();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.closeAllModals();
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if (this.eventBus) {
            this.eventBus.offAll(CONSTANTS.EVENTS.AREA_LOADED);
            this.eventBus.offAll(CONSTANTS.EVENTS.LOADING_STARTED);
            this.eventBus.offAll(CONSTANTS.EVENTS.LOADING_FINISHED);
            this.eventBus.offAll(CONSTANTS.EVENTS.NOTIFICATION_SHOW);
        }
        
        // –û—á–∏—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –ø–∞–Ω–µ–ª–µ–π
        Object.keys(this.panelConfig).forEach(panelName => {
            const config = this.panelConfig[panelName];
            
            const header = document.getElementById(config.header);
            if (header) {
                header.removeEventListener('click', () => this.togglePanel(panelName));
            }
            
            const checkbox = document.getElementById(config.checkbox);
            if (checkbox) {
                checkbox.removeEventListener('change', (e) => this.togglePanelVisibility(panelName, e.target.checked));
            }
        });
        
        // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
        window.removeEventListener('resize', this.onWindowResize);
        window.removeEventListener('error', this.handleGlobalError);
        window.removeEventListener('unhandledrejection', this.handleGlobalError);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.resetUIState();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = UIManager;
} else {
    window.UIManager = UIManager;
}