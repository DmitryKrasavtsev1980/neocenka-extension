/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –ø–∞–Ω–µ–ª—è–º–∏, –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –∏ –æ–±—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */

class UIManager {
    constructor(dataState, eventBus, progressManager) {
        this.dataState = dataState;
        this.eventBus = eventBus;
        this.progressManager = progressManager;
        
        // Cache –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è helper –º–µ—Ç–æ–¥–æ–≤)
        this.addresses = [];
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
        this.uiState = {
            panels: {
                statistics: { visible: true, expanded: false },
                dataWork: { visible: true, expanded: false },
                map: { visible: true, expanded: true },
                addresses: { visible: true, expanded: false },
                segments: { visible: true, expanded: false },
                reports: { visible: true, expanded: false },
                duplicates: { visible: true, expanded: false }
            },
            modals: {
                addressModal: false,
                segmentModal: false,
                settingsModal: false
            },
            loading: {
                global: false,
                addresses: false,
                segments: false,
                duplicates: false,
                parsing: false
            },
            notifications: []
        };
        
        // –≠–∫–∑–µ–º–ø–ª—è—Ä—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.sourcesChartInstance = null;
        this.addressConfidenceChartInstance = null;
        this.addressMethodsChartInstance = null;
        this.duplicatesStatusChartInstance = null;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–Ω–µ–ª–µ–π
        this.panelConfig = {
            statistics: {
                container: 'statisticsPanelContainer',
                content: 'statisticsPanelContent',
                header: 'statisticsPanelHeader',
                chevron: 'statisticsPanelChevron',
                checkbox: 'statisticsPanel'
            },
            dataWork: {
                container: 'dataWorkPanelContainer',
                content: 'dataWorkPanelContent',
                header: 'dataWorkPanelHeader',
                chevron: 'dataWorkPanelChevron',
                checkbox: 'dataWorkPanel'
            },
            map: {
                container: 'mapPanelContainer',
                content: 'mapPanelContent',
                header: 'mapPanelHeader',
                chevron: 'mapPanelChevron',
                checkbox: 'mapPanel'
            },
            addresses: {
                container: 'addressTableContainer',
                content: 'addressTableContent',
                header: 'addressTableHeader',
                chevron: 'addressTableChevron',
                checkbox: 'addressesPanel'
            },
            segments: {
                container: 'segmentsPanelContainer',
                content: 'segmentsPanelContent',
                header: 'segmentsPanelHeader',
                chevron: 'segmentsPanelChevron',
                checkbox: 'segmentsPanel'
            },
            reports: {
                container: 'reportsPanelContainer',
                content: 'reportsPanelContent',
                header: 'reportsPanelHeader',
                chevron: 'reportsPanelChevron',
                checkbox: 'reportsPanel'
            },
            duplicates: {
                container: 'duplicatesPanelContainer',
                content: 'duplicatesPanelContent',
                header: 'duplicatesPanelHeader',
                chevron: 'duplicatesPanelChevron',
                checkbox: 'duplicatesPanel'
            }
        };
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.bindEvents();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
     */
    async isDebugEnabled() {
        try {
            const settings = await window.db.getSettings();
            return settings.find(s => s.key === 'debug_enabled')?.value === true;
        } catch (error) {
            return false;
        }
    }
    
    /**
     * –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async debugLog(message, ...args) {
        if (await this.isDebugEnabled()) {
        }
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        if (this.eventBus) {
            this.eventBus.on(CONSTANTS.EVENTS.AREA_LOADED, async (area) => {
                this.onAreaLoaded(area);
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.LOADING_STARTED, (data) => {
                this.setLoading(data.type, true);
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.LOADING_FINISHED, (data) => {
                this.setLoading(data.type, false);
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.NOTIFICATION_SHOW, (notification) => {
                this.showNotification(notification);
            });
            
            
            this.eventBus.on(CONSTANTS.EVENTS.AREA_UPDATED, async (area) => {
                await this.updateAreaStatistics();
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                setTimeout(async () => {
                    try {
                        await this.updateSourcesChart();
                        await this.updateAddressAnalyticsCharts();
                    } catch (error) {
                        console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:', error);
                    }
                }, 100);
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è helper –º–µ—Ç–æ–¥–æ–≤
            this.eventBus.on(CONSTANTS.EVENTS.ADDRESSES_LOADED, async (data) => {
                // data –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ –º–∞—Å—Å–∏–≤–æ–º –∞–¥—Ä–µ—Å–æ–≤ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç), –ª–∏–±–æ –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª–µ–º addresses
                this.addresses = Array.isArray(data) ? data : (data?.addresses || []);
                await this.debugLog('üè† UIManager: –ö—ç—à –∞–¥—Ä–µ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω:', this.addresses.length);
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            this.eventBus.on(CONSTANTS.EVENTS.LISTINGS_IMPORTED, async (data) => {
                try {
                    await this.debugLog('üìà UIManager: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ LISTINGS_IMPORTED, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
                    await this.updateAreaStatistics();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    await this.updateSourcesChart();
                    await this.updateAddressAnalyticsCharts();
                } catch (error) {
                    console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
                }
            });
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            this.eventBus.on(CONSTANTS.EVENTS.LISTING_UPDATED, async (eventData) => {
                try {
                    await this.debugLog('üîÑ UIManager: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ LISTING_UPDATED –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', eventData.listing.id);
                    
                    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                    await this.handleListingUpdated(eventData);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    await this.updateAreaStatistics();
                    
                } catch (error) {
                    console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
                }
            });
        }
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–∞–Ω–µ–ª—è–º
        this.bindPanelEvents();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–∞–º
        this.bindModalEvents();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º UI —Å–æ–±—ã—Ç–∏—è–º
        this.bindGlobalEvents();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–∞–Ω–µ–ª—è–º
     */
    async bindPanelEvents() {
        await this.debugLog('üîó UIManager: –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–∞–Ω–µ–ª–µ–π (–Ω–æ–≤–∞—è –ø—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞)...');
        
        // –í—Å–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–≤–∫–ª—é—á–∞—è addressTable)
        const panelMappings = [
            { name: 'statistics', header: 'statisticsPanelHeader', content: 'statisticsPanelContent', chevron: 'statisticsPanelChevron' },
            { name: 'dataWork', header: 'dataWorkPanelHeader', content: 'dataWorkPanelContent', chevron: 'dataWorkPanelChevron' },
            { name: 'map', header: 'mapPanelHeader', content: 'mapPanelContent', chevron: 'mapPanelChevron' },
            { name: 'segments', header: 'segmentsPanelHeader', content: 'segmentsPanelContent', chevron: 'segmentsPanelChevron' },
            { name: 'reports', header: 'reportsPanelHeader', content: 'reportsPanelContent', chevron: 'reportsPanelChevron' },
            { name: 'duplicates', header: 'duplicatesPanelHeader', content: 'duplicatesPanelContent', chevron: 'duplicatesPanelChevron' },
            { name: 'addressTable', header: 'addressTableHeader', content: 'addressTableContent', chevron: 'addressTableChevron' }
        ];
        
        for (const panel of panelMappings) {
            const header = document.getElementById(panel.header);
            if (header) {
                header.addEventListener('click', async () => {
                    await this.debugLog(`üîµ UIManager: –ö–ª–∏–∫ –ø–æ –ø–∞–Ω–µ–ª–∏ "${panel.name}"`);
                    this.simpleTogglePanel(panel.name, panel.content, panel.chevron);
                });
                await this.debugLog(`‚úÖ UIManager: –ü–∞–Ω–µ–ª—å "${panel.name}" –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É #${panel.header}`);
            } else {
                console.debug(`üí° UIManager: –ü–∞–Ω–µ–ª—å "${panel.name}" –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—ç–ª–µ–º–µ–Ω—Ç #${panel.header} –Ω–µ –Ω–∞–π–¥–µ–Ω)`);
            }
        }
        
        await this.debugLog('‚úÖ UIManager: –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–∞–Ω–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–∞–º
     */
    bindModalEvents() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal-backdrop')) {
                this.closeModal(e.target.dataset.modal);
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeAllModals();
            }
        });
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        this.bindModalCloseButtons();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    bindModalCloseButtons() {
        // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const closeButtons = document.querySelectorAll('#closeModalBtn, #closeModalFooterBtn, .modal-close');
        closeButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                // –ù–∞–π–¥–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                const modal = btn.closest('[id$="Modal"]');
                if (modal) {
                    this.closeModal(modal.id);
                }
            });
        });

        // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        const objectCloseButtons = document.querySelectorAll('#closeObjectModalBtn, #closeObjectModalBtn2');
        objectCloseButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const modal = document.getElementById('objectModal');
                if (modal) {
                    this.closeModal(modal.id);
                }
            });
        });
        
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    initializeImageErrorHandling(container) {
        const images = container.querySelectorAll('img.listing-photo');
        images.forEach(img => {
            img.addEventListener('error', function() {
                this.style.display = 'none';
            });
            
            // –¢–∞–∫–∂–µ —Å–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            if (img.complete && !img.naturalWidth) {
                img.style.display = 'none';
            }
        });
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º
     */
    bindGlobalEvents() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', Helpers.debounce(() => {
            this.onWindowResize();
        }, 250));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        window.addEventListener('error', (e) => {
            this.handleGlobalError(e);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ unhandled promise rejections
        window.addEventListener('unhandledrejection', (e) => {
            this.handleGlobalError(e);
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–∞—Å—Ç–∏
     */
    onAreaLoaded(area) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.updatePageTitle(area);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π
        this.restorePanelStates(area);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.initializeUIElements();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±—ã –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        this.initDataWorkTabs();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–ª–∞—Å—Ç–∏
        this.updateAreaStatistics();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–∞—Å—Ç–∏
        setTimeout(async () => {
            try {
                await this.updateSourcesChart();
                await this.updateAddressAnalyticsCharts();
            } catch (error) {
                console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–∞—Å—Ç–∏:', error);
            }
        }, 500);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification({
            type: 'success',
            message: `–û–±–ª–∞—Å—Ç—å "${area.name}" –∑–∞–≥—Ä—É–∂–µ–Ω–∞`,
            duration: 3000
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    updatePageTitle(area) {
        const titleElement = document.getElementById('areaTitle');
        if (titleElement) {
            titleElement.textContent = area.name;
        } else {
            console.error('‚ùå UIManager: –≠–ª–µ–º–µ–Ω—Ç areaTitle –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º title –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document.title = `Neocenka - ${area.name}`;
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
     */
    togglePanel(panelName) {
        this.debugLog(`üîÑ UIManager: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ "${panelName}"`);
        
        const config = this.panelConfig[panelName];
        if (!config) {
            console.warn(`‚ö†Ô∏è UIManager: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–∞–Ω–µ–ª–∏ "${panelName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return;
        }
        
        const content = document.getElementById(config.content);
        const chevron = document.getElementById(config.chevron);
        
        
        if (!content || !chevron) {
            console.error(`‚ùå UIManager: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–∞–Ω–µ–ª–∏ "${panelName}"`);
            return;
        }
        
        const currentState = this.uiState.panels[panelName];
        const isExpanded = currentState.expanded;
        
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ inline —Å—Ç–∏–ª–∏ display
        content.style.display = '';
        content.style.removeProperty('display');
        
        if (isExpanded) {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
            content.classList.add('hidden');
            chevron.style.transform = 'rotate(-90deg)';
        } else {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
            content.classList.remove('hidden');
            chevron.style.transform = 'rotate(0deg)';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.uiState.panels[panelName].expanded = !isExpanded;
        
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.savePanelState(panelName);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if (this.eventBus) {
            this.eventBus.emit(CONSTANTS.EVENTS.PANEL_TOGGLED, {
                panelName,
                expanded: !isExpanded,
                timestamp: new Date()
            });
        }
        
    }
    
    // –ù–æ–≤–∞—è –ø—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª—è–º–∏
    
    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
     */
    simpleTogglePanel(panelName, contentId, chevronId) {
        
        const content = document.getElementById(contentId);
        const chevron = document.getElementById(chevronId);
        
        if (!content || !chevron) {
            console.warn(`‚ö†Ô∏è UIManager: –≠–ª–µ–º–µ–Ω—Ç—ã –ø–∞–Ω–µ–ª–∏ "${panelName}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            return;
        }
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CSS –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        
        // –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ inline —Å—Ç–∏–ª–∏ display, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å CSS –∫–ª–∞—Å—Å–∞–º–∏
        if (content.style.display) {
            content.style.removeProperty('display');
        }
        
        // –ï–¥–∏–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ CSS –∫–ª–∞—Å—Å—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π
        const isCurrentlyHidden = content.classList.contains('hidden');
        
        if (isCurrentlyHidden) {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
            content.classList.remove('hidden');
            chevron.style.transform = 'rotate(0deg)';
            this.saveSimplePanelState(panelName, true);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ (–¥–ª—è –∫–∞—Ä—Ç—ã –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
            if (this.eventBus) {
                this.eventBus.emit(CONSTANTS.EVENTS.PANEL_TOGGLED, {
                    panelName,
                    expanded: true,
                    visible: true
                });
            }
        } else {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
            content.classList.add('hidden');
            chevron.style.transform = 'rotate(-90deg)';
            this.saveSimplePanelState(panelName, false);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏
            if (this.eventBus) {
                this.eventBus.emit(CONSTANTS.EVENTS.PANEL_TOGGLED, {
                    panelName,
                    expanded: false,
                    visible: false
                });
            }
        }
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CSS –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏
     */
    saveSimplePanelState(panelName, isExpanded) {
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) return;
        
        const stateKey = `simple_panel_${panelName}_${currentArea.id}`;
        localStorage.setItem(stateKey, isExpanded ? 'expanded' : 'collapsed');
    }
    
    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π
     */
    restorePanelStates(area) {
        this.debugLog('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –æ–±–ª–∞—Å—Ç–∏:', area?.id);
        
        if (!area || !area.id) {
            this.debugLog('‚ö†Ô∏è –ù–µ—Ç –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π');
            return;
        }
        
        // –í—Å–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–≤–∫–ª—é—á–∞—è addressTable)
        const panelMappings = [
            { name: 'statistics', content: 'statisticsPanelContent', chevron: 'statisticsPanelChevron' },
            { name: 'dataWork', content: 'dataWorkPanelContent', chevron: 'dataWorkPanelChevron' },
            { name: 'map', content: 'mapPanelContent', chevron: 'mapPanelChevron' },
            { name: 'segments', content: 'segmentsPanelContent', chevron: 'segmentsPanelChevron' },
            { name: 'reports', content: 'reportsPanelContent', chevron: 'reportsPanelChevron' },
            { name: 'duplicates', content: 'duplicatesPanelContent', chevron: 'duplicatesPanelChevron' },
            { name: 'addressTable', content: 'addressTableContent', chevron: 'addressTableChevron' }
        ];
        
        panelMappings.forEach(panel => {
            const stateKey = `simple_panel_${panel.name}_${area.id}`;
            const savedState = localStorage.getItem(stateKey);
            
            this.debugLog(`üîç –ü–∞–Ω–µ–ª—å ${panel.name}: ${savedState || '–Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è'}`);
            
            const content = document.getElementById(panel.content);
            const chevron = document.getElementById(panel.chevron);
            
            if (!content || !chevron) {
                this.debugLog(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –ø–∞–Ω–µ–ª–∏ ${panel.name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return;
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–∫—Ä—ã—Ç–æ) - –µ–¥–∏–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ CSS –∫–ª–∞—Å—Å—ã
            const isExpanded = savedState === 'expanded';
            
            if (isExpanded) {
                content.classList.remove('hidden');
                chevron.style.transform = 'rotate(0deg)';
                this.debugLog(`‚úÖ –ü–∞–Ω–µ–ª—å ${panel.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è`);
            } else {
                content.classList.add('hidden');
                chevron.style.transform = 'rotate(-90deg)';
                this.debugLog(`‚úÖ –ü–∞–Ω–µ–ª—å ${panel.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Å–≤–µ—Ä–Ω—É—Ç–∞—è`);
            }
        });
        
        this.debugLog('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }
    
    // –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    initializePanelsDefaults() {
        
        // –í—Å–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–≤–∫–ª—é—á–∞—è addressTable)
        const panelMappings = [
            { name: 'statistics', content: 'statisticsPanelContent', chevron: 'statisticsPanelChevron' },
            { name: 'dataWork', content: 'dataWorkPanelContent', chevron: 'dataWorkPanelChevron' },
            { name: 'map', content: 'mapPanelContent', chevron: 'mapPanelChevron' },
            { name: 'segments', content: 'segmentsPanelContent', chevron: 'segmentsPanelChevron' },
            { name: 'duplicates', content: 'duplicatesPanelContent', chevron: 'duplicatesPanelChevron' },
            { name: 'addressTable', content: 'addressTableContent', chevron: 'addressTableChevron' }
        ];
        
        panelMappings.forEach(panel => {
            const content = document.getElementById(panel.content);
            const chevron = document.getElementById(panel.chevron);
            
            if (!content || !chevron) {
                return;
            }
            
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –ø–∞–Ω–µ–ª–∏ —Å–∫—Ä—ã—Ç—ã - –µ–¥–∏–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ CSS –∫–ª–∞—Å—Å—ã
            content.classList.add('hidden');
            chevron.style.transform = 'rotate(-90deg)';
            
        });
        
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏
     */
    savePanelState(panelName) {
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) {
            console.warn(`‚ö†Ô∏è UIManager: –û–±–ª–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ "${panelName}"`);
            return;
        }
        
        const state = this.uiState.panels[panelName];
        const stateKey = `panel_${panelName}_${currentArea.id}`;
        
        localStorage.setItem(stateKey, JSON.stringify(state));
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –ø–∞–Ω–µ–ª–µ–π
     */
    initPanelToggles() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –ø–∞–Ω–µ–ª–µ–π
            Object.keys(this.panelConfig).forEach(panelName => {
                const config = this.panelConfig[panelName];
                if (config.checkbox) {
                    const checkbox = document.getElementById(config.checkbox);
                    if (checkbox) {
                        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                        checkbox.checked = this.uiState.panels[panelName]?.visible !== false;
                        
                        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        checkbox.addEventListener('change', (e) => {
                            this.togglePanelVisibility(panelName, e.target.checked);
                        });
                    }
                }
            });
            
            
        } catch (error) {
            console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –ø–∞–Ω–µ–ª–µ–π:', error);
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏
     */
    togglePanelVisibility(panelName, visible) {
        try {
            const config = this.panelConfig[panelName];
            if (!config) {
                console.warn(`‚ö†Ô∏è UIManager: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ "${panelName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return;
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.uiState.panels[panelName].visible = visible;
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–∞–Ω–µ–ª–∏
            const container = document.getElementById(config.container);
            if (container) {
                if (visible) {
                    container.classList.remove('hidden');
                } else {
                    container.classList.add('hidden');
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.savePanelState(panelName);
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            this.eventBus.emit(CONSTANTS.EVENTS.PANEL_TOGGLED, {
                panelName,
                visible,
                state: this.uiState.panels[panelName]
            });
            
            
        } catch (error) {
            console.error(`‚ùå UIManager: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ "${panelName}":`, error);
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    async openModal(modalName, options = {}) {
        const modal = document.getElementById(modalName);
        if (!modal) {
            console.error(`‚ùå UIManager: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "${modalName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            return;
        }
        
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ - –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –î–û –ø–æ–∫–∞–∑–∞
        if (modalName === 'objectModal' && options.objectData) {
            try {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ü–∏–∏ –¥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if (options.title) {
                    const titleElement = modal.querySelector('.modal-title, #modal-title');
                    if (titleElement) {
                        titleElement.textContent = options.title;
                    }
                }
                
                if (options.size) {
                    const content = modal.querySelector('.modal-content');
                    if (content) {
                        content.className = `modal-content ${options.size}`;
                    }
                }
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ü–ï–†–ï–î –ø–æ–∫–∞–∑–æ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                await this.populateObjectModal(modal, options.objectData);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞:', error);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (—É–±–∏—Ä–∞–µ–º hidden –∫–ª–∞—Å—Å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º flex)
        modal.classList.remove('hidden');
        modal.style.display = 'flex';
        modal.classList.add('modal-open');
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª body
        document.body.style.overflow = 'hidden';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.uiState.modals[modalName] = true;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        if (modalName !== 'objectModal') {
            if (options.title) {
                const titleElement = modal.querySelector('.modal-title, #modal-title');
                if (titleElement) {
                    titleElement.textContent = options.title;
                }
            }
            
            if (options.size) {
                const content = modal.querySelector('.modal-content');
                if (content) {
                    content.className = `modal-content ${options.size}`;
                }
            }
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if (modalName === 'listingModal' && options.listing) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            modal.dataset.listingId = options.listing.id;
            
            this.populateListingModal(modal, options.listing).catch(error => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            });
        }
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        const firstFocusable = modal.querySelector('input, textarea, select, button');
        if (firstFocusable) {
            setTimeout(() => firstFocusable.focus(), 100);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è objectModal)
        if (modalName === 'objectModal' && this._pendingMapInitialization) {
            setTimeout(() => {
                const { duplicatesManager, realEstateObject } = this._pendingMapInitialization;
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –æ–±—ä–µ–∫—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç –≤–∏–¥–∏–º–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
                if (duplicatesManager && duplicatesManager.renderObjectMap) {
                    duplicatesManager.renderObjectMap(realEstateObject);
                }
                
                // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                this._pendingMapInitialization = null;
            }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏
        this.eventBus.emit(CONSTANTS.EVENTS.MODAL_OPENED, {
            modalName,
            options,
            timestamp: new Date()
        });
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    closeModal(modalName) {
        const modal = document.getElementById(modalName);
        if (!modal) {
            console.error(`‚ùå UIManager: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "${modalName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            return;
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–¥–æ–±–∞–≤–ª—è–µ–º hidden –∫–ª–∞—Å—Å –∏ —É–±–∏—Ä–∞–µ–º flex)
        modal.classList.add('hidden');
        modal.style.display = 'none';
        modal.classList.remove('modal-open');
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª body
        document.body.style.overflow = '';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.uiState.modals[modalName] = false;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
        this.eventBus.emit(CONSTANTS.EVENTS.MODAL_CLOSED, {
            modalName,
            timestamp: new Date()
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    handleModalOpen(data) {
        try {
            
            switch (data.modalType) {
                case CONSTANTS.MODAL_TYPES.LISTING_DETAIL:
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                    this.openModal('listingModal', {
                        listing: data.listing,
                        title: `–î–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${data.listing.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`
                    });
                    break;
                case CONSTANTS.MODAL_TYPES.OBJECT_DETAIL:
                    this.openObjectDetailModal(data.object);
                    break;
                default:
                    console.warn('‚ö†Ô∏è UIManager: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', data.modalType);
            }
        } catch (error) {
            console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
        }
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    closeAllModals() {
        Object.keys(this.uiState.modals).forEach(modalName => {
            if (this.uiState.modals[modalName]) {
                this.closeModal(modalName);
            }
        });
    }
    
    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async populateListingModal(modal, listing) {
        try {
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const freshListing = await window.db.getListing(listing.id);
            const dataToUse = freshListing || listing;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
            if (!dataToUse.price_history || !Array.isArray(dataToUse.price_history) || dataToUse.price_history.length === 0) {
                // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                dataToUse.price_history = [{
                    date: dataToUse.created ? (dataToUse.created instanceof Date ? dataToUse.created.toISOString() : new Date(dataToUse.created).toISOString()) : new Date().toISOString(),
                    price: dataToUse.price || 0
                }];
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if (freshListing) {
                    await window.db.update('listings', dataToUse);
                }
            }
            
            const modalContent = modal.querySelector('#modalContent');
            if (!modalContent) {
                console.error('‚ùå UIManager: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä modalContent –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ)
            const listingHtml = this.generateListingDetailHtml(dataToUse);
            modalContent.innerHTML = listingHtml;
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ—É—Ç–µ—Ä–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            const footerManagement = modal.querySelector('#modalFooterManagement');
            if (footerManagement) {
                const managementHtml = this.generateManagementPanelHtml(dataToUse);
                footerManagement.innerHTML = managementHtml;
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
            const openBtn = modal.querySelector('#openListingBtn');
            if (openBtn) {
                openBtn.onclick = () => {
                    if (dataToUse.url) {
                        chrome.tabs.create({ url: dataToUse.url });
                    } else {
                        console.warn('‚ö†Ô∏è UIManager: URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                };
            }
            
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Fotorama –∏ –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            setTimeout(async () => {
                const debugEnabled = await this.isDebugEnabled();
                
                if (debugEnabled) {
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–∞–ª–µ—Ä–µ—é Fotorama
                const galleryElement = document.getElementById(`listing-gallery-${dataToUse.id}`);
                if (galleryElement && window.$ && $.fn.fotorama) {
                    $(galleryElement).fotorama();
                    if (debugEnabled) {
                    }
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ!)
                this.renderPriceChart(dataToUse);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                const locationHeader = document.getElementById(`locationPanelHeader-${dataToUse.id}`);
                if (locationHeader) {
                    locationHeader.addEventListener('click', async () => {
                        await this.toggleLocationPanel(dataToUse.id);
                    });
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–∞–º–∏
                await this.initializeAddressSelector(dataToUse.id, dataToUse.address_id);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
                const saveButton = document.getElementById(`saveAddress_${dataToUse.id}`);
                if (saveButton) {
                    saveButton.addEventListener('click', () => {
                        this.saveListingAddress(dataToUse.id);
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                const correctAddressModalButton = document.getElementById(`correctAddressModal_${dataToUse.id}`);
                if (correctAddressModalButton) {
                    correctAddressModalButton.addEventListener('click', () => {
                        // –õ–æ–≥–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –≤–µ—Ä–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                        this.markSingleAddressAsCorrect(dataToUse.id);
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                const incorrectAddressModalButton = document.getElementById(`incorrectAddressModal_${dataToUse.id}`);
                if (incorrectAddressModalButton) {
                    incorrectAddressModalButton.addEventListener('click', () => {
                        // –õ–æ–≥–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                        this.markSingleAddressAsIncorrect(dataToUse.id);
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                const priceHistoryHeader = document.getElementById(`priceHistoryPanelHeader-${dataToUse.id}`);
                if (priceHistoryHeader) {
                    priceHistoryHeader.addEventListener('click', () => {
                        this.togglePriceHistoryPanel(dataToUse.id);
                    });
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ!)
                await this.initializePriceHistoryTable(dataToUse.id, dataToUse);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
                const addPriceButton = document.getElementById(`addPriceEntry-${dataToUse.id}`);
                if (addPriceButton) {
                    addPriceButton.addEventListener('click', () => {
                        this.addPriceEntry(dataToUse.id);
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                const savePriceHistoryButton = document.getElementById(`savePriceHistory-${dataToUse.id}`);
                if (savePriceHistoryButton) {
                    savePriceHistoryButton.addEventListener('click', () => {
                        this.savePriceHistory(dataToUse.id);
                    });
                }
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
                this.initializePriceEditModal(dataToUse.id);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (SlimSelect –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞)
                await this.initializeManagementPanel(dataToUse.id);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–æ–º–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                this.initializeImageErrorHandling(modal);
                
                if (debugEnabled) {
                }
                
            }, 100);
            
        } catch (error) {
            console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
        }
    }
    
    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    async populateObjectModal(modal, objectData) {
        try {
            
            const { realEstateObject, objectListings, duplicatesManager } = objectData;
            
            const modalContent = modal.querySelector('#objectModalContent');
            if (!modalContent) {
                console.error('‚ùå UIManager: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä objectModalContent –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ–±—ä–µ–∫—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ DuplicatesManager)
            if (duplicatesManager && duplicatesManager.renderObjectDetails) {
                const objectHtml = duplicatesManager.renderObjectDetails(realEstateObject, objectListings);
                modalContent.innerHTML = objectHtml;
            } else {
                console.error('‚ùå UIManager: DuplicatesManager –∏–ª–∏ –º–µ—Ç–æ–¥ renderObjectDetails –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –≤–∏–¥–∏–º–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞ (–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞)
            if (duplicatesManager && duplicatesManager.renderObjectPriceChart) {
                duplicatesManager.renderObjectPriceChart(realEstateObject);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if (duplicatesManager && objectListings.length > 0) {
                if (duplicatesManager.loadObjectPhotosGallery) {
                    duplicatesManager.loadObjectPhotosGallery(objectListings[0]);
                }
                if (duplicatesManager.loadObjectDescription) {
                    duplicatesManager.loadObjectDescription(objectListings[0]);
                }
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
            if (duplicatesManager && duplicatesManager.initializeObjectPriceHistoryPanel) {
                duplicatesManager.initializeObjectPriceHistoryPanel(realEstateObject);
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
            if (duplicatesManager && duplicatesManager.initializeObjectListingsTable) {
                duplicatesManager.initializeObjectListingsTable(objectListings, realEstateObject.id);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
            this._pendingMapInitialization = {
                duplicatesManager,
                realEstateObject
            };
            
            
        } catch (error) {
            console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ñ—É—Ç–µ—Ä–∞)
     * @param {Object} listing - –û–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @returns {string} HTML –∫–æ–¥ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    generateManagementPanelHtml(listing) {
        return `
            <div class="flex items-center justify-between w-full">
                <!-- –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç—É—Å -->
                <div class="flex items-center space-x-4">
                    <!-- –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ -->
                    <button id="actualizeBtn-${listing.id}" 
                            class="px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600 focus:outline-none focus:ring-1 focus:ring-blue-500 transition-colors">
                        üîÑ –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    
                    <!-- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ -->
                    <div class="flex items-center">
                        <label class="text-sm font-medium text-gray-700 mr-2">–°—Ç–∞—Ç—É—Å:</label>
                        <select id="statusSelect-${listing.id}" class="form-select text-sm">
                            <option value="active" ${listing.status === 'active' ? 'selected' : ''}>–ê–∫—Ç–∏–≤–Ω–æ–µ</option>
                            <option value="archived" ${listing.status === 'archived' ? 'selected' : ''}>–ê—Ä—Ö–∏–≤</option>
                        </select>
                    </div>
                </div>

                <!-- –¶–µ–Ω—Ç—Ä: –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º -->
                <div class="flex items-center space-x-2">
                    <button type="button" id="openListingBtn" class="inline-flex items-center justify-center rounded-md border border-transparent shadow-sm px-4 py-1 bg-blue-600 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                        üîó –û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                    </button>
                    <button type="button" id="updateListingBtn-${listing.id}" class="inline-flex items-center justify-center rounded-md border border-transparent shadow-sm px-4 py-1 bg-green-600 text-sm font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors">
                        üîÑ –û–±–Ω–æ–≤–∏—Ç—å
                    </button>
                </div>
                
                <!-- –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ -->
                <div class="flex items-center space-x-3">
                    <!-- –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è -->
                    <div class="flex items-center">
                        <span class="text-xs text-gray-500">–û–±–Ω–æ–≤–ª–µ–Ω–æ:</span>
                        <span id="lastUpdated-${listing.id}" class="ml-1 text-xs text-gray-700">
                            ${listing.updated ? new Date(listing.updated).toLocaleDateString('ru-RU', {
                                day: '2-digit',
                                month: '2-digit',
                                hour: '2-digit',
                                minute: '2-digit'
                            }) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                        </span>
                    </div>
                    
                    <!-- –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è -->
                    <button id="deleteBtn-${listing.id}" 
                            class="px-3 py-1 bg-red-500 text-white text-sm rounded hover:bg-red-600 focus:outline-none focus:ring-1 focus:ring-red-500 transition-colors">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    generateListingDetailHtml(listing) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        const updateInfo = this.lastUpdatedListing;
        const shouldHighlight = updateInfo && 
                               updateInfo.listing.id === listing.id && 
                               (new Date() - updateInfo.updatedAt) < 30000; // –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º 30 —Å–µ–∫—É–Ω–¥
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        const photos = this.getListingPhotos(listing);
        
        //     photos: listing.photos,
        //     images: listing.images,
        //     photo_urls: listing.photo_urls,
        //     main_photo: listing.main_photo,
        //     photo: listing.photo,
        //     image_url: listing.image_url
        // });
        
        return `
            <!-- –ö–∞—Ä—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è -->
            <div class="mb-6">
                <div class="bg-white shadow overflow-hidden sm:rounded-md border border-gray-200">
                    <div class="px-4 py-3 cursor-pointer" id="locationPanelHeader-${listing.id}">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-3">
                                <span class="text-lg font-medium text-gray-900">üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</span>
                                <span class="text-sm ${this.getAddressStatusClass(listing)}">${this.getAddressStatusText(listing)}</span>
                            </div>
                            <svg id="locationPanelChevron-${listing.id}" class="h-5 w-5 text-gray-400 transform transition-transform duration-200" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                    <div id="locationPanelContent-${listing.id}" class="px-4 pb-4" style="display: none;">
                        ${this.renderAddressAccuracyInfo(listing)}
                        <div id="listing-map-${listing.id}" class="h-64 bg-gray-200 rounded-md mt-3">
                            <!-- –ö–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞ –∑–¥–µ—Å—å -->
                        </div>
                    </div>
                </div>
            </div>

             <!-- –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã -->
            <div class="mb-6">
                <h4 class="text-lg font-medium text-gray-900 mb-4">–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã</h4>
                <div id="listing-price-chart-${listing.id}" class="w-full">
                    <!-- –ì—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω –∑–¥–µ—Å—å -->
                </div>
            </div>
            
            <!-- –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã -->
            <div class="mb-6">
                <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                    <div id="priceHistoryPanelHeader-${listing.id}" class="px-4 py-3 border-b border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors duration-150">
                        <div class="flex items-center justify-between">
                            <h4 class="text-lg font-medium text-gray-900">–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã</h4>
                            <svg id="priceHistoryPanelChevron-${listing.id}" class="h-5 w-5 text-gray-400 transform transition-transform duration-200 rotate-[-90deg]" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                    <div id="priceHistoryPanelContent-${listing.id}" class="px-4 pb-4" style="display: none;">
                        <div class="mt-4 mb-4 flex items-center justify-between">
                            <button id="addPriceEntry-${listing.id}" class="px-4 py-2 bg-green-500 text-white text-sm rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500">
                                –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                            </button>
                            <button id="savePriceHistory-${listing.id}" class="px-4 py-2 bg-blue-500 text-white text-sm rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                            </button>
                        </div>
                        <div class="overflow-x-auto">
                            <table id="priceHistoryTable-${listing.id}" class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–î–∞—Ç–∞</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–¶–µ–Ω–∞</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–î–µ–π—Å—Ç–≤–∏—è</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    <!-- –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ DataTable -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è -->
            <div class="mb-6">
                <h4 class="text-lg font-medium text-gray-900 mb-4">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ${photos.length > 0 ? `(${photos.length})` : '(–Ω–µ –Ω–∞–π–¥–µ–Ω—ã)'}</h4>
                ${photos.length > 0 ? `
                    <div class="fotorama" 
                         data-nav="thumbs" 
                         data-width="100%" 
                         data-height="400"
                         data-thumbheight="50"
                         data-thumbwidth="50"
                         data-allowfullscreen="true"
                         data-transition="slide"
                         data-loop="true"
                         id="listing-gallery-${listing.id}">
                        ${photos.map(photo => `<img src="${photo}" alt="–§–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" class="listing-photo">`).join('')}
                    </div>
                ` : `
                    <div class="bg-gray-100 rounded-lg p-8 text-center text-gray-500">
                        üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    </div>
                `}
            </div>
            
            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã -->
            <div id="editPriceModal-${listing.id}" class="hidden fixed inset-0 z-50 overflow-y-auto" aria-labelledby="edit-price-modal-title" role="dialog" aria-modal="true">
                <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-4 text-center sm:block sm:p-0">
                    <!-- Overlay -->
                    <div class="fixed inset-0 z-0 transition-opacity" style="background-color: rgba(0, 0, 0, 0.1);" aria-hidden="true"></div>
                    
                    <!-- –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ -->
                    <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
                    
                    <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ -->
                    <div class="inline-block align-bottom bg-white border rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-md relative z-10">
                        <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                            <div class="sm:flex sm:items-start">
                                <div class="w-full">
                                    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
                                    <div class="mb-4">
                                        <h3 class="text-lg font-medium leading-6 text-gray-900" id="editPriceModalTitle-${listing.id}">
                                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É
                                        </h3>
                                    </div>
                                    
                                    <!-- –§–æ—Ä–º–∞ -->
                                    <form id="editPriceForm-${listing.id}">
                                        <div class="mb-4">
                                            <label for="priceInput-${listing.id}" class="block text-sm font-medium text-gray-700 mb-2">
                                                –¶–µ–Ω–∞ (‚ÇΩ)
                                            </label>
                                            <input type="text" id="priceInput-${listing.id}" 
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                   placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É">
                                        </div>
                                        <div class="mb-6">
                                            <label for="dateInput-${listing.id}" class="block text-sm font-medium text-gray-700 mb-2">
                                                –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                            </label>
                                            <input type="datetime-local" id="dateInput-${listing.id}" 
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                        <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                            <button type="submit" form="editPriceForm-${listing.id}" id="saveEditPrice-${listing.id}" 
                                    class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm">
                                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </button>
                            <button type="button" id="cancelEditPrice-${listing.id}" 
                                    class="w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                                –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    </div>
                    </div>
                </div>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div>
                    <h4 class="text-lg font-medium text-gray-900 mb-4">
                        –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        ${shouldHighlight ? `<span class="ml-2 text-xs px-2 py-1 bg-green-100 text-green-800 rounded-full animate-pulse">–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateInfo.archived ? '(–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ)' : ''}</span>` : ''}
                    </h4>
                    <dl class="space-y-3">
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ó–∞–≥–æ–ª–æ–≤–æ–∫</dt>
                            <dd class="text-sm text-gray-900">${this.escapeHtml(listing.title || '-')}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ê–¥—Ä–µ—Å</dt>
                            <dd class="text-sm text-gray-900">${this.escapeHtml(listing.address || '-')}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–¶–µ–Ω–∞</dt>
                            <dd class="text-sm text-gray-900 ${shouldHighlight && updateInfo.priceChanged ? 'bg-yellow-200 px-2 py-1 rounded transition-colors duration-3000' : ''}">${this.formatPrice(listing.price)}${shouldHighlight && updateInfo.priceChanged ? ` <span class="text-xs text-green-600">(–æ–±–Ω–æ–≤–ª–µ–Ω–æ)</span>` : ''}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–¶–µ–Ω–∞ –∑–∞ –º¬≤</dt>
                            <dd class="text-sm text-gray-900">${listing.price_per_meter ? this.formatPrice(listing.price_per_meter) + '/–º¬≤' : '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ò—Å—Ç–æ—á–Ω–∏–∫</dt>
                            <dd class="text-sm text-gray-900">${listing.source}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–°—Ç–∞—Ç—É—Å</dt>
                            <dd class="text-sm text-gray-900">${this.getStatusText(listing.status)}</dd>
                        </div>
                    </dl>
                </div>

                <!-- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ -->
                <div>
                    <h4 class="text-lg font-medium text-gray-900 mb-4">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h4>
                    <dl class="space-y-3">
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</dt>
                            <dd class="text-sm text-gray-900">${this.formatPropertyType(listing.property_type)}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å</dt>
                            <dd class="text-sm text-gray-900">${listing.area_total ? listing.area_total + ' –º¬≤' : '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å</dt>
                            <dd class="text-sm text-gray-900">${listing.area_living ? listing.area_living + ' –º¬≤' : '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏</dt>
                            <dd class="text-sm text-gray-900">${listing.area_kitchen ? listing.area_kitchen + ' –º¬≤' : '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–≠—Ç–∞–∂</dt>
                            <dd class="text-sm text-gray-900">${listing.floor ? `${listing.floor}${listing.total_floors || listing.floors_total ? ` –∏–∑ ${listing.total_floors || listing.floors_total}` : ''}` : '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç</dt>
                            <dd class="text-sm text-gray-900">${listing.rooms || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–°–æ—Å—Ç–æ—è–Ω–∏–µ</dt>
                            <dd class="text-sm text-gray-900">${listing.condition || '-'}</dd>
                        </div>
                    </dl>
                </div>

                <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div class="lg:col-span-2">
                    <h4 class="text-lg font-medium text-gray-900 mb-4">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                    <dl class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</dt>
                            <dd class="text-sm text-gray-900">${this.formatDate(listing.created)}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">External ID</dt>
                            <dd class="text-sm text-gray-900">${listing.external_id || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</dt>
                            <dd class="text-sm text-gray-900 ${shouldHighlight ? 'bg-yellow-200 px-2 py-1 rounded transition-colors duration-3000' : ''}">${this.formatDate(listing.updated)}${shouldHighlight ? ` <span class="text-xs text-green-600">(–æ–±–Ω–æ–≤–ª–µ–Ω–æ)</span>` : ''}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">–ü—Ä–æ–¥–∞–≤–µ—Ü</dt>
                            <dd class="text-sm text-gray-900">${listing.seller_name || '-'}</dd>
                        </div>
                    </dl>

                    ${listing.description ? `
                        <div class="mt-6">
                            <dt class="text-sm font-medium text-gray-500 mb-2">–û–ø–∏—Å–∞–Ω–∏–µ</dt>
                            <dd class="text-sm text-gray-900 bg-gray-50 p-3 rounded-md">${this.escapeHtml(listing.description)}</dd>
                        </div>
                    ` : ''}
                </div>
            </div>
        `;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π
     */
    getListingPhotos(listing) {
        const photos = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        if (listing.photos && Array.isArray(listing.photos)) {
            photos.push(...listing.photos);
        } else if (listing.images && Array.isArray(listing.images)) {
            photos.push(...listing.images);
        } else if (listing.photo_urls && Array.isArray(listing.photo_urls)) {
            photos.push(...listing.photo_urls);
        } else if (listing.main_photo) {
            photos.push(listing.main_photo);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Å –æ–¥–∏–Ω–æ—á–Ω—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        if (listing.photo && !photos.includes(listing.photo)) {
            photos.push(listing.photo);
        }
        
        if (listing.image_url && !photos.includes(listing.image_url)) {
            photos.push(listing.image_url);
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ URL
        return photos.filter(photo => 
            photo && 
            typeof photo === 'string' && 
            (photo.startsWith('http://') || photo.startsWith('https://'))
        );
    }
    
    /**
     * –ú–µ—Ç–æ–¥—ã –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    
    renderPriceChart(listing) {
        try {
            const chartContainer = document.getElementById(`listing-price-chart-${listing.id}`);
            if (!chartContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            const priceHistory = this.preparePriceHistoryData(listing);
            
            if (priceHistory.length === 0) {
                chartContainer.innerHTML = '<div class="text-center text-gray-500 py-8">–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</div>';
                return;
            }

            const seriesData = priceHistory.map(item => [item.date, item.price]);
            const prices = priceHistory.map(item => item.price);
            const minPrice = Math.min(...prices);
            const maxPrice = Math.max(...prices);

            let series = [{
                "name": "<span class=\"text-sky-500\">—Ü–µ–Ω–∞</span>",
                "data": seriesData
            }];
            let colors = ["#56c2d6"];
            let widths = ["3"];

            var options = {
                chart: {
                    height: 300,
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": [
                                "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                                "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
                            ],
                            "shortMonths": [
                                "–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω",
                                "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"
                            ],
                            "days": [
                                "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", 
                                "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"
                            ],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    type: 'line',
                    shadow: {
                        enabled: false,
                        color: 'rgba(187,187,187,0.47)',
                        top: 3,
                        left: 2,
                        blur: 3,
                        opacity: 1
                    },
                    toolbar: {
                        show: false
                    }
                },
                stroke: {
                    curve: 'stepline',
                    width: widths
                },
                series: series,
                colors: colors,
                xaxis: {
                    type: 'datetime',
                    labels: {
                        format: 'dd MMM'
                    }
                },
                markers: {
                    size: 4,
                    opacity: 0.9,
                    colors: ["#56c2d6"],
                    strokeColor: "#fff",
                    strokeWidth: 2,
                    style: 'inverted',
                    hover: {
                        size: 8
                    }
                },
                tooltip: {
                    shared: false,
                    intersect: true,
                    x: {
                        format: 'dd MMM yyyy'
                    },
                    y: {
                        formatter: (value) => this.formatPrice(value)
                    }
                },
                yaxis: {
                    min: Math.floor(minPrice * 0.95),
                    max: Math.ceil(maxPrice * 1.05),
                    title: {
                        text: '–¶–µ–Ω–∞, ‚ÇΩ'
                    },
                    labels: {
                        formatter: (value) => this.formatPrice(value)
                    }
                },
                grid: {
                    show: true,
                    position: 'back',
                    xaxis: {
                        lines: {
                            show: true,
                        }
                    },
                    yaxis: {
                        lines: {
                            show: true,
                        }
                    },
                    borderColor: '#eeeeee',
                },
                legend: {
                    show: false
                },
                responsive: [{
                    breakpoint: 600,
                    options: {
                        chart: {
                            toolbar: {
                                show: false
                            }
                        }
                    }
                }]
            };

            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chartContainer.innerHTML = '';
            const chart = new ApexCharts(chartContainer, options);
            chart.render();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã:', error);
            const chartContainer = document.getElementById(`listing-price-chart-${listing.id}`);
            if (chartContainer) {
                chartContainer.innerHTML = '<div class="text-center text-red-500 py-8">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞</div>';
            }
        }
    }
    
    preparePriceHistoryData(listing) {
        const history = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if (listing.price_history && Array.isArray(listing.price_history)) {
            listing.price_history.forEach(item => {
                if ((item.new_price || item.price) && item.date) {
                    history.push({
                        date: new Date(item.date).getTime(),
                        price: parseInt(item.new_price || item.price)
                    });
                }
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∞—Ç–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if (listing.price) {
            let endPriceDate;
            
            if (listing.status === 'active') {
                // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                endPriceDate = new Date();
            } else {
                // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π - –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                endPriceDate = new Date(listing.updated || listing.created || Date.now());
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
            const lastHistoryDate = history.length > 0 ? history[history.length - 1].date : 0;
            if (Math.abs(endPriceDate.getTime() - lastHistoryDate) > 24 * 60 * 60 * 1000) {
                history.push({
                    date: endPriceDate.getTime(),
                    price: parseInt(listing.price)
                });
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        history.sort((a, b) => a.date - b.date);
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ü–µ–Ω –ø–æ–¥—Ä—è–¥, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏
        const filtered = [];
        for (let i = 0; i < history.length; i++) {
            if (i === 0 || i === history.length - 1 || history[i].price !== history[i-1].price) {
                filtered.push(history[i]);
            }
        }

        return filtered;
    }
    
    async toggleLocationPanel(listingId) {
        const content = document.getElementById(`locationPanelContent-${listingId}`);
        const chevron = document.getElementById(`locationPanelChevron-${listingId}`);
        
        if (!content) return;
        
        const isHidden = content.style.display === 'none';
        content.style.display = isHidden ? 'block' : 'none';
        
        if (chevron) {
            chevron.style.transform = isHidden ? 'rotate(0deg)' : 'rotate(-90deg)';
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
        if (isHidden) {
            setTimeout(() => {
                this.initializeListingMap(listingId);
            }, 100);
        }
    }
    
    togglePriceHistoryPanel(listingId) {
        const content = document.getElementById(`priceHistoryPanelContent-${listingId}`);
        const chevron = document.getElementById(`priceHistoryPanelChevron-${listingId}`);
        
        if (!content) return;
        
        const isHidden = content.style.display === 'none';
        content.style.display = isHidden ? 'block' : 'none';
        
        if (chevron) {
            if (isHidden) {
                chevron.classList.remove('rotate-[-90deg]');
                chevron.classList.add('rotate-0');
            } else {
                chevron.classList.remove('rotate-0');
                chevron.classList.add('rotate-[-90deg]');
            }
        }
    }
    
    async initializePriceHistoryTable(listingId, listing) {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            const tableElement = document.getElementById(`priceHistoryTable-${listingId}`);
            if (!tableElement) return;

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            const tableData = this.preparePriceHistoryTableData(listing);
            
            if (debugEnabled) {
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataTable —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ jQuery –∏ DataTable –¥–æ—Å—Ç—É–ø–Ω—ã
            if (window.$ && window.$.fn.DataTable) {
                const dataTable = $(tableElement).DataTable({
                    data: tableData,
                    language: {
                        url: '../libs/datatables/ru.json'
                    },
                    pageLength: 10,
                    searching: false,
                    ordering: true,
                    order: [[0, 'asc']], // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
                    columnDefs: [
                        {
                            targets: 2, // –ö–æ–ª–æ–Ω–∫–∞ "–î–µ–π—Å—Ç–≤–∏—è"
                            orderable: false,
                            searchable: false,
                            className: 'text-center',
                            width: '120px'
                        }
                    ],
                    columns: [
                        {
                            title: '–î–∞—Ç–∞',
                            data: 'date',
                            render: function (data, type, row) {
                                if (type === 'display') {
                                    const date = new Date(data);
                                    return date.toLocaleDateString('ru-RU') + ' ' + date.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
                                } else if (type === 'sort' || type === 'type') {
                                    return new Date(data).getTime();
                                }
                                return data;
                            }
                        },
                        {
                            title: '–¶–µ–Ω–∞',
                            data: 'price',
                            render: function (data, type, row) {
                                if (type === 'display') {
                                    return new Intl.NumberFormat('ru-RU').format(data) + ' ‚ÇΩ';
                                }
                                return data;
                            }
                        },
                        {
                            title: '–î–µ–π—Å—Ç–≤–∏—è',
                            data: null,
                            render: function (data, type, row) {
                                return `
                                    <div class="flex space-x-2 justify-center">
                                        <button class="edit-price-btn text-blue-600 hover:text-blue-800 text-sm" data-listing-id="${listingId}" data-index="${row.index}">
                                            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                        </button>
                                        <button class="delete-price-btn text-red-600 hover:text-red-800 text-sm" data-listing-id="${listingId}" data-index="${row.index}">
                                            –£–¥–∞–ª–∏—Ç—å
                                        </button>
                                    </div>
                                `;
                            }
                        }
                    ]
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ DataTable
                this[`priceHistoryTable_${listingId}`] = dataTable;

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                $(tableElement).on('click', '.edit-price-btn', (e) => {
                    const index = $(e.target).data('index');
                    this.editPriceEntry(listingId, index);
                });

                $(tableElement).on('click', '.delete-price-btn', (e) => {
                    const index = $(e.target).data('index');
                    this.deletePriceEntry(listingId, index);
                });
            } else {
                tableElement.innerHTML = '<div class="text-center text-gray-500 py-8">DataTable –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</div>';
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
        }
    }
    
    addPriceEntry(listingId) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        const modal = document.getElementById(`editPriceModal-${listingId}`);
        const form = document.getElementById(`editPriceForm-${listingId}`);
        const priceInput = document.getElementById(`priceInput-${listingId}`);
        const dateInput = document.getElementById(`dateInput-${listingId}`);
        
        if (modal && form && priceInput && dateInput) {
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            form.reset();
            priceInput.value = '';
            dateInput.value = new Date().toISOString().split('T')[0]; // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
            
            // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏)
            delete modal.dataset.editingIndex;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modal.classList.remove('hidden');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ —Ü–µ–Ω—ã
            setTimeout(() => priceInput.focus(), 100);
        }
    }
    
    async savePriceHistory(listingId) {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            if (debugEnabled) {
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const listing = await window.db.getListing(listingId);
            if (!listing) {
                console.error('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                return;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            let latestPrice = listing.price; // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if (listing.price_history && Array.isArray(listing.price_history) && listing.price_history.length > 0) {
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
                const sortedHistory = [...listing.price_history].sort((a, b) => new Date(b.date) - new Date(a.date));
                const latestHistoryItem = sortedHistory[0];
                const historyPrice = latestHistoryItem.new_price || latestHistoryItem.price;
                
                if (historyPrice) {
                    latestPrice = parseInt(historyPrice);
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            const oldPrice = listing.price;
            if (latestPrice !== oldPrice) {
                listing.price = latestPrice;
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                if (listing.price_history && listing.price_history.length > 0) {
                    const sortedHistory = [...listing.price_history].sort((a, b) => new Date(b.date) - new Date(a.date));
                    const latestHistoryDate = new Date(sortedHistory[0].date);
                    const currentUpdated = listing.updated ? new Date(listing.updated) : null;
                    
                    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã –∏ –±–µ—Ä–µ–º –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω—é—é
                    if (!currentUpdated || latestHistoryDate > currentUpdated) {
                        listing.updated = latestHistoryDate.toISOString(); // –î–∞—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                    }
                    // –ï—Å–ª–∏ currentUpdated –ø–æ–∑–∂–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                } else {
                    // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –Ω–æ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π)
                    listing.updated = new Date().toISOString(); // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∫–∞–∫ fallback
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await window.db.updateListing(listing);
                
                if (debugEnabled) {
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            await this.refreshPriceHistoryTable(listingId, listing);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
            this.renderPriceChart(listing);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –æ–±—ä–µ–∫—Ç–æ–º
            if (listing.object_id && window.realEstateObjectManager) {
                await window.realEstateObjectManager.updateObjectOnListingChange(listingId, listing, listing);
                if (debugEnabled) {
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
            if (this.eventBus) {
                this.eventBus.emit('refreshDuplicatesTable');
                if (debugEnabled) {
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification({
                type: 'success',
                message: '–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞' + (latestPrice !== oldPrice ? `, —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ ${latestPrice.toLocaleString('ru-RU')} ‚ÇΩ` : ''),
                duration: 4000
            });
            
            if (debugEnabled) {
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
            this.showNotification({
                type: 'error',
                message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω',
                duration: 3000
            });
        }
    }
    
    async initializeListingMap(listingId) {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            const mapContainer = document.getElementById(`listing-map-${listingId}`);
            if (!mapContainer) return;
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            let listing = await window.db.getListing(listingId);
            if (!listing) {
                if (debugEnabled) {
                }
                mapContainer.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
                return;
            }
            
            this.renderListingMap(listing);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setLoading(type, isLoading) {
        this.uiState.loading[type] = isLoading;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
        this.updateLoadingIndicators();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.eventBus.emit(CONSTANTS.EVENTS.LOADING_STATE_CHANGED, {
            type,
            isLoading,
            timestamp: new Date()
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    updateLoadingIndicators() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const globalLoader = document.getElementById('globalLoader');
        if (globalLoader) {
            globalLoader.style.display = this.uiState.loading.global ? 'block' : 'none';
        }
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        const loadingTypes = ['addresses', 'segments', 'duplicates', 'parsing'];
        
        loadingTypes.forEach(type => {
            const indicator = document.getElementById(`${type}LoadingIndicator`);
            if (indicator) {
                indicator.style.display = this.uiState.loading[type] ? 'inline-block' : 'none';
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        this.updateButtonStates();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
     */
    updateButtonStates() {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
        const buttons = document.querySelectorAll('[data-loading-disable]');
        buttons.forEach(button => {
            const loadingType = button.getAttribute('data-loading-disable');
            button.disabled = this.uiState.loading[loadingType] || this.uiState.loading.global;
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(notification) {
        const { type = 'info', message, duration = 5000, actions = [] } = notification;
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notificationElement = this.createNotificationElement(type, message, actions);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const container = this.getNotificationContainer();
        container.appendChild(notificationElement);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const notificationData = {
            id: Date.now() + Math.random(),
            type,
            message,
            duration,
            actions,
            element: notificationElement,
            timestamp: new Date()
        };
        
        this.uiState.notifications.push(notificationData);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        if (duration > 0) {
            setTimeout(() => {
                this.hideNotification(notificationData.id);
            }, duration);
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–∫–∞–∑–µ
        this.eventBus.emit(CONSTANTS.EVENTS.NOTIFICATION_SHOWN, notificationData);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    createNotificationElement(type, message, actions) {
        const typeClasses = {
            success: 'bg-green-100 border-green-500 text-green-700',
            error: 'bg-red-100 border-red-500 text-red-700',
            warning: 'bg-yellow-100 border-yellow-500 text-yellow-700',
            info: 'bg-blue-100 border-blue-500 text-blue-700'
        };
        
        const typeIcons = {
            success: '‚úì',
            error: '‚úó',
            warning: '‚ö†',
            info: '‚Ñπ'
        };
        
        const element = document.createElement('div');
        element.className = `notification border-l-4 p-4 mb-3 rounded ${typeClasses[type] || typeClasses.info}`;
        
        let actionsHTML = '';
        if (actions.length > 0) {
            actionsHTML = `
                <div class="flex mt-2 space-x-2">
                    ${actions.map((action, index) => `
                        <button class="text-sm font-medium underline hover:no-underline" 
                                data-action-index="${index}">${action.text}</button>
                    `).join('')}
                </div>
            `;
        }
        
        element.innerHTML = `
            <div class="flex">
                <div class="flex-shrink-0">
                    <span class="text-lg font-bold">${typeIcons[type] || typeIcons.info}</span>
                </div>
                <div class="ml-3 flex-1">
                    <p class="text-sm font-medium">${message}</p>
                    ${actionsHTML}
                </div>
                <div class="flex-shrink-0 ml-4">
                    <button class="close-notification text-lg font-bold hover:opacity-75">
                        √ó
                    </button>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ addEventListener –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è CSP
        const closeBtn = element.querySelector('.close-notification');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                element.remove();
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        if (actions.length > 0) {
            const actionButtons = element.querySelectorAll('[data-action-index]');
            actionButtons.forEach((button, index) => {
                if (actions[index] && actions[index].handler) {
                    const handler = actions[index].handler;
                    if (typeof handler === 'function') {
                        button.addEventListener('click', handler);
                    } else {
                        console.warn('UIManager: handler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π, –ø–æ–ª—É—á–µ–Ω:', typeof handler, '–¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:', actions[index]);
                    }
                }
            });
        }
        
        return element;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    getNotificationContainer() {
        let container = document.getElementById('notificationContainer');
        
        if (!container) {
            container = document.createElement('div');
            container.id = 'notificationContainer';
            container.className = 'fixed top-4 right-4 z-50 max-w-md';
            document.body.appendChild(container);
        }
        
        return container;
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    hideNotification(notificationId) {
        const notification = this.uiState.notifications.find(n => n.id === notificationId);
        if (!notification) return;
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
        if (notification.element && notification.element.parentNode) {
            notification.element.parentNode.removeChild(notification.element);
        }
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.uiState.notifications = this.uiState.notifications.filter(n => n.id !== notificationId);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–∫—Ä—ã—Ç–∏–∏
        this.eventBus.emit(CONSTANTS.EVENTS.NOTIFICATION_HIDDEN, {
            notificationId,
            timestamp: new Date()
        });
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    clearAllNotifications() {
        this.uiState.notifications.forEach(notification => {
            if (notification.element && notification.element.parentNode) {
                notification.element.parentNode.removeChild(notification.element);
            }
        });
        
        this.uiState.notifications = [];
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    initializeUIElements() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.initializeSlimSelects();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è tooltips
        this.initializeTooltips();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.initializeSortables();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect
     */
    initializeSlimSelects() {
        const slimSelects = document.querySelectorAll('.slim-select');
        slimSelects.forEach(select => {
            if (!select.slimSelect) {
                try {
                    select.slimSelect = new SlimSelect({
                        select: select,
                        settings: {
                            searchPlaceholder: '–ü–æ–∏—Å–∫...',
                            searchText: '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
                            searchHighlight: true,
                            closeOnSelect: select.multiple ? false : true
                        }
                    });
                } catch (error) {
                    console.error('Error initializing SlimSelect:', error);
                }
            }
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è tooltips
     */
    initializeTooltips() {
        const tooltips = document.querySelectorAll('[data-tooltip]');
        tooltips.forEach(element => {
            if (!element.tooltip) {
                element.tooltip = new Tooltip(element, {
                    title: element.getAttribute('data-tooltip'),
                    placement: element.getAttribute('data-tooltip-placement') || 'top'
                });
            }
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    initializeSortables() {
        const sortables = document.querySelectorAll('.sortable');
        sortables.forEach(element => {
            if (!element.sortable) {
                try {
                    element.sortable = new Sortable(element, {
                        animation: 150,
                        ghostClass: 'sortable-ghost',
                        chosenClass: 'sortable-chosen',
                        dragClass: 'sortable-drag',
                        onEnd: (evt) => {
                            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
                            this.eventBus.emit(CONSTANTS.EVENTS.SORTABLE_CHANGED, {
                                element: element,
                                oldIndex: evt.oldIndex,
                                newIndex: evt.newIndex,
                                timestamp: new Date()
                            });
                        }
                    });
                } catch (error) {
                    console.error('Error initializing Sortable:', error);
                }
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    onWindowResize() {
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
        if (window.DataTable && window.$) {
            const tables = document.querySelectorAll('.dataTable');
            tables.forEach(table => {
                try {
                    const $table = window.$(table);
                    if ($table.length && $table.DataTable) {
                        const dt = $table.DataTable();
                        if (dt) {
                            dt.columns.adjust();
                        }
                    }
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                }
            });
        }
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
        if (window.ApexCharts) {
            const charts = document.querySelectorAll('.apexcharts-canvas');
            charts.forEach(chart => {
                const chartInstance = chart._chartInstance;
                if (chartInstance) {
                    chartInstance.resize();
                }
            });
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        this.eventBus.emit(CONSTANTS.EVENTS.WINDOW_RESIZED, {
            width: window.innerWidth,
            height: window.innerHeight,
            timestamp: new Date()
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
     */
    handleGlobalError(error) {
        console.error('Global error:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        this.showNotification({
            type: 'error',
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
            duration: 10000,
            actions: [
                {
                    text: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å',
                    handler: 'location.reload()'
                }
            ]
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–µ
        this.eventBus.emit(CONSTANTS.EVENTS.GLOBAL_ERROR, {
            error,
            timestamp: new Date()
        });
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    setTheme(theme) {
        const validThemes = ['light', 'dark', 'auto'];
        if (!validThemes.includes(theme)) {
            theme = 'light';
        }
        
        document.documentElement.setAttribute('data-theme', theme);
        localStorage.setItem('ui-theme', theme);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã
        this.eventBus.emit(CONSTANTS.EVENTS.THEME_CHANGED, {
            theme,
            timestamp: new Date()
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
     */
    getTheme() {
        return document.documentElement.getAttribute('data-theme') || 'light';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    updateProgress(operation, percentage, message = '') {
        const progressBar = document.getElementById(`${operation}ProgressBar`);
        const progressMessage = document.getElementById(`${operation}ProgressMessage`);
        
        if (progressBar) {
            progressBar.style.width = `${percentage}%`;
            progressBar.setAttribute('aria-valuenow', percentage);
        }
        
        if (progressMessage) {
            progressMessage.textContent = message;
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.eventBus.emit(CONSTANTS.EVENTS.PROGRESS_UPDATED, {
            operation,
            percentage,
            message,
            timestamp: new Date()
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —É—Å–ª–æ–≤–∏—é
     */
    toggleElementsByCondition(selector, condition) {
        const elements = document.querySelectorAll(selector);
        elements.forEach(element => {
            element.style.display = condition ? 'block' : 'none';
        });
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    toggleElementsState(selector, enabled) {
        const elements = document.querySelectorAll(selector);
        elements.forEach(element => {
            element.disabled = !enabled;
            if (enabled) {
                element.classList.remove('opacity-50', 'cursor-not-allowed');
            } else {
                element.classList.add('opacity-50', 'cursor-not-allowed');
            }
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
     */
    getUIState() {
        return {
            panels: { ...this.uiState.panels },
            modals: { ...this.uiState.modals },
            loading: { ...this.uiState.loading },
            notifications: this.uiState.notifications.length,
            theme: this.getTheme()
        };
    }
    
    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
     */
    resetUIState() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.closeAllModals();
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.clearAllNotifications();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        Object.keys(this.uiState.loading).forEach(key => {
            this.uiState.loading[key] = false;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateLoadingIndicators();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–±—Ä–æ—Å–µ
        this.eventBus.emit(CONSTANTS.EVENTS.UI_STATE_RESET, {
            timestamp: new Date()
        });
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
     */
    saveUIState() {
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) return;
        
        const stateToSave = {
            panels: this.uiState.panels,
            theme: this.getTheme()
        };
        
        localStorage.setItem(`ui-state_${currentArea.id}`, JSON.stringify(stateToSave));
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
     */
    restoreUIState() {
        const currentArea = this.dataState.getState('currentArea');
        
        if (!currentArea) {
            console.warn('‚ö†Ô∏è UIManager: –û–±–ª–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ dataState –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è UI');
            return null;
        }
        
        const stateKey = `ui-state_${currentArea.id}`;
        const savedState = localStorage.getItem(stateKey);
        
        if (savedState) {
            try {
                const state = JSON.parse(savedState);
                
                // –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É
                if (state.theme) {
                    this.setTheme(state.theme);
                }
                
                return state;
                
            } catch (error) {
                console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI:', error);
                return null;
            }
        } else {
            return null;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ DataState)
     */

    async getListingsInArea(area) {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ DataState (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç –∫–∞—Ä—Ç–∞)
            const filteredListings = this.dataState.getState('listings') || [];
            
            if (debugEnabled) {
            }
            
            return filteredListings;
            
        } catch (error) {
            console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ DataState:', error);
            return [];
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async updateSourcesChart() {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            if (!this.dataState.currentArea) {
                if (debugEnabled) {
                }
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –∏ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
            const currentArea = this.dataState.currentArea;
            
            if (debugEnabled) {
            }
            
            const listings = await this.getListingsInArea(currentArea);
            
            if (debugEnabled) {
                if (listings.length > 0) {
                }
            }
            
            if (listings.length === 0) {
                this.renderSourcesChart([], []);
                this.updateSourcesTable([]);
                return;
            }
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–ª–æ–≥–∏–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
            const sourceCounts = {};
            const sourceNames = {
                'avito.ru': 'Avito',
                'avito': 'Avito',
                'cian.ru': 'Cian',
                'cian': 'Cian',
                'yandex.ru': '–Ø–Ω–¥–µ–∫—Å.–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                'yandex': '–Ø–Ω–¥–µ–∫—Å.–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                'domclick.ru': 'Domclick',
                'domclick': 'Domclick',
                'inpars': 'Inpars (–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä)',
                'manual': '–í—Ä—É—á–Ω—É—é',
                'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            };

            listings.forEach((listing, index) => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                let displaySource = 'unknown';
                
                if (listing.source_metadata && listing.source_metadata.original_source) {
                    displaySource = listing.source_metadata.original_source;
                } else if (listing.source) {
                    displaySource = listing.source;
                }
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                if (displaySource.includes('avito')) {
                    displaySource = 'avito';
                } else if (displaySource.includes('cian')) {
                    displaySource = 'cian';
                } else if (displaySource.includes('yandex')) {
                    displaySource = 'yandex';
                } else if (displaySource.includes('domclick')) {
                    displaySource = 'domclick';
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                const finalSourceName = sourceNames[displaySource] || displaySource;
                sourceCounts[finalSourceName] = (sourceCounts[finalSourceName] || 0) + 1;
            });
            
            if (debugEnabled) {
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            const chartData = [];
            const tableData = [];
            const colors = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4'];
            let colorIndex = 0;
            
            Object.entries(sourceCounts).forEach(([source, count]) => {
                const percentage = ((count / listings.length) * 100).toFixed(1);
                
                chartData.push({
                    name: source,
                    data: count
                });
                
                tableData.push({
                    source: source,
                    count: count,
                    percentage: percentage,
                    color: colors[colorIndex % colors.length]
                });
                
                colorIndex++;
            });
            
            if (debugEnabled) {
            }
            
            // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            await this.renderSourcesChart(chartData, colors);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            this.updateSourcesTable(tableData);
            
        } catch (error) {
            console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    async renderSourcesChart(data, colors) {
        const chartElement = document.getElementById('sourcesChart');
        if (!chartElement) {
            console.error('‚ùå UIManager: –≠–ª–µ–º–µ–Ω—Ç sourcesChart –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
            return;
        }
        
        
        // –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –µ–≥–æ
        if (this.sourcesChartInstance) {
            try {
                this.sourcesChartInstance.destroy();
                this.sourcesChartInstance = null;
            } catch (error) {
                console.warn('‚ö†Ô∏è UIManager: –û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
                this.sourcesChartInstance = null;
            }
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (—É–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏)
        chartElement.innerHTML = '';
        
        if (data.length === 0) {
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
            return;
        }
        
        const options = {
            series: data.map(item => item.data),
            chart: {
                type: 'pie',
                height: 320,
                toolbar: {
                    show: false
                }
            },
            labels: data.map(item => item.name),
            colors: colors,
            legend: {
                position: 'bottom',
                horizontalAlign: 'center'
            },
            plotOptions: {
                pie: {
                    donut: {
                        size: '45%'
                    }
                }
            },
            dataLabels: {
                enabled: true,
                formatter: function(val, opts) {
                    return Math.round(val) + '%';
                }
            },
            tooltip: {
                y: {
                    formatter: function(val) {
                        return val + ' –æ–±—ä—è–≤–ª–µ–Ω–∏–π';
                    }
                }
            },
            responsive: [{
                breakpoint: 480,
                options: {
                    chart: {
                        height: 300
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }]
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ApexCharts
        if (typeof ApexCharts === 'undefined') {
            console.error('‚ùå UIManager: ApexCharts –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">ApexCharts –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</div>';
            return;
        }

        try {
            this.sourcesChartInstance = new ApexCharts(chartElement, options);
            await this.sourcesChartInstance.render();
        } catch (error) {
            console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</div>';
            this.sourcesChartInstance = null;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    updateSourcesTable(data) {
        const tableElement = document.getElementById('sourcesTable');
        if (!tableElement) return;
        
        if (data.length === 0) {
            tableElement.innerHTML = '<div class="flex justify-between text-sm"><span class="text-gray-600">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</span></div>';
            return;
        }
        
        const tableHTML = data.map(item => `
            <div class="flex justify-between items-center text-sm">
                <div class="flex items-center space-x-2">
                    <div class="w-3 h-3 rounded-full" style="background-color: ${item.color}"></div>
                    <span class="text-gray-900">${item.source}</span>
                </div>
                <div class="text-right">
                    <div class="text-gray-900 font-medium">${item.count.toLocaleString()}</div>
                    <div class="text-gray-500 text-xs">${item.percentage}%</div>
                </div>
            </div>
        `).join('');
        
        tableElement.innerHTML = tableHTML;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
     */
    async updateAddressAnalyticsCharts() {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            if (!this.dataState.currentArea) {
                if (debugEnabled) {
                }
                return;
            }
            
            const areaId = this.dataState.currentArea.id;
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ –æ–±–ª–∞—Å—Ç–∏ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–ª–∞—Å—Ç–∏ - –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
            const addresses = await window.db.getAddressesInMapArea(areaId);
            
            if (debugEnabled) {
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            this.renderAddressConfidenceChart(addresses);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è  
            this.renderAddressMethodsChart(addresses);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.updateAddressStatsTable(addresses);
            
        } catch (error) {
            console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∞–¥—Ä–µ—Å–æ–≤:', error);
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
     */
    renderAddressConfidenceChart(addresses) {
        const chartElement = document.getElementById('addressConfidenceChart');
        if (!chartElement) return;
        
        if (this.addressConfidenceChartInstance) {
            this.addressConfidenceChartInstance.destroy();
        }
        
        if (addresses.length === 0) {
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
            return;
        }
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ —É—Ä–æ–≤–Ω—é —Ç–æ—á–Ω–æ—Å—Ç–∏
        const confidenceCounts = {
            '–í—ã—Å–æ–∫–∞—è': 0,
            '–°—Ä–µ–¥–Ω—è—è': 0,
            '–ù–∏–∑–∫–∞—è': 0,
            '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞': 0
        };
        
        addresses.forEach(address => {
            const confidence = address.geocoding_confidence || 0;
            if (confidence >= 0.8) {
                confidenceCounts['–í—ã—Å–æ–∫–∞—è']++;
            } else if (confidence >= 0.5) {
                confidenceCounts['–°—Ä–µ–¥–Ω—è—è']++;
            } else if (confidence > 0) {
                confidenceCounts['–ù–∏–∑–∫–∞—è']++;
            } else {
                confidenceCounts['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞']++;
            }
        });
        
        const data = Object.entries(confidenceCounts)
            .filter(([key, value]) => value > 0)
            .map(([key, value]) => ({ name: key, data: value }));
            
        const colors = ['#10B981', '#F59E0B', '#EF4444', '#6B7280'];
        
        const options = {
            series: data.map(item => item.data),
            chart: {
                type: 'donut',
                height: 250,
                toolbar: { show: false }
            },
            labels: data.map(item => item.name),
            colors: colors,
            legend: {
                position: 'bottom',
                fontSize: '12px'
            },
            dataLabels: {
                enabled: true,
                formatter: function(val) {
                    return Math.round(val) + '%';
                }
            },
            tooltip: {
                y: {
                    formatter: function(val) {
                        return val + ' –∞–¥—Ä–µ—Å–æ–≤';
                    }
                }
            }
        };
        
        if (typeof ApexCharts === 'undefined') {
            console.error('‚ùå UIManager: ApexCharts –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">ApexCharts –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</div>';
            return;
        }

        try {
            this.addressConfidenceChartInstance = new ApexCharts(chartElement, options);
            this.addressConfidenceChartInstance.render().catch(error => {
                console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–æ–≤:', error);
                chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞</div>';
            });
        } catch (error) {
            console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–æ–≤:', error);
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</div>';
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
     */
    renderAddressMethodsChart(addresses) {
        const chartElement = document.getElementById('addressMethodsChart');
        if (!chartElement) return;
        
        if (this.addressMethodsChartInstance) {
            this.addressMethodsChartInstance.destroy();
        }
        
        if (addresses.length === 0) {
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
            return;
        }
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        const methodCounts = {};
        addresses.forEach(address => {
            const method = address.geocoding_method || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            methodCounts[method] = (methodCounts[method] || 0) + 1;
        });
        
        const data = Object.entries(methodCounts).map(([key, value]) => ({ name: key, data: value }));
        const colors = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'];
        
        const options = {
            series: data.map(item => item.data),
            chart: {
                type: 'pie',
                height: 250,
                toolbar: { show: false }
            },
            labels: data.map(item => item.name),
            colors: colors,
            legend: {
                position: 'bottom',
                fontSize: '12px'
            },
            dataLabels: {
                enabled: true,
                formatter: function(val) {
                    return Math.round(val) + '%';
                }
            },
            tooltip: {
                y: {
                    formatter: function(val) {
                        return val + ' –∞–¥—Ä–µ—Å–æ–≤';
                    }
                }
            }
        };
        
        if (typeof ApexCharts === 'undefined') {
            console.error('‚ùå UIManager: ApexCharts –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">ApexCharts –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</div>';
            return;
        }

        try {
            this.addressMethodsChartInstance = new ApexCharts(chartElement, options);
            this.addressMethodsChartInstance.render().catch(error => {
                console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –∞–¥—Ä–µ—Å–æ–≤:', error);
                chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞</div>';
            });
        } catch (error) {
            console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –∞–¥—Ä–µ—Å–æ–≤:', error);
            chartElement.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</div>';
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
     */
    updateAddressStatsTable(addresses) {
        const tableElement = document.getElementById('addressStatsTable');
        if (!tableElement) return;
        
        if (addresses.length === 0) {
            tableElement.innerHTML = '<div class="flex justify-between text-sm"><span class="text-gray-600">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</span></div>';
            return;
        }
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const total = addresses.length;
        const withCoordinates = addresses.filter(a => a.latitude && a.longitude).length;
        const highConfidence = addresses.filter(a => (a.geocoding_confidence || 0) >= 0.8).length;
        const avgConfidence = addresses.reduce((sum, a) => sum + (a.geocoding_confidence || 0), 0) / total;
        
        const statsHTML = `
            <div class="space-y-3">
                <div class="flex justify-between text-sm">
                    <span class="text-gray-600">–í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤:</span>
                    <span class="text-gray-900 font-medium">${total.toLocaleString()}</span>
                </div>
                <div class="flex justify-between text-sm">
                    <span class="text-gray-600">–° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:</span>
                    <span class="text-gray-900 font-medium">${withCoordinates.toLocaleString()}</span>
                </div>
                <div class="flex justify-between text-sm">
                    <span class="text-gray-600">–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:</span>
                    <span class="text-gray-900 font-medium">${highConfidence.toLocaleString()}</span>
                </div>
                <div class="flex justify-between text-sm">
                    <span class="text-gray-600">–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å:</span>
                    <span class="text-gray-900 font-medium">${(avgConfidence * 100).toFixed(1)}%</span>
                </div>
            </div>
        `;
        
        tableElement.innerHTML = statsHTML;
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ UI
     */
    destroy() {
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (this.sourcesChartInstance) {
            this.sourcesChartInstance.destroy();
            this.sourcesChartInstance = null;
        }
        if (this.addressConfidenceChartInstance) {
            this.addressConfidenceChartInstance.destroy();
            this.addressConfidenceChartInstance = null;
        }
        if (this.addressMethodsChartInstance) {
            this.addressMethodsChartInstance.destroy();
            this.addressMethodsChartInstance = null;
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º SlimSelect —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        this.destroySlimSelects();
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.clearAllNotifications();
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö SlimSelect —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ UIManager
     */
    destroySlimSelects() {
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º SlimSelect –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –∞–¥—Ä–µ—Å–æ–≤
        Object.keys(this).forEach(key => {
            if (key.startsWith('statusSlimSelect_') || key.startsWith('addressSlimSelect_')) {
                if (this[key] && typeof this[key].destroy === 'function') {
                    try {
                        this[key].destroy();
                    } catch (error) {
                        console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ ${key}:`, error.message);
                    }
                    delete this[key];
                }
            }
        });
        
        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if (this.eventBus) {
            this.eventBus.offAll(CONSTANTS.EVENTS.AREA_LOADED);
            this.eventBus.offAll(CONSTANTS.EVENTS.LOADING_STARTED);
            this.eventBus.offAll(CONSTANTS.EVENTS.LOADING_FINISHED);
            this.eventBus.offAll(CONSTANTS.EVENTS.NOTIFICATION_SHOW);
        }
        
        // –û—á–∏—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –ø–∞–Ω–µ–ª–µ–π
        Object.keys(this.panelConfig).forEach(panelName => {
            const config = this.panelConfig[panelName];
            
            const header = document.getElementById(config.header);
            if (header) {
                header.removeEventListener('click', () => this.togglePanel(panelName));
            }
            
            const checkbox = document.getElementById(config.checkbox);
            if (checkbox) {
                checkbox.removeEventListener('change', (e) => this.togglePanelVisibility(panelName, e.target.checked));
            }
        });
        
        // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
        window.removeEventListener('resize', this.onWindowResize);
        window.removeEventListener('error', this.handleGlobalError);
        window.removeEventListener('unhandledrejection', this.handleGlobalError);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.resetUIState();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–ª–∞—Å—Ç–∏
     */
    async updateAreaStatistics() {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            if (!this.dataState.currentArea) {
                console.warn('UIManager: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
                return;
            }
            
            const areaId = this.dataState.currentArea.id;
            const currentArea = this.dataState.currentArea;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const allAddresses = await window.dataCacheManager.getAll('addresses');
            const addresses = allAddresses.filter(address => address.map_area_id === areaId);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥—Ä–µ—Å–∞ (—Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
            let addressLinkedListingsCount = 0;
            if (addresses.length > 0) {
                const addressIds = addresses.map(addr => addr.id);
                const listingsPromises = addressIds.map(id => window.db.getListingsByAddress(id));
                const listingsArrays = await Promise.all(listingsPromises);
                addressLinkedListingsCount = listingsArrays.flat().length;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ DataState (—É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ AddressManager)
            const filteredListings = this.dataState.getState('listings') || [];
            let totalListingsCount = Math.max(addressLinkedListingsCount, filteredListings.length);
            
            // –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            
            if (debugEnabled) {
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
            const allSegments = await window.dataCacheManager.getAll('segments').catch(() => []);
            const segments = allSegments.filter(segment => segment.map_area_id === areaId);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å –æ–±–ª–∞—Å—Ç–∏
            let areaSize = segments?.length || 0;
            if (currentArea.polygon && currentArea.polygon.length >= 3) {
                try {
                    const geoUtils = window.geoUtils || new GeoUtils();
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    if (typeof geoUtils.calculatePolygonArea === 'function') {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏
                        const areaInSqMeters = geoUtils.calculatePolygonArea(currentArea.polygon);
                        const areaInSqKm = areaInSqMeters / 1000000; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–º¬≤
                        areaSize = `‚âà ${areaInSqKm.toFixed(3)} –∫–º¬≤`;
                    } else {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∏ (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
                        const areaInSqMeters = calculateSphericalArea(currentArea.polygon);
                        const areaInSqKm = areaInSqMeters / 1000000; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–º¬≤
                        areaSize = `‚âà ${areaInSqKm.toFixed(3)} –∫–º¬≤`;
                    }
                } catch (error) {
                    console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏:', error);
                    areaSize = segments?.length || 0;
                }
            }
            
            /**
             * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–∞ —Å—Ñ–µ—Ä–µ (–∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
             */
            function calculateSphericalArea(polygon) {
                const EARTH_RADIUS = 6378137; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
                
                if (polygon.length < 3) return 0;
                
                let area = 0;
                const coords = polygon.map(point => [
                    point.lng * Math.PI / 180, // –¥–æ–ª–≥–æ—Ç–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
                    point.lat * Math.PI / 180  // —à–∏—Ä–æ—Ç–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
                ]);
                
                for (let i = 0; i < coords.length; i++) {
                    const j = (i + 1) % coords.length;
                    area += (coords[j][0] - coords[i][0]) * (2 + Math.sin(coords[i][1]) + Math.sin(coords[j][1]));
                }
                
                area = Math.abs(area) * EARTH_RADIUS * EARTH_RADIUS / 2;
                return area; // –ø–ª–æ—â–∞–¥—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∞–¥—Ä–µ—Å–∞
            let objectsCount = 0;
            if (addresses.length > 0) {
                try {
                    const addressIds = addresses.map(addr => addr.id);
                    const objectsPromises = addressIds.map(id => window.db.getObjectsByAddress(id));
                    const objectsArrays = await Promise.all(objectsPromises);
                    objectsCount = objectsArrays.flat().length;
                } catch (error) {
                    if (debugEnabled) {
                    }
                    objectsCount = 0;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            this.updateStatisticsCounters({
                segments: areaSize,
                addresses: addresses?.length || 0,
                objects: objectsCount,
                listings: totalListingsCount
            });
            
            if (debugEnabled) {
                console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–ª–∞—Å—Ç–∏:', {
                    areaSize,
                    addresses: addresses?.length || 0,
                    objects: objectsCount,
                    listings: totalListingsCount,
                    addressLinkedListings: addressLinkedListingsCount
                });
            }
            
        } catch (error) {
            console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–ª–∞—Å—Ç–∏:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatisticsCounters({ segments, addresses, objects, listings }) {
        const counters = [
            { id: 'segmentsCount', value: segments },
            { id: 'addressesCount', value: addresses },
            { id: 'objectsCount', value: objects },
            { id: 'listingsCount', value: listings }
        ];
        
        counters.forEach(({ id, value }) => {
            const element = document.getElementById(id);
            if (element) {
                // –î–ª—è –ø–ª–æ—â–∞–¥–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "‚âà 1.234 –∫–º¬≤")
                if (typeof value === 'string') {
                    element.textContent = value;
                } else {
                    element.textContent = (value || 0).toLocaleString();
                }
            } else {
                console.warn(`UIManager: –≠–ª–µ–º–µ–Ω—Ç ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM`);
            }
        });
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤ –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    switchDataWorkTab(tabId) {
        const navItems = document.querySelectorAll('.data-nav-item');
        const contentTabs = document.querySelectorAll('.data-content-tab');
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navItems.forEach(nav => {
            nav.classList.remove('bg-indigo-50', 'text-indigo-600');
            nav.classList.add('text-gray-700', 'hover:bg-gray-50', 'hover:text-indigo-600');
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–±—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        contentTabs.forEach(tab => {
            tab.classList.add('hidden');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        const activeNavItem = document.querySelector(`[data-tab="${tabId}"]`);
        const activeContentTab = document.getElementById(`content-${tabId}`);
        
        if (activeNavItem && activeContentTab) {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            activeNavItem.classList.remove('text-gray-700', 'hover:bg-gray-50', 'hover:text-indigo-600');
            activeNavItem.classList.add('bg-indigo-50', 'text-indigo-600');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
            activeContentTab.classList.remove('hidden');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
            localStorage.setItem('dataWorkActiveTab', tabId);
            
        } else {
            console.warn(`UIManager: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–∞–±–∞ "${tabId}"`);
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–æ–≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    initDataWorkTabs() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–∞–±–∞–º –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        document.querySelectorAll('.data-nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const tabId = item.getAttribute('data-tab');
                if (tabId) {
                    this.switchDataWorkTab(tabId);
                }
            });
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
        const activeTab = localStorage.getItem('dataWorkActiveTab') || 'import-addresses';
        this.switchDataWorkTab(activeTab);
        
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    restoreDataWorkPanelState() {
        const content = document.getElementById('dataWorkPanelContent');
        const chevron = document.getElementById('dataWorkPanelChevron');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
        const isCollapsed = localStorage.getItem('dataWorkPanelCollapsed');
        const shouldCollapse = isCollapsed === null || isCollapsed === 'true';
        
        if (content && chevron) {
            if (shouldCollapse) {
                content.style.display = 'none';
                chevron.style.transform = 'rotate(-90deg)';
            } else {
                content.style.display = 'block';
                chevron.style.transform = 'rotate(0deg)';
            }
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–±
        const activeTab = localStorage.getItem('dataWorkActiveTab') || 'import-addresses';
        this.switchDataWorkTab(activeTab);
    }
    
    // ========================================
    // HELPER METHODS FROM OLD VERSION
    // ========================================
    
    /**
     * HTML escaping
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    /**
     * Price formatting
     */
    formatPrice(price) {
        if (!price || price === 0) return '‚ÇΩ0';
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(price);
    }
    
    /**
     * Listing status text
     */
    getStatusText(status) {
        const statusMap = {
            'active': '–ê–∫—Ç–∏–≤–Ω–æ–µ',
            'archived': '–ê—Ä—Ö–∏–≤–Ω–æ–µ',
            'sold': '–ü—Ä–æ–¥–∞–Ω–æ',
            'withdrawn': '–°–Ω—è—Ç–æ —Å –ø—Ä–æ–¥–∞–∂–∏'
        };
        return statusMap[status] || status;
    }
    
    /**
     * Property type formatting
     */
    formatPropertyType(type) {
        const types = {
            'studio': '–°—Ç—É–¥–∏—è',
            '1k': '1–∫',
            '2k': '2–∫', 
            '3k': '3–∫',
            '4k+': '4–∫+',
            'house': '–î–æ–º',
            'land': '–£—á–∞—Å—Ç–æ–∫',
            'commercial': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è'
        };
        return types[type] || type || '-';
    }
    
    /**
     * Date formatting
     */
    formatDate(dateString) {
        if (!dateString) return '-';
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
    
    /**
     * Address accuracy display
     */
    renderAddressAccuracyInfo(listing) {
        // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        let html = '';
        
        // 1. –ê–¥—Ä–µ—Å –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–º)
        html += `
            <div class="mb-2">
                <span class="text-sm font-medium text-gray-500">–ê–¥—Ä–µ—Å –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</span>
                <span class="text-sm text-gray-600 ml-2">${this.escapeHtml(listing.address || '–ù–µ —É–∫–∞–∑–∞–Ω')}</span>
            </div>
        `;
        
        // 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–≤—Å–µ–≥–¥–∞ –≤—Ç–æ—Ä—ã–º)
        if (listing.address_id) {
            // –ê–¥—Ä–µ—Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
            html += `
                <div class="mb-2">
                    <span class="text-sm font-medium text-gray-500">–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:</span>
                    <div class="mt-1 flex items-center space-x-2">
                        <select id="addressSelect_${listing.id}" class="text-sm text-gray-900 bg-white border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å --</option>
                        </select>
                        <button id="saveAddress_${listing.id}" class="text-xs px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                    </div>
                </div>
            `;
        } else {
            // –ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
            html += `
                <div class="mb-2">
                    <span class="text-sm font-medium text-gray-500">–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å:</span>
                    <div class="mt-1 flex items-center space-x-2">
                        <select id="addressSelect_${listing.id}" class="text-sm text-gray-900 bg-white border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å --</option>
                        </select>
                        <button id="saveAddress_${listing.id}" class="text-xs px-2 py-1 bg-green-500 text-white rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500">
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                    </div>
                </div>
            `;
        }
        
        // 3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–Ω–æ—Å—Ç–∏/—Å—Ç–∞—Ç—É—Å–µ (–≤—Å–µ–≥–¥–∞ —Ç—Ä–µ—Ç—å–∏–º)
        if (listing.address_id) {
            if (listing.address_match_confidence) {
                const confidence = this.getAddressConfidenceText(listing.address_match_confidence);
                const method = this.getAddressMethodText(listing.address_match_method);
                const distance = listing.address_distance ? ` (${Math.round(listing.address_distance)}–º)` : '';
                const score = listing.address_match_score ? ` ‚Ä¢ –û—Ü–µ–Ω–∫–∞: ${(listing.address_match_score * 100).toFixed(0)}%` : '';
                
                const addressButtons = `
                    <div class="ml-2 space-x-2">
                        <button id="correctAddressModal_${listing.id}" class="text-xs px-2 py-1 bg-green-500 text-white rounded hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500">
                            ‚úÖ –í–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å
                        </button>
                        <button id="incorrectAddressModal_${listing.id}" class="text-xs px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500">
                            ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å
                        </button>
                    </div>
                `;
                
                html += `
                    <div class="mb-2">
                        <span class="text-sm font-medium text-gray-500">–¢–æ—á–Ω–æ—Å—Ç—å:</span>
                        <span class="text-sm ${this.getConfidenceColor(listing.address_match_confidence)} ml-2">${confidence}${distance}</span>
                        ${addressButtons}
                    </div>
                    <div class="mb-2">
                        <span class="text-xs text-gray-500">–ú–µ—Ç–æ–¥: ${method}${score}</span>
                    </div>
                `;
            } else {
                html += `
                    <div class="mb-2">
                        <span class="text-sm font-medium text-gray-500">–¢–æ—á–Ω–æ—Å—Ç—å:</span>
                        <span class="text-sm text-green-600 ml-2">–ê–¥—Ä–µ—Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω</span>
                    </div>
                `;
            }
        } else {
            html += `
                <div class="mb-2">
                    <span class="text-sm font-medium text-gray-500">–°—Ç–∞—Ç—É—Å:</span>
                    <span class="text-sm text-orange-600 ml-2">–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω</span>
                </div>
                <div class="mb-2">
                    <span class="text-xs text-gray-500">–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞</span>
                </div>
            `;
        }
        
        // 4. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏)
        const coords = this.getListingCoordinates(listing);
        const coordinatesInfo = listing.address_id ? 
            '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞' : 
            '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è';
            
        if (coords) {
            html += `
                <div class="mb-2">
                    <span class="text-sm font-medium text-gray-500">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</span>
                    <span class="text-sm text-gray-700 ml-2">${coords.lat.toFixed(6)}, ${coords.lng.toFixed(6)}</span>
                    <span class="text-xs text-gray-500 block">${coordinatesInfo}</span>
                </div>
            `;
        } else {
            html += `
                <div class="mb-2">
                    <span class="text-sm text-red-600">‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</span>
                </div>
            `;
        }

        return html;
    }
    
    /**
     * Address status CSS classes
     */
    getAddressStatusClass(listing) {
        if (listing.address_id) {
            if (listing.address_match_confidence) {
                return this.getConfidenceColor(listing.address_match_confidence);
            } else {
                return 'text-green-600';
            }
        } else {
            return 'text-orange-600';
        }
    }
    
    /**
     * Address status text
     */
    getAddressStatusText(listing) {
        if (listing.address_id) {
            if (listing.address_match_confidence) {
                const confidence = this.getAddressConfidenceText(listing.address_match_confidence);
                const distance = listing.address_distance ? ` (${Math.round(listing.address_distance)}–º)` : '';
                return `${confidence}${distance}`;
            } else {
                return '–û–ø—Ä–µ–¥–µ–ª—ë–Ω';
            }
        } else {
            return '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω';
        }
    }
    
    /**
     * Get address name by ID
     */
    getAddressNameById(addressId) {
        if (!addressId || !this.addresses || !Array.isArray(this.addresses)) return '';
        const address = this.addresses.find(addr => addr.id === addressId);
        return address ? address.address : '';
    }
    
    /**
     * Address confidence text
     */
    getAddressConfidenceText(confidence) {
        const confidenceMap = {
            'high': '–í—ã—Å–æ–∫–∞—è',
            'medium': '–°—Ä–µ–¥–Ω—è—è', 
            'low': '–ù–∏–∑–∫–∞—è',
            'very_low': '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è',
            'manual': '–í—Ä—É—á–Ω—É—é',
            'none': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'
        };
        return confidenceMap[confidence] || confidence;
    }
    
    /**
     * Confidence color mapping
     */
    getConfidenceColor(confidence) {
        const colorMap = {
            'high': 'text-green-600',
            'medium': 'text-yellow-600',
            'low': 'text-orange-600', 
            'very_low': 'text-red-600',
            'none': 'text-gray-500'
        };
        return colorMap[confidence] || 'text-gray-500';
    }
    
    /**
     * Address method text
     */
    getAddressMethodText(method) {
        const methodMap = {
            'exact_geo': '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º',
            'near_geo_text': '–ü–æ–∏—Å–∫ —Ä—è–¥–æ–º + –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞',
            'extended_geo_text': '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ + –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞',
            'global_text': '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É',
            'manual': '–í—Ä—É—á–Ω—É—é',
            'manual_selection': '–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä',
            'no_match': '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        };
        return methodMap[method] || method || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
    
    /**
     * Get listing coordinates
     */
    getListingCoordinates(listing) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        if (listing.address_id) {
            const address = this.addresses.find(addr => addr.id === listing.address_id);
            if (address && address.coordinates && address.coordinates.lat && address.coordinates.lng) {
                return {
                    lat: parseFloat(address.coordinates.lat),
                    lng: parseFloat(address.coordinates.lng)
                };
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if (listing.coordinates) {
            // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            const lat = listing.coordinates.lat || listing.coordinates.lon;
            const lng = listing.coordinates.lng || listing.coordinates.lon;
            
            if (lat && lng) {
                return { 
                    lat: parseFloat(lat), 
                    lng: parseFloat(lng) 
                };
            }
        }

        return null;
    }
    
    // ========================================
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ò–ó –°–¢–ê–†–û–ô –í–ï–†–°–ò–ò
    // ========================================
    
    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    preparePriceHistoryTableData(listing) {
        const data = [];
        let index = 0;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω (–±–µ–∑ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã)
        if (listing.price_history && Array.isArray(listing.price_history)) {
            listing.price_history.forEach(historyItem => {
                // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: new_price (Avito) –∏ price (Inpars)
                const price = historyItem.new_price || historyItem.price;
                if (historyItem.date && price) {
                    data.push({
                        date: historyItem.date,
                        price: price,
                        index: index++,
                        isCurrent: false
                    });
                }
            });
        }

        return data;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    async refreshPriceHistoryTable(listingId, listing) {
        try {
            const dataTable = this[`priceHistoryTable_${listingId}`];
            if (dataTable) {
                const newData = this.preparePriceHistoryTableData(listing);
                dataTable.clear().rows.add(newData).draw();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
        }
    }
    
    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ü–µ–Ω—ã
     */
    async editPriceEntry(listingId, index) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const listing = await window.db.getListing(listingId);
            if (!listing) {
                console.error('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                return;
            }

            // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            if (!listing.price_history || !Array.isArray(listing.price_history) || index >= listing.price_history.length) {
                console.error('‚ùå –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É:', index);
                console.error('–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω:', listing.price_history);
                console.error('–ò–Ω–¥–µ–∫—Å:', index);
                return;
            }

            const historyItem = listing.price_history[index];
            const price = historyItem.new_price || historyItem.price;
            
            console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã:', {
                price: price,
                date: historyItem.date,
                historyItem: historyItem
            });

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            const modal = document.getElementById(`editPriceModal-${listingId}`);
            const priceInput = document.getElementById(`priceInput-${listingId}`);
            const dateInput = document.getElementById(`dateInput-${listingId}`);

            if (modal && priceInput && dateInput) {
                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ü–µ–Ω—É (—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                priceInput.value = parseInt(price).toLocaleString('ru-RU');
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞—Ç—É (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ format datetime-local —Å —É—á–µ—Ç–æ–º –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
                const date = new Date(historyItem.date);
                // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const localDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000));
                const formattedDate = localDate.toISOString().slice(0, 16); // YYYY-MM-DDTHH:mm
                dateInput.value = formattedDate;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–ø–∏—Å–∏
                modal.dataset.editingIndex = index;
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                modal.classList.remove('hidden');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ü–µ–Ω—ã:', error);
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ü–µ–Ω—ã
     */
    async deletePriceEntry(listingId, index) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Ü–µ–Ω—ã?')) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                const listing = await window.db.getListing(listingId);
                if (!listing) {
                    console.error('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–Ω–¥–µ–∫—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                if (!listing.price_history || !Array.isArray(listing.price_history) || index >= listing.price_history.length) {
                    console.error('‚ùå –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É:', index);
                    return;
                }

                // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                listing.price_history.splice(index, 1);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await window.db.updateListing(listing);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                await this.refreshPriceHistoryTable(listingId, listing);
                
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                this.renderPriceChart(listing);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –æ–±—ä–µ–∫—Ç–æ–º
                if (listing.object_id && window.realEstateObjectManager) {
                    await window.realEstateObjectManager.updateObjectOnListingChange(listingId, listing, listing);
                }
                
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.showNotification({
                    type: 'success',
                    message: '–ó–∞–ø–∏—Å—å —Ü–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∞',
                    duration: 3000
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ü–µ–Ω—ã:', error);
                this.showNotification({
                    type: 'error',
                    message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ü–µ–Ω—ã',
                    duration: 3000
                });
            }
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
     */
    async initializeAddressSelector(listingId, currentAddressId) {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            const selectElement = document.getElementById(`addressSelect_${listingId}`);
            if (!selectElement) return;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ AddressManager
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea) {
                if (debugEnabled) {
                }
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π AddressManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
            const addressManager = new AddressManager(this.dataState, this.eventBus, this.progressManager);
            const addresses = await addressManager.getAddressesInArea(currentArea.id);
            
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏
            selectElement.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å --</option>';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            addresses.forEach(address => {
                const option = document.createElement('option');
                option.value = address.id;
                option.textContent = address.address;
                
                // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å
                if (address.id === currentAddressId) {
                    option.selected = true;
                }
                
                selectElement.appendChild(option);
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
            const slimSelect = new SlimSelect({
                select: selectElement,
                settings: {
                    placeholderText: '-- –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å --',
                    searchPlaceholder: '–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞...',
                    searchText: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
                    searchHighlight: true,
                    closeOnSelect: true
                }
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SlimSelect –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            this[`addressSlimSelect_${listingId}`] = slimSelect;
            
            if (debugEnabled) {
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (SlimSelect –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞)
     */
    async initializeManagementPanel(listingId) {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            const statusSelect = document.getElementById(`statusSelect-${listingId}`);
            if (statusSelect) {
                const statusSlimSelect = new SlimSelect({
                    select: statusSelect,
                    settings: {
                        showSearch: false,
                        closeOnSelect: true
                    }
                });

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                statusSelect.addEventListener('change', (e) => {
                    this.updateListingStatus(listingId, e.target.value);
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SlimSelect
                this[`statusSlimSelect_${listingId}`] = statusSlimSelect;
                
                if (debugEnabled) {
                }
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏
            const actualizeBtn = document.getElementById(`actualizeBtn-${listingId}`);
            if (actualizeBtn) {
                actualizeBtn.addEventListener('click', () => {
                    this.actualizeListing(listingId);
                });
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            const deleteBtn = document.getElementById(`deleteBtn-${listingId}`);
            if (deleteBtn) {
                deleteBtn.addEventListener('click', () => {
                    this.deleteListing(listingId);
                });
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const updateBtn = document.getElementById(`updateListingBtn-${listingId}`);
            if (updateBtn) {
                updateBtn.addEventListener('click', () => {
                    this.updateSingleListingData(listingId);
                });
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async updateListingStatus(listingId, newStatus) {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            if (debugEnabled) {
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö  
            const listing = await window.db.getListing(listingId);
            if (!listing) {
                console.error('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const oldListing = { ...listing };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            const updatedListing = {
                ...listing,
                status: newStatus,
                updated_at: new Date()
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await window.db.updateListing(updatedListing);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ –æ–±—ä–µ–∫—Ç
            if (listing.object_id && window.realEstateObjectManager) {
                await window.realEstateObjectManager.updateObjectOnListingChange(listingId, oldListing, updatedListing);
                if (debugEnabled) {
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification({
                type: 'success',
                message: `–°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${this.getStatusText(newStatus)}"`,
                duration: 3000
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
            this.eventBus.emit('refreshDuplicatesTable');
            
            if (debugEnabled) {
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            this.showNotification({
                type: 'error',
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                duration: 5000
            });
        }
    }
    
    /**
     * –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã updated)
     */
    async actualizeListing(listingId) {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            if (debugEnabled) {
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const listing = await window.db.getListing(listingId);
            if (!listing) {
                console.error('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                this.showNotification({
                    type: 'error',
                    message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    duration: 5000
                });
                return;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è  
            const oldListing = { ...listing };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ê–∫—Ç–∏–≤–Ω—ã–π"
            const updatedListing = {
                ...listing,
                status: 'active',
                updated: new Date().toISOString()
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await window.db.update('listings', updatedListing);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ –æ–±—ä–µ–∫—Ç
            if (listing.object_id && window.realEstateObjectManager) {
                await window.realEstateObjectManager.updateObjectOnListingChange(listingId, oldListing, updatedListing);
                if (debugEnabled) {
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            this.updateLastUpdatedDisplay(listingId, updatedListing.updated);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            const statusSelect = document.getElementById(`statusSelect-${listingId}`);
            if (statusSelect) {
                statusSelect.value = 'active';
                // –û–±–Ω–æ–≤–ª—è–µ–º SlimSelect –µ—Å–ª–∏ –µ—Å—Ç—å
                const slimSelect = this[`statusSlimSelect_${listingId}`];
                if (slimSelect) {
                    slimSelect.setSelected('active');
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
            this.eventBus.emit('refreshDuplicatesTable');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification({
                type: 'success',
                message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ',
                duration: 3000
            });
            
            if (debugEnabled) {
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            this.showNotification({
                type: 'error',
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                duration: 5000
            });
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    updateLastUpdatedDisplay(listingId, updatedDate) {
        const lastUpdatedElement = document.getElementById(`lastUpdated-${listingId}`);
        if (lastUpdatedElement && updatedDate) {
            lastUpdatedElement.textContent = new Date(updatedDate).toLocaleDateString('ru-RU', {
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async deleteListing(listingId) {
        try {
            if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?')) {
                return;
            }
            
            const debugEnabled = await this.isDebugEnabled();
            
            if (debugEnabled) {
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –æ–±—ä–µ–∫—Ç–∞
            const listing = await window.db.getListing(listingId);
            const objectId = listing?.object_id;
            
            // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await window.db.deleteListing(listingId);
            
            // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∏–ª–æ –≤ –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç
            if (objectId && window.realEstateObjectManager) {
                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø—É—Å—Ç–æ–π –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç (–æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)
                    await window.realEstateObjectManager.updateObjectOnListingChange(listingId, listing, null);
                    if (debugEnabled) {
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –æ–±—ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
                }
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.closeModal('listingModal');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification({
                type: 'success',
                message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
                duration: 3000
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ EventBus
            this.eventBus.emit(CONSTANTS.EVENTS.LISTINGS_UPDATED);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
            this.eventBus.emit('refreshDuplicatesTable');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            this.showNotification({
                type: 'error',
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                duration: 5000
            });
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async saveListingAddress(listingId) {
        try {
            const select = document.getElementById(`addressSelect_${listingId}`);
            if (!select) {
                console.error('–°–µ–ª–µ–∫—Ç–æ—Ä –∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', `addressSelect_${listingId}`);
                return;
            }

            const selectedAddressId = select.value;
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            const listing = await db.getListing(listingId);
            if (!listing) {
                console.error('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
            listing.address_id = selectedAddressId || null;
            
            // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –≤—ã–±—Ä–∞–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
            if (selectedAddressId) {
                listing.address_match_confidence = 'manual';
                listing.address_match_method = 'manual_selection';
                listing.address_match_score = 1.0;
                listing.address_distance = null;
                // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 'processed', —á—Ç–æ–±—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π
                if (listing.processing_status === 'address_needed') {
                    listing.processing_status = 'duplicate_check_needed';
                }
            } else {
                // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —É–±—Ä–∞–Ω, –æ—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
                listing.address_match_confidence = null;
                listing.address_match_method = null;
                listing.address_match_score = null;
                listing.address_distance = null;
                // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —É–±—Ä–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                listing.processing_status = 'address_needed';
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.updateListing(listing);
            
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            const updatedListing = await db.getListing(listingId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.updateModalAddressInfo(listingId, updatedListing);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            this.eventBus.emit('listingAddressUpdated', { listingId, listing: updatedListing });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
            this.eventBus.emit('refreshDuplicatesTable');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
            this.showNotification({
                type: 'error',
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: ' + error.message,
                duration: 5000
            });
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥—Ä–µ—Å–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
     */
    async refreshAddressInfo(listingId, listing) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            const locationContent = document.getElementById(`locationPanelContent-${listingId}`);
            if (locationContent) {
                const addressInfoContainer = locationContent.querySelector('.address-info');
                if (addressInfoContainer) {
                    addressInfoContainer.innerHTML = this.renderAddressAccuracyInfo(listing);
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
            const mapContainer = document.getElementById(`listing-map-${listingId}`);
            if (mapContainer && mapContainer._leafletMap) {
                this.renderListingMap(listing);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥—Ä–µ—Å–µ:', error);
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    renderListingMap(listing) {
        try {
            const mapContainer = document.getElementById(`listing-map-${listing.id}`);
            if (!mapContainer) {
                console.warn('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const coords = this.getListingCoordinates(listing);
            if (!coords) {
                mapContainer.innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                return;
            }

            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–∞—Ä—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (mapContainer._leafletMap) {
                mapContainer._leafletMap.remove();
                mapContainer._leafletMap = null;
            }

            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
            const listingMap = L.map(`listing-map-${listing.id}`, {
                center: [coords.lat, coords.lng],
                zoom: 16,
                zoomControl: true,
                scrollWheelZoom: false
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É
            mapContainer._leafletMap = listingMap;

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∫–∞—Ä—Ç—ã
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(listingMap);

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const listingMarker = L.marker([coords.lat, coords.lng], {
                icon: L.divIcon({
                    className: 'listing-marker',
                    html: `<div style="background: #3b82f6; color: white; border-radius: 50%; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; font-size: 12px; font-weight: bold; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);">üìç</div>`,
                    iconSize: [24, 24],
                    iconAnchor: [12, 12]
                })
            }).addTo(listingMap);

            // –î–æ–±–∞–≤–ª—è–µ–º popup –∫ –º–∞—Ä–∫–µ—Ä—É
            const markerPopupContent = `
                <div style="min-width: 200px;">
                    <strong>${this.escapeHtml(listing.title || '–û–±—ä—è–≤–ª–µ–Ω–∏–µ')}</strong><br>
                    <span style="color: #6b7280; font-size: 12px;">${this.escapeHtml(listing.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}</span><br>
                    <span style="color: #059669; font-weight: bold;">${this.formatPrice(listing.price)}</span>
                    ${listing.price_per_meter ? `<br><span style="color: #6b7280; font-size: 12px;">${this.formatPrice(listing.price_per_meter)}/–º¬≤</span>` : ''}
                </div>
            `;
            listingMarker.bindPopup(markerPopupContent);

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
            if (listing.address_id && this.addresses) {
                const linkedAddress = this.addresses.find(addr => addr.id === listing.address_id);
                if (linkedAddress && linkedAddress.coordinates && 
                    linkedAddress.coordinates.lat && linkedAddress.coordinates.lng) {
                    
                    const addressCoords = {
                        lat: parseFloat(linkedAddress.coordinates.lat),
                        lng: parseFloat(linkedAddress.coordinates.lng)
                    };

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    const distance = this.calculateDistance(coords, addressCoords);
                    if (distance > 10) { // –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±–æ–ª—å—à–µ 10 –º–µ—Ç—Ä–æ–≤
                        const addressMarker = L.marker([addressCoords.lat, addressCoords.lng], {
                            icon: L.divIcon({
                                className: 'address-marker',
                                html: `<div style="background: #10b981; color: white; border-radius: 50%; width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; font-size: 10px; font-weight: bold; border: 2px solid white; box-shadow: 0 2px 4px rgba(0,0,0,0.3);">üè†</div>`,
                                iconSize: [20, 20],
                                iconAnchor: [10, 10]
                            })
                        }).addTo(listingMap);

                        addressMarker.bindPopup(`
                            <div style="min-width: 150px;">
                                <strong>–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å</strong><br>
                                <span style="color: #6b7280; font-size: 12px;">${this.escapeHtml(linkedAddress.address || '–ê–¥—Ä–µ—Å')}</span><br>
                                <span style="color: #059669; font-size: 11px;">–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${Math.round(distance)}–º</span>
                            </div>
                        `);

                                    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏
                        L.polyline([
                            [coords.lat, coords.lng],
                            [addressCoords.lat, addressCoords.lng]
                        ], {
                            color: '#6b7280',
                            weight: 2,
                            opacity: 0.7,
                            dashArray: '5, 5'
                        }).addTo(listingMap);

                        // –ü–æ–¥–≥–æ–Ω—è–µ–º –≤–∏–¥ –∫–∞—Ä—Ç—ã –ø–æ–¥ –æ–±–∞ –º–∞—Ä–∫–µ—Ä–∞
                        const group = new L.featureGroup([listingMarker, addressMarker]);
                        listingMap.fitBounds(group.getBounds().pad(0.1));
                    }
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –æ–±–ª–∞—Å—Ç–∏
            this.addAddressLayerToListingMap(listingMap, coords, listing.id);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            mapContainer._leafletMap = listingMap;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            const mapContainer = document.getElementById(`listing-map-${listing.id}`);
            if (mapContainer) {
                mapContainer.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã</div>';
            }
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–π –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async addAddressLayerToListingMap(listingMap, centerCoords, listingId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea) {
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π AddressManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
            const addressManager = new AddressManager(this.dataState, this.eventBus, this.progressManager);
            const addresses = await addressManager.getAddressesInArea(currentArea.id);
            
            if (!Array.isArray(addresses) || addresses.length === 0) {
                return;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–∏–∑–ª–µ–∂–∞—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ (–≤ –º–µ—Ç—Ä–∞—Ö)
            const radiusMeters = 500;
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            const nearbyAddresses = addresses.filter(address => {
                if (!address.coordinates || !address.coordinates.lat || !address.coordinates.lng) {
                    return false;
                }
                
                const addressCoords = {
                    lat: parseFloat(address.coordinates.lat),
                    lng: parseFloat(address.coordinates.lng)
                };
                
                const distance = this.calculateDistance(centerCoords, addressCoords);
                return distance <= radiusMeters;
            });


            // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –±–ª–∏–∑–ª–µ–∂–∞—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
            for (const address of nearbyAddresses) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω
                    let markerColor = '#3b82f6'; // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if (address.wall_material_id) {
                        try {
                            const wallMaterial = await db.get('wall_materials', address.wall_material_id);
                            if (wallMaterial && wallMaterial.color) {
                                markerColor = wallMaterial.color;
                            }
                        } catch (error) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –¥–ª—è –∞–¥—Ä–µ—Å–∞:', address.id);
                        }
                    }

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É –º–∞—Ä–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
                    const floorCount = address.floors_count || 0;
                    let markerHeight;
                    if (floorCount >= 1 && floorCount <= 5) {
                        markerHeight = 8;
                    } else if (floorCount > 5 && floorCount <= 10) {
                        markerHeight = 12;
                    } else if (floorCount > 10 && floorCount <= 20) {
                        markerHeight = 16;
                    } else if (floorCount > 20) {
                        markerHeight = 20;
                    } else {
                        markerHeight = 8; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
                    }

                    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –∞–¥—Ä–µ—Å–∞
                    const addressMarker = L.marker([address.coordinates.lat, address.coordinates.lng], {
                        icon: L.divIcon({
                            className: 'address-marker',
                            html: `
                                <div class="leaflet-marker-icon-wrapper" style="position: relative;">
                                    <div style="
                                        width: 0; 
                                        height: 0; 
                                        border-left: 6px solid transparent; 
                                        border-right: 6px solid transparent; 
                                        border-top: ${markerHeight}px solid ${markerColor};
                                        filter: drop-shadow(0 1px 2px rgba(0,0,0,0.2));
                                        opacity: 0.7;
                                    "></div>
                                    ${address.build_year ? `<span class="leaflet-marker-iconlabel" style="
                                        position: absolute; 
                                        left: 12px; 
                                        top: 0px; 
                                        font-size: 9px; 
                                        font-weight: 500; 
                                        color: #374151; 
                                        background: rgba(255,255,255,0.8); 
                                        padding: 1px 3px; 
                                        border-radius: 2px; 
                                        white-space: nowrap;
                                        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
                                    ">${address.build_year}</span>` : ''}
                                </div>
                            `,
                            iconSize: [12, markerHeight],
                            iconAnchor: [6, markerHeight]
                        })
                    }).addTo(listingMap);

                    // –î–æ–±–∞–≤–ª—è–µ–º popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–¥—Ä–µ—Å–µ
                    const typeText = this.getAddressTypeText(address.type);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å—Ç–µ–Ω
                    let wallMaterialText = '–ù–µ —É–∫–∞–∑–∞–Ω';
                    if (address.wall_material_id) {
                        try {
                            const wallMaterial = await db.get('wall_materials', address.wall_material_id);
                            if (wallMaterial) {
                                wallMaterialText = wallMaterial.name;
                            }
                        } catch (error) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω –¥–ª—è popup:', address.id);
                        }
                    }

                    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    const distance = this.calculateDistance(centerCoords, {
                        lat: parseFloat(address.coordinates.lat),
                        lng: parseFloat(address.coordinates.lng)
                    });
                    
                    addressMarker.bindPopup(`
                        <div class="address-popup" style="min-width: 200px;">
                            <div class="header">
                                <strong>üìç –ê–¥—Ä–µ—Å</strong><br>
                                <div class="address-title" style="font-size: 13px;">${address.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                            </div>
                            
                            <div class="meta" style="margin-top: 6px;">
                                <small>–¢–∏–ø: <strong>${typeText}</strong></small><br>
                                <small>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <strong>${Math.round(distance)}–º</strong></small>
                                ${address.floors_count ? `<br><small>–≠—Ç–∞–∂–µ–π: ${address.floors_count}</small>` : ''}
                                <br><small>–ú–∞—Ç–µ—Ä–∏–∞–ª: <strong>${wallMaterialText}</strong></small>
                                ${address.build_year ? `<br><small>–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: ${address.build_year}</small>` : ''}
                            </div>
                            
                            <div class="actions" style="margin-top: 12px;">
                                <button class="select-address-btn" 
                                        data-address-id="${address.id}" 
                                        data-address-name="${this.escapeHtml(address.address || '–ù–µ —É–∫–∞–∑–∞–Ω')}"
                                        style="width: 100%; padding: 6px 12px; background: #3b82f6; color: white; border: none; border-radius: 4px; font-size: 12px; cursor: pointer; transition: background-color 0.2s;">
                                    ‚úì –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å
                                </button>
                            </div>
                        </div>
                    `, {
                        maxWidth: 250,
                        className: 'address-popup-container'
                    });

                } catch (markerError) {
                    console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${address.id}:`, markerError);
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
            setTimeout(() => {
                this.attachAddressSelectionHandlers(listingId);
            }, 100);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—è –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –≤ popup-–∞—Ö –∫–∞—Ä—Ç—ã
     */
    attachAddressSelectionHandlers(listingId) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è CSP –æ—à–∏–±–æ–∫
        document.addEventListener('click', (event) => {
            if (event.target.classList.contains('select-address-btn')) {
                const addressId = event.target.getAttribute('data-address-id');
                const addressName = event.target.getAttribute('data-address-name');
                
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
                this.setAddressInSelector(listingId, addressId, addressName);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
                const popup = event.target.closest('.leaflet-popup');
                if (popup) {
                    popup.style.display = 'none';
                }
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞
        const style = document.createElement('style');
        style.textContent = `
            .select-address-btn:hover {
                background-color: #2563eb !important;
            }
        `;
        document.head.appendChild(style);
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
     */
    setAddressInSelector(listingId, addressId, addressName) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç select
            const selectElement = document.getElementById(`addressSelect_${listingId}`);
            if (!selectElement) {
                console.error('–≠–ª–µ–º–µ–Ω—Ç select –Ω–µ –Ω–∞–π–¥–µ–Ω:', `addressSelect_${listingId}`);
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–±—ã—á–Ω–æ–º select
            selectElement.value = addressId;

            // –ï—Å–ª–∏ –µ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä SlimSelect, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            const slimSelectInstance = this[`addressSlimSelect_${listingId}`];
            if (slimSelectInstance) {
                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ SlimSelect
                    slimSelectInstance.setSelected(addressId);
                } catch (slimError) {
                    console.warn('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ SlimSelect, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π select:', slimError);
                    // Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π select
                    selectElement.value = addressId;
                    selectElement.dispatchEvent(new Event('change'));
                }
            } else {
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            this.showNotification({
                type: 'success',
                message: `–ê–¥—Ä–µ—Å "${addressName}" –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.`,
                duration: 3000
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥—Ä–µ—Å–∞ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä:', error);
            this.showNotification({
                type: 'error',
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–¥—Ä–µ—Å–∞',
                duration: 3000
            });
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞
     */
    getAddressTypeText(type) {
        switch(type) {
            case 'house':
            case 'building':
                return '–î–æ–º';
            case 'house_with_land':
                return '–î–æ–º —Å —É—á–∞—Å—Ç–∫–æ–º';
            case 'land':
                return '–£—á–∞—Å—Ç–æ–∫';
            case 'commercial':
                return '–ö–æ–º–º–µ—Ä—Ü–∏—è';
            default:
                return '–ó–¥–∞–Ω–∏–µ';
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
     */
    calculateDistance(point1, point2) {
        const R = 6371e3; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        const œÜ1 = point1.lat * Math.PI/180;
        const œÜ2 = point2.lat * Math.PI/180;
        const ŒîœÜ = (point2.lat-point1.lat) * Math.PI/180;
        const ŒîŒª = (point2.lng-point1.lng) * Math.PI/180;

        const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
                Math.cos(œÜ1) * Math.cos(œÜ2) *
                Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

        return R * c;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
     */
    initializePriceEditModal(listingId) {
        const modal = document.getElementById(`editPriceModal-${listingId}`);
        const form = document.getElementById(`editPriceForm-${listingId}`);
        const priceInput = document.getElementById(`priceInput-${listingId}`);
        const dateInput = document.getElementById(`dateInput-${listingId}`);
        const cancelButton = document.getElementById(`cancelEditPrice-${listingId}`);
        
        if (!modal || !form || !priceInput || !dateInput || !cancelButton) return;

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–∏ –≤–≤–æ–¥–µ
        priceInput.addEventListener('input', (e) => {
            let value = e.target.value.replace(/[^\d]/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            if (value) {
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
                value = parseInt(value).toLocaleString('ru-RU');
            }
            e.target.value = value;
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeModal = () => {
            modal.classList.add('hidden');
            form.reset();
            priceInput.value = '';
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        cancelButton.addEventListener('click', closeModal);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ overlay
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const price = priceInput.value.replace(/[^\d]/g, ''); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            const date = dateInput.value;
            
            if (!price || !date) {
                this.showNotification({
                    type: 'warning',
                    message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è',
                    duration: 3000
                });
                return;
            }

            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                const editingIndex = modal.dataset.editingIndex;
                
                if (editingIndex !== undefined && editingIndex !== null && editingIndex !== '') {
                    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    await this.savePriceChange(listingId, parseInt(price), date, parseInt(editingIndex));
                } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    await this.savePriceChange(listingId, parseInt(price), date);
                }
                
                // –û—á–∏—â–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                delete modal.dataset.editingIndex;
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                closeModal();
                
                this.showNotification({
                    type: 'success',
                    message: editingIndex !== undefined ? '–¶–µ–Ω–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞' : '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ',
                    duration: 3000
                });
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
                this.showNotification({
                    type: 'error',
                    message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏',
                    duration: 5000
                });
            }
        });
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
     */
    async savePriceChange(listingId, price, date, editingIndex = null) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const listing = await window.db.getListing(listingId);
            if (!listing) {
                throw new Error('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            const priceHistory = listing.price_history || [];
            
            if (editingIndex !== null && editingIndex >= 0 && editingIndex < priceHistory.length) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                const oldItem = priceHistory[editingIndex];
                priceHistory[editingIndex] = {
                    date: date,
                    price: price,
                    new_price: price
                };
                console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', {
                    old: oldItem,
                    new: priceHistory[editingIndex]
                });
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                priceHistory.push({
                    date: date,
                    price: price,
                    new_price: price
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            const updatedListing = {
                ...listing,
                price_history: priceHistory,
                updated_at: new Date()
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await window.db.updateListing(updatedListing);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –≥—Ä–∞—Ñ–∏–∫
            await this.refreshPriceHistoryTable(listingId, updatedListing);
            this.renderPriceChart(updatedListing);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –æ–±—ä–µ–∫—Ç–æ–º
            if (updatedListing.object_id && window.realEstateObjectManager) {
                await window.realEstateObjectManager.updateObjectOnListingChange(listingId, listing, updatedListing);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
            throw error;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è - –≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å
     */
    async markSingleAddressAsCorrect(listingId) {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const allListings = this.dataState.getState('listings') || [];
            const listing = allListings.find(l => l.id === listingId);
            if (!listing) {
                this.showNotification({
                    type: 'error',
                    message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    duration: 3000
                });
                return;
            }

            if (debugEnabled) {
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML-–º–æ–¥–µ–ª–∏ (–ü–û–ó–ò–¢–ò–í–ù–´–ô –ø—Ä–∏–º–µ—Ä)
            if (window.smartAddressMatcher && listing.address && listing.address_id) {
                try {
                    const matchedAddress = await db.get('addresses', listing.address_id);
                    if (matchedAddress) {
                        window.smartAddressMatcher.addTrainingExample(
                            listing.address,
                            matchedAddress.address,
                            true // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
                        );
                        if (debugEnabled) {
                        }
                    }
                } catch (error) {
                    console.warn('ML training failed:', error);
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –Ω–∞ "manual"
            listing.address_match_confidence = 'manual';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.update('listings', listing);
            if (debugEnabled) {
            }

            this.showNotification({
                type: 'success',
                message: '–ê–¥—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                duration: 3000
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.updateModalAddressInfo(listingId, listing);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            this.eventBus.emit('listingAddressUpdated', { listingId, listing });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
            this.eventBus.emit('refreshDuplicatesTable');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
            this.showNotification({
                type: 'error',
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: ' + error.message,
                duration: 5000
            });
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è - –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å
     */
    async markSingleAddressAsIncorrect(listingId) {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const allListings = this.dataState.getState('listings') || [];
            const listing = allListings.find(l => l.id === listingId);
            if (!listing) {
                this.showNotification({
                    type: 'error',
                    message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    duration: 3000
                });
                return;
            }

            if (debugEnabled) {
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML-–º–æ–¥–µ–ª–∏ (–ù–ï–ì–ê–¢–ò–í–ù–´–ô –ø—Ä–∏–º–µ—Ä)
            if (window.smartAddressMatcher && listing.address && listing.address_id) {
                try {
                    const matchedAddress = await db.get('addresses', listing.address_id);
                    if (matchedAddress) {
                        window.smartAddressMatcher.addTrainingExample(
                            listing.address,
                            matchedAddress.address,
                            false // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª, —á—Ç–æ —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
                        );
                        if (debugEnabled) {
                        }
                    }
                } catch (error) {
                    console.warn('ML training failed:', error);
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –Ω–∞ "very_low" —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å
            listing.address_match_confidence = 'very_low';
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ –∞–¥—Ä–µ—Å—É
            listing.address_id = null;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.update('listings', listing);
            if (debugEnabled) {
            }

            this.showNotification({
                type: 'success',
                message: '–ê–¥—Ä–µ—Å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π',
                duration: 3000
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.updateModalAddressInfo(listingId, listing);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            this.eventBus.emit('listingAddressUpdated', { listingId, listing });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
            this.eventBus.emit('refreshDuplicatesTable');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞ –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ:', error);
            this.showNotification({
                type: 'error',
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞ –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ: ' + error.message,
                duration: 5000
            });
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
     */
    updateModalAddressInfo(listingId, listing) {
        const locationContent = document.getElementById(`locationPanelContent-${listingId}`);
        if (locationContent) {
            // –ù–∞–π–¥–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ
            const mapContainer = document.getElementById(`listing-map-${listingId}`);
            let savedMapNode = null;
            if (mapContainer) {
                savedMapNode = mapContainer.cloneNode(true);
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Leaflet –∫–∞—Ä—Ç—É
                if (mapContainer._leafletMap) {
                    savedMapNode._leafletMap = mapContainer._leafletMap;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ
            const addressInfoHtml = this.renderAddressAccuracyInfo(listing);
            locationContent.innerHTML = addressInfoHtml;
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—É –æ–±—Ä–∞—Ç–Ω–æ
            if (savedMapNode) {
                locationContent.appendChild(savedMapNode);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            const locationHeader = document.getElementById(`locationPanelHeader-${listingId}`);
            if (locationHeader) {
                const statusElement = locationHeader.querySelector('.text-sm');
                if (statusElement) {
                    statusElement.textContent = this.getAddressStatusText(listing);
                    statusElement.className = `text-sm ${this.getAddressStatusClass(listing)}`;
                }
            }
            
            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            setTimeout(async () => {
                await this.initializeAddressSelector(listingId, listing.address_id); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                const saveButton = document.getElementById(`saveAddress_${listingId}`);
                if (saveButton) {
                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–ª–æ–Ω–∏—Ä—É—è —ç–ª–µ–º–µ–Ω—Ç
                    const newSaveButton = saveButton.cloneNode(true);
                    saveButton.parentNode.replaceChild(newSaveButton, saveButton);
                    
                    newSaveButton.addEventListener('click', () => {
                        this.saveListingAddress(listingId);
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å" –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                const correctAddressModalButton = document.getElementById(`correctAddressModal_${listingId}`);
                if (correctAddressModalButton) {
                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                    const newCorrectButton = correctAddressModalButton.cloneNode(true);
                    correctAddressModalButton.parentNode.replaceChild(newCorrectButton, correctAddressModalButton);
                    
                    newCorrectButton.addEventListener('click', () => {
                        this.markSingleAddressAsCorrect(listingId);
                    });
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å" –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                const incorrectAddressModalButton = document.getElementById(`incorrectAddressModal_${listingId}`);
                if (incorrectAddressModalButton) {
                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                    const newIncorrectButton = incorrectAddressModalButton.cloneNode(true);
                    incorrectAddressModalButton.parentNode.replaceChild(newIncorrectButton, incorrectAddressModalButton);
                    
                    newIncorrectButton.addEventListener('click', () => {
                        this.markSingleAddressAsIncorrect(listingId);
                    });
                }
                
                // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—ë
                const mapContainer = document.getElementById(`listing-map-${listingId}`);
                if (mapContainer && mapContainer._leafletMap) {
                    this.renderListingMap(listing);
                }
            }, 100);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
     */
    async updateSingleListingData(listingId) {
        try {
            const debugEnabled = await this.isDebugEnabled();
            
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            this.showNotification({
                type: 'info',
                message: '–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...',
                duration: 3000
            });
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const listing = await window.db.getListing(listingId);
            if (!listing) {
                console.error('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                this.showNotification({
                    type: 'error',
                    message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
                    duration: 5000
                });
                return;
            }
            
            if (!listing.url) {
                console.error('‚ùå –£ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL:', listingId);
                this.showNotification({
                    type: 'error',
                    message: '–£ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞',
                    duration: 5000
                });
                return;
            }
            
            console.log('üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', {
                id: listing.id,
                url: listing.url,
                price: listing.price,
                status: listing.status,
                updated: listing.updated,
                created: listing.created
            });
            
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            const updateBtn = document.getElementById(`updateListingBtn-${listingId}`);
            if (updateBtn) {
                updateBtn.disabled = true;
                updateBtn.textContent = '‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ ParsingManager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            let tab = null;
            try {
                // –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                tab = await this.createTabWithRetry(listing.url, 2);
                
                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º content script
                await this.waitForPageLoad(tab.id);
                
                await this.injectContentScript(tab.id, listing.url);
                
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                const response = await this.waitForContentScriptAndParse(tab.id, {
                    action: 'parseCurrentListing',
                    areaId: this.dataState.getState('currentAreaId'),
                    existingListingId: listing.id
                });
                
                
                if (response && response.success && response.data) {
                    // –ù–ï –°–û–•–†–ê–ù–Ø–ï–ú –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
                    
                    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "–û–±–Ω–æ–≤–ª–µ–Ω–æ: 31 –∏—é–ª, 09:01"
                    let updatedDate = new Date();
                    if (response.data.updated_date) {
                        try {
                            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–û–±–Ω–æ–≤–ª–µ–Ω–æ: 31 –∏—é–ª, 09:01"
                            const dateMatch = response.data.updated_date.match(/(\d{1,2})\s+(—è–Ω–≤|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞—è|–º–∞–π|–∏—é–Ω|–∏—é–ª|–∞–≤–≥|—Å–µ–Ω|–æ–∫—Ç|–Ω–æ—è|–¥–µ–∫),?\s+(\d{1,2}):(\d{2})/i);
                            if (dateMatch) {
                                const day = parseInt(dateMatch[1]);
                                const monthName = dateMatch[2];
                                const hours = parseInt(dateMatch[3]);
                                const minutes = parseInt(dateMatch[4]);
                                
                                const monthMap = {
                                    '—è–Ω–≤': 0, '—Ñ–µ–≤': 1, '–º–∞—Ä': 2, '–∞–ø—Ä': 3, '–º–∞—è': 4, '–º–∞–π': 4, '–∏—é–Ω': 5,
                                    '–∏—é–ª': 6, '–∞–≤–≥': 7, '—Å–µ–Ω': 8, '–æ–∫—Ç': 9, '–Ω–æ—è': 10, '–¥–µ–∫': 11
                                };
                                
                                const currentDate = new Date();
                                const currentYear = currentDate.getFullYear();
                                const month = monthMap[monthName.toLowerCase()];
                                
                                if (month !== undefined) {
                                    // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É —Å —Ç–µ–∫—É—â–∏–º –≥–æ–¥–æ–º
                                    updatedDate = new Date(currentYear, month, day, hours, minutes);
                                    
                                    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–≤—à–∞—è—Å—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π - –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
                                    if (updatedDate > currentDate) {
                                        updatedDate = new Date(currentYear - 1, month, day, hours, minutes);
                                    }
                                    
                                } else {
                                    console.warn('‚ö†Ô∏è –ú–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω:', monthName);
                                }
                            }
                        } catch (dateError) {
                            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', dateError);
                        }
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
                    const updatedListing = {
                        ...listing, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                        updated_at: new Date() // –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    };
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                    let priceHistory = listing.price_history || [];
                    
                    // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è
                    if (priceHistory.length === 0 && listing.created) {
                        priceHistory = [{
                            date: listing.created,
                            price: listing.price,
                            source: 'initial'
                        }];
                    }
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    const isArchived = response.data.status === 'archived';
                    if (isArchived) {
                        updatedListing.status = 'archived';
                        // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è —Å —Å–∞–π—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
                        if (response.data.updated_date) {
                            updatedListing.updated = updatedDate; // –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å —Å–∞–π—Ç–∞
                            updatedListing.last_seen = updatedDate;
                        }
                        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å —Å–∞–π—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∞—Ä—Ö–∏–≤, –¥–∞—Ç—É –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
                    } else {
                        // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –í–°–ï–ì–î–ê —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–∞—Ä—Å–∏–Ω–≥–∞
                        updatedListing.updated = new Date();
                        updatedListing.status = 'active';
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                    const priceChanged = listing.price !== response.data.price;
                    
                    // 1. –ï—Å–ª–∏ –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏—à–ª–∞ –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω - –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
                    if (response.data.price_history && response.data.price_history.length > 0) {
                        const newHistory = response.data.price_history.map(entry => ({
                            date: entry.date,
                            price: entry.price
                        }));
                        
                        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–µ–π
                        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º price
                        const filteredExistingHistory = priceHistory.filter(entry => entry.price && entry.price > 0);
                        const combinedHistory = [...filteredExistingHistory];
                        for (const newEntry of newHistory) {
                            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º –ø–æ–ª–µ–º price
                            if (newEntry.price && newEntry.price > 0) {
                                const exists = combinedHistory.some(existing => 
                                    existing.date === newEntry.date && existing.price === newEntry.price
                                );
                                if (!exists) {
                                    combinedHistory.push(newEntry);
                                }
                            }
                        }
                        
                        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                        priceHistory = combinedHistory.sort((a, b) => new Date(a.date) - new Date(b.date));
                        
                        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                        const sortedByDateDesc = priceHistory.sort((a, b) => new Date(b.date) - new Date(a.date));
                        updatedListing.price = sortedByDateDesc[0].price;
                        
                    } else {
                        // 2. –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –Ω–æ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                        if (priceChanged) {
                            updatedListing.price = response.data.price;
                            
                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏
                            const dateForEntry = isArchived ? updatedDate : new Date();
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                            priceHistory = [...priceHistory];
                            priceHistory.push({
                                date: dateForEntry.toISOString(),
                                price: response.data.price
                            });
                            priceHistory.sort((a, b) => new Date(a.date) - new Date(b.date));
                        }
                    }
                    
                    
                    updatedListing.price_history = priceHistory;
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await window.db.update('listings', updatedListing);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    this.eventBus.emit(CONSTANTS.EVENTS.LISTING_UPDATED, {
                        listing: updatedListing,
                        oldListing: listing,
                        priceChanged: priceChanged,
                        archived: isArchived
                    });
                    
                    let message = isArchived 
                        ? '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ (—Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)'
                        : `–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ${priceChanged ? '–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!' : '–¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.'}`;
                    
                    this.showNotification({
                        type: isArchived ? 'warning' : 'success',
                        message: message,
                        duration: 5000
                    });
                    
                } else {
                    
                    this.showNotification({
                        type: 'warning',
                        message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ —Å —Å–∞–π—Ç–∞',
                        duration: 5000
                    });
                }
                
            } catch (error) {
                console.error('‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê:', error);
                
                this.showNotification({
                    type: 'error',
                    message: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`,
                    duration: 5000
                });
            } finally {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É
                if (tab) {
                    try {
                        chrome.tabs.remove(tab.id);
                    } catch (closeError) {
                        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É:', closeError);
                    }
                }
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                if (updateBtn) {
                    updateBtn.disabled = false;
                    updateBtn.textContent = 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å';
                }
            }
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ updateSingleListingData:', error);
            this.showNotification({
                type: 'error',
                message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`,
                duration: 5000
            });
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –∏–∑ ParsingManager)
     */
    async createTabWithRetry(url, maxRetries = 3) {
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                return await new Promise((resolve, reject) => {
                    chrome.tabs.create({ url: url, active: false }, (newTab) => {
                        if (chrome.runtime.lastError) {
                            reject(new Error(chrome.runtime.lastError.message));
                        } else {
                            resolve(newTab);
                        }
                    });
                });
            } catch (error) {
                
                if (attempt === maxRetries) {
                    throw error;
                }
                
                // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                const delay = Math.pow(2, attempt) * 1000;
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –∏–∑ ParsingManager)
     */
    async waitForPageLoad(tabId) {
        return new Promise((resolve) => {
            const checkPageLoad = () => {
                chrome.tabs.get(tabId, (tab) => {
                    if (chrome.runtime.lastError) {
                        resolve();
                        return;
                    }
                    
                    if (tab.status === 'complete') {
                        setTimeout(resolve, 2000); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    } else {
                        setTimeout(checkPageLoad, 500);
                    }
                });
            };
            
            checkPageLoad();
        });
    }

    /**
     * –ò–Ω–∂–µ–∫—Ü–∏—è content script (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –∏–∑ ParsingManager)
     */
    async injectContentScript(tabId, listingUrl) {
        try {
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –ø–∞—Ä—Å–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            const isAvito = listingUrl.includes('avito.ru');
            const isCian = listingUrl.includes('cian.ru');
            
            
            // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            await chrome.scripting.executeScript({
                target: { tabId: tabId },
                files: ['data/database.js', 'utils/error-reporter.js']
            });
            
            // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            if (isAvito) {
                await chrome.scripting.executeScript({
                    target: { tabId: tabId },
                    files: ['content-scripts/avito-parser.js']
                });
            } else if (isCian) {
                await chrome.scripting.executeScript({
                    target: { tabId: tabId },
                    files: ['content-scripts/cian-parser.js']
                });
            } else {
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–∞–π—Ç: ${listingUrl}`);
            }
            
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–±–æ–ª—å—à–µ –¥–ª—è Cian)
            const initDelay = isCian ? 5000 : 3000;
            await new Promise(resolve => setTimeout(resolve, initDelay));
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∂–µ–∫—Ü–∏–∏ content script:', error);
            throw error;
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ content script –∏ –ø–∞—Ä—Å–∏–Ω–≥ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è –∏–∑ ParsingManager)
     */
    async waitForContentScriptAndParse(tabId, settings) {
        const maxAttempts = 15;
        const attemptDelay = 3000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å content script
        
        for (let attempt = 1; attempt <= maxAttempts; attempt++) {
            try {
                
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—ã–º ping
                try {
                    await chrome.tabs.sendMessage(tabId, { action: 'ping' });
                } catch (pingError) {
                    
                    // –ï—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping, –∂–¥–µ–º –±–æ–ª—å—à–µ
                    if (attempt < maxAttempts) {
                        await new Promise(resolve => setTimeout(resolve, attemptDelay));
                        continue;
                    }
                }
                
                // –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const response = await chrome.tabs.sendMessage(tabId, {
                    action: 'parseCurrentListing',
                    areaId: settings.areaId,
                    areaName: settings.areaName,
                    maxPages: settings.maxPages || 10,
                    delay: settings.delay || 2000
                });
                
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                return response;
                
            } catch (error) {
                
                if (attempt === maxAttempts) {
                    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å content script –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`);
                }
                
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await new Promise(resolve => setTimeout(resolve, attemptDelay));
            }
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async handleListingUpdated(eventData) {
        try {
            const { listing, oldListing, priceChanged, archived } = eventData;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const listingModal = document.getElementById('listingModal');
            if (!listingModal || listingModal.classList.contains('hidden')) {
                return; // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            const currentListingId = listingModal.dataset.listingId;
            if (currentListingId !== listing.id.toString()) {
                return; // –û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥—Ä—É–≥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            }
            
            await this.debugLog('üîÑ UIManager: –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', listing.id);
            await this.debugLog('üîÑ UIManager: –°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', oldListing.updated);
            await this.debugLog('üîÑ UIManager: –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', listing.updated);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            this.lastUpdatedListing = {
                listing,
                oldListing,
                priceChanged,
                archived,
                updatedAt: new Date()
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
            await this.populateListingModal(listingModal, listing);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            let notificationMessage = `–û–±—ä—è–≤–ª–µ–Ω–∏–µ #${listing.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`;
            if (priceChanged) {
                const oldPrice = oldListing.price ? new Intl.NumberFormat('ru-RU').format(oldListing.price) : '0';
                const newPrice = listing.price ? new Intl.NumberFormat('ru-RU').format(listing.price) : '0';
                notificationMessage += `\n–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: ${oldPrice} ‚ÇΩ ‚Üí ${newPrice} ‚ÇΩ`;
            }
            if (archived) {
                notificationMessage = `–û–±—ä—è–≤–ª–µ–Ω–∏–µ #${listing.id} –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ`;
            }
            
            this.progressManager.showSuccess(notificationMessage);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            if (window.realEstateObjectManager && listing.object_id) {
                try {
                    
                    await window.realEstateObjectManager.updateObjectOnListingChange(
                        listing.id, 
                        oldListing, 
                        listing
                    );
                    await this.debugLog('‚úÖ UIManager: –°–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
                } catch (error) {
                    console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error);
                }
            }
            
        } catch (error) {
            console.error('‚ùå UIManager: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = UIManager;
} else {
    window.UIManager = UIManager;
}