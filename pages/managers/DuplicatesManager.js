/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥—É–±–ª–µ–π
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥—É–±–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –∏—Ö –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 */

console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º DuplicatesManager.js');

class DuplicatesManager {
    constructor(dataState, eventBus, progressManager, uiManager) {
        this.dataState = dataState;
        this.eventBus = eventBus;
        this.progressManager = progressManager;
        this.uiManager = uiManager;
        
        // –¢–∞–±–ª–∏—Ü–∞ –¥—É–±–ª–µ–π
        this.duplicatesTable = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥—É–±–ª–µ–π
        this.duplicatesState = {
            selectedDuplicates: new Set(),
            expandedRows: new Set(),
            processing: false,
            currentAlgorithm: 'basic'
        };
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–±–ª–µ–π
        this.duplicatesStats = {
            total: 0,
            needProcessing: 0,
            processed: 0,
            merged: 0,
            efficiency: 0
        };
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = {
            pageLength: 10,
            accuracyThreshold: 0.85,
            defaultAlgorithm: 'basic'
        };
        
        // –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.isLoadingTable = false;
        
        // Cache –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è helper –º–µ—Ç–æ–¥–æ–≤)
        this.addresses = [];
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.bindEvents();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        if (this.eventBus) {
            this.eventBus.on(CONSTANTS.EVENTS.AREA_LOADED, async (area) => {
                await this.onAreaLoaded(area);
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.ADDRESSES_LOADED, async () => {
                console.log('üì® DuplicatesManager: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ ADDRESSES_LOADED');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è helper –º–µ—Ç–æ–¥–æ–≤
                await this.loadAddresses();
                
                // –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π
                if (!this.duplicatesTable) {
                    await this.initializeDuplicatesTable();
                    await this.loadDuplicatesTable();
                    await this.updateDuplicatesStats();
                } else {
                    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    await this.loadDuplicatesTable();
                    await this.updateDuplicatesStats();
                }
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.LISTINGS_LOADED, async () => {
                console.log('üì® DuplicatesManager: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ LISTINGS_LOADED - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ');
                // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
                if (this.duplicatesTable) {
                    await this.loadDuplicatesTable();
                    await this.updateDuplicatesStats();
                } else {
                    console.log('‚ö†Ô∏è DuplicatesManager: –¢–∞–±–ª–∏—Ü–∞ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
                }
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.AREA_CHANGED, async () => {
                console.log('üì® DuplicatesManager: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ AREA_CHANGED');
                await this.loadDuplicatesTable();
                await this.updateDuplicatesStats();
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.LISTING_UPDATED, async () => {
                console.log('üì® DuplicatesManager: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ LISTING_UPDATED');
                await this.loadDuplicatesTable();
                await this.updateDuplicatesStats();
            });
            
            this.eventBus.on('refreshDuplicatesTable', async () => {
                console.log('üì® DuplicatesManager: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ refreshDuplicatesTable');
                if (this.duplicatesTable) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                    const tableState = this.saveTableState();
                    
                    await this.loadDuplicatesTable();
                    await this.updateDuplicatesStats();
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    this.restoreTableState(tableState);
                }
            });
        }
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–Ω–æ–ø–∫–∞–º
        this.bindButtons();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–æ–±—ã—Ç–∏—è–º —Ç–∞–±–ª–∏—Ü—ã
        this.bindTableEvents();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.bindPanelEvents();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–Ω–æ–ø–∫–∞–º
     */
    bindButtons() {
        // –ö–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π
        document.getElementById('processDuplicatesBtn')?.addEventListener('click', () => {
            this.processDuplicates();
        });
        
        document.getElementById('processDuplicatesAdvancedBtn')?.addEventListener('click', () => {
            this.processDuplicatesAdvanced();
        });
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª—è–º–∏
        document.getElementById('mergeDuplicatesBtn')?.addEventListener('click', () => {
            this.mergeDuplicates();
        });
        
        document.getElementById('splitDuplicatesBtn')?.addEventListener('click', () => {
            this.splitDuplicates();
        });
        
        // –§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–æ–≤
        document.getElementById('duplicatesStatusFilter')?.addEventListener('change', (e) => {
            this.applyProcessingFilters();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        document.getElementById('clearProcessingFiltersBtn')?.addEventListener('click', () => {
            this.clearAllProcessingFilters();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        document.getElementById('correctAddressBtn')?.addEventListener('click', () => {
            this.markAddressAsCorrect();
        });
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–æ–±—ã—Ç–∏—è–º —Ç–∞–±–ª–∏—Ü—ã
     */
    bindTableEvents() {
        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º jQuery –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
        $(document).on('change', '.duplicate-checkbox', (e) => {
            console.log('üîÑ jQuery event handler for duplicate checkbox');
            this.handleDuplicateSelection(e.target);
        });
        
        document.addEventListener('click', (e) => {
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
            if (e.target.matches('#selectAllDuplicates')) {
                this.selectAllDuplicates(e.target.checked);
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä"
            if (e.target.matches('#clearSelectionBtn')) {
                this.clearDuplicatesSelection();
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∞–¥—Ä–µ—Å–∞–º –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
            if (e.target.matches('.clickable-address')) {
                const listingId = e.target.dataset.listingId;
                if (listingId) {
                    this.showListingDetails(listingId);
                }
            }
        });
        
        // jQuery –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–æ–≤ –ø–æ –∞–¥—Ä–µ—Å–∞–º –æ–±—ä–µ–∫—Ç–æ–≤ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
        $(document).on('click', '.clickable-object-address', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const objectId = e.currentTarget.dataset.objectId;
            if (objectId) {
                this.showObjectDetails(objectId);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–±—ä–µ–∫—Ç–∞
        document.getElementById('closeObjectModalBtn')?.addEventListener('click', () => {
            this.closeObjectModal();
        });
        document.getElementById('closeObjectModalBtn2')?.addEventListener('click', () => {
            this.closeObjectModal();
        });
        
        document.addEventListener('click', (e) => {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
            if (e.target.matches('.processing-filter-btn') || e.target.closest('.processing-filter-btn')) {
                const button = e.target.matches('.processing-filter-btn') ? e.target : e.target.closest('.processing-filter-btn');
                const rowId = button.dataset.rowId;
                const rowType = button.dataset.rowType;
                this.openProcessingFilter(rowId, rowType);
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
            if (e.target.matches('.remove-filter-btn') || e.target.closest('.remove-filter-btn')) {
                const button = e.target.matches('.remove-filter-btn') ? e.target : e.target.closest('.remove-filter-btn');
                const filterType = button.dataset.filterType;
                this.removeActiveFilter(filterType);
            }
        });
        
        // jQuery –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±—ä—è–≤–ª–µ–Ω–∏—è" (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
        $(document).on('click', '.expand-object-listings', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const objectId = e.currentTarget.dataset.objectId;
            const tr = $(e.currentTarget).closest('tr');
            const row = this.duplicatesTable.row(tr);
            
            console.log('üîç Expanding object listings for:', objectId);
            
            if (row.child.isShown()) {
                // –°–∫—Ä—ã–≤–∞–µ–º child row
                row.child.hide();
                tr.removeClass('shown');
                $(e.currentTarget).find('svg').css('transform', 'rotate(0deg)');
                console.log('üìñ Child row hidden');
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º child row
                this.showObjectListings(row, objectId);
                tr.addClass('shown');
                $(e.currentTarget).find('svg').css('transform', 'rotate(180deg)');
                console.log('üìó Child row shown');
            }
        });
    }
    
    /**
     * –°–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–∞—Å—Ç–∏
     */
    async onAreaLoaded(area) {
        try {
            console.log('üì® DuplicatesManager: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ AREA_LOADED');
            console.log('üó∫Ô∏è DuplicatesManager: –û–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', area.name);
            
            // –ü—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã - —Ç–∞–±–ª–∏—Ü–∞ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ADDRESSES_LOADED
            await this.initProcessingFilters();
            
            console.log('‚úÖ DuplicatesManager: –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥–µ–º –∞–¥—Ä–µ—Å–∞...');
            
        } catch (error) {
            console.error('‚ùå DuplicatesManager: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–∞—Å—Ç–∏:', error);
        }
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    bindPanelEvents() {
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        document.getElementById('duplicatesPanelHeader')?.addEventListener('click', () => {
            this.toggleDuplicatesPanel();
        });
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.bindProcessingFilterEvents();
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async loadDuplicatesTable() {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if (this.isLoadingTable) {
            console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –¥—É–±–ª–µ–π —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
            return;
        }
        
        this.isLoadingTable = true;
        
        try {
            console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            const tableState = this.saveTableState();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –æ–±–ª–∞—Å—Ç—å (–ø–æ–ª–∏–≥–æ–Ω)
            const allListings = await this.getListingsInArea();
            console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', allListings.length);
            if (allListings.length > 0) {
                console.log('üîç –ü—Ä–∏–º–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', allListings[0]);
            }
            
            // –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "processed"
            const listings = allListings.filter(listing => listing.processing_status !== 'processed');
            console.log('üìã –û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–µ–Ω—ã "processed"):', listings.length);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            const objects = await this.getRealEstateObjects();
            console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:', objects.length);
            if (objects.length > 0) {
                console.log('üîç –ü—Ä–∏–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:', objects[0]);
            }
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            const tableData = [
                ...listings.map(item => ({...item, type: 'listing'})),
                ...objects.map(item => ({...item, type: 'object'}))
            ];
            
            console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tableData.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π (${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π + ${objects.length} –æ–±—ä–µ–∫—Ç–æ–≤)`);
            console.log('üîç –ü–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ tableData:', tableData.slice(0, 3));
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if (tableData.length > 0) {
                const firstItem = tableData[0];
                console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:');
                console.log('- id:', firstItem.id);
                console.log('- type:', firstItem.type);
                console.log('- status:', firstItem.status);
                console.log('- created_at:', firstItem.created_at);
                console.log('- updated_at:', firstItem.updated_at);
                console.log('- price:', firstItem.price);
                console.log('- address:', firstItem.address);
                console.log('- address_id:', firstItem.address_id);
                console.log('- property_type:', firstItem.property_type);
                console.log('- area_total:', firstItem.area_total);
                console.log('- floor:', firstItem.floor);
                console.log('- floors_total:', firstItem.floors_total);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
            this.listings = listings;
            this.objects = objects;
            
            // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
            this.duplicatesState.selectedDuplicates.clear();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (!this.duplicatesTable) {
                console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π...');
                this.initializeDuplicatesTable();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataTable
            if (this.duplicatesTable) {
                console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataTable...');
                this.duplicatesTable.clear();
                this.duplicatesTable.rows.add(tableData);
                this.duplicatesTable.draw();
                
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É, –∑–∞–ø–∏—Å–µ–π:', this.duplicatesTable.rows().count());
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã (–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç—É—Å –∏ —Ñ–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏)
                this.applyProcessingFilters();
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
                this.restoreTableState(tableState);
            } else {
                console.error('‚ùå duplicatesTable –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤—ã–±–æ—Ä–∞
            this.updateDuplicatesSelection();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π:', error);
            if (this.progressManager) {
                this.progressManager.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
            }
        } finally {
            this.isLoadingTable = false;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π
     */
    initializeDuplicatesTable() {
        const tableElement = document.getElementById('duplicatesTable');
        if (!tableElement) {
            console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ –¥—É–±–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π...');
        console.log('üîç tableElement:', tableElement);
        console.log('üîç jQuery –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof $ !== 'undefined');
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º jQuery DataTables –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
            this.duplicatesTable = $('#duplicatesTable').DataTable({
                language: {
                    url: '../libs/datatables/ru.json'
                },
                pageLength: 10,
                ordering: true,
                searching: true,
                order: [[4, 'desc']], // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–æ–ª–æ–Ω–∫–∞ 5)
                columnDefs: [
                    {
                        targets: 0, // –ö–æ–ª–æ–Ω–∫–∞ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
                        orderable: false,
                        searchable: false,
                        className: 'dt-body-center text-xs',
                        width: '40px',
                        render: function (data, type, row) {
                            return `<input type="checkbox" class="duplicate-checkbox focus:ring-indigo-500 h-3 w-3 text-indigo-600 border-gray-300 rounded" data-id="${row.id}" data-type="${row.type}">`;
                        }
                    },
                    {
                        targets: 1, // –§–∏–ª—å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        orderable: false,
                        searchable: false,
                        className: 'dt-body-center text-xs',
                        width: '60px',
                        render: function (data, type, row) {
                            return `<button class="text-gray-600 hover:text-gray-900 p-1 processing-filter-btn" data-row-id="${row.id}" data-row-type="${row.type}" title="–§–∏–ª—å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                                </svg>
                            </button>`;
                        }
                    },
                    {
                        targets: [3, 4, 5], // –î–∞—Ç—ã
                        className: 'text-xs'
                    },
                    {
                        targets: [6, 7, 8], // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∞–¥—Ä–µ—Å, —Ü–µ–Ω–∞, –∫–æ–Ω—Ç–∞–∫—Ç  
                        className: 'text-xs'
                    }
                ],
                columns: [
                    // 0. –ß–µ–∫–±–æ–∫—Å
                    { 
                        data: null, 
                        title: '<input type="checkbox" id="selectAllDuplicates" class="focus:ring-indigo-500 h-3 w-3 text-indigo-600 border-gray-300 rounded">' 
                    },
                    // 1. –§–∏–ª—å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    { 
                        data: null, 
                        title: '–§–∏–ª—å—Ç—Ä'
                    },
                    // 2. –°—Ç–∞—Ç—É—Å
                    { 
                        data: null, 
                        title: '–°—Ç–∞—Ç—É—Å',
                        render: (data, type, row) => {
                            const isListing = row.type === 'listing';
                            const statusBadges = {
                                'active': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">–ê–∫—Ç–∏–≤–Ω—ã–π</span>',
                                'archived': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>',
                                'archive': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>',
                                'needs_processing': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">–¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</span>'
                            };
                            
                            let html = statusBadges[row.status] || `<span class="text-xs text-gray-500">${row.status}</span>`;
                            
                            if (isListing && row.processing_status) {
                                const processingBadges = {
                                    'address_needed': '<br><span class="inline-flex items-center px-1 py-0.5 text-nowrap rounded-full text-xs font-medium bg-orange-100 text-orange-800" style="font-size: 10px;">–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å</span>',
                                    'duplicate_check_needed': '<br><span class="inline-flex items-center text-nowrap px-1 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800" style="font-size: 10px;">–û–±—Ä. –Ω–∞ –¥—É–±–ª–∏</span>',
                                    'processed': ''
                                };
                                html += processingBadges[row.processing_status] || '';
                            } else if (!isListing) {
                                // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
                                const listingsCount = row.listings_count || 0;
                                const activeCount = row.active_listings_count || 0;
                                if (listingsCount > 0) {
                                    html += `<br><span class="text-xs text-nowrap text-gray-600 cursor-pointer hover:text-blue-600 expand-object-listings" data-object-id="${row.id}" title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π">
                                        <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                        </svg>
                                        –û–±—ä—è–≤–ª–µ–Ω–∏—è: ${listingsCount} (${activeCount} –∞–∫—Ç.)
                                    </span>`;
                                } else {
                                    html += `<br><span class="text-xs text-nowrap text-gray-600">–û–±—ä—è–≤–ª–µ–Ω–∏—è: ${listingsCount} (${activeCount} –∞–∫—Ç.)</span>`;
                                }
                            }
                            
                            return html;
                        }
                    },
                    // 3. –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    { 
                        data: 'created', 
                        title: '–°–æ–∑–¥–∞–Ω–æ',
                        render: (data, type, row) => {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º created (–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–µ), –∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Ç–æ created_at (–¥–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É)
                            const dateValue = data || row.created_at;
                            if (!dateValue) return '‚Äî';
                            const createdDate = new Date(dateValue);
                            
                            // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp
                            if (type === 'sort' || type === 'type') {
                                return createdDate.getTime();
                            }
                            
                            const dateStr = createdDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' });
                            
                            // –í—ã—á–∏—Å–ª—è–µ–º —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ —Å–µ–≥–æ–¥–Ω—è)
                            const updatedValue = row.updated || row.updated_at;
                            const endDate = updatedValue ? new Date(updatedValue) : new Date();
                            const diffTime = Math.abs(endDate - createdDate);
                            const exposureDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                            
                            return `<div class="text-xs">
                                ${dateStr}<br>
                                <span class="text-gray-500" style="font-size: 10px;">—ç–∫—Å–ø. ${exposureDays} –¥–Ω.</span>
                            </div>`;
                        }
                    },
                    // 4. –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    { 
                        data: 'updated', 
                        title: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
                        render: (data, type, row) => {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º updated (–¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–µ), –∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - —Ç–æ updated_at (–¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ)
                            const dateValue = data || row.updated_at;
                            if (!dateValue) return '‚Äî';
                            const date = new Date(dateValue);
                            
                            // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp
                            if (type === 'sort' || type === 'type') {
                                return date.getTime();
                            }
                            
                            const now = new Date();
                            const diffTime = Math.abs(now - date);
                            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                            
                            const dateStr = date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' });
                            const daysAgo = diffDays === 1 ? '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥' : `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
                            const color = diffDays > 7 ? 'text-red-600' : 'text-green-600';
                            
                            return `<div class="text-xs">
                                ${dateStr}<br>
                                <span class="${color}" style="font-size: 10px;">${daysAgo}</span>
                            </div>`;
                        }
                    },
                    // 5. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    { 
                        data: null, 
                        title: '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
                        render: (data, type, row) => {
                            const isListing = row.type === 'listing';
                            const parts = [];
                            
                            // –¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã
                            if (row.property_type) {
                                const types = {
                                    'studio': '–°—Ç—É–¥–∏—è',
                                    '1k': '1-–∫',
                                    '2k': '2-–∫',
                                    '3k': '3-–∫',
                                    '4k+': '4-–∫+'
                                };
                                parts.push(types[row.property_type] || row.property_type);
                                parts.push('–∫–≤–∞—Ä—Ç–∏—Ä–∞');
                            }
                            
                            // –ü–ª–æ—â–∞–¥–∏
                            const areas = [];
                            if (row.area_total) areas.push(row.area_total);
                            if (row.area_living) areas.push(row.area_living);
                            if (row.area_kitchen) areas.push(row.area_kitchen);
                            if (areas.length > 0) parts.push(`${areas.join('/')}–º¬≤`);
                            
                            // –≠—Ç–∞–∂/—ç—Ç–∞–∂–Ω–æ—Å—Ç—å
                            if (row.floor && row.total_floors) {
                                parts.push(`${row.floor}/${row.total_floors} —ç—Ç.`);
                            } else if (row.floor && row.floors_total) {
                                // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—è floors_total –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                                parts.push(`${row.floor}/${row.floors_total} —ç—Ç.`);
                            }
                            
                            const characteristicsText = parts.length > 0 ? parts.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                            
                            return `<div class="text-xs text-gray-900 max-w-xs" title="${characteristicsText}">${characteristicsText}</div>`;
                        }
                    },
                    // 6. –ê–¥—Ä–µ—Å
                    { 
                        data: 'address', 
                        title: '–ê–¥—Ä–µ—Å',
                        render: (data, type, row) => {
                            const isListing = row.type === 'listing';
                            const addressFromDb = this.getAddressNameById(row.address_id);
                            
                            if (isListing) {
                                const addressText = data || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
                                let addressFromDbText = addressFromDb || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–∫–æ–±–∫–∞—Ö
                                const hasLowConfidence = row.address_match_confidence === 'low' || row.address_match_confidence === 'very_low';
                                const isManualConfidence = row.address_match_confidence === 'manual';
                                const isAddressNotFound = addressFromDbText === '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –≤ —Å–∫–æ–±–∫–∞—Ö –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                                if (hasLowConfidence && !isAddressNotFound) {
                                    const confidenceText = row.address_match_confidence === 'low' ? '–ù–∏–∑–∫–∞—è' : '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è';
                                    addressFromDbText += ` (${confidenceText})`;
                                } else if (isManualConfidence && !isAddressNotFound) {
                                    addressFromDbText += ` (–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)`;
                                }
                                
                                const addressClass = addressText === '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω' ? 'text-red-600 hover:text-red-800' : 'text-blue-600 hover:text-blue-800';
                                
                                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫—Ä–∞—Å–Ω—ã–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏ –∞–¥—Ä–µ—Å–∞ —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é (–ù–ï manual)
                                const addressFromDbClass = (isAddressNotFound || (hasLowConfidence && !isManualConfidence)) ? 'text-red-500' : 'text-gray-500';
                                
                                return `<div class="text-xs max-w-xs">
                                    <div class="${addressClass} cursor-pointer clickable-address truncate" data-listing-id="${row.id}">${addressText}</div>
                                    <div class="${addressFromDbClass} truncate">${addressFromDbText}</div>
                                </div>`;
                            } else {
                                // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å –∏–∑ –±–∞–∑—ã (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π)
                                const addressText = addressFromDb || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
                                const addressClass = addressText === '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω' ? 'text-red-500' : 'text-blue-600 hover:text-blue-800 cursor-pointer';
                                
                                return `<div class="text-xs max-w-xs">
                                    <div class="${addressClass} truncate clickable-object-address" data-object-id="${row.id}">${addressText}</div>
                                </div>`;
                            }
                        }
                    },
                    // 7. –¶–µ–Ω–∞
                    { 
                        data: null, 
                        title: '–¶–µ–Ω–∞',
                        render: (data, type, row) => {
                            const isListing = row.type === 'listing';
                            const priceValue = isListing ? row.price : row.current_price;
                            
                            if (!priceValue) return '<div class="text-xs">‚Äî</div>';
                            
                            const price = priceValue.toLocaleString();
                            let pricePerMeter = '';
                            
                            if (row.price_per_meter) {
                                pricePerMeter = row.price_per_meter.toLocaleString();
                            } else if (priceValue && row.area_total) {
                                const calculated = Math.round(priceValue / row.area_total);
                                pricePerMeter = calculated.toLocaleString();
                            }
                            
                            return `<div class="text-xs">
                                <div class="text-green-600 font-medium">${price}</div>
                                ${pricePerMeter ? `<div class="text-gray-500">${pricePerMeter}</div>` : ''}
                            </div>`;
                        }
                    },
                    // 8. –ö–æ–Ω—Ç–∞–∫—Ç
                    { 
                        data: null, 
                        title: '–ö–æ–Ω—Ç–∞–∫—Ç',
                        render: (data, type, row) => {
                            const isListing = row.type === 'listing';
                            
                            if (isListing) {
                                const sellerType = row.seller_type === 'private' ? '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' : 
                                                 row.seller_type === 'agency' ? '–ê–≥–µ–Ω—Ç' : 
                                                 row.seller_type === 'agent' ? '–ê–≥–µ–Ω—Ç' :
                                                 row.seller_type === 'owner' ? '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' :
                                                 row.seller_type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                                
                                const sellerName = row.seller_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                                
                                return `<div class="text-xs max-w-xs">
                                    <div class="text-gray-900 truncate" title="${sellerType}">${sellerType}</div>
                                    <div class="text-gray-500 truncate" title="${sellerName}">${sellerName}</div>
                                </div>`;
                            } else {
                                // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
                                const ownerStatus = row.owner_status || '—Ç–æ–ª—å–∫–æ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤';
                                const statusColor = ownerStatus === '–µ—Å—Ç—å –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞' ? 'text-green-600' :
                                                   ownerStatus === '–±—ã–ª–æ –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞' ? 'text-yellow-600' :
                                                   'text-gray-600';
                                
                                return `<div class="text-xs max-w-xs">
                                    <div class="${statusColor} font-medium">${ownerStatus}</div>
                                </div>`;
                            }
                        }
                    }
                ],
            initComplete: () => {
                console.log('üéâ DataTable –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                this.restoreDuplicatesPanelState();
            },
            drawCallback: () => {
                console.log('üîÑ DataTable –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω–∞, —Å—Ç—Ä–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ:', this.duplicatesTable ? this.duplicatesTable.rows({page: 'current'}).count() : 0);
            }
        });
        
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥—É–±–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        console.log('üîç duplicatesTable –æ–±—ä–µ–∫—Ç:', this.duplicatesTable);
        
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π:', error);
            throw error;
        }
    }
    
    // –ú–µ—Ç–æ–¥ prepareDuplicatesTableData –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ DataTables
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async getListingsInArea() {
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea || !currentArea.polygon || currentArea.polygon.length === 0) {
            console.log('–ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç');
            return [];
        }

        try {
            const allListings = await window.db.getAll('listings');
            console.log(`–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î: ${allListings.length}`);
            console.log(`–ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ (${currentArea.polygon.length} —Ç–æ—á–µ–∫):`, currentArea.polygon);
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            const listingsWithCoords = allListings.filter(listing => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                const hasCoordinatesObject = listing.coordinates && 
                                           (listing.coordinates.lat || listing.coordinates.latitude) && 
                                           (listing.coordinates.lng || listing.coordinates.lon || listing.coordinates.longitude);
                const hasDirectCoords = (listing.lat || listing.latitude) && 
                                      (listing.lng || listing.lon || listing.longitude);
                return hasCoordinatesObject || hasDirectCoords;
            });
            
            console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${listingsWithCoords.length}`);
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏–≥–æ–Ω–∞ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            if (currentArea.polygon && currentArea.polygon.length > 0 && listingsWithCoords.length > 0) {
                const listingBounds = {
                    minLat: Math.min(...listingsWithCoords.map(l => parseFloat(l.coordinates?.lat || l.lat))),
                    maxLat: Math.max(...listingsWithCoords.map(l => parseFloat(l.coordinates?.lat || l.lat))),
                    minLng: Math.min(...listingsWithCoords.map(l => parseFloat(l.coordinates?.lng || l.lng))),
                    maxLng: Math.max(...listingsWithCoords.map(l => parseFloat(l.coordinates?.lng || l.lng)))
                };
                console.log('–ì—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', listingBounds);
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.spatialIndexManager) {
                await this.ensureListingsIndex(allListings);
                const listingsInArea = window.spatialIndexManager.findInArea('listings', currentArea.polygon);
                console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å): ${listingsInArea.length}`);
                return listingsInArea.map(listing => ({...listing, type: 'listing'}));
            }

            // Fallback: —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const listingsInArea = [];
            for (const listing of listingsWithCoords) {
                let coords = null;
                if (listing.coordinates) {
                    coords = {
                        lat: parseFloat(listing.coordinates.lat || listing.coordinates.latitude),
                        lng: parseFloat(listing.coordinates.lng || listing.coordinates.lon || listing.coordinates.longitude)
                    };
                } else if (listing.lat || listing.latitude) {
                    coords = {
                        lat: parseFloat(listing.lat || listing.latitude),
                        lng: parseFloat(listing.lng || listing.lon || listing.longitude)
                    };
                }

                if (coords && this.isPointInPolygon([coords.lat, coords.lng], currentArea.polygon)) {
                    listingsInArea.push({...listing, type: 'listing'});
                }
            }

            console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏: ${listingsInArea.length}`);

            // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if (listingsInArea.length === 0 && listingsWithCoords.length > 0) {
                console.log('–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∏ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ –ø–æ–ª–∏–≥–æ–Ω');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                const testListings = listingsWithCoords.slice(0, 3);
                console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ–±—ä—è–≤–ª–µ–Ω–∏—è:');
                testListings.forEach(listing => {
                    let normalizedCoords = null;
                    if (listing.coordinates) {
                        normalizedCoords = {
                            lat: parseFloat(listing.coordinates.lat || listing.coordinates.latitude),
                            lng: parseFloat(listing.coordinates.lng || listing.coordinates.lon || listing.coordinates.longitude)
                        };
                    }
                    
                    const isInside = normalizedCoords ? this.isPointInPolygon([normalizedCoords.lat, normalizedCoords.lng], currentArea.polygon) : false;
                    console.log(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}:`, {
                        originalCoords: listing.coordinates,
                        normalizedCoords: normalizedCoords,
                        isInside: isInside,
                        title: listing.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                        source: listing.source
                    });
                });
            }

            return listingsInArea;
        } catch (error) {
            console.error('Error getting listings in area:', error);
            return [];
        }
    }
    
    /**
     * –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async ensureListingsIndex(listings) {
        try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
            if (window.spatialIndexManager && window.spatialIndexManager.hasIndex('listings')) {
                window.spatialIndexManager.removeIndex('listings');
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if (window.spatialIndexManager && !window.spatialIndexManager.hasIndex('listings')) {
                await window.spatialIndexManager.createIndex(
                    'listings',
                    listings,
                    (listing) => {
                        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                        let coords = null;
                        if (listing.coordinates) {
                            coords = {
                                lat: parseFloat(listing.coordinates.lat || listing.coordinates.latitude),
                                lng: parseFloat(listing.coordinates.lng || listing.coordinates.lon || listing.coordinates.longitude)
                            };
                        }
                        // –ü—Ä—è–º—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç–µ
                        else if (listing.lat || listing.latitude) {
                            coords = {
                                lat: parseFloat(listing.lat || listing.latitude),
                                lng: parseFloat(listing.lng || listing.lon || listing.longitude)
                            };
                        }
                        
                        return coords;
                    }
                );
            }
        } catch (error) {
            console.error('Error ensuring listings index:', error);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ
     */
    isPointInPolygon(point, polygon) {
        try {
            const [lat, lng] = point;
            let inside = false;
            
            for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
                // –ü–æ–ª–∏–≥–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç—ã {lat: ..., lng: ...}
                const xi = polygon[i].lat;
                const yi = polygon[i].lng;
                const xj = polygon[j].lat;
                const yj = polygon[j].lng;
                
                if (((yi > lng) !== (yj > lng)) && (lat < (xj - xi) * (lng - yi) / (yj - yi) + xi)) {
                    inside = !inside;
                }
            }
            
            return inside;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ isPointInPolygon:', error, { point, polygon });
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –æ–±–ª–∞—Å—Ç–∏
     */
    async getRealEstateObjects() {
        try {
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea || !currentArea.polygon) {
                console.log('‚ö†Ô∏è –ù–µ—Ç –æ–±–ª–∞—Å—Ç–∏ –∏–ª–∏ –ø–æ–ª–∏–≥–æ–Ω–∞');
                return [];
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º realEstateObjectManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            if (window.realEstateObjectManager) {
                const objects = await window.realEstateObjectManager.getObjectsWithFilters();
                return objects.map(object => ({
                    ...object,
                    type: 'object'
                }));
            }
            
            // Fallback: –±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
            const allObjects = await window.db.getAll('objects');
            const addresses = await window.db.getAll('addresses');
            const addressesMap = new Map(addresses.map(addr => [addr.id, addr]));
            
            const filteredObjects = [];
            for (const object of allObjects) {
                if (object.status === 'deleted') continue;
                
                const address = addressesMap.get(object.address_id);
                if (address && address.latitude && address.longitude) {
                    const point = [address.latitude, address.longitude];
                    if (this.isPointInPolygon(point, currentArea.polygon)) {
                        filteredObjects.push({
                            ...object,
                            address: address,
                            type: 'object'
                        });
                    }
                }
            }
            
            console.log(`üè† –ù–∞–π–¥–µ–Ω–æ ${filteredObjects.length} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –æ–±–ª–∞—Å—Ç–∏`);
            return filteredObjects;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error);
            return [];
        }
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π
     */
    async processDuplicates() {
        if (this.duplicatesState.processing) {
            this.progressManager.showInfo('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return;
        }
        
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) {
            this.progressManager.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
            return;
        }
        
        try {
            this.duplicatesState.processing = true;
            this.duplicatesState.currentAlgorithm = 'basic';
            
            this.progressManager.updateProgressBar('duplicates', 0, '–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥—É–±–ª–µ–π
            const duplicateDetector = new DuplicateDetector();
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            const listings = await this.getListingsInArea();
            const needProcessing = listings.filter(listing => listing.processing_status === 'duplicate_check_needed');
            
            if (needProcessing.length === 0) {
                this.progressManager.showInfo('–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π');
                return;
            }
            
            this.progressManager.updateProgressBar('duplicates', 20, 
                `–û–±—Ä–∞–±–æ—Ç–∫–∞ ${needProcessing.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...`);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—É–±–ª–∏
            const results = await duplicateDetector.process(needProcessing, currentArea.id);
            
            this.progressManager.updateProgressBar('duplicates', 80, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await this.saveDuplicateResults(results);
            
            this.progressManager.updateProgressBar('duplicates', 100, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadDuplicatesTable();
            await this.updateDuplicatesStats();
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            this.eventBus.emit(CONSTANTS.EVENTS.DUPLICATES_PROCESSED, {
                area: currentArea,
                algorithm: 'basic',
                processed: results.processed,
                merged: results.merged,
                timestamp: new Date()
            });
            
            this.progressManager.showSuccess(
                `–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.processed}, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ: ${results.merged}`
            );
            
        } catch (error) {
            console.error('Error processing duplicates:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π: ' + error.message);
            
        } finally {
            this.duplicatesState.processing = false;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                this.progressManager.updateProgressBar('duplicates', 0, '');
            }, 2000);
        }
    }
    
    /**
     * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π
     */
    async processDuplicatesAdvanced() {
        if (this.duplicatesState.processing) {
            this.progressManager.showInfo('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return;
        }
        
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) {
            this.progressManager.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
            return;
        }
        
        try {
            this.duplicatesState.processing = true;
            this.duplicatesState.currentAlgorithm = 'advanced';
            
            this.progressManager.updateProgressBar('duplicates', 0, '–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
            if (!window.advancedDuplicateDetector) {
                throw new Error('–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥—É–±–ª–µ–π –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            const listings = await this.getListingsInArea();
            const needProcessing = listings.filter(listing => listing.processing_status === 'duplicate_check_needed');
            
            if (needProcessing.length === 0) {
                this.progressManager.showInfo('–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π');
                return;
            }
            
            this.progressManager.updateProgressBar('duplicates', 20, 
                `–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${needProcessing.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...`);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—É–±–ª–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
            const results = await window.advancedDuplicateDetector.process(needProcessing, currentArea.id);
            
            this.progressManager.updateProgressBar('duplicates', 80, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await this.saveDuplicateResults(results);
            
            this.progressManager.updateProgressBar('duplicates', 100, '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadDuplicatesTable();
            await this.updateDuplicatesStats();
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            this.eventBus.emit(CONSTANTS.EVENTS.DUPLICATES_PROCESSED, {
                area: currentArea,
                algorithm: 'advanced',
                processed: results.processed,
                merged: results.merged,
                timestamp: new Date()
            });
            
            this.progressManager.showSuccess(
                `–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.processed}, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ: ${results.merged}`
            );
            
        } catch (error) {
            console.error('Error processing duplicates (advanced):', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π: ' + error.message);
            
        } finally {
            this.duplicatesState.processing = false;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                this.progressManager.updateProgressBar('duplicates', 0, '');
            }, 2000);
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π
     */
    async saveDuplicateResults(results) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if (results.updatedListings) {
                for (const listing of results.updatedListings) {
                    await window.db.update('listings', listing);
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            if (results.newRealEstateObjects) {
                for (const object of results.newRealEstateObjects) {
                    await window.db.add('real_estate_objects', object);
                }
            }
            
            await Helpers.debugLog('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            
        } catch (error) {
            console.error('Error saving duplicate results:', error);
            throw error;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥—É–±–ª—è
     */
    handleDuplicateSelection(checkbox) {
        console.log('üîÑ handleDuplicateSelection called for checkbox:', checkbox);
        const itemId = checkbox.dataset.id;
        const itemType = checkbox.dataset.type;
        const key = `${itemType}_${itemId}`;

        console.log('üîÑ Checkbox data:', { itemId, itemType, key, checked: checkbox.checked });

        if (checkbox.checked) {
            this.duplicatesState.selectedDuplicates.add(key);
        } else {
            this.duplicatesState.selectedDuplicates.delete(key);
        }

        console.log('üìä Selected duplicates after change:', Array.from(this.duplicatesState.selectedDuplicates));

        this.updateDuplicatesSelection();
        this.updateSelectAllCheckbox();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    updateSelectAllCheckbox() {
        const allCheckboxes = document.querySelectorAll('.duplicate-checkbox');
        const selectAllCheckbox = document.getElementById('selectAllDuplicates');
        
        if (selectAllCheckbox && allCheckboxes.length > 0) {
            const checkedCount = Array.from(allCheckboxes).filter(cb => cb.checked).length;
            selectAllCheckbox.checked = checkedCount === allCheckboxes.length;
            selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < allCheckboxes.length;
        }
    }
    
    /**
     * –í—ã–±–æ—Ä –≤—Å–µ—Ö –¥—É–±–ª–µ–π (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    selectAllDuplicates(checked) {
        const checkboxes = document.querySelectorAll('.duplicate-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = checked;
            this.handleDuplicateSelection(checkbox);
        });
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥—É–±–ª–µ–π
     */
    clearDuplicatesSelection() {
        this.duplicatesState.selectedDuplicates.clear();
        document.querySelectorAll('.duplicate-checkbox').forEach(checkbox => {
            checkbox.checked = false;
        });
        const selectAllCheckbox = document.getElementById('selectAllDuplicates');
        if (selectAllCheckbox) {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = false;
        }
        this.updateDuplicatesSelection();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤—ã–±–æ—Ä–∞ –¥—É–±–ª–µ–π (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    updateDuplicatesSelection() {
        console.log('üîÑ updateDuplicatesSelection called, selectedCount:', this.duplicatesState.selectedDuplicates.size);
        const selectedCount = this.duplicatesState.selectedDuplicates.size;
        const selectedInfo = document.getElementById('selectedItemsInfo');
        const selectedCountEl = document.getElementById('selectedItemsCount');
        const mergeBtnEl = document.getElementById('mergeDuplicatesBtn');
        const splitBtnEl = document.getElementById('splitDuplicatesBtn');
        const correctAddressBtnEl = document.getElementById('correctAddressBtn');

        if (selectedCount > 0) {
            if (selectedInfo) selectedInfo.classList.remove('hidden');
            
            const elementText = selectedCount === 1 ? '—ç–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω' : '—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ';
            if (selectedCountEl) selectedCountEl.textContent = `${selectedCount} ${elementText}`;
            
            if (mergeBtnEl) mergeBtnEl.disabled = selectedCount < 1;
            if (splitBtnEl) splitBtnEl.disabled = false;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å" —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–µ "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å"
            let processingStatusFilter = '';
            if (this.processingStatusSlimSelect) {
                const selected = this.processingStatusSlimSelect.getSelected();
                processingStatusFilter = selected?.[0]?.value || selected?.[0] || '';
            }
            
            // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
            const directValue = document.getElementById('processingStatusFilter')?.value || '';
            
            const actualFilter = processingStatusFilter || directValue;
            
            if (correctAddressBtnEl) {
                if (actualFilter === 'address_needed') {
                    correctAddressBtnEl.classList.remove('hidden');
                    correctAddressBtnEl.disabled = false;
                } else {
                    correctAddressBtnEl.classList.add('hidden');
                }
            }
        } else {
            if (selectedInfo) selectedInfo.classList.add('hidden');
            if (mergeBtnEl) mergeBtnEl.disabled = true;
            if (splitBtnEl) splitBtnEl.disabled = true;
            if (correctAddressBtnEl) correctAddressBtnEl.classList.add('hidden');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
        const actionPanel = document.getElementById('duplicatesActionPanel');
        if (actionPanel) {
            actionPanel.style.display = selectedCount > 0 ? 'block' : 'none';
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
     */
    updateSelectAllCheckbox() {
        const selectAllCheckbox = document.getElementById('selectAllDuplicates');
        if (!selectAllCheckbox) return;
        
        const allCheckboxes = document.querySelectorAll('.duplicate-checkbox:not(:disabled)');
        const checkedCheckboxes = document.querySelectorAll('.duplicate-checkbox:checked:not(:disabled)');
        
        if (checkedCheckboxes.length === 0) {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = false;
        } else if (checkedCheckboxes.length === allCheckboxes.length) {
            selectAllCheckbox.checked = true;
            selectAllCheckbox.indeterminate = false;
        } else {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = true;
        }
    }
    
    /**
     * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–µ–π
     */
    async mergeDuplicates() {
        if (this.duplicatesState.selectedDuplicates.size < 1) {
            this.progressManager.showError('–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            return;
        }

        try {
            const selectedItems = Array.from(this.duplicatesState.selectedDuplicates);
            console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', selectedItems);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RealEstateObjectManager
            if (!window.realEstateObjectManager) {
                this.progressManager.showError('RealEstateObjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                console.error('‚ùå RealEstateObjectManager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window');
                return;
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤—ã–±–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è RealEstateObjectManager
            const itemsToMerge = selectedItems.map(key => {
                const [type, ...idParts] = key.split('_');
                const id = idParts.join('_'); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π ID
                return { type, id };
            });
            
            console.log('üîó –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:', itemsToMerge);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∞–¥—Ä–µ—Å
            const validation = await window.realEstateObjectManager.validateMergeByAddress(itemsToMerge);
            if (!validation.canMerge) {
                this.progressManager.showError('–û–±—ä–µ–¥–∏–Ω—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º');
                return;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            let addressId = null;
            if (validation.addresses.length > 0) {
                addressId = validation.addresses[0];
            } else {
                // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                const firstItem = itemsToMerge.find(item => item.type === 'listing');
                if (firstItem) {
                    const listing = await window.db.get('listings', firstItem.id);
                    addressId = listing?.address_id;
                }
            }
            
            if (!addressId) {
                this.progressManager.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è');
                return;
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            const newObject = await window.realEstateObjectManager.mergeIntoObject(itemsToMerge, addressId);
            
            if (newObject) {
                const elementText = selectedItems.length === 1 ? '—ç–ª–µ–º–µ–Ω—Ç–∞' : '—ç–ª–µ–º–µ–Ω—Ç–æ–≤';
                this.progressManager.showSuccess(`–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ ${selectedItems.length} ${elementText}`);
                
                // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                this.clearDuplicatesSelection();
                await this.loadDuplicatesTable();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥—É–±–ª–µ–π:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message);
        }
    }
    
    /**
     * –†–∞–∑–±–∏–≤–∫–∞ –¥—É–±–ª–µ–π
     */
    async splitDuplicates() {
        if (this.duplicatesState.selectedDuplicates.size === 0) {
            this.progressManager.showError('–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥—É–±–ª–µ–π');
            return;
        }

        try {
            const selectedItems = Array.from(this.duplicatesState.selectedDuplicates);
            console.log('‚úÇÔ∏è –†–∞–∑–±–∏–≤–∫–∞ –¥—É–±–ª–µ–π:', selectedItems);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RealEstateObjectManager
            if (!window.realEstateObjectManager) {
                this.progressManager.showError('RealEstateObjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                console.error('‚ùå RealEstateObjectManager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ (–æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º)
            const objectsToSplit = selectedItems
                .filter(key => key.startsWith('object_'))
                .map(key => {
                    const [type, ...idParts] = key.split('_');
                    return idParts.join('_'); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π ID
                });
            
            if (objectsToSplit.length === 0) {
                this.progressManager.showError('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏');
                return;
            }
            
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            const confirmed = confirm(
                `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∏—Ç—å ${objectsToSplit.length} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è?\n\n` +
                '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.'
            );
            
            if (!confirmed) {
                return;
            }
            
            console.log('‚úÇÔ∏è –û–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏:', objectsToSplit);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–±–∏–≤–∫—É
            const result = await window.realEstateObjectManager.splitObjectsToListings(objectsToSplit);
            
            if (result) {
                this.progressManager.showSuccess(
                    `–†–∞–∑–±–∏—Ç–æ ${result.deletedObjectsCount} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ ${result.updatedListingsCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π. ` +
                    '–í—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –¥—É–±–ª–∏"'
                );
                
                // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                this.clearDuplicatesSelection();
                await this.loadDuplicatesTable();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ –¥—É–±–ª–µ–π:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏: ' + error.message);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async createRealEstateObject(listings) {
        const firstListing = listings[0];
        const address = await window.db.get('addresses', firstListing.address_id);
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const prices = listings.filter(l => l.price).map(l => l.price);
        const areas = listings.filter(l => l.area).map(l => l.area);
        
        const averagePrice = prices.length > 0 ? prices.reduce((sum, p) => sum + p, 0) / prices.length : null;
        const averageArea = areas.length > 0 ? areas.reduce((sum, a) => sum + a, 0) / areas.length : null;
        
        return {
            id: 'obj_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
            name: `–û–±—ä–µ–∫—Ç: ${address?.address || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å'}`,
            address_id: firstListing.address_id,
            map_area_id: firstListing.map_area_id,
            property_type: firstListing.property_type || 'apartment',
            status: 'active',
            listings_count: listings.length,
            average_price: averagePrice,
            min_price: prices.length > 0 ? Math.min(...prices) : null,
            max_price: prices.length > 0 ? Math.max(...prices) : null,
            average_area: averageArea,
            created_at: new Date(),
            updated_at: new Date()
        };
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async applyProcessingFilters() {
        try {
            if (!this.duplicatesTable) {
                console.log('‚ö†Ô∏è applyProcessingFilters: duplicatesTable –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ SlimSelect –∏ –æ–±—ã—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            let addressFilter = '';
            if (this.processingAddressSlimSelect) {
                const selected = this.processingAddressSlimSelect.getSelected();
                addressFilter = selected?.[0]?.value || selected?.[0] || '';
            }
            
            let propertyTypeFilter = '';
            if (this.processingPropertyTypeSlimSelect) {
                const selected = this.processingPropertyTypeSlimSelect.getSelected();
                propertyTypeFilter = selected?.[0]?.value || selected?.[0] || '';
            }
            
            let processingStatusFilter = '';
            if (this.processingStatusSlimSelect) {
                const selected = this.processingStatusSlimSelect.getSelected();
                processingStatusFilter = selected?.[0]?.value || selected?.[0] || '';
            }
            
            const floorFilter = document.getElementById('processingFloorFilter')?.value || '';
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
            const statusFilter = document.getElementById('duplicatesStatusFilter')?.value || 'all';
            
            console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', {
                addressFilter,
                propertyTypeFilter,
                floorFilter,
                processingStatusFilter,
                statusFilter
            });
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
            $.fn.dataTable.ext.search = $.fn.dataTable.ext.search.filter(fn => 
                !fn.toString().includes('duplicatesTable')
            );
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∫ DataTables
            $.fn.dataTable.ext.search.push((settings, data, dataIndex) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞
                if (settings.nTable.id !== 'duplicatesTable') {
                    return true;
                }
                
                const rowData = this.duplicatesTable.row(dataIndex).data();
                
                // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–∞–∫—Ç–∏–≤–Ω—ã–π/–∞—Ä—Ö–∏–≤–Ω—ã–π)
                if (statusFilter !== 'all' && rowData.status !== statusFilter) {
                    return false;
                }
                
                // –§–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                
                // –§–∏–ª—å—Ç—Ä –ø–æ –∞–¥—Ä–µ—Å—É (–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞)
                if (addressFilter && rowData.address_id !== addressFilter) {
                    return false;
                }
                
                // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                if (propertyTypeFilter && rowData.property_type !== propertyTypeFilter) {
                    return false;
                }
                
                // –§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–∂—É
                if (floorFilter && rowData.floor != parseInt(floorFilter)) {
                    return false;
                }
                
                // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
                if (processingStatusFilter) {
                    // –û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–æ—ç—Ç–æ–º—É —Å–∫—Ä—ã–≤–∞–µ–º –∏—Ö –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    if (rowData.type === 'object') {
                        return false;
                    }
                    
                    // –î–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if (processingStatusFilter === 'address_needed') {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è:
                        // 1. –° processing_status === 'address_needed' 
                        // 2. –ò–õ–ò —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ (address_match_confidence: 'low' –∏–ª–∏ 'very_low')
                        // –ù–û –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'manual' (—É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ)
                        const hasAddressNeededStatus = rowData.processing_status === 'address_needed';
                        const hasLowAddressConfidence = rowData.address_match_confidence === 'low' || rowData.address_match_confidence === 'very_low';
                        const isManualConfidence = rowData.address_match_confidence === 'manual';
                        
                        // –°–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ò–õ–ò –µ—Å–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤—Ä—É—á–Ω—É—é
                        if ((!hasAddressNeededStatus && !hasLowAddressConfidence) || isManualConfidence) {
                            return false;
                        }
                    } else {
                        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                        if (rowData.processing_status !== processingStatusFilter) {
                            return false;
                        }
                    }
                }
                
                return true;
            });
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            this.duplicatesTable.draw();
            
            console.log('üîç –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –≤–∏–¥–∏–º—ã—Ö —Å—Ç—Ä–æ–∫:', this.duplicatesTable.rows({search: 'applied'}).count());
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            this.updateActiveFiltersDisplay();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å" —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–µ "address_needed"
            const correctAddressBtn = document.getElementById('correctAddressBtn');
            if (correctAddressBtn) {
                if (processingStatusFilter === 'address_needed') {
                    correctAddressBtn.classList.remove('hidden');
                } else {
                    correctAddressBtn.classList.add('hidden');
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
            if (this.progressManager) {
                this.progressManager.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ' + error.message);
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ ID (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    getAddressNameById(addressId) {
        if (!addressId) return '';
        const addresses = this.dataState.getState('addresses') || [];
        const address = addresses.find(addr => addr.id === addressId);
        return address ? address.address : '';
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async showListingDetails(listingId) {
        try {
            console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', listingId);
            
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
            const listings = this.dataState.getState('listings') || [];
            let listing = listings.find(l => l.id === listingId);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (!listing) {
                console.log('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', listingId);
                listing = await window.db.get('listings', listingId);
            }
            
            if (!listing) {
                console.error('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', listingId);
                if (this.progressManager) {
                    this.progressManager.showError('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                }
                return;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑ MapManager
            this.eventBus.emit(CONSTANTS.EVENTS.MODAL_OPENED, {
                modalType: CONSTANTS.MODAL_TYPES.LISTING_DETAIL,
                listing: listing
            });
            
            console.log('üëÅÔ∏è DuplicatesManager: –ó–∞–ø—Ä–æ—à–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', listing.id);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            if (this.progressManager) {
                this.progressManager.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ' + error.message);
            }
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async openProcessingFilter(id, type) {
        try {
            console.log(`üîç –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è ${type} —Å ID: ${id}`);
            
            let dataForFilter = null;
            
            if (type === 'listing') {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                dataForFilter = await window.db.get('listings', id);
                if (!dataForFilter) {
                    if (this.progressManager) {
                        this.progressManager.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
                    }
                    return;
                }
            } else if (type === 'object') {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                dataForFilter = await window.db.get('objects', id);
                if (!dataForFilter) {
                    if (this.progressManager) {
                        this.progressManager.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏');
                    }
                    return;
                }
            } else {
                if (this.progressManager) {
                    this.progressManager.showError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞');
                }
                return;
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã–º–∏
            await this.fillProcessingFilters(dataForFilter);
            
            const elementType = type === 'listing' ? '–æ–±—ä—è–≤–ª–µ–Ω–∏—è' : '–æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏';
            if (this.progressManager) {
                this.progressManager.showSuccess(`–§–∏–ª—å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ ${elementType}`);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
            if (this.progressManager) {
                this.progressManager.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ' + error.message);
            }
        }
    }
    
    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    async fillProcessingFilters(data) {
        try {
            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã–º–∏:', data);
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
            if (data.address_id && this.processingAddressSlimSelect) {
                this.processingAddressSlimSelect.setSelected([data.address_id]);
                this.showClearButton('clearAddressFilterBtn');
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            if (data.property_type && this.processingPropertyTypeSlimSelect) {
                this.processingPropertyTypeSlimSelect.setSelected([data.property_type]);
                this.showClearButton('clearPropertyTypeFilterBtn');
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–∂ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
            if (data.floor) {
                const floorInput = document.getElementById('processingFloorFilter');
                if (floorInput) {
                    floorInput.value = data.floor;
                    this.showClearButton('clearFloorFilterBtn');
                }
            }
            
            // –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ù–ï –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É - –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            await this.applyProcessingFilters();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    showClearButton(buttonId) {
        const button = document.getElementById(buttonId);
        if (button) {
            button.classList.remove('hidden');
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    removeActiveFilter(filterType) {
        try {
            console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä:', filterType);
            
            switch (filterType) {
                case 'address':
                    this.clearSingleFilter('processingAddressFilter');
                    break;
                case 'property_type':
                    this.clearSingleFilter('processingPropertyTypeFilter');
                    break;
                case 'floor':
                    this.clearSingleFilter('processingFloorFilter');
                    break;
                case 'status':
                    this.clearSingleFilter('processingStatusFilter');
                    break;
                default:
                    console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', filterType);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞:', error);
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    clearSingleFilter(filterId) {
        try {
            console.log('üßπ –û—á–∏—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä:', filterId);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –æ—á–∏—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
            switch (filterId) {
                case 'processingAddressFilter':
                    if (this.processingAddressSlimSelect) {
                        this.processingAddressSlimSelect.setSelected([]);
                    }
                    this.hideClearButton('clearAddressFilterBtn');
                    break;
                case 'processingPropertyTypeFilter':
                    if (this.processingPropertyTypeSlimSelect) {
                        this.processingPropertyTypeSlimSelect.setSelected([]);
                    }
                    this.hideClearButton('clearPropertyTypeFilterBtn');
                    break;
                case 'processingFloorFilter':
                    const filterElement = document.getElementById('processingFloorFilter');
                    if (filterElement) {
                        filterElement.value = '';
                    }
                    this.hideClearButton('clearFloorFilterBtn');
                    break;
                case 'processingStatusFilter':
                    if (this.processingStatusSlimSelect) {
                        this.processingStatusSlimSelect.setSelected([]);
                    }
                    this.hideClearButton('clearProcessingStatusFilterBtn');
                    break;
                default:
                    console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:', filterId);
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            this.applyProcessingFilters();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            this.updateActiveFiltersDisplay();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞:', error);
        }
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    hideClearButton(buttonId) {
        const button = document.getElementById(buttonId);
        if (button) {
            button.classList.add('hidden');
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É–±–ª–µ–π
     */
    async updateDuplicatesStats() {
        try {
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea) return;
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const listings = await this.getListingsInArea();
            const realEstateObjects = await this.getRealEstateObjects();
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = this.calculateDuplicatesStats(listings, realEstateObjects);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.duplicatesStats = stats;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateDuplicatesCounters(stats);
            this.updateDuplicatesStatusChart(stats);
            this.updateDuplicatesAccuracyStats();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.dataState.setState('duplicatesStats', stats);
            
        } catch (error) {
            console.error('Error updating duplicates stats:', error);
        }
    }
    
    /**
     * –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É–±–ª–µ–π
     */
    calculateDuplicatesStats(listings, realEstateObjects) {
        const statusCounts = {
            duplicate_check_needed: 0,
            duplicate_processed: 0,
            merged: 0,
            no_duplicates: 0
        };
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        listings.forEach(listing => {
            if (statusCounts.hasOwnProperty(listing.status)) {
                statusCounts[listing.status]++;
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∫–∞–∫ "merged"
        statusCounts.merged += realEstateObjects.length;
        
        const total = listings.length;
        const needProcessing = statusCounts.duplicate_check_needed;
        const processed = statusCounts.duplicate_processed + statusCounts.no_duplicates;
        const merged = statusCounts.merged;
        
        // –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const efficiency = total > 0 ? ((processed + merged) / total) * 100 : 0;
        
        return {
            total,
            needProcessing,
            processed,
            merged,
            efficiency: Math.round(efficiency),
            statusCounts
        };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥—É–±–ª–µ–π
     */
    updateDuplicatesCounters(stats) {
        const elements = {
            duplicatesNeedProcessing: document.getElementById('duplicatesNeedProcessing'),
            duplicatesProcessed: document.getElementById('duplicatesProcessed'),
            duplicatesMerged: document.getElementById('duplicatesMerged'),
            duplicatesEfficiency: document.getElementById('duplicatesEfficiency')
        };
        
        if (elements.duplicatesNeedProcessing) {
            elements.duplicatesNeedProcessing.textContent = stats.needProcessing;
        }
        
        if (elements.duplicatesProcessed) {
            elements.duplicatesProcessed.textContent = stats.processed;
        }
        
        if (elements.duplicatesMerged) {
            elements.duplicatesMerged.textContent = stats.merged;
        }
        
        if (elements.duplicatesEfficiency) {
            elements.duplicatesEfficiency.textContent = stats.efficiency + '%';
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –¥—É–±–ª–µ–π
     */
    updateDuplicatesStatusChart(stats) {
        const chartElement = document.getElementById('duplicatesStatusChart');
        if (!chartElement) return;
        
        const chartData = {
            series: [
                stats.needProcessing,
                stats.processed,
                stats.merged
            ],
            labels: [
                '–¢—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
                '–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ'
            ]
        };
        
        const chartOptions = {
            chart: {
                type: 'donut',
                height: 200
            },
            colors: ['#EF4444', '#10B981', '#3B82F6'],
            legend: {
                position: 'bottom'
            },
            responsive: [{
                breakpoint: 480,
                options: {
                    chart: {
                        height: 300
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }]
        };
        
        if (window.duplicatesStatusChartInstance) {
            window.duplicatesStatusChartInstance.destroy();
        }
        
        window.duplicatesStatusChartInstance = new ApexCharts(chartElement, {
            ...chartOptions,
            series: chartData.series,
            labels: chartData.labels
        });
        
        window.duplicatesStatusChartInstance.render();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—á–Ω–æ—Å—Ç–∏
     */
    updateDuplicatesAccuracyStats() {
        const accuracyElement = document.getElementById('duplicatesAccuracy');
        if (!accuracyElement) return;
        
        const threshold = this.config.accuracyThreshold;
        const algorithm = this.duplicatesState.currentAlgorithm;
        
        let accuracyText = `–ü–æ—Ä–æ–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏: ${Math.round(threshold * 100)}%`;
        if (algorithm === 'advanced') {
            accuracyText += ' (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)';
        }
        
        accuracyElement.textContent = accuracyText;
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥—É–±–ª–µ–π
     */
    toggleDuplicatesPanel() {
        const panel = document.getElementById('duplicatesPanelContent');
        const icon = document.getElementById('duplicatesPanelIcon');
        
        if (!panel || !icon) return;
        
        const isVisible = panel.style.display !== 'none';
        
        if (isVisible) {
            panel.style.display = 'none';
            icon.style.transform = 'rotate(0deg)';
        } else {
            panel.style.display = 'block';
            icon.style.transform = 'rotate(90deg)';
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const currentArea = this.dataState.getState('currentArea');
        if (currentArea) {
            localStorage.setItem(`duplicatesPanel_${currentArea.id}`, !isVisible);
        }
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –¥—É–±–ª–µ–π
     */
    restoreDuplicatesPanelState() {
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) return;
        
        const savedState = localStorage.getItem(`duplicatesPanel_${currentArea.id}`);
        const isExpanded = savedState === 'true';
        
        const panel = document.getElementById('duplicatesPanelContent');
        const icon = document.getElementById('duplicatesPanelIcon');
        
        if (panel && icon) {
            if (isExpanded) {
                panel.style.display = 'block';
                icon.style.transform = 'rotate(90deg)';
            } else {
                panel.style.display = 'none';
                icon.style.transform = 'rotate(0deg)';
            }
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    async initProcessingFilters() {
        try {
            console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
            await this.initProcessingStatusFilter();
            await this.initProcessingAddressFilter();
            await this.initProcessingPropertyTypeFilter();
            
            console.log('‚úÖ –§–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    async initProcessingStatusFilter() {
        try {
            const selectElement = document.getElementById('processingStatusFilter');
            if (!selectElement) {
                console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç processingStatusFilter –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
            this.processingStatusSlimSelect = new SlimSelect({
                select: selectElement,
                settings: {
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å',
                    allowDeselect: true,
                    closeOnSelect: true
                },
                events: {
                    afterChange: (newVal) => {
                        this.onProcessingStatusFilterChange(newVal);
                    }
                }
            });
            
            console.log('üìã –§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
            throw error;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async getAddressesInArea() {
        try {
            const currentArea = this.dataState.getState('currentArea');
            if (!currentArea || !currentArea.polygon) {
                console.log('‚ö†Ô∏è –ù–µ—Ç –æ–±–ª–∞—Å—Ç–∏ –∏–ª–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤');
                return [];
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const allAddresses = await window.db.getAll('addresses');
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥—è—Ç –≤ –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏
            const areaAddresses = allAddresses.filter(address => {
                if (!address.coordinates || !address.coordinates.lat || !address.coordinates.lng) {
                    return false;
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º AddressModel –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –æ–±–ª–∞—Å—Ç–∏
                if (window.AddressModel) {
                    const addressModel = new window.AddressModel(address);
                    return addressModel.belongsToMapArea(currentArea);
                }
                
                // Fallback: –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–∫–∏ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ
                return this.isPointInPolygon([address.coordinates.lat, address.coordinates.lng], currentArea.polygon);
            });
            
            console.log(`üìç –ù–∞–π–¥–µ–Ω–æ ${areaAddresses.length} –∞–¥—Ä–µ—Å–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏`);
            return areaAddresses;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏:', error);
            return [];
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async initProcessingAddressFilter() {
        try {
            const selectElement = document.getElementById('processingAddressFilter');
            if (!selectElement) {
                console.warn('–≠–ª–µ–º–µ–Ω—Ç processingAddressFilter –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –≤ –æ–±–ª–∞—Å—Ç–∏
            const addresses = await this.getAddressesInArea();
            
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π "–í—Å–µ –∞–¥—Ä–µ—Å–∞")
            while (selectElement.children.length > 1) {
                selectElement.removeChild(selectElement.lastChild);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            addresses.forEach(address => {
                const option = document.createElement('option');
                option.value = address.id;
                option.textContent = address.address;
                selectElement.appendChild(option);
            });

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
            this.processingAddressSlimSelect = new SlimSelect({
                select: selectElement,
                settings: {
                    searchPlaceholder: '–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤...',
                    searchText: '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å',
                    allowDeselect: true,
                    closeOnSelect: true
                },
                events: {
                    afterChange: (newVal) => {
                        this.onAddressFilterChange(newVal);
                    }
                }
            });

            console.log(`üìç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
            throw error;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async initProcessingPropertyTypeFilter() {
        try {
            const selectElement = document.getElementById('processingPropertyTypeFilter');
            if (!selectElement) {
                console.warn('–≠–ª–µ–º–µ–Ω—Ç processingPropertyTypeFilter –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
            this.processingPropertyTypeSlimSelect = new SlimSelect({
                select: selectElement,
                settings: {
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø',
                    allowDeselect: true,
                    closeOnSelect: true
                },
                events: {
                    afterChange: (newVal) => {
                        this.onPropertyTypeFilterChange(newVal);
                    }
                }
            });

            console.log('üè† –§–∏–ª—å—Ç—Ä —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error);
            throw error;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    onProcessingStatusFilterChange(newVal) {
        try {
            console.log('üîÑ Processing status filter changed:', newVal);
            
            if (newVal && newVal.length > 0) {
                this.showClearButton('clearProcessingStatusFilterBtn');
            } else {
                this.hideClearButton('clearProcessingStatusFilterBtn');
            }
            this.applyProcessingFilters();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤ (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    onAddressFilterChange(newVal) {
        try {
            if (newVal && newVal.length > 0) {
                this.showClearButton('clearAddressFilterBtn');
            } else {
                this.hideClearButton('clearAddressFilterBtn');
            }
            this.applyProcessingFilters();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    onPropertyTypeFilterChange(newVal) {
        try {
            if (newVal && newVal.length > 0) {
                this.showClearButton('clearPropertyTypeFilterBtn');
            } else {
                this.hideClearButton('clearPropertyTypeFilterBtn');
            }
            this.applyProcessingFilters();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error);
        }
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    bindProcessingFilterEvents() {
        try {
            // –ü–æ–ª–µ –≤–≤–æ–¥–∞ —ç—Ç–∞–∂–∞
            const floorInput = document.getElementById('processingFloorFilter');
            if (floorInput) {
                floorInput.addEventListener('input', (e) => {
                    const value = e.target.value;
                    if (value) {
                        this.showClearButton('clearFloorFilterBtn');
                    } else {
                        this.hideClearButton('clearFloorFilterBtn');
                    }
                    this.applyProcessingFilters();
                });
                
                floorInput.addEventListener('keyup', (e) => {
                    if (e.key === 'Enter') {
                        this.applyProcessingFilters();
                    }
                });
            }
            
            console.log('üîó –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–∏–≤—è–∑–∞–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Å–æ–±—ã—Ç–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
     */
    showClearButton(buttonId) {
        const button = document.getElementById(buttonId);
        if (button) {
            button.classList.remove('hidden');
        }
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
     */
    hideClearButton(buttonId) {
        const button = document.getElementById(buttonId);
        if (button) {
            button.classList.add('hidden');
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    clearAllProcessingFilters() {
        try {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
            if (this.processingAddressSlimSelect) {
                this.processingAddressSlimSelect.setSelected([]);
            }
            
            if (this.processingPropertyTypeSlimSelect) {
                this.processingPropertyTypeSlimSelect.setSelected([]);
            }
            
            if (this.processingStatusSlimSelect) {
                this.processingStatusSlimSelect.setSelected([]);
            }
            
            const floorFilter = document.getElementById('processingFloorFilter');
            if (floorFilter) {
                floorFilter.value = '';
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            this.applyProcessingFilters();
            
            if (this.progressManager) {
                this.progressManager.showSuccess('–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async applyProcessingFilters() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ SlimSelect –∏ –æ–±—ã—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            let addressFilter = '';
            if (this.processingAddressSlimSelect) {
                const selected = this.processingAddressSlimSelect.getSelected();
                addressFilter = selected?.[0]?.value || selected?.[0] || '';
            }
            
            let propertyTypeFilter = '';
            if (this.processingPropertyTypeSlimSelect) {
                const selected = this.processingPropertyTypeSlimSelect.getSelected();
                propertyTypeFilter = selected?.[0]?.value || selected?.[0] || '';
            }
            
            let processingStatusFilter = '';
            if (this.processingStatusSlimSelect) {
                const selected = this.processingStatusSlimSelect.getSelected();
                processingStatusFilter = selected?.[0]?.value || selected?.[0] || '';
            }
            
            const floorFilter = document.getElementById('processingFloorFilter')?.value || '';
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
            const statusFilter = document.getElementById('duplicatesStatusFilter')?.value || 'all';
            
            console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', {
                addressFilter,
                propertyTypeFilter,
                floorFilter,
                processingStatusFilter,
                statusFilter
            });
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
            $.fn.dataTable.ext.search = $.fn.dataTable.ext.search.filter(fn => 
                !fn.toString().includes('duplicatesTable')
            );
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∫ DataTables
            $.fn.dataTable.ext.search.push((settings, data, dataIndex) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞
                if (settings.nTable.id !== 'duplicatesTable') {
                    return true;
                }
                
                const rowData = this.duplicatesTable.row(dataIndex).data();
                
                // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–∞–∫—Ç–∏–≤–Ω—ã–π/–∞—Ä—Ö–∏–≤–Ω—ã–π)
                if (statusFilter !== 'all' && rowData.status !== statusFilter) {
                    return false;
                }
                
                // –§–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                
                // –§–∏–ª—å—Ç—Ä –ø–æ –∞–¥—Ä–µ—Å—É (–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞)
                if (addressFilter && rowData.address_id !== addressFilter) {
                    return false;
                }
                
                // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                if (propertyTypeFilter && rowData.property_type !== propertyTypeFilter) {
                    return false;
                }
                
                // –§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–∂—É
                if (floorFilter && rowData.floor != parseInt(floorFilter)) {
                    return false;
                }
                
                // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
                if (processingStatusFilter) {
                    //console.log('üîç Processing status filter:', processingStatusFilter, 'row type:', rowData.type, 'row processing_status:', rowData.processing_status, 'address_match_confidence:', rowData.address_match_confidence);
                    
                    // –û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø–æ—ç—Ç–æ–º—É —Å–∫—Ä—ã–≤–∞–µ–º –∏—Ö –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    if (rowData.type === 'object') {
                        return false;
                    }
                    
                    // –î–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if (processingStatusFilter === 'address_needed') {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è:
                        // 1. –° processing_status === 'address_needed' 
                        // 2. –ò–õ–ò —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ (address_match_confidence: 'low' –∏–ª–∏ 'very_low')
                        // –ù–û –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'manual' (—É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ)
                        const hasAddressNeededStatus = rowData.processing_status === 'address_needed';
                        const hasLowAddressConfidence = rowData.address_match_confidence === 'low' || rowData.address_match_confidence === 'very_low';
                        const isManualConfidence = rowData.address_match_confidence === 'manual';
                        
                        // console.log('üìç Address needed check:', {
                        //     hasAddressNeededStatus: hasAddressNeededStatus,
                        //     hasLowAddressConfidence: hasLowAddressConfidence,
                        //     isManualConfidence: isManualConfidence,
                        //     shouldShow: (hasAddressNeededStatus || hasLowAddressConfidence) && !isManualConfidence
                        // });
                        
                        // –°–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ò–õ–ò –µ—Å–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤—Ä—É—á–Ω—É—é
                        if ((!hasAddressNeededStatus && !hasLowAddressConfidence) || isManualConfidence) {
                            return false;
                        }
                    } else {
                        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                        if (rowData.processing_status !== processingStatusFilter) {
                            return false;
                        }
                    }
                }
                
                return true;
            });
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            this.duplicatesTable.draw();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            this.updateActiveFiltersDisplay();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ' + error.message);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    updateActiveFiltersDisplay() {
        try {
            const addressFilter = this.processingAddressSlimSelect?.getSelected()?.[0] || '';
            const propertyTypeFilter = this.processingPropertyTypeSlimSelect?.getSelected()?.[0] || '';
            const floorFilter = document.getElementById('processingFloorFilter')?.value || '';
            const activeFilters = [];
            
            if (addressFilter) {
                // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ SlimSelect
                let addressText = addressFilter;
                
                try {
                    // –ü–æ–∏—Å–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º select —ç–ª–µ–º–µ–Ω—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                    const selectElement = document.getElementById('processingAddressFilter');
                    if (selectElement) {
                        const selectedOption = selectElement.querySelector(`option[value="${addressFilter}"]`);
                        if (selectedOption) {
                            const optionText = selectedOption.textContent;
                            if (optionText && optionText !== addressFilter) {
                                addressText = optionText;
                            }
                        }
                    }
                } catch (error) {
                    console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∞–¥—Ä–µ—Å–∞:', error);
                }
                
                activeFilters.push({ type: 'address', text: `–ê–¥—Ä–µ—Å: ${addressText}` });
            }
            
            if (propertyTypeFilter) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–µ
                const propertyTypeMap = {
                    'studio': '–°—Ç—É–¥–∏—è',
                    '1k': '1-–∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                    '2k': '2-–∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞', 
                    '3k': '3-–∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                    '4k+': '4+ –∫ –∫–≤–∞—Ä—Ç–∏—Ä–∞'
                };
                const propertyTypeText = propertyTypeMap[propertyTypeFilter] || propertyTypeFilter;
                activeFilters.push({ type: 'property_type', text: `–¢–∏–ø: ${propertyTypeText}` });
            }
            
            if (floorFilter) {
                activeFilters.push({ type: 'floor', text: `–≠—Ç–∞–∂: ${floorFilter}` });
            }
            
            const container = document.getElementById('activeFiltersContainer');
            const tagsContainer = document.getElementById('activeFilterTags');
            
            if (activeFilters.length > 0) {
                container?.classList.remove('hidden');
                if (tagsContainer) {
                    tagsContainer.innerHTML = activeFilters.map(filter => 
                        `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            ${filter.text}
                            <button type="button" class="ml-1 text-blue-600 hover:text-blue-800 remove-filter-btn" data-filter-type="${filter.type}">
                                <svg class="h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                                </svg>
                            </button>
                        </span>`
                    ).join('');
                }
            } else {
                container?.classList.add('hidden');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }
    
    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
     */
    async markAddressAsCorrect() {
        try {
            const selectedItems = Array.from(this.duplicatesState.selectedDuplicates);
            if (selectedItems.length === 0) {
                if (this.progressManager) {
                    this.progressManager.showWarning('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞');
                }
                return;
            }
            
            let updatedCount = 0;
            
            for (const itemKey of selectedItems) {
                const [type, id] = itemKey.split('_');
                if (type === 'listing') {
                    const listing = await window.db.get('listings', id);
                    if (listing) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º address_match_confidence –Ω–∞ 'manual'
                        await window.db.update('listings', {
                            ...listing,
                            address_match_confidence: 'manual',
                            updated_at: new Date()
                        });
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è ML –æ–±—É—á–µ–Ω–∏—è
                        if (window.smartAddressMatcher) {
                            await window.smartAddressMatcher.addPositiveExample(listing);
                        }
                        
                        updatedCount++;
                    }
                }
            }
            
            if (updatedCount > 0) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                await this.loadDuplicatesTable();
                
                if (this.progressManager) {
                    this.progressManager.showSuccess(`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ${updatedCount} –∞–¥—Ä–µ—Å–æ–≤`);
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
            if (this.progressManager) {
                this.progressManager.showError('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ' + error.message);
            }
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã (—Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã + –ø–∞–≥–∏–Ω–∞—Ü–∏—è)
     */
    saveTableState() {
        if (!this.duplicatesTable) return null;
        
        const state = {
            expandedRows: [],
            currentPage: this.duplicatesTable.page.info().page
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        this.duplicatesTable.rows().every(function() {
            const row = this;
            const data = row.data();
            
            if (row.child.isShown()) {
                state.expandedRows.push({
                    id: data.id,
                    type: data.type
                });
            }
        });
        
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã:', state);
        return state;
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã (—Ä–∞—Å–∫—Ä—ã—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã + –ø–∞–≥–∏–Ω–∞—Ü–∏—è)
     */
    restoreTableState(state) {
        if (!this.duplicatesTable || !state) return;
        
        setTimeout(() => {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (state.currentPage !== undefined) {
                this.duplicatesTable.page(state.currentPage).draw(false);
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if (state.expandedRows && state.expandedRows.length > 0) {
                this.duplicatesTable.rows().every(function() {
                    const row = this;
                    const data = row.data();
                    
                    const wasExpanded = state.expandedRows.find(item => 
                        item.id === data.id && item.type === data.type
                    );
                    
                    if (wasExpanded && data.type === 'object') {
                        const tr = this.node();
                        if (tr) {
                            const expandControl = tr.querySelector('.expand-object-listings');
                            if (expandControl) {
                                expandControl.click();
                            }
                        }
                    }
                    return true;
                });
            }
            
            console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã:', state);
        }, 300);
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ —Å—Ç—Ä–æ–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã
     */
    bindDuplicateRowEvents() {
        // –ü—Ä–∏–≤—è–∑–∫–∞ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ bindTableEvents —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ —Å —á–µ–∫–±–æ–∫—Å–æ–º
     */
    renderCheckboxColumn(data, type, row) {
        if (!row.selectable) {
            return '<span class="text-gray-400">‚Äî</span>';
        }
        
        const itemKey = `${row.type}_${row.id}`;
        const checked = this.duplicatesState.selectedDuplicates.has(itemKey) ? 'checked' : '';
        
        return `<input type="checkbox" class="duplicate-checkbox" data-id="${row.id}" data-type="${row.type}" ${checked}>`;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
     */
    renderExpandColumn(data, type, row) {
        return '<span class="details-control cursor-pointer">‚ñ∂</span>';
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –¥–∞—Ç—ã
     */
    renderDateColumn(data, type, row) {
        if (!row.date) return '‚Äî';
        return Helpers.formatDate(row.date);
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –∞–¥—Ä–µ—Å–∞ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    renderAddressColumn(data, type, row) {
        const isListing = row.type === 'listing';
        const addressFromDb = this.getAddressNameById(row.address_id);
        
        if (isListing) {
            const addressText = row.address || data || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
            let addressFromDbText = addressFromDb || (row.address_id ? '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω' : '');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–∫–æ–±–∫–∞—Ö
            const hasLowConfidence = row.address_match_confidence === 'low' || row.address_match_confidence === 'very_low';
            const isManualConfidence = row.address_match_confidence === 'manual';
            const isAddressNotFound = addressFromDbText === '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –≤ —Å–∫–æ–±–∫–∞—Ö –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
            if (hasLowConfidence && !isAddressNotFound) {
                const confidenceText = row.address_match_confidence === 'low' ? '–ù–∏–∑–∫–∞—è' : '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è';
                addressFromDbText += ` (${confidenceText})`;
            } else if (isManualConfidence && !isAddressNotFound) {
                addressFromDbText += ` (–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)`;
            }
            
            const addressClass = addressText === '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω' ? 'text-red-600 hover:text-red-800' : 'text-blue-600 hover:text-blue-800';
            
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫—Ä–∞—Å–Ω—ã–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏ –∞–¥—Ä–µ—Å–∞ —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é (–ù–ï manual)
            const addressFromDbClass = (isAddressNotFound || (hasLowConfidence && !isManualConfidence)) ? 'text-red-500' : 'text-gray-500';
            
            return `<div class="text-xs max-w-xs">
                <div class="${addressClass} cursor-pointer clickable-address truncate" data-listing-id="${row.id}">${addressText}</div>
                <div class="${addressFromDbClass} truncate">${addressFromDbText}</div>
            </div>`;
        } else {
            // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å –∏–∑ –±–∞–∑—ã (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π)
            const addressText = addressFromDb || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
            const addressClass = addressText === '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω' ? 'text-red-500' : 'text-blue-600 hover:text-blue-800 cursor-pointer';
            
            return `<div class="text-xs max-w-xs">
                <div class="${addressClass} truncate clickable-object-address" data-object-id="${row.id}">${addressText}</div>
            </div>`;
        }
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ —Ü–µ–Ω—ã (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    renderPriceColumn(data, type, row) {
        const isListing = row.type === 'listing';
        const priceValue = isListing ? row.price : row.current_price;
        
        if (!priceValue) return '<div class="text-xs">‚Äî</div>';
        
        const price = priceValue.toLocaleString();
        let pricePerMeter = '';
        
        if (row.price_per_meter) {
            pricePerMeter = row.price_per_meter.toLocaleString();
        } else if (priceValue && row.area_total) {
            const calculated = Math.round(priceValue / row.area_total);
            pricePerMeter = calculated.toLocaleString();
        }
        
        return `<div class="text-xs">
            <div class="text-green-600 font-medium">${price}</div>
            ${pricePerMeter ? `<div class="text-gray-500">${pricePerMeter}</div>` : ''}
        </div>`;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     */
    renderSourceColumn(data, type, row) {
        const sourceName = CONSTANTS.DATA_SOURCE_NAMES[row.source] || row.source;
        const sourceColor = CONSTANTS.DATA_SOURCE_COLORS[row.source] || '#6B7280';
        
        return `<span class="px-2 py-1 rounded text-xs" style="background-color: ${sourceColor}20; color: ${sourceColor};">${sourceName}</span>`;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    renderStatusColumn(data, type, row) {
        const isListing = row.type === 'listing';
        const statusBadges = {
            'active': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">–ê–∫—Ç–∏–≤–Ω—ã–π</span>',
            'archived': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>',
            'archive': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>',
            'needs_processing': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">–¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</span>'
        };
        
        let html = statusBadges[row.status] || `<span class="text-xs text-gray-500">${row.status}</span>`;
        
        if (isListing && row.processing_status) {
            const processingBadges = {
                'address_needed': '<br><span class="inline-flex items-center px-1 py-0.5 text-nowrap rounded-full text-xs font-medium bg-orange-100 text-orange-800" style="font-size: 10px;">–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å</span>',
                'duplicate_check_needed': '<br><span class="inline-flex items-center text-nowrap px-1 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800" style="font-size: 10px;">–û–±—Ä. –Ω–∞ –¥—É–±–ª–∏</span>',
                'processed': ''
            };
            html += processingBadges[row.processing_status] || '';
        } else if (!isListing) {
            // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
            const listingsCount = row.listings_count || 0;
            const activeCount = row.active_listings_count || 0;
            if (listingsCount > 0) {
                html += `<br><span class="text-xs text-gray-600 cursor-pointer hover:text-blue-600 expand-object-listings" data-object-id="${row.id}" title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π">
                    <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                    –û–±—ä—è–≤–ª–µ–Ω–∏—è: ${listingsCount} (${activeCount} –∞–∫—Ç.)
                </span>`;
            } else {
                html += `<br><span class="text-xs text-gray-600">–û–±—ä—è–≤–ª–µ–Ω–∏—è: ${listingsCount} (${activeCount} –∞–∫—Ç.)</span>`;
            }
        }
        
        return html;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    renderCreatedColumn(data, type, row) {
        if (!row.created_at) return '‚Äî';
        
        try {
            const date = new Date(row.created_at);
            const now = new Date();
            const daysDiff = Math.floor((now - date) / (1000 * 60 * 60 * 24));
            
            return `
                <div class="text-xs">
                    <div>${date.toLocaleDateString('ru-RU')}</div>
                    <div class="text-gray-500 text-xs">${daysDiff} –¥–Ω.</div>
                </div>
            `;
        } catch (e) {
            return '‚Äî';
        }
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    renderUpdatedColumn(data, type, row) {
        if (!row.updated_at) return '‚Äî';
        
        try {
            const date = new Date(row.updated_at);
            const now = new Date();
            const daysDiff = Math.floor((now - date) / (1000 * 60 * 60 * 24));
            
            return `
                <div class="text-xs">
                    <div>${date.toLocaleDateString('ru-RU')}</div>
                    <div class="text-gray-500 text-xs">${daysDiff} –¥–Ω. –Ω–∞–∑–∞–¥</div>
                </div>
            `;
        } catch (e) {
            return '‚Äî';
        }
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    renderCharacteristicsColumn(data, type, row) {
        const isListing = row.type === 'listing';
        const parts = [];
        
        // –¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã
        if (row.property_type) {
            const types = {
                'studio': '–°—Ç—É–¥–∏—è',
                '1k': '1-–∫',
                '2k': '2-–∫',
                '3k': '3-–∫',
                '4k+': '4-–∫+'
            };
            parts.push(types[row.property_type] || row.property_type);
            parts.push('–∫–≤–∞—Ä—Ç–∏—Ä–∞');
        }
        
        // –ü–ª–æ—â–∞–¥–∏
        const areas = [];
        if (row.area_total) areas.push(row.area_total);
        if (row.area_living) areas.push(row.area_living);
        if (row.area_kitchen) areas.push(row.area_kitchen);
        if (areas.length > 0) parts.push(`${areas.join('/')}–º¬≤`);
        
        // –≠—Ç–∞–∂/—ç—Ç–∞–∂–Ω–æ—Å—Ç—å
        if (row.floor && row.total_floors) {
            parts.push(`${row.floor}/${row.total_floors} —ç—Ç.`);
        } else if (row.floor && row.floors_total) {
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—è floors_total –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            parts.push(`${row.floor}/${row.floors_total} —ç—Ç.`);
        }
        
        const characteristicsText = parts.length > 0 ? parts.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        
        return `<div class="text-xs text-gray-900 max-w-xs" title="${characteristicsText}">${characteristicsText}</div>`;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    renderContactColumn(data, type, row) {
        const isListing = row.type === 'listing';
        
        if (isListing) {
            const sellerType = row.seller_type === 'private' ? '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' : 
                             row.seller_type === 'agency' ? '–ê–≥–µ–Ω—Ç' : 
                             row.seller_type === 'agent' ? '–ê–≥–µ–Ω—Ç' :
                             row.seller_type === 'owner' ? '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' :
                             row.seller_type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            
            const sellerName = row.seller_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            
            return `<div class="text-xs max-w-xs">
                <div class="text-gray-900 truncate" title="${sellerType}">${sellerType}</div>
                <div class="text-gray-500 truncate" title="${sellerName}">${sellerName}</div>
            </div>`;
        } else {
            // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
            const ownerStatus = row.owner_status || '—Ç–æ–ª—å–∫–æ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤';
            const statusColor = ownerStatus === '–µ—Å—Ç—å –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞' ? 'text-green-600' :
                               ownerStatus === '–±—ã–ª–æ –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞' ? 'text-yellow-600' :
                               'text-gray-600';
            
            return `<div class="text-xs max-w-xs">
                <div class="${statusColor} font-medium">${ownerStatus}</div>
            </div>`;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ ID (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    getAddressNameById(addressId) {
        if (!addressId || !this.addresses) return '';
        const address = this.addresses.find(addr => addr.id === addressId);
        return address ? address.address : '';
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    renderActionsColumn(data, type, row) {
        // –í —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –±—ã–ª–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        return '';
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
     */
    createChildRowContent(rowData) {
        if (rowData.type === 'listing') {
            return this.createListingChildContent(rowData);
        } else if (rowData.type === 'real_estate_object') {
            return this.createObjectChildContent(rowData);
        }
        return '';
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    createListingChildContent(listing) {
        return `
            <div class="p-4 bg-gray-50 rounded">
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <h6 class="font-medium mb-2">–î–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</h6>
                        <div class="text-sm space-y-1">
                            <div>–ü–ª–æ—â–∞–¥—å: ${listing.area_total || listing.area || '‚Äî'} –º¬≤</div>
                            <div>–≠—Ç–∞–∂: ${listing.floor || '‚Äî'}</div>
                            <div>–ö–æ–º–Ω–∞—Ç: ${listing.rooms || '‚Äî'}</div>
                            <div>–°–æ–∑–¥–∞–Ω–æ: ${listing.created_at ? new Date(listing.created_at).toLocaleDateString() : '‚Äî'}</div>
                        </div>
                    </div>
                    <div>
                        <h6 class="font-medium mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</h6>
                        <div class="text-sm space-y-1">
                            <div>ID: ${listing.id}</div>
                            <div>–ò—Å—Ç–æ—á–Ω–∏–∫: ${CONSTANTS.DATA_SOURCE_NAMES[listing.source] || listing.source}</div>
                            <div>–°—Ç–∞—Ç—É—Å: ${listing.status || '‚Äî'}</div>
                        </div>
                    </div>
                </div>
                ${listing.description ? `<div class="mt-3"><h6 class="font-medium">–û–ø–∏—Å–∞–Ω–∏–µ</h6><p class="text-sm text-gray-600">${listing.description.substring(0, 200)}${listing.description.length > 200 ? '...' : ''}</p></div>` : ''}
            </div>
        `;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ—á–µ—Ä–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
     */
    createObjectChildContent(object) {
        return `
            <div class="p-4 bg-gray-50 rounded">
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <h6 class="font-medium mb-2">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–∫—Ç–∞</h6>
                        <div class="text-sm space-y-1">
                            <div>–û–±—ä—è–≤–ª–µ–Ω–∏–π: ${object.listings_count || 0}</div>
                            <div>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${object.average_price ? object.average_price.toLocaleString() + ' ‚ÇΩ' : '‚Äî'}</div>
                            <div>–ú–∏–Ω. —Ü–µ–Ω–∞: ${object.min_price ? object.min_price.toLocaleString() + ' ‚ÇΩ' : '‚Äî'}</div>
                            <div>–ú–∞–∫—Å. —Ü–µ–Ω–∞: ${object.max_price ? object.max_price.toLocaleString() + ' ‚ÇΩ' : '‚Äî'}</div>
                        </div>
                    </div>
                    <div>
                        <h6 class="font-medium mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</h6>
                        <div class="text-sm space-y-1">
                            <div>ID: ${object.id}</div>
                            <div>–¢–∏–ø: ${object.property_type || '‚Äî'}</div>
                            <div>–°–æ–∑–¥–∞–Ω: ${object.created_at ? new Date(object.created_at).toLocaleDateString() : '‚Äî'}</div>
                            <div>–û–±–Ω–æ–≤–ª–µ–Ω: ${object.updated_at ? new Date(object.updated_at).toLocaleDateString() : '‚Äî'}</div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π
     */
    getProcessingStatus() {
        return {
            processing: this.duplicatesState.processing,
            algorithm: this.duplicatesState.currentAlgorithm,
            selected: this.duplicatesState.selectedDuplicates.size,
            stats: this.duplicatesStats
        };
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    showError(message) {
        this.showNotification(message, 'error');
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        const colors = {
            success: 'bg-green-100 border-green-500 text-green-700',
            error: 'bg-red-100 border-red-500 text-red-700',
            info: 'bg-blue-100 border-blue-500 text-blue-700',
            warning: 'bg-yellow-100 border-yellow-500 text-yellow-700'
        };

        notification.className = `border-l-4 p-4 mb-4 ${colors[type]} rounded shadow-lg`;
        notification.innerHTML = `
            <div class="flex justify-between items-center">
                <span>${message}</span>
                <button class="text-lg leading-none notification-close-btn">&times;</button>
            </div>
        `;

        // Add event listener for close button instead of inline onclick
        const closeBtn = notification.querySelector('.notification-close-btn');
        closeBtn.addEventListener('click', () => {
            notification.remove();
        });
        
        const notificationsContainer = document.getElementById('notifications');
        if (notificationsContainer) {
            notificationsContainer.appendChild(notification);
        } else {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä notifications –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è helper –º–µ—Ç–æ–¥–æ–≤
     */
    async loadAddresses() {
        try {
            this.addresses = await window.db.getAll('addresses');
            console.log(`üìç DuplicatesManager: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.addresses.length} –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è helper –º–µ—Ç–æ–¥–æ–≤`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –≤ DuplicatesManager:', error);
            this.addresses = [];
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ ID (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    getAddressNameById(addressId) {
        if (!addressId || !this.addresses) return '';
        const address = this.addresses.find(addr => addr.id === addressId);
        return address ? address.address : '';
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥—É–±–ª–µ–π
     */
    destroy() {
        if (this.duplicatesTable) {
            this.duplicatesTable.destroy();
            this.duplicatesTable = null;
        }
        
        if (this.eventBus) {
            this.eventBus.offAll(CONSTANTS.EVENTS.AREA_LOADED);
            this.eventBus.offAll(CONSTANTS.EVENTS.ADDRESSES_LOADED);
            this.eventBus.offAll(CONSTANTS.EVENTS.LISTINGS_LOADED);
            this.eventBus.offAll(CONSTANTS.EVENTS.AREA_CHANGED);
            this.eventBus.offAll(CONSTANTS.EVENTS.LISTING_UPDATED);
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        if (window.duplicatesStatusChartInstance) {
            window.duplicatesStatusChartInstance.destroy();
            window.duplicatesStatusChartInstance = null;
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        document.getElementById('processDuplicatesBtn')?.removeEventListener('click', this.processDuplicates);
        document.getElementById('processDuplicatesAdvancedBtn')?.removeEventListener('click', this.processDuplicatesAdvanced);
        document.getElementById('mergeDuplicatesBtn')?.removeEventListener('click', this.mergeDuplicates);
        document.getElementById('splitDuplicatesBtn')?.removeEventListener('click', this.splitDuplicates);
        document.getElementById('duplicatesStatusFilter')?.removeEventListener('change', this.applyProcessingFilters);
        document.getElementById('duplicatesPanelHeader')?.removeEventListener('click', this.toggleDuplicatesPanel);
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.duplicatesState.selectedDuplicates.clear();
        this.duplicatesState.expandedRows.clear();
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ child row (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async showObjectListings(row, objectId) {
        try {
            console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', objectId);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            const objectListings = await this.getListingsForObject(objectId);
            
            if (objectListings.length === 0) {
                console.log('üìã –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', objectId);
                row.child('<div class="p-4 text-center text-gray-500">–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞</div>').show();
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è child row —Å —Ç–∞–±–ª–∏—Ü–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            const childHtml = this.createChildListingsTable(objectListings);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º child row
            row.child(childHtml).show();
            
            console.log('üìã Child row —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', objectId, '—Å', objectListings.length, '–æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞:', error);
            row.child('<div class="p-4 text-center text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</div>').show();
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async getListingsForObject(objectId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ object_id
            const allListings = await window.db.getAll('listings');
            const objectListings = allListings.filter(listing => listing.object_id === objectId);
            
            console.log('üìã –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞', objectId, ':', objectListings.length);
            
            return objectListings;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', error);
            return [];
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å HTML —Ç–∞–±–ª–∏—Ü—É –¥–ª—è child row —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    createChildListingsTable(listings) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—É–±—ã–≤–∞–Ω–∏–µ) –∏—Å–ø–æ–ª—å–∑—É—è timestamp
        const sortedListings = listings.sort((a, b) => {
            const timestampA = new Date(a.updated || a.updated_at || a.created || a.created_at || 0).getTime();
            const timestampB = new Date(b.updated || b.updated_at || b.created || b.created_at || 0).getTime();
            return timestampB - timestampA;
        });

        const tableHtml = `
            <div class="bg-gray-50 p-4">
                <h4 class="text-sm font-medium text-gray-900 mb-3">–û–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ (${listings.length})</h4>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°—Ç–∞—Ç—É—Å</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°–æ–∑–¥–∞–Ω–æ</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–û–±–Ω–æ–≤–ª–µ–Ω–æ</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ê–¥—Ä–µ—Å</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–¶–µ–Ω–∞</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ö–æ–Ω—Ç–∞–∫—Ç</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ò—Å—Ç–æ—á–Ω–∏–∫</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            ${sortedListings.map(listing => this.createChildListingRow(listing)).join('')}
                        </tbody>
                    </table>
                </div>
            </div>
        `;
        
        return tableHtml;
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –¥–æ—á–µ—Ä–Ω–µ–π —Ç–∞–±–ª–∏—Ü–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    createChildListingRow(listing) {
        // 1. –°—Ç–∞—Ç—É—Å (–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã)
        const statusBadges = {
            'active': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">–ê–∫—Ç–∏–≤–Ω—ã–π</span>',
            'archived': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>',
            'archive': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>',
            'needs_processing': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">–¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</span>'
        };
        
        let statusHtml = statusBadges[listing.status] || `<span class="text-xs text-gray-500">${listing.status}</span>`;
        
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–π —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
        
        // 2. –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        const dateValue = listing.created || listing.created_at;
        let createdHtml = '‚Äî';
        if (dateValue) {
            const createdDate = new Date(dateValue);
            const dateStr = createdDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' });
            
            // –í—ã—á–∏—Å–ª—è–µ–º —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é
            const updatedValue = listing.updated || listing.updated_at;
            const endDate = updatedValue ? new Date(updatedValue) : new Date();
            const diffTime = Math.abs(endDate - createdDate);
            const exposureDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            createdHtml = `<div class="text-xs">
                ${dateStr}<br>
                <span class="text-gray-500" style="font-size: 10px;">—ç–∫—Å–ø. ${exposureDays} –¥–Ω.</span>
            </div>`;
        }
        
        // 3. –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updatedDateValue = listing.updated || listing.updated_at;
        let updatedHtml = '‚Äî';
        if (updatedDateValue) {
            const date = new Date(updatedDateValue);
            const now = new Date();
            const diffTime = Math.abs(now - date);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            const dateStr = date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' });
            const daysAgo = diffDays === 1 ? '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥' : `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
            const color = diffDays > 7 ? 'text-red-600' : 'text-green-600';
            
            updatedHtml = `<div class="text-xs">
                ${dateStr}<br>
                <span class="${color}" style="font-size: 10px;">${daysAgo}</span>
            </div>`;
        }
        
        // 4. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        const parts = [];
        
        if (listing.property_type) {
            const types = {
                'studio': '–°—Ç—É–¥–∏—è',
                '1k': '1-–∫',
                '2k': '2-–∫',
                '3k': '3-–∫',
                '4k+': '4-–∫+'
            };
            parts.push(types[listing.property_type] || listing.property_type);
            parts.push('–∫–≤–∞—Ä—Ç–∏—Ä–∞');
        }
        
        // –ü–ª–æ—â–∞–¥–∏
        const areas = [];
        if (listing.area_total) areas.push(listing.area_total);
        if (listing.area_living) areas.push(listing.area_living);
        if (listing.area_kitchen) areas.push(listing.area_kitchen);
        if (areas.length > 0) parts.push(`${areas.join('/')}–º¬≤`);
        
        // –≠—Ç–∞–∂/—ç—Ç–∞–∂–Ω–æ—Å—Ç—å
        if (listing.floor && listing.total_floors) {
            parts.push(`${listing.floor}/${listing.total_floors} —ç—Ç.`);
        } else if (listing.floor && listing.floors_total) {
            parts.push(`${listing.floor}/${listing.floors_total} —ç—Ç.`);
        }
        
        const characteristicsText = parts.length > 0 ? parts.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        
        // 5. –ê–¥—Ä–µ—Å
        const addressFromDb = this.getAddressNameById(listing.address_id);
        const addressText = listing.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
        let addressFromDbText = addressFromDb || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        const hasLowConfidence = listing.address_match_confidence === 'low' || listing.address_match_confidence === 'very_low';
        const isManualConfidence = listing.address_match_confidence === 'manual';
        const isAddressNotFound = addressFromDbText === '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
        
        if (hasLowConfidence && !isAddressNotFound) {
            const confidenceText = listing.address_match_confidence === 'low' ? '–ù–∏–∑–∫–∞—è' : '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è';
            addressFromDbText += ` (${confidenceText})`;
        } else if (isManualConfidence && !isAddressNotFound) {
            addressFromDbText += ` (–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)`;
        }
        
        const addressClass = addressText === '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω' ? 'text-red-600 hover:text-red-800' : 'text-blue-600 hover:text-blue-800';
        const addressFromDbClass = (isAddressNotFound || (hasLowConfidence && !isManualConfidence)) ? 'text-red-500' : 'text-gray-500';
        
        const addressHtml = `<div class="text-xs max-w-xs">
            <div class="${addressClass} cursor-pointer clickable-address truncate" data-listing-id="${listing.id}">${addressText}</div>
            <div class="${addressFromDbClass} truncate">${addressFromDbText}</div>
        </div>`;
        
        // 6. –¶–µ–Ω–∞
        const priceValue = listing.price;
        let priceHtml = '<div class="text-xs">‚Äî</div>';
        if (priceValue) {
            const price = priceValue.toLocaleString();
            let pricePerMeter = '';
            
            if (listing.price_per_meter) {
                pricePerMeter = listing.price_per_meter.toLocaleString();
            } else if (priceValue && listing.area_total) {
                const calculated = Math.round(priceValue / listing.area_total);
                pricePerMeter = calculated.toLocaleString();
            }
            
            priceHtml = `<div class="text-xs">
                <div class="text-green-600 font-medium">${price}</div>
                ${pricePerMeter ? `<div class="text-gray-500">${pricePerMeter}</div>` : ''}
            </div>`;
        }
        
        // 7. –ö–æ–Ω—Ç–∞–∫—Ç
        const sellerType = listing.seller_type === 'private' ? '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' : 
                          listing.seller_type === 'agency' ? '–ê–≥–µ–Ω—Ç' : 
                          listing.seller_type === 'agent' ? '–ê–≥–µ–Ω—Ç' :
                          listing.seller_type === 'owner' ? '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' :
                          listing.seller_type || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        
        const sellerName = listing.seller_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        
        const contactHtml = `<div class="text-xs max-w-xs">
            <div class="text-gray-900 truncate" title="${sellerType}">${sellerType}</div>
            <div class="text-gray-500 truncate" title="${sellerName}">${sellerName}</div>
        </div>`;
        
        // 8. –ò—Å—Ç–æ—á–Ω–∏–∫ (–Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
        const sourceUrl = listing.url || '#';
        let sourceName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ source_metadata.original_source
        if (listing.source_metadata && listing.source_metadata.original_source) {
            sourceName = listing.source_metadata.original_source;
        } else if (listing.source) {
            // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É source —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
            sourceName = listing.source === 'avito' ? 'avito.ru' : listing.source === 'cian' ? 'cian.ru' : listing.source;
        }
        
        const sourceHtml = `<div class="text-xs">
            <a href="${sourceUrl}" target="_blank" class="text-blue-600 hover:text-blue-800">${sourceName}</a>
        </div>`;
        
        return `
            <tr class="hover:bg-gray-50">
                <td class="px-3 py-2 whitespace-nowrap text-xs">${statusHtml}</td>
                <td class="px-3 py-2 whitespace-nowrap text-xs">${createdHtml}</td>
                <td class="px-3 py-2 whitespace-nowrap text-xs">${updatedHtml}</td>
                <td class="px-3 py-2 whitespace-nowrap text-xs"><div class="text-xs text-gray-900 max-w-xs" title="${characteristicsText}">${characteristicsText}</div></td>
                <td class="px-3 py-2 whitespace-nowrap text-xs">${addressHtml}</td>
                <td class="px-3 py-2 whitespace-nowrap text-xs">${priceHtml}</td>
                <td class="px-3 py-2 whitespace-nowrap text-xs">${contactHtml}</td>
                <td class="px-3 py-2 whitespace-nowrap text-xs">${sourceHtml}</td>
            </tr>
        `;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    async showObjectDetails(objectId) {
        try {
            console.log('üè† –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞:', objectId);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
            let objectWithData;
            try {
                objectWithData = await window.realEstateObjectManager.getObjectWithListings(objectId);
            } catch (error) {
                console.error('–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', objectId, error);
                this.progressManager.showError('–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            if (!objectWithData || !objectWithData.object) {
                console.error('–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', objectId);
                this.progressManager.showError('–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const realEstateObject = objectWithData.object;
            const objectListings = objectWithData.listings || [];
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            this.currentObject = realEstateObject;
            this.currentObjectListings = objectListings;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ UIManager —Å –¥–∞–Ω–Ω—ã–º–∏
            if (this.uiManager) {
                await this.uiManager.openModal('objectModal', {
                    title: `–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ #${realEstateObject.id}`,
                    size: 'large',
                    objectData: {
                        realEstateObject: realEstateObject,
                        objectListings: objectListings,
                        duplicatesManager: this
                    }
                });
            } else {
                // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                const objectModalContent = document.getElementById('objectModalContent');
                objectModalContent.innerHTML = this.renderObjectDetails(realEstateObject, objectListings);
                document.getElementById('objectModal').classList.remove('hidden');
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                setTimeout(() => {
                    this.renderObjectMap(realEstateObject);
                    this.renderObjectPriceChart(realEstateObject);
                    if (objectListings.length > 0) {
                        this.loadObjectPhotosGallery(objectListings[0]);
                        this.loadObjectDescription(objectListings[0]);
                    }
                    this.initializeObjectPriceHistoryPanel(realEstateObject);
                    this.initializeObjectListingsTable(objectListings, realEstateObject.id);
                
                    console.log('üè† –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', realEstateObject.id);
                }, 100);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–∞: ' + error.message);
        }
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±—ä–µ–∫—Ç–∞ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
     */
    closeObjectModal() {
        // –û—á–∏—â–∞–µ–º –≥–∞–ª–µ—Ä–µ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        const gallery = document.querySelector('#objectPhotosGallery .fotorama');
        if (gallery) {
            if (window.$ && $.fn.fotorama) {
                $(gallery).fotorama().data('fotorama')?.destroy();
            }
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ UIManager
        if (this.uiManager) {
            this.uiManager.closeModal('objectModal');
        } else {
            // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            document.getElementById('objectModal').classList.add('hidden');
        }
        this.currentObject = null;
        this.currentObjectListings = null;
    }
    
    /**
     * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±—ä–µ–∫—Ç–∞
     */
    formatObjectCharacteristics(realEstateObject) {
        const parts = [];
        
        // –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if (realEstateObject.property_type) {
            const types = {
                'studio': '–°—Ç—É–¥–∏—è',
                '1k': '1-–∫',
                '2k': '2-–∫',
                '3k': '3-–∫',
                '4k+': '4-–∫+'
            };
            parts.push(types[realEstateObject.property_type] || realEstateObject.property_type);
            parts.push('–∫–≤–∞—Ä—Ç–∏—Ä–∞');
        }
        
        // –ü–ª–æ—â–∞–¥–∏
        const areas = [];
        if (realEstateObject.area_total) areas.push(realEstateObject.area_total);
        if (realEstateObject.area_living) areas.push(realEstateObject.area_living);
        if (realEstateObject.area_kitchen) areas.push(realEstateObject.area_kitchen);
        if (areas.length > 0) parts.push(`${areas.join('/')}–º¬≤`);
        
        // –≠—Ç–∞–∂/—ç—Ç–∞–∂–Ω–æ—Å—Ç—å
        if (realEstateObject.floor && realEstateObject.total_floors) {
            parts.push(`${realEstateObject.floor}/${realEstateObject.total_floors} —ç—Ç.`);
        }
        
        return parts.length > 0 ? parts.join(', ') : '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    renderObjectDetails(realEstateObject, objectListings) {
        // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞
        const address = this.getAddressNameById(realEstateObject.address_id) || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç—ã: –∫—Ä–∞—Ç–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ + –∞–¥—Ä–µ—Å
        const characteristics = this.formatObjectCharacteristics(realEstateObject);
        const mapTitle = `${characteristics} ‚Äî ${address}`;
        
        return `
            <!-- –ö–∞—Ä—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ -->
            <div class="mb-6">
                <div class="px-4 py-3">
                    <div class="flex items-center space-x-3">
                        <span class="text-lg font-medium text-gray-900">üìç ${mapTitle}</span>
                    </div>
                </div>
                <div class="px-4 pb-4">
                    <div id="object-map-${realEstateObject.id}" class="h-64 bg-gray-200 rounded-md">
                        <!-- –ö–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞ –∑–¥–µ—Å—å -->
                    </div>
                </div>
            </div>
            
            <!-- –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞ -->
            <div class="mb-6">
                <h4 class="text-lg font-medium text-gray-900 mb-4">–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞</h4>
                <div id="object-price-chart-${realEstateObject.id}" class="w-full">
                    <!-- –ì—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω –∑–¥–µ—Å—å -->
                </div>
            </div>
            
            <!-- –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –æ–±—ä–µ–∫—Ç–∞ -->
            <div class="mb-6">
                <div class="bg-white border border-gray-200 rounded-lg shadow-sm">
                    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ (—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–π) -->
                    <div id="objectPriceHistoryPanelHeader-${realEstateObject.id}" class="px-4 py-3 border-b border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors duration-150">
                        <div class="flex items-center justify-between">
                            <h4 class="text-lg font-medium text-gray-900">–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã</h4>
                            <svg id="objectPriceHistoryPanelChevron-${realEstateObject.id}" class="h-5 w-5 text-gray-400 transform transition-transform duration-200 rotate-[-90deg]" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </div>
                    </div>
                    
                    <!-- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ) -->
                    <div id="objectPriceHistoryPanelContent-${realEstateObject.id}" class="px-4 pb-4" style="display: none;">
                        <div class="mt-4">
                            <div class="overflow-x-auto">
                                <table id="objectPriceHistoryTable-${realEstateObject.id}" class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–î–∞—Ç–∞</th>
                                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–¶–µ–Ω–∞</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        <!-- –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ initializeObjectPriceHistoryTable -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ -->
            <div class="mb-6">
                <h4 class="text-lg font-medium text-gray-900 mb-4">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞</h4>
                <div class="bg-white overflow-hidden">
                    <div class="px-4 py-5 sm:p-6">
                        <dl class="grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2">
                            ${this.renderObjectParameters(realEstateObject)}
                        </dl>
                    </div>
                </div>
            </div>
            
            <!-- –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ -->
            <div class="mb-6">
                <h4 class="text-lg font-medium text-gray-900 mb-4">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ</h4>
                <div class="flex space-x-6">
                    <!-- –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ -->
                    <div class="w-1/2">
                        <div id="object-photos-${realEstateObject.id}" class="w-full">
                            <!-- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è -->
                        </div>
                    </div>
                    
                    <!-- –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –û–ø–∏—Å–∞–Ω–∏–µ -->
                    <div class="w-1/2">
                        <div class="bg-gray-50 rounded-lg p-4 h-[400px] overflow-y-auto">
                            <h5 class="text-sm font-medium text-gray-700 mb-3">–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</h5>
                            <div id="object-description-${realEstateObject.id}" class="text-sm text-gray-600 leading-relaxed">
                                <!-- –û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è -->
                                <div class="text-center text-gray-400 py-8">
                                    –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–∏—Å–∞–Ω–∏—è
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞ -->
            <div class="mb-6">
                <h4 class="text-lg font-medium text-gray-900 mb-4">–û–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ (${objectListings.length})</h4>
                <div class="overflow-x-auto">
                    <table id="object-listings-table-${realEstateObject.id}" class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°—Ç–∞—Ç—É—Å</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°–æ–∑–¥–∞–Ω–æ</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–û–±–Ω–æ–≤–ª–µ–Ω–æ</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ê–¥—Ä–µ—Å</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–¶–µ–Ω–∞</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ö–æ–Ω—Ç–∞–∫—Ç</th>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ò—Å—Ç–æ—á–Ω–∏–∫</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <!-- –°—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ initializeObjectListingsTable -->
                        </tbody>
                    </table>
                </div>
            </div>
        `;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    renderObjectParameters(realEstateObject) {
        const parameters = [];
        
        // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        if (realEstateObject.created_at) {
            const createdDate = new Date(realEstateObject.created_at).toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit', 
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</dt>
                    <dd class="mt-1 text-sm text-gray-900">${createdDate}</dd>
                </div>
            `);
        }
        
        // –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (realEstateObject.updated_at) {
            const updatedDate = new Date(realEstateObject.updated_at).toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric', 
                hour: '2-digit',
                minute: '2-digit'
            });
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</dt>
                    <dd class="mt-1 text-sm text-gray-900">${updatedDate}</dd>
                </div>
            `);
        }
        
        // –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        if (realEstateObject.current_price) {
            const price = realEstateObject.current_price.toLocaleString('ru-RU') + ' ‚ÇΩ';
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞</dt>
                    <dd class="mt-1 text-sm text-green-600 font-medium">${price}</dd>
                </div>
            `);
        }
        
        // –¶–µ–Ω–∞ –∑–∞ –º¬≤
        if (realEstateObject.price_per_meter) {
            const pricePerMeter = realEstateObject.price_per_meter.toLocaleString('ru-RU') + ' ‚ÇΩ/–º¬≤';
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–¶–µ–Ω–∞ –∑–∞ –º¬≤</dt>
                    <dd class="mt-1 text-sm text-gray-900">${pricePerMeter}</dd>
                </div>
            `);
        }
        
        // –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if (realEstateObject.property_type) {
            const types = {
                'studio': '–°—Ç—É–¥–∏—è',
                '1k': '1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                '2k': '2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞', 
                '3k': '3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                '4k+': '4+ –∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞'
            };
            const propertyTypeText = types[realEstateObject.property_type] || realEstateObject.property_type;
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</dt>
                    <dd class="mt-1 text-sm text-gray-900">${propertyTypeText}</dd>
                </div>
            `);
        }
        
        // –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å
        if (realEstateObject.area_total) {
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å</dt>
                    <dd class="mt-1 text-sm text-gray-900">${realEstateObject.area_total} –º¬≤</dd>
                </div>
            `);
        }
        
        // –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å
        if (realEstateObject.area_living) {
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å</dt>
                    <dd class="mt-1 text-sm text-gray-900">${realEstateObject.area_living} –º¬≤</dd>
                </div>
            `);
        }
        
        // –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏
        if (realEstateObject.area_kitchen) {
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏</dt>
                    <dd class="mt-1 text-sm text-gray-900">${realEstateObject.area_kitchen} –º¬≤</dd>
                </div>
            `);
        }
        
        // –≠—Ç–∞–∂
        if (realEstateObject.floor && realEstateObject.total_floors) {
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–≠—Ç–∞–∂</dt>
                    <dd class="mt-1 text-sm text-gray-900">${realEstateObject.floor} –∏–∑ ${realEstateObject.total_floors}</dd>
                </div>
            `);
        }
        
        // –°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞
        if (realEstateObject.status) {
            const statusText = realEstateObject.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ê—Ä—Ö–∏–≤–Ω—ã–π';
            const statusColor = realEstateObject.status === 'active' ? 'text-green-600' : 'text-gray-600';
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–°—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞</dt>
                    <dd class="mt-1 text-sm ${statusColor} font-medium">${statusText}</dd>
                </div>
            `);
        }
        
        // –°—Ç–∞—Ç—É—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
        if (realEstateObject.owner_status) {
            const ownerStatusColor = realEstateObject.owner_status === '–µ—Å—Ç—å –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞' ? 'text-green-600' :
                                   realEstateObject.owner_status === '–±—ã–ª–æ –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞' ? 'text-yellow-600' :
                                   'text-gray-600';
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–°—Ç–∞—Ç—É—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞</dt>
                    <dd class="mt-1 text-sm ${ownerStatusColor}">${realEstateObject.owner_status}</dd>
                </div>
            `);
        }
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        if (realEstateObject.listings_count) {
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</dt>
                    <dd class="mt-1 text-sm text-gray-900">${realEstateObject.listings_count}</dd>
                </div>
            `);
        }
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        if (realEstateObject.active_listings_count !== undefined) {
            parameters.push(`
                <div>
                    <dt class="text-sm font-medium text-gray-500">–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π</dt>
                    <dd class="mt-1 text-sm text-gray-900">${realEstateObject.active_listings_count}</dd>
                </div>
            `);
        }
        
        return parameters.join('');
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    renderObjectMap(realEstateObject) {
        try {
            const mapContainer = document.getElementById(`object-map-${realEstateObject.id}`);
            if (!mapContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ (—á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å)
            const coords = this.getObjectCoordinates(realEstateObject);
            if (!coords) {
                mapContainer.innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                return;
            }

            console.log(`üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${realEstateObject.id} —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:`, coords);

            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
            const objectMap = L.map(`object-map-${realEstateObject.id}`, {
                center: [coords.lat, coords.lng],
                zoom: 16,
                zoomControl: true,
                scrollWheelZoom: false
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∫–∞—Ä—Ç—ã
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(objectMap);

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –æ–±—ä–µ–∫—Ç–∞
            const objectMarker = L.marker([coords.lat, coords.lng], {
                icon: L.divIcon({
                    className: 'object-marker',
                    html: `<div style="background: #10b981; color: white; border-radius: 50%; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; font-size: 16px; font-weight: bold; border: 3px solid white; box-shadow: 0 2px 6px rgba(0,0,0,0.4);">üè†</div>`,
                    iconSize: [32, 32],
                    iconAnchor: [16, 16]
                })
            }).addTo(objectMap);

            // –î–æ–±–∞–≤–ª—è–µ–º popup –∫ –º–∞—Ä–∫–µ—Ä—É
            const addressText = this.getAddressNameById(realEstateObject.address_id) || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
            const priceText = realEstateObject.current_price ? 
                realEstateObject.current_price.toLocaleString('ru-RU') + ' ‚ÇΩ' : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            
            const markerPopupContent = `
                <div style="min-width: 200px;">
                    <strong>–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</strong><br>
                    <span style="color: #6b7280; font-size: 12px;">${this.escapeHtml(addressText)}</span><br>
                    <span style="color: #059669; font-weight: bold;">${priceText}</span>
                    ${realEstateObject.price_per_meter ? `<br><span style="color: #6b7280; font-size: 12px;">${realEstateObject.price_per_meter.toLocaleString('ru-RU')} ‚ÇΩ/–º¬≤</span>` : ''}
                </div>
            `;
            objectMarker.bindPopup(markerPopupContent);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            mapContainer._leafletMap = objectMap;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –æ–±—ä–µ–∫—Ç–∞:', error);
            const mapContainer = document.getElementById(`object-map-${realEstateObject.id}`);
            if (mapContainer) {
                mapContainer.innerHTML = '<div class="flex items-center justify-center h-full text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã</div>';
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    getObjectCoordinates(realEstateObject) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        if (realEstateObject.address_id) {
            const address = this.addresses.find(addr => addr.id === realEstateObject.address_id);
            if (address && address.coordinates && address.coordinates.lat && address.coordinates.lng) {
                return {
                    lat: parseFloat(address.coordinates.lat),
                    lng: parseFloat(address.coordinates.lng)
                };
            }
        }
        return null;
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(unsafe) {
        return unsafe
             .replace(/&/g, "&amp;")
             .replace(/</g, "&lt;")
             .replace(/>/g, "&gt;")
             .replace(/"/g, "&quot;")
             .replace(/'/g, "&#039;");
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞
     */
    renderObjectPriceChart(realEstateObject) {
        try {
            const chartContainer = document.getElementById(`object-price-chart-${realEstateObject.id}`);
            if (!chartContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            console.log(`üìä –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${realEstateObject.id}`);

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            const priceHistory = this.prepareObjectPriceHistoryData(realEstateObject);
            
            if (priceHistory.length === 0) {
                chartContainer.innerHTML = '<div class="text-center text-gray-500 py-8">–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</div>';
                return;
            }

            const seriesData = priceHistory.map(item => [item.date, item.price]);
            const prices = priceHistory.map(item => item.price);
            const minPrice = Math.min(...prices);
            const maxPrice = Math.max(...prices);

            let series = [{
                "name": "<span class=\"text-sky-500\">—Ü–µ–Ω–∞</span>",
                "data": seriesData
            }];
            let colors = ["#56c2d6"];
            let widths = ["3"];

            var options = {
                chart: {
                    height: 300,
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": [
                                "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
                                "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
                            ],
                            "shortMonths": [
                                "–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω",
                                "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"
                            ],
                            "days": [
                                "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", 
                                "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"
                            ],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    type: 'line',
                    shadow: {
                        enabled: false,
                        color: 'rgba(187,187,187,0.47)',
                        top: 3,
                        left: 2,
                        blur: 3,
                        opacity: 1
                    },
                    toolbar: {
                        show: false
                    }
                },
                stroke: {
                    curve: 'stepline',
                    width: widths
                },
                series: series,
                colors: colors,
                xaxis: {
                    type: 'datetime',
                    labels: {
                        format: 'dd MMM'
                    }
                },
                markers: {
                    size: 4,
                    opacity: 0.9,
                    colors: ["#56c2d6"],
                    strokeColor: "#fff",
                    strokeWidth: 2,
                    style: 'inverted',
                    hover: {
                        size: 8
                    }
                },
                tooltip: {
                    shared: false,
                    intersect: true,
                    x: {
                        format: 'dd MMM yyyy'
                    },
                    y: {
                        formatter: (value) => this.formatPrice(value)
                    }
                },
                yaxis: {
                    min: Math.floor(minPrice * 0.95),
                    max: Math.ceil(maxPrice * 1.05),
                    title: {
                        text: '–¶–µ–Ω–∞, ‚ÇΩ'
                    },
                    labels: {
                        formatter: (value) => this.formatPrice(value)
                    }
                },
                grid: {
                    show: true,
                    position: 'back',
                    xaxis: {
                        lines: {
                            show: true,
                        }
                    },
                    yaxis: {
                        lines: {
                            show: true,
                        }
                    },
                    borderColor: '#eeeeee',
                },
                legend: {
                    show: false
                },
                responsive: [{
                    breakpoint: 600,
                    options: {
                        chart: {
                            toolbar: {
                                show: false
                            }
                        }
                    }
                }]
            };

            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chartContainer.innerHTML = '';
            const chart = new ApexCharts(chartContainer, options);
            chart.render();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞:', error);
            const chartContainer = document.getElementById(`object-price-chart-${realEstateObject.id}`);
            if (chartContainer) {
                chartContainer.innerHTML = '<div class="flex items-center justify-center h-64 text-red-500">–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞</div>';
            }
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    prepareObjectPriceHistoryData(realEstateObject) {
        const history = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if (realEstateObject.price_history && Array.isArray(realEstateObject.price_history)) {
            realEstateObject.price_history.forEach(item => {
                if (item.price && item.date) {
                    history.push({
                        date: new Date(item.date).getTime(),
                        price: parseInt(item.price)
                    });
                }
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –æ–±—ä–µ–∫—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ª–æ–≥–∏–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
        if (realEstateObject.current_price) {
            let endPriceDate;
            
            if (realEstateObject.status === 'active') {
                // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                endPriceDate = new Date();
            } else {
                // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ - –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                endPriceDate = new Date(realEstateObject.updated_at || realEstateObject.created_at || Date.now());
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
            const lastHistoryDate = history.length > 0 ? history[history.length - 1].date : 0;
            if (Math.abs(endPriceDate.getTime() - lastHistoryDate) > 24 * 60 * 60 * 1000) {
                history.push({
                    date: endPriceDate.getTime(),
                    price: parseInt(realEstateObject.current_price)
                });
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        history.sort((a, b) => a.date - b.date);
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ü–µ–Ω –ø–æ–¥—Ä—è–¥, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏
        const filtered = [];
        for (let i = 0; i < history.length; i++) {
            if (i === 0 || i === history.length - 1 || history[i].price !== history[i-1].price) {
                filtered.push(history[i]);
            }
        }

        return filtered;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
     */
    formatPrice(price) {
        if (!price) return '0 ‚ÇΩ';
        return new Intl.NumberFormat('ru-RU').format(price) + ' ‚ÇΩ';
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏ –æ–±—ä–µ–∫—Ç–∞
     */
    loadObjectPhotosGallery(listing) {
        try {
            if (!this.currentObject) {
                console.warn('–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const photosContainer = document.getElementById(`object-photos-${this.currentObject.id}`);
            if (!photosContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            console.log(`üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${this.currentObject.id} –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}`);

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const photos = this.getListingPhotos(listing);
            
            if (photos.length === 0) {
                photosContainer.innerHTML = `
                    <div class="bg-gray-100 rounded-lg p-8 text-center text-gray-500">
                        üì∑ –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
                    </div>
                `;
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –≥–∞–ª–µ—Ä–µ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            photosContainer.innerHTML = `
                <div class="fotorama" 
                     data-nav="thumbs" 
                     data-width="100%" 
                     data-height="400"
                     data-thumbheight="50"
                     data-thumbwidth="50"
                     data-allowfullscreen="true"
                     data-transition="slide"
                     data-loop="true"
                     id="object-gallery-${this.currentObject.id}">
                    ${photos.map(photo => `<img src="${photo}" alt="–§–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è">`).join('')}
                </div>
            `;

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Fotorama
            setTimeout(() => {
                const galleryElement = document.getElementById(`object-gallery-${this.currentObject.id}`);
                if (galleryElement && window.$ && $.fn.fotorama) {
                    $(galleryElement).fotorama();
                }
            }, 100);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ–±—ä–µ–∫—Ç–∞:', error);
            const photosContainer = document.getElementById(`object-photos-${this.currentObject.id}`);
            if (photosContainer) {
                photosContainer.innerHTML = `
                    <div class="bg-red-100 rounded-lg p-8 text-center text-red-500">
                        ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    </div>
                `;
            }
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
     */
    loadObjectDescription(listing) {
        try {
            if (!this.currentObject) {
                console.warn('–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const descriptionContainer = document.getElementById(`object-description-${this.currentObject.id}`);
            if (!descriptionContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            console.log(`üìù –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${this.currentObject.id} –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}`);

            // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const description = this.getListingDescription(listing);
            
            if (!description || description.trim() === '') {
                descriptionContainer.innerHTML = `
                    <div class="text-center text-gray-400 py-8">
                        üìù –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
                    </div>
                `;
                return;
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
            const formattedDescription = description
                .replace(/\n/g, '<br>')
                .replace(/\r/g, '')
                .trim();

            descriptionContainer.innerHTML = `
                <div class="text-sm text-gray-600 leading-relaxed">
                    ${formattedDescription}
                </div>
            `;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:', error);
            const descriptionContainer = document.getElementById(`object-description-${this.currentObject.id}`);
            if (descriptionContainer) {
                descriptionContainer.innerHTML = `
                    <div class="bg-red-100 rounded-lg p-4 text-center text-red-500">
                        ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è
                    </div>
                `;
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    getListingPhotos(listing) {
        const photos = [];
        
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if (listing.images && Array.isArray(listing.images)) {
            photos.push(...listing.images);
        } else if (listing.photos && Array.isArray(listing.photos)) {
            photos.push(...listing.photos);
        } else if (listing.image_urls && Array.isArray(listing.image_urls)) {
            photos.push(...listing.image_urls);
        } else if (listing.photo_urls && Array.isArray(listing.photo_urls)) {
            photos.push(...listing.photo_urls);
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ URL
        return photos.filter(photo => {
            return photo && typeof photo === 'string' && 
                   (photo.startsWith('http://') || photo.startsWith('https://'));
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    getListingDescription(listing) {
        // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if (listing.description && typeof listing.description === 'string') {
            return listing.description;
        } else if (listing.desc && typeof listing.desc === 'string') {
            return listing.desc;
        } else if (listing.text && typeof listing.text === 'string') {
            return listing.text;
        } else if (listing.content && typeof listing.content === 'string') {
            return listing.content;
        }
        
        return '';
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä–µ–∫—Ç–∞
     */
    initializeObjectPriceHistoryPanel(realEstateObject) {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏
            const panelHeader = document.getElementById(`objectPriceHistoryPanelHeader-${realEstateObject.id}`);
            if (panelHeader) {
                panelHeader.addEventListener('click', () => {
                    this.toggleObjectPriceHistoryPanel(realEstateObject.id);
                });
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            this.initializeObjectPriceHistoryTable(realEstateObject);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä–µ–∫—Ç–∞
     */
    toggleObjectPriceHistoryPanel(objectId) {
        const content = document.getElementById(`objectPriceHistoryPanelContent-${objectId}`);
        const chevron = document.getElementById(`objectPriceHistoryPanelChevron-${objectId}`);
        
        if (!content || !chevron) return;

        const isHidden = content.style.display === 'none';
        
        if (isHidden) {
            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            content.style.display = 'block';
            chevron.style.transform = 'rotate(0deg)';
        } else {
            // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            content.style.display = 'none';
            chevron.style.transform = 'rotate(-90deg)';
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä–µ–∫—Ç–∞
     */
    async initializeObjectPriceHistoryTable(realEstateObject) {
        try {
            const tableElement = document.getElementById(`objectPriceHistoryTable-${realEstateObject.id}`);
            if (!tableElement) return;

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            const tableData = this.prepareObjectPriceHistoryTableData(realEstateObject);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataTable
            const dataTable = $(tableElement).DataTable({
                data: tableData,
                language: {
                    url: '../libs/datatables/ru.json'
                },
                pageLength: 10,
                searching: false,
                ordering: true,
                order: [[0, 'asc']], // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –≤ –∫–æ–Ω—Ü–µ)
                columns: [
                    {
                        title: '–î–∞—Ç–∞',
                        data: 'date',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                const date = new Date(data);
                                return date.toLocaleDateString('ru-RU') + ' ' + 
                                       date.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
                            } else if (type === 'sort' || type === 'type') {
                                return new Date(data).getTime();
                            }
                            return data;
                        }
                    },
                    {
                        title: '–¶–µ–Ω–∞',
                        data: 'price',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                return new Intl.NumberFormat('ru-RU').format(data) + ' ‚ÇΩ';
                            }
                            return data;
                        }
                    }
                ]
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
            this[`objectPriceHistoryTable_${realEstateObject.id}`] = dataTable;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä–µ–∫—Ç–∞
     */
    prepareObjectPriceHistoryTableData(realEstateObject) {
        const historyData = this.prepareObjectPriceHistoryData(realEstateObject);
        
        return historyData.map(item => ({
            date: item.date,
            price: item.price
        }));
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
     */
    initializeObjectListingsTable(objectListings, objectId) {
        try {
            const tableContainer = document.getElementById(`object-listings-table-${objectId}`);
            if (!tableContainer) {
                console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            console.log(`üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${objectId}`);

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—É–±—ã–≤–∞–Ω–∏–µ)
            const sortedListings = objectListings.sort((a, b) => {
                const timestampA = new Date(a.updated || a.updated_at || a.created || a.created_at || 0).getTime();
                const timestampB = new Date(b.updated || b.updated_at || b.created || b.created_at || 0).getTime();
                return timestampB - timestampA;
            });

            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            const tableBody = tableContainer.querySelector('tbody');
            tableBody.innerHTML = sortedListings.map(listing => 
                this.createObjectListingRow(listing, objectId)
            ).join('');

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
            this.bindObjectListingEvents(objectId);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è)
     */
    createObjectListingRow(listing, objectId) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ createChildListingRow, –Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
        let rowHtml = this.createChildListingRow(listing);
        
        // –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–º–µ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        rowHtml = rowHtml.replace(
            `data-listing-id="${listing.id}"`,
            `data-listing-id="${listing.id}" data-object-id="${objectId}"`
        );
        
        // –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        rowHtml = rowHtml.replace(
            'clickable-address',
            'clickable-object-listing-address'
        );
        
        return rowHtml;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
     */
    bindObjectListingEvents(objectId) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        $(document).off('click', '.clickable-object-listing-address');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        $(document).on('click', '.clickable-object-listing-address', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const listingId = e.currentTarget.dataset.listingId;
            const currentObjectId = e.currentTarget.dataset.objectId;
            
            if (listingId && this.currentObjectListings) {
                const listing = this.currentObjectListings.find(l => l.id === listingId);
                if (listing) {
                    console.log(`üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listingId} –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${currentObjectId}`);
                    this.loadObjectPhotosGallery(listing);
                    this.loadObjectDescription(listing);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
                    this.updateActiveObjectListingRow(listingId, currentObjectId);
                }
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
     */
    updateActiveObjectListingRow(listingId, objectId) {
        try {
            const tableContainer = document.getElementById(`object-listings-table-${objectId}`);
            if (!tableContainer) return;

            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
            const allRows = tableContainer.querySelectorAll('tbody tr');
            allRows.forEach(row => {
                row.classList.remove('bg-yellow-50', 'border-yellow-200');
            });

            // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
            const activeRow = tableContainer.querySelector(`tr[data-listing-id="${listingId}"]`);
            if (activeRow) {
                activeRow.classList.add('bg-yellow-50', 'border-yellow-200');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DuplicatesManager;
} else {
    window.DuplicatesManager = DuplicatesManager;
    console.log('‚úÖ DuplicatesManager –¥–æ—Å—Ç—É–ø–µ–Ω –≤ window:', typeof window.DuplicatesManager);
}