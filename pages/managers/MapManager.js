/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—Ä—Ç—ã
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–∞—Ä—Ç—ã, –º–∞—Ä–∫–µ—Ä–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */

class MapManager {
    constructor(dataState, eventBus, progressManager) {
        this.dataState = dataState;
        this.eventBus = eventBus;
        this.progressManager = progressManager;
        
        // –û–±—ä–µ–∫—Ç—ã –∫–∞—Ä—Ç—ã
        this.map = null;
        this.drawnItems = null;
        this.drawControl = null;
        this.drawnPolygon = null;
        this.areaPolygonLayer = null;
        
        // –°–ª–æ–∏ –∫–∞—Ä—Ç—ã
        this.mapLayers = {
            addresses: null,
            objects: null,
            listings: null
        };
        
        // –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        this.addressesCluster = null;
        this.listingsCluster = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã
        this.mapState = {
            initialized: false,
            activeFilter: null,
            defaultCenter: CONSTANTS.MAP_CONFIG.DEFAULT_CENTER,
            defaultZoom: CONSTANTS.MAP_CONFIG.DEFAULT_ZOOM
        };
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.bindEvents();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        if (this.eventBus) {
            this.eventBus.on(CONSTANTS.EVENTS.AREA_LOADED, async (area) => {
                await this.onAreaLoaded(area);
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.ADDRESSES_LOADED, async (addresses) => {
                await this.loadAddressesOnMap();
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.LISTINGS_LOADED, async (listings) => {
                await this.loadListingsOnMap();
            });
            
            this.eventBus.on(CONSTANTS.EVENTS.MAP_FILTER_CHANGED, (filterType) => {
                this.toggleMapFilter(filterType);
            });
        }
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–Ω–æ–ø–∫–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.bindFilterButtons();
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–Ω–æ–ø–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
        document.getElementById('refreshMapBtn')?.addEventListener('click', () => {
            this.refreshMapData();
        });
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–Ω–æ–ø–∫–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    bindFilterButtons() {
        const filterButtons = [
            { id: 'filterByYear', type: 'year' },
            { id: 'filterBySeries', type: 'series' },
            { id: 'filterByFloors', type: 'floors' },
            { id: 'filterByObjects', type: 'objects' },
            { id: 'filterByListings', type: 'listings' }
        ];
        
        filterButtons.forEach(({ id, type }) => {
            const button = document.getElementById(id);
            if (button) {
                button.addEventListener('click', () => {
                    this.toggleMapFilter(type);
                });
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–∞—Å—Ç–∏
     */
    async onAreaLoaded(area) {
        if (!this.mapState.initialized) {
            await this.initMap();
        }
        
        this.displayAreaPolygon();
        await this.loadMapData();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
     */
    async initMap() {
        try {
            if (this.mapState.initialized) {
                await Helpers.debugLog('üó∫Ô∏è –ö–∞—Ä—Ç–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                return;
            }
            
            await Helpers.debugLog('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã');
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
            this.map = L.map('map').setView(this.mapState.defaultCenter, this.mapState.defaultZoom);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∫–∞—Ä—Ç—ã
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(this.map);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∏ –∫–∞—Ä—Ç—ã
            this.initMapLayers();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è
            this.initDrawControls();
            
            // –ï—Å–ª–∏ —É –æ–±–ª–∞—Å—Ç–∏ –µ—Å—Ç—å –ø–æ–ª–∏–≥–æ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å–ª–æ–π
            const currentArea = this.dataState.getState('currentArea');
            if (currentArea && this.hasAreaPolygon(currentArea)) {
                this.displayAreaPolygon();
            }
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.setDefaultMapFilter();
            
            this.mapState.initialized = true;
            this.dataState.setState('flags', {
                ...this.dataState.getState('flags'),
                mapInitialized: true
            });
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            this.eventBus.emit(CONSTANTS.EVENTS.MAP_INITIALIZED, {
                mapId: 'map',
                timestamp: new Date()
            });
            
            await Helpers.debugLog('‚úÖ –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
        } catch (error) {
            console.error('Error initializing map:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã');
            throw error;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–µ–≤ –∫–∞—Ä—Ç—ã
     */
    initMapLayers() {
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã —Å–ª–æ–µ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞ –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        this.mapLayers.addresses = L.layerGroup().addTo(this.map);
        this.mapLayers.objects = L.layerGroup();
        this.mapLayers.listings = L.layerGroup();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ (–Ω–µ —Å–æ–∑–¥–∞–µ–º —Å—Ä–∞–∑—É)
        this.addressesCluster = null;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–Ω–µ —Å–æ–∑–¥–∞–µ–º —Å—Ä–∞–∑—É)
        this.listingsCluster = null;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–ª–æ–µ–≤
        const overlayMaps = {
            "üìç –ê–¥—Ä–µ—Å–∞": this.mapLayers.addresses,
            "üè† –û–±—ä–µ–∫—Ç—ã": this.mapLayers.objects,
            "üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è": this.mapLayers.listings
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (this.areaPolygonLayer) {
            overlayMaps["üî∑ –ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏"] = this.areaPolygonLayer;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É
        const layerControl = L.control.layers(null, overlayMaps, {
            position: 'topleft',
            collapsed: false
        }).addTo(this.map);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (this.areaPolygonLayer) {
            this.areaPolygonLayer.addTo(this.map);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
        this.map.on('overlayadd', (e) => {
            Helpers.debugLog('Layer added:', e.name);
            if (e.name === 'üìç –ê–¥—Ä–µ—Å–∞' && this.addressesCluster) {
                this.addressesCluster.markerLayer.addTo(this.map);
                this.addressesCluster.clusterLayer.addTo(this.map);
            } else if (e.name === 'üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è' && this.listingsCluster) {
                this.listingsCluster.markerLayer.addTo(this.map);
                this.listingsCluster.clusterLayer.addTo(this.map);
            }
        });
        
        this.map.on('overlayremove', (e) => {
            Helpers.debugLog('Layer removed:', e.name);
            if (e.name === 'üìç –ê–¥—Ä–µ—Å–∞' && this.addressesCluster) {
                this.map.removeLayer(this.addressesCluster.markerLayer);
                this.map.removeLayer(this.addressesCluster.clusterLayer);
            } else if (e.name === 'üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è' && this.listingsCluster) {
                this.map.removeLayer(this.listingsCluster.markerLayer);
                this.map.removeLayer(this.listingsCluster.clusterLayer);
            }
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
     */
    initDrawControls() {
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.drawnItems = new L.FeatureGroup();
        this.map.addLayer(this.drawnItems);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª–∏–≥–æ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (this.areaPolygonLayer) {
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω —Å –∫–∞—Ä—Ç—ã (–µ—Å–ª–∏ –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞–ø—Ä—è–º—É—é)
            if (this.map.hasLayer(this.areaPolygonLayer)) {
                this.map.removeLayer(this.areaPolygonLayer);
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –≤ –≥—Ä—É–ø–ø—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –µ–≥–æ –Ω–∞ –∫–∞—Ä—Ç—É)
            this.drawnItems.addLayer(this.areaPolygonLayer);
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        const drawControl = new L.Control.Draw({
            position: 'topright',
            draw: {
                polygon: {
                    allowIntersection: false,
                    drawError: {
                        color: '#e1e047',
                        message: '<strong>–û—à–∏–±–∫–∞:</strong> –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è!'
                    },
                    shapeOptions: {
                        color: CONSTANTS.MAP_CONFIG.POLYGON_COLOR,
                        fillColor: CONSTANTS.MAP_CONFIG.POLYGON_COLOR,
                        fillOpacity: CONSTANTS.MAP_CONFIG.POLYGON_FILL_OPACITY
                    }
                },
                polyline: false,
                rectangle: false,
                circle: false,
                marker: false,
                circlemarker: false
            },
            edit: {
                featureGroup: this.drawnItems,
                remove: true
            }
        });
        
        this.drawControl = drawControl;
        this.map.addControl(drawControl);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        this.map.on(L.Draw.Event.CREATED, (e) => {
            this.onPolygonCreated(e);
        });
        
        this.map.on(L.Draw.Event.EDITED, (e) => {
            this.onPolygonEdited(e);
        });
        
        this.map.on(L.Draw.Event.DELETED, (e) => {
            this.onPolygonDeleted(e);
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞
     */
    onPolygonCreated(e) {
        const layer = e.layer;
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–ª–∏–≥–æ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (this.drawnPolygon && this.drawnItems.hasLayer(this.drawnPolygon)) {
            this.drawnItems.removeLayer(this.drawnPolygon);
        }
        if (this.areaPolygonLayer && this.drawnItems.hasLayer(this.areaPolygonLayer)) {
            this.drawnItems.removeLayer(this.areaPolygonLayer);
        }
        
        // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é —Å –∫–∞—Ä—Ç—ã
        if (this.drawnPolygon && this.map.hasLayer(this.drawnPolygon)) {
            this.map.removeLayer(this.drawnPolygon);
        }
        if (this.areaPolygonLayer && this.map.hasLayer(this.areaPolygonLayer)) {
            this.map.removeLayer(this.areaPolygonLayer);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω
        this.drawnPolygon = layer;
        this.areaPolygonLayer = layer;
        this.drawnItems.addLayer(layer);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –≤ –æ–±–ª–∞—Å—Ç—å
        this.savePolygon();
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞
     */
    onPolygonEdited(e) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–∏
        const layers = e.layers;
        layers.eachLayer((layer) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω
            this.drawnPolygon = layer;
            this.areaPolygonLayer = layer;
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.savePolygon();
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞
     */
    onPolygonDeleted(e) {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω
        this.drawnPolygon = null;
        this.areaPolygonLayer = null;
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –≤ –æ–±–ª–∞—Å—Ç–∏
        const currentArea = this.dataState.getState('currentArea');
        if (currentArea) {
            currentArea.polygon = [];
            this.dataState.setState('currentArea', currentArea);
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.eventBus.emit(CONSTANTS.EVENTS.AREA_UPDATED, {
            area: currentArea,
            polygonDeleted: true,
            timestamp: new Date()
        });
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞
     */
    async savePolygon() {
        if (!this.drawnPolygon) return;
        
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –ø–æ–ª–∏–≥–æ–Ω–∞
            const latLngs = this.drawnPolygon.getLatLngs()[0];
            const polygon = latLngs.map(point => ({
                lat: point.lat,
                lng: point.lng
            }));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å
            const currentArea = this.dataState.getState('currentArea');
            if (currentArea) {
                currentArea.polygon = polygon;
                this.dataState.setState('currentArea', currentArea);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await window.db.update('map_areas', currentArea);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                this.eventBus.emit(CONSTANTS.EVENTS.AREA_UPDATED, {
                    area: currentArea,
                    polygonChanged: true,
                    timestamp: new Date()
                });
                
                await Helpers.debugLog('‚úÖ –ü–æ–ª–∏–≥–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
            }
            
        } catch (error) {
            console.error('Error saving polygon:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞');
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –æ–±–ª–∞—Å—Ç–∏
     */
    displayAreaPolygon() {
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea || !this.hasAreaPolygon(currentArea)) {
            return;
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª–∏–≥–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if (this.areaPolygonLayer) {
            Helpers.debugLog('üî∑ –ü–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ');
            return;
        }
        
        Helpers.debugLog('üî∑ –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µ');
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Leaflet
        const latLngs = currentArea.polygon.map(point => [point.lat, point.lng]);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–π
        this.areaPolygonLayer = L.polygon(latLngs, {
            color: CONSTANTS.MAP_CONFIG.POLYGON_COLOR,
            fillColor: CONSTANTS.MAP_CONFIG.POLYGON_COLOR,
            fillOpacity: CONSTANTS.MAP_CONFIG.POLYGON_FILL_OPACITY,
            weight: 2,
            opacity: CONSTANTS.MAP_CONFIG.POLYGON_OPACITY
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.drawnPolygon = this.areaPolygonLayer;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –≤ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞)
        if (this.drawnItems) {
            this.drawnItems.addLayer(this.areaPolygonLayer);
        } else {
            // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –∫–∞—Ä—Ç—É
            this.map.addLayer(this.areaPolygonLayer);
        }
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –∫–∞—Ä—Ç—ã –≤–∏–¥–∏–º–∞
        const mapContent = document.getElementById('mapPanelContent');
        if (mapContent && mapContent.style.display !== 'none') {
            this.map.fitBounds(this.areaPolygonLayer.getBounds());
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞—Ä—Ç—É
     */
    async loadMapData() {
        if (!this.mapState.initialized) {
            await Helpers.debugLog('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö');
            return;
        }
        
        try {
            await Helpers.debugLog('üîÑ === –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–°–ï–• –î–ê–ù–ù–´–• –ö–ê–†–¢–´ ===');
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –æ–±–ª–∞—Å—Ç–∏
            this.displayAreaPolygon();
            
            await Helpers.debugLog('üìç –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–∞—Ä—Ç—É...');
            await this.loadAddressesOnMap();
            
            await Helpers.debugLog('üè¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É...');
            await this.loadObjectsOnMap();
            
            await Helpers.debugLog('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç—É...');
            await this.loadListingsOnMap();
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            this.eventBus.emit(CONSTANTS.EVENTS.MAP_UPDATED, {
                timestamp: new Date()
            });
            
            await Helpers.debugLog('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            
        } catch (error) {
            console.error('Error loading map data:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã');
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
     */
    async loadAddressesOnMap() {
        try {
            const addresses = this.dataState.getState('addresses') || [];
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            this.mapLayers.addresses.clearLayers();
            if (this.addressesCluster) {
                this.addressesCluster.clearMarkers();
            }
            
            if (addresses.length === 0) {
                await Helpers.debugLog('üìç –ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ');
                return;
            }
            
            const markers = [];
            
            addresses.forEach(address => {
                if (address.coordinates && address.coordinates.lat && address.coordinates.lng) {
                    const marker = this.createAddressMarker(address);
                    markers.push(marker);
                }
            });
            
            // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å–æ–≤ –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
            if (addresses.length > 20) {
                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if (!this.addressesCluster) {
                    this.addressesCluster = new MarkerCluster(this.map, {
                        maxClusterRadius: 80,
                        disableClusteringAtZoom: 16,
                        zoomToBoundsOnClick: true,
                        spiderfyOnMaxZoom: true,
                        animate: true
                    });
                }
                this.addressesCluster.addMarkers(markers);
                await Helpers.debugLog(`üìç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π`);
            } else {
                // –î–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–¥—Ä–µ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ –Ω–∞ –∫–∞—Ä—Ç—É
                markers.forEach(marker => {
                    this.mapLayers.addresses.addLayer(marker);
                });
                await Helpers.debugLog(`üìç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É`);
            }
            
        } catch (error) {
            console.error('Error loading addresses on map:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
     */
    async loadObjectsOnMap() {
        try {
            const objects = this.dataState.getState('realEstateObjects') || [];
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            this.mapLayers.objects.clearLayers();
            
            objects.forEach(object => {
                if (object.address?.coordinates?.lat && object.address?.coordinates?.lng) {
                    const marker = this.createObjectMarker(object);
                    this.mapLayers.objects.addLayer(marker);
                }
            });
            
            await Helpers.debugLog(`üè¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${objects.length} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É`);
            
        } catch (error) {
            console.error('Error loading objects on map:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç—É
     */
    async loadListingsOnMap() {
        try {
            const listings = this.dataState.getState('listings') || [];
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            this.mapLayers.listings.clearLayers();
            if (this.listingsCluster) {
                this.listingsCluster.clearMarkers();
            }
            
            if (listings.length === 0) {
                await Helpers.debugLog('üìã –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ');
                return;
            }
            
            const markers = [];
            
            listings.forEach(listing => {
                if (listing.coordinates && listing.coordinates.lat && listing.coordinates.lng) {
                    const marker = this.createListingMarker(listing);
                    markers.push(marker);
                }
            });
            
            // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
            if (listings.length > 20) {
                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if (!this.listingsCluster) {
                    this.listingsCluster = new MarkerCluster(this.map, {
                        maxClusterRadius: 60,
                        disableClusteringAtZoom: 16,
                        zoomToBoundsOnClick: true,
                        spiderfyOnMaxZoom: true,
                        animate: true
                    });
                }
                this.listingsCluster.addMarkers(markers);
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (!this.map.hasLayer(this.mapLayers.listings)) {
                    this.map.removeLayer(this.listingsCluster.markerLayer);
                    this.map.removeLayer(this.listingsCluster.clusterLayer);
                }
                await Helpers.debugLog(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç—É —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π`);
            } else {
                // –î–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ –Ω–∞ –∫–∞—Ä—Ç—É
                markers.forEach(marker => {
                    this.mapLayers.listings.addLayer(marker);
                });
                await Helpers.debugLog(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç—É`);
            }
            
        } catch (error) {
            console.error('Error loading listings on map:', error);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –∞–¥—Ä–µ—Å–∞
     */
    createAddressMarker(address) {
        const color = this.getAddressColor(address);
        
        const marker = L.marker([address.coordinates.lat, address.coordinates.lng], {
            icon: L.divIcon({
                className: 'address-marker',
                html: `<div style="background: ${color}; width: 12px; height: 12px; border-radius: 50%; border: 2px solid white; box-shadow: 0 1px 3px rgba(0,0,0,0.3);"></div>`,
                iconSize: [16, 16],
                iconAnchor: [8, 8]
            })
        });
        
        marker.bindPopup(this.createAddressPopup(address));
        
        return marker;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    createObjectMarker(object) {
        const marker = L.marker([object.address.coordinates.lat, object.address.coordinates.lng], {
            icon: L.divIcon({
                className: 'object-marker',
                html: '<div style="background: #10b981; width: 14px; height: 14px; border-radius: 3px; border: 2px solid white;"></div>',
                iconSize: [18, 18],
                iconAnchor: [9, 9]
            })
        });
        
        marker.bindPopup(this.createObjectPopup(object));
        
        return marker;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    createListingMarker(listing) {
        const color = this.getListingColor(listing);
        
        const marker = L.marker([listing.coordinates.lat, listing.coordinates.lng], {
            icon: L.divIcon({
                className: 'listing-marker',
                html: `<div style="background: ${color}; width: 10px; height: 10px; border-radius: 50%; border: 2px solid white;"></div>`,
                iconSize: [14, 14],
                iconAnchor: [7, 7]
            })
        });
        
        marker.bindPopup(this.createListingPopup(listing));
        
        return marker;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞
     */
    getAddressColor(address) {
        switch (this.mapState.activeFilter) {
            case 'year':
                return this.getYearColor(address.build_year);
            case 'series':
                return this.getSeriesColor(address.house_series_id);
            case 'floors':
                return this.getFloorsColor(address.floors_count);
            default:
                return CONSTANTS.DATA_SOURCE_COLORS[address.source] || '#6B7280';
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    getListingColor(listing) {
        return CONSTANTS.DATA_SOURCE_COLORS[listing.source] || '#6B7280';
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ –≥–æ–¥—É –ø–æ—Å—Ç—Ä–æ–π–∫–∏
     */
    getYearColor(year) {
        if (!year) return '#6B7280';
        
        if (year < 1950) return '#DC2626';
        if (year < 1970) return '#F59E0B';
        if (year < 1990) return '#10B981';
        if (year < 2010) return '#3B82F6';
        return '#8B5CF6';
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ —Å–µ—Ä–∏–∏ –¥–æ–º–∞
     */
    getSeriesColor(seriesId) {
        // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ house_series
        return Helpers.generateRandomColor();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
     */
    getFloorsColor(floors) {
        if (!floors) return '#6B7280';
        
        if (floors <= 2) return '#10B981';
        if (floors <= 5) return '#3B82F6';
        if (floors <= 10) return '#F59E0B';
        return '#DC2626';
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ popup –¥–ª—è –∞–¥—Ä–µ—Å–∞
     */
    createAddressPopup(address) {
        return `
            <div class="max-w-xs">
                <div class="font-medium text-gray-900 mb-2">üìç ${address.address}</div>
                <div class="text-sm text-gray-600 space-y-1">
                    <div>–¢–∏–ø: ${CONSTANTS.PROPERTY_TYPE_NAMES[address.type] || address.type}</div>
                    ${address.floors_count ? `<div>–≠—Ç–∞–∂–µ–π: ${address.floors_count}</div>` : ''}
                    ${address.build_year ? `<div>–ì–æ–¥: ${address.build_year}</div>` : ''}
                    <div>–ò—Å—Ç–æ—á–Ω–∏–∫: ${CONSTANTS.DATA_SOURCE_NAMES[address.source] || address.source}</div>
                </div>
            </div>
        `;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ popup –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
     */
    createObjectPopup(object) {
        return `
            <div class="max-w-xs">
                <div class="font-medium text-gray-900 mb-2">üè† ${object.name || object.address?.address || '–û–±—ä–µ–∫—Ç'}</div>
                <div class="text-sm text-gray-600 space-y-1">
                    <div>–¢–∏–ø: ${object.property_type || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
                    <div>–û–±—ä—è–≤–ª–µ–Ω–∏–π: ${object.listings_count || 0}</div>
                </div>
            </div>
        `;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ popup –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    createListingPopup(listing) {
        return `
            <div class="max-w-xs">
                <div class="font-medium text-gray-900 mb-2">üìã ${Helpers.truncateText(listing.title, 50)}</div>
                <div class="text-sm text-gray-600 space-y-1">
                    ${listing.price ? `<div>–¶–µ–Ω–∞: ${Helpers.formatPrice(listing.price)}</div>` : ''}
                    ${listing.area ? `<div>–ü–ª–æ—â–∞–¥—å: ${listing.area} –º¬≤</div>` : ''}
                    ${listing.floor ? `<div>–≠—Ç–∞–∂: ${listing.floor}</div>` : ''}
                    <div>–ò—Å—Ç–æ—á–Ω–∏–∫: ${CONSTANTS.DATA_SOURCE_NAMES[listing.source] || listing.source}</div>
                </div>
                <div class="mt-2">
                    <a href="${listing.url}" target="_blank" class="text-blue-600 hover:text-blue-800 text-xs">
                        –û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ‚Üí
                    </a>
                </div>
            </div>
        `;
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
     */
    toggleMapFilter(filterType) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filterButtons = [
            'filterByYear',
            'filterBySeries',
            'filterByFloors',
            'filterByObjects',
            'filterByListings'
        ];
        
        filterButtons.forEach(buttonId => {
            const button = document.getElementById(buttonId);
            if (button) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–±–µ–ª—ã–π —Ñ–æ–Ω)
                button.className = 'inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500';
            }
        });
        
        // –ï—Å–ª–∏ —Ç–æ—Ç –∂–µ —Ñ–∏–ª—å—Ç—Ä - –æ—Ç–∫–ª—é—á–∞–µ–º
        if (this.mapState.activeFilter === filterType) {
            this.mapState.activeFilter = null;
            this.dataState.setState('activeMapFilter', null);
            await Helpers.debugLog('üîÑ –§–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω');
            return;
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
        this.mapState.activeFilter = filterType;
        this.dataState.setState('activeMapFilter', filterType);
        
        const activeButton = document.getElementById(`filterBy${filterType.charAt(0).toUpperCase() + filterType.slice(1)}`);
        
        if (activeButton) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (sky —Ü–≤–µ—Ç)
            activeButton.className = 'inline-flex items-center px-3 py-2 border border-sky-300 shadow-sm text-sm leading-4 font-medium rounded-md text-sky-700 bg-sky-100 hover:bg-sky-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500';
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞
        this.eventBus.emit(CONSTANTS.EVENTS.MAP_FILTER_CHANGED, {
            filterType,
            timestamp: new Date()
        });
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Å –Ω–æ–≤—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
        this.loadAddressesOnMap();
        
        await Helpers.debugLog(`üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä: ${filterType}`);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    setDefaultMapFilter() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        this.mapState.activeFilter = 'year';
        this.dataState.setState('activeMapFilter', 'year');
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ–¥"
        const yearButton = document.getElementById('filterByYear');
        if (yearButton) {
            yearButton.className = 'inline-flex items-center px-3 py-2 border border-sky-300 shadow-sm text-sm leading-4 font-medium rounded-md text-sky-700 bg-sky-100 hover:bg-sky-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500';
        }
        
        Helpers.debugLog('üéØ –§–∏–ª—å—Ç—Ä "–ì–æ–¥" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ä—Ç—É
        this.loadMapData();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
     */
    async refreshMapData() {
        try {
            await this.loadMapData();
            this.progressManager.showSuccess('–ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        } catch (error) {
            console.error('Error refreshing map data:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã');
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ –≤ –æ–±–ª–∞—Å—Ç–∏
     */
    hasAreaPolygon(area) {
        return area && 
               area.polygon && 
               Array.isArray(area.polygon) && 
               area.polygon.length >= 3;
    }
    
    /**
     * –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ –æ–±–ª–∞—Å—Ç–∏
     */
    centerOnArea() {
        const currentArea = this.dataState.getState('currentArea');
        if (currentArea && this.hasAreaPolygon(currentArea) && this.areaPolygonLayer) {
            this.map.fitBounds(this.areaPolygonLayer.getBounds());
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –∫–∞—Ä—Ç—ã
     */
    getMapBounds() {
        if (!this.map) return null;
        return this.map.getBounds();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
     */
    getMapCenter() {
        if (!this.map) return null;
        return this.map.getCenter();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ –∫–∞—Ä—Ç—ã
     */
    getMapZoom() {
        if (!this.map) return null;
        return this.map.getZoom();
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã
     */
    getMapState() {
        return {
            ...this.mapState,
            bounds: this.getMapBounds(),
            center: this.getMapCenter(),
            zoom: this.getMapZoom()
        };
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–∞—Ä—Ç—ã
     */
    destroy() {
        if (this.map) {
            this.map.remove();
            this.map = null;
        }
        
        if (this.eventBus) {
            this.eventBus.offAll(CONSTANTS.EVENTS.AREA_LOADED);
            this.eventBus.offAll(CONSTANTS.EVENTS.ADDRESSES_LOADED);
            this.eventBus.offAll(CONSTANTS.EVENTS.LISTINGS_LOADED);
            this.eventBus.offAll(CONSTANTS.EVENTS.MAP_FILTER_CHANGED);
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        document.getElementById('refreshMapBtn')?.removeEventListener('click', this.refreshMapData);
        
        this.mapState.initialized = false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MapManager;
} else {
    window.MapManager = MapManager;
}