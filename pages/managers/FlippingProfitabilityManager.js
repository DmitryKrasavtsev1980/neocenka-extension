/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
class DatabaseUtils {
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    static async ensureDatabaseReady(timeout = 10000) {
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            if (window.db && window.db.db) {
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ë–î –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
                    const transaction = window.db.db.transaction(['settings'], 'readonly');
                    return true;
                } catch (error) {
                    // –ë–î –Ω–µ –≥–æ—Ç–æ–≤–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                }
            }
            
            // –ñ–¥—ë–º 100–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        throw new Error(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ ${timeout}ms`);
    }
}

/**
 * FlippingProfitabilityManager - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–π –¥–ª—è –æ—Ç—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–ª–∏–ø–ø–∏–Ω–≥
 * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É legacy ReportsManager –∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π v0.1
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å FlippingController
 */
class FlippingProfitabilityManager {
    constructor(reportsManager) {
        this.reportsManager = reportsManager;
        this.database = window.db;
        this.eventBus = reportsManager.eventBus;
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–ª–∞–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        this.isDestroyed = false;
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ApexCharts
        this.setupApexChartsErrorSuppression();
        
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π v0.1
        this.flippingController = null;
        this.profitabilityService = null;
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.container = null;
        this.placeholder = null;
        this.content = null;
        this.filterContainer = null;
        this.objectsGrid = null;
        this.mapContainer = null;
        this.chartContainer = null;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–ª–∏–ø–ø–∏–Ω–≥–∞
        this.flippingSettings = {
            purchaseExpenses: 300000,    // –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É
            repairCostPerMeter: 15000,   // –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –∑–∞ –º¬≤
            sellingExpenses: 300000,     // –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É  
            maintenanceMonths: 6,        // –ú–µ—Å—è—Ü—ã —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            maintenancePerMonth: 15000,  // –ú–µ—Å—è—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            additionalExpenses: 100000
        };
        
        // –î–∞–Ω–Ω—ã–µ
        this.segments = [];
        this.subsegments = [];
        this.realEstateObjects = [];
        this.filteredObjects = [];
        this.objectsForEvaluation = []; // –û–±—ä–µ–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–∞—Ä—Ö–∏–≤–Ω—ã–µ)
        this.addresses = []; // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –æ–±–ª–∞—Å—Ç–∏
        
        // –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
        this.marketCorridorChart = null;
        this.marketCorridorMode = 'sales'; // 'sales' –∏–ª–∏ 'history'
        this.currentPointsData = []; // –î–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –¥–ª—è tooltip
        this.chartCreationInProgress = false; // –§–ª–∞–≥ –∑–∞—â–∏—Ç—ã –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        this.chartUpdateInProgress = false; // –§–ª–∞–≥ –∑–∞—â–∏—Ç—ã –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.chartBeingDestroyed = false; // –§–ª–∞–≥ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤–æ –≤—Ä–µ–º—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–∞
        this.selectedObjectId = null;
        this.highlightedObjectId = null; // –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
        this.evaluationSlimSelect = null;
        this.evaluations = new Map(); // objectId -> evaluation (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ –≤ ComparativeAnalysisManager)
        
        this.debugEnabled = false; // –û—Ç–ª–∞–¥–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞
        
        // –§–∏–ª—å—Ç—Ä—ã
        this.currentFilters = {
            rooms: [],
            priceFrom: 0,
            priceTo: 10000000000,
            profitabilityPercent: 60,
            participants: 'flipper',
            profitSharing: 'percentage',
            flipperPercentage: 50,
            investorPercentage: 50,
            fixedPaymentAmount: 250000,
            fixedPlusPercentage: 30,
            financing: 'cash',
            downPayment: 20,
            mortgageRate: 17,
            mortgageTerm: 20,
            taxType: 'ip',
            renovationSpeed: 1.5,
            renovationType: 'auto',
            workCost: 10000,
            materialsCost: 10000,
            additionalExpenses: 100000
        };
        
        // –î–∞–Ω–Ω—ã–µ
        this.segments = [];
        this.subsegments = [];
        this.realEstateObjects = [];
        this.filteredObjects = [];
        this.objectsForEvaluation = []; // –û–±—ä–µ–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–∞—Ä—Ö–∏–≤–Ω—ã–µ)
        this.addresses = []; // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –æ–±–ª–∞—Å—Ç–∏
        
        // –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
        this.marketCorridorChart = null;
        this.marketCorridorMode = 'sales'; // 'sales' –∏–ª–∏ 'history'
        this.currentPointsData = []; // –î–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –¥–ª—è tooltip
        this.chartCreationInProgress = false; // –§–ª–∞–≥ –∑–∞—â–∏—Ç—ã –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        this.chartUpdateInProgress = false; // –§–ª–∞–≥ –∑–∞—â–∏—Ç—ã –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.chartBeingDestroyed = false; // –§–ª–∞–≥ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤–æ –≤—Ä–µ–º—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–∞
        this.selectedObjectId = null;
        this.highlightedObjectId = null; // –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
        this.evaluationSlimSelect = null;
        this.evaluations = new Map(); // objectId -> evaluation (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ –≤ ComparativeAnalysisManager)
        
        this.debugEnabled = false; // –û—Ç–ª–∞–¥–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞
    }
    
    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ ApexCharts querySelector
     */
    setupApexChartsErrorSuppression() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ JavaScript
        if (!window.flippingApexChartsErrorHandler) {
            window.flippingApexChartsErrorHandler = window.onerror;
            window.onerror = (message, source, lineno, colno, error) => {
                // –ü–æ–¥–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ ApexCharts
                if (typeof message === 'string' && 
                    source && source.includes('apexcharts.js') &&
                    (message.includes('querySelector') || 
                     message.includes('Cannot read properties of null'))) {
                    console.warn('üîá –ü–æ–¥–∞–≤–ª–µ–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ApexCharts querySelector');
                    return true; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
                }
                
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                if (window.flippingApexChartsErrorHandler) {
                    return window.flippingApexChartsErrorHandler(message, source, lineno, colno, error);
                }
                return false;
            };
        }
        
        // –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞)
        this.referencePrice = {
            perMeter: null,     // –¶–µ–Ω–∞ –∑–∞ –º¬≤
            total: null,        // –û–±—â–∞—è —Ü–µ–Ω–∞ (–¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–æ—â–∞–¥–∏)
            area: null,         // –ü–ª–æ—â–∞–¥—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ–±—â–µ–π —Ü–µ–Ω—ã
            count: 0           // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–∞—Å—á—ë—Ç–µ
        };
        
        // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ü–µ–Ω—ã (–¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤)
        this.referencePrices = [];
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞–º
        this.activeSubsegmentId = null;
        this.originalFilteredObjects = []; // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É
        
        // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        this.globalFilterHandlersSetup = false;
        
        // Debouncing –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ onGlobalFiltersChanged
        this.filterChangeTimeout = null;
        this.filterChangeDelay = 300; // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞
        
        // Debouncing –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ applyFilters
        this.applyFiltersTimeout = null;
        this.applyFiltersDelay = 250; // 250ms –∑–∞–¥–µ—Ä–∂–∫–∞
        
        // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è applyFilters
        this.applyFiltersInProgress = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async initialize() {
        try {
            await this.loadDebugSettings();
            

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.initializeElements();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventHandlers();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FlippingController –∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã v0.1
            await this.initializeFlippingController();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FlippingProfitabilityService
            await this.initializeProfitabilityService();
            
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FlippingController –∏–∑ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
     */
    async initializeFlippingController() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º FlippingController —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            if (window.flippingController) {
                this.flippingController = window.flippingController;
            } else if (window.areaArchitectureIntegration && window.areaArchitectureIntegration.flippingController) {
                this.flippingController = window.areaArchitectureIntegration.flippingController;
            } else if (window.applicationController) {
                // Fallback - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                try {
                    this.flippingController = await window.applicationController.container.get('FlippingController');
                } catch (error) {
                }
            } else {
            }
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FlippingController:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FlippingProfitabilityService
     */
    async initializeProfitabilityService() {
        try {
            
            // –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            const errorHandlingService = {
                handleError: (error, context) => {
                    console.error(`‚ùå ${context}:`, error);
                }
            };
            
            const configService = {
                get: async (key) => {
                    if (key === 'debug.enabled') {
                        return this.debugEnabled;
                    }
                    return null;
                }
            };
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FlippingProfitabilityService
            if (typeof FlippingProfitabilityService !== 'undefined') {
                this.profitabilityService = new FlippingProfitabilityService(errorHandlingService, configService);
                // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
                window.flippingProfitabilityService = this.profitabilityService;
            }
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FlippingProfitabilityService:', error);
        }
    }

    /**
     * –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    async calculateProfitabilityForObjects() {
        try {
            if (!this.profitabilityService || !this.filteredObjects || this.filteredObjects.length === 0) {
                if (this.debugEnabled) {
                    console.log('üî¢ calculateProfitabilityForObjects: –°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤ –∏–ª–∏ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤');
                }
                return;
            }

            if (this.debugEnabled) {
                console.log(`üî¢ –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è ${this.filteredObjects.length} –æ–±—ä–µ–∫—Ç–æ–≤...`);
            }

            // –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
            const subsegmentPrices = await this.calculateReferencePriceForAllSubsegments();
            
            if (!subsegmentPrices || subsegmentPrices.length === 0) {
                if (this.debugEnabled) {
                    console.log('üî¢ –ù–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏');
                }
                return;
            }

            // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ü–µ–Ω –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞–º
            const priceMap = new Map();
            subsegmentPrices.forEach(subsegment => {
                if (subsegment.referencePrice && subsegment.referencePrice.perMeter) {
                    priceMap.set(subsegment.id, {
                        referencePricePerMeter: subsegment.referencePrice.perMeter,
                        averageExposureDays: subsegment.averageExposure || 90
                    });
                }
            });

            // –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            for (const object of this.filteredObjects) {
                try {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç –æ–±—ä–µ–∫—Ç–∞
                    let subsegmentData = null;
                    for (const [subsegmentId, data] of priceMap.entries()) {
                        const subsegment = subsegmentPrices.find(s => s.id === subsegmentId);
                        if (subsegment && this.reportsManager.objectMatchesSubsegment(object, subsegment)) {
                            subsegmentData = data;
                            break;
                        }
                    }

                    if (!subsegmentData) {
                        if (this.debugEnabled) {
                            console.log(`üî¢ –û–±—ä–µ–∫—Ç ${object.id}: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç`);
                        }
                        continue;
                    }

                    // –°–æ–∑–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
                    const params = {
                        ...this.currentFilters,
                        referencePricePerMeter: subsegmentData.referencePricePerMeter,
                        averageExposureDays: subsegmentData.averageExposureDays
                    };

                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–≤—É—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
                    const profitabilityData = this.profitabilityService.calculateBothScenarios(object, params);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—ä–µ–∫—Ç
                    object.flippingProfitability = profitabilityData;

                    if (this.debugEnabled && object.id.toString().endsWith('1')) { // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 10-–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                        console.log(`üî¢ –û–±—ä–µ–∫—Ç ${object.id}: –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ${profitabilityData.currentPrice.annualROI}%`);
                    }

                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${object.id}:`, error);
                    object.flippingProfitability = null;
                }
            }

            if (this.debugEnabled) {
                const calculatedCount = this.filteredObjects.filter(obj => obj.flippingProfitability).length;
                
            }

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    async calculateReferencePriceForAllSubsegments() {
        try {
            const currentArea = this.reportsManager.areaPage.dataState?.getState('currentArea');
            if (!currentArea) return [];

            const subsegments = this.reportsManager.segments?.flatMap(segment => 
                segment.subsegments?.map(subsegment => ({
                    ...subsegment,
                    segment_id: segment.id
                })) || []
            ) || [];

            const results = [];
            for (const subsegment of subsegments) {
                const referencePrice = await this.calculateReferencePriceForSubsegment(subsegment);
                const averageExposure = await this.calculateAverageExposureForSubsegment(subsegment.id);
                
                results.push({
                    ...subsegment,
                    referencePrice,
                    averageExposure
                });
            }

            return results;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ü–µ–Ω –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
     */
    async loadDebugSettings() {
        try {
            if (!this.database || !this.database.db) return;
            const settings = await this.database.getSettings();
            this.debugEnabled = settings.find(s => s.key === 'debug_enabled')?.value === true;
        } catch (error) {
            this.debugEnabled = false;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    initializeElements() {
        this.container = document.getElementById('flippingProfitabilityContainer');
        this.placeholder = document.getElementById('flippingProfitabilityPlaceholder');
        this.content = document.getElementById('flippingProfitabilityContent');
        this.filterContainer = document.getElementById('flippingProfitabilityFilter');
        this.chartContainer = document.getElementById('flippingMarketCorridorChart');
        this.objectsGrid = document.getElementById('flippingObjectsGrid');
        this.evaluationSelect = document.getElementById('objectEvaluationSelect');
        this.investmentTable = document.getElementById('flippingTable');
        // mapContainer –∏ –∫–∞—Ä—Ç–∞ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è FlippingController

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        this.spatialIndex = window.geoUtils || new GeoUtils();
        this.indexedAddresses = new Map(); // –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º

    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
        const roomButtons = this.filterContainer.querySelectorAll('[data-rooms]');
        roomButtons.forEach(button => {
            button.addEventListener('click', (e) => this.handleRoomFilterClick(e));
        });

        // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
        const participantsButtons = this.filterContainer.querySelectorAll('[data-participants]');
        participantsButtons.forEach(button => {
            button.addEventListener('click', (e) => this.handleParticipantsClick(e));
        });

        // –§–æ—Ä–º–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏–±—ã–ª–∏
        const profitSharingButtons = this.filterContainer.querySelectorAll('[data-profit-sharing]');
        profitSharingButtons.forEach(button => {
            button.addEventListener('click', (e) => this.handleProfitSharingClick(e));
        });

        // –ü–æ–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ñ–ª–∏–ø–ø–µ—Ä–∞
        const flipperPercentageInput = document.getElementById('flippingFlipperPercentage');
        if (flipperPercentageInput) {
            flipperPercentageInput.addEventListener('input', (e) => {
                const flipperPercent = parseInt(e.target.value) || 0;
                const investorPercent = 100 - flipperPercent;
                
                this.currentFilters.flipperPercentage = flipperPercent;
                this.currentFilters.investorPercentage = investorPercent;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
                const investorInput = document.getElementById('flippingInvestorPercentage');
                if (investorInput) {
                    investorInput.value = investorPercent;
                }
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                this.applyFilters();
            });
        }

        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞
        const fixedPaymentInput = document.getElementById('flippingFixedPaymentAmount');
        if (fixedPaymentInput) {
            fixedPaymentInput.addEventListener('input', (e) => {
                this.currentFilters.fixedPaymentAmount = parseInt(e.target.value) || 250000;
                this.applyFilters();
            });
        }

        // –ü—Ä–æ—Ü–µ–Ω—Ç —Ñ–ª–∏–ø–ø–µ—Ä–∞ —Å –æ—Å—Ç–∞—Ç–∫–∞
        const fixedPlusPercentageInput = document.getElementById('flippingFixedPlusPercentage');
        if (fixedPlusPercentageInput) {
            fixedPlusPercentageInput.addEventListener('input', (e) => {
                this.currentFilters.fixedPlusPercentage = parseInt(e.target.value) || 30;
                this.applyFilters();
            });
        }

        // –ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const financingButtons = this.filterContainer.querySelectorAll('[data-financing]');
        financingButtons.forEach(button => {
            button.addEventListener('click', (e) => this.handleFinancingClick(e));
        });

        // –¢–∏–ø –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è
        const taxButtons = this.filterContainer.querySelectorAll('[data-tax]');
        taxButtons.forEach(button => {
            button.addEventListener('click', (e) => this.handleTaxClick(e));
        });

        // –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞
        const renovationButtons = this.filterContainer.querySelectorAll('[data-renovation]');
        renovationButtons.forEach(button => {
            button.addEventListener('click', (e) => this.handleRenovationClick(e));
        });


        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ (SlimSelect)
        const modeSelect = document.getElementById('flippingMarketCorridorMode');
        if (modeSelect) {
            this.marketCorridorModeSlimSelect = new SlimSelect({
                select: modeSelect,
                settings: {
                    showSearch: false,
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º'
                }
            });
            
            modeSelect.addEventListener('change', async (e) => {
                this.marketCorridorMode = e.target.value;
                console.log('üîÑ –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞:', this.marketCorridorMode);
                // –ü—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                await this.createMarketCorridorChart();
            });
        }

        // –ü–æ–ª—è –≤–≤–æ–¥–∞
        this.setupInputHandlers();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–∞
        this.initializeEvaluationSelect();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ–∑–∂–µ –≤ show()

    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
     */
    setupInputHandlers() {
        // –¶–µ–Ω–∞
        const priceFromInput = document.getElementById('flippingPriceFrom');
        const priceToInput = document.getElementById('flippingPriceTo');
        
        if (priceFromInput) {
            priceFromInput.addEventListener('input', (e) => {
                this.currentFilters.priceFrom = parseInt(e.target.value) || 0;
                this.applyFilters();
            });
        }
        
        if (priceToInput) {
            priceToInput.addEventListener('input', (e) => {
                this.currentFilters.priceTo = parseInt(e.target.value) || 10000000000;
                this.applyFilters();
            });
        }

        // –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        const profitabilityPercentInput = document.getElementById('flippingProfitabilityPercent');
        if (profitabilityPercentInput) {
            profitabilityPercentInput.addEventListener('input', (e) => {
                this.currentFilters.profitabilityPercent = parseInt(e.target.value) || 60;
                this.applyFilters();
            });
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
        const inputMappings = {
            'flippingFixedPayment': 'fixedPayment',
            'flippingDownPayment': 'downPayment',
            'flippingMortgageRate': 'mortgageRate',
            'flippingMortgageTerm': 'mortgageTerm',
            'flippingRenovationSpeed': 'renovationSpeed',
            'flippingWorkCost': 'workCost',
            'flippingMaterialsCost': 'materialsCost',
            'flippingAdditionalExpenses': 'additionalExpenses'
        };

        Object.entries(inputMappings).forEach(([inputId, filterKey]) => {
            const input = document.getElementById(inputId);
            if (input) {
                input.addEventListener('input', (e) => {
                    this.currentFilters[filterKey] = parseFloat(e.target.value) || 0;
                    this.applyFilters();
                });
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ ReportsManager
     */
    setupGlobalFilterHandlers() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        if (this.globalFilterHandlersSetup) {
            if (this.debugEnabled) {
            }
            return;
        }
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏ –¥–∞—Ç —á–µ—Ä–µ–∑ EventBus
        if (this.eventBus) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            this.eventBus.on(CONSTANTS.EVENTS.SEGMENTS_UPDATED, () => {
                this.onGlobalFiltersChanged();
            });

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            this.eventBus.on(CONSTANTS.EVENTS.SEGMENT_UPDATED, () => {
                this.onGlobalFiltersChanged();
            });
        }

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞—Ç –∏–∑ ReportsManager
        if (this.reportsManager.dateFromFilter) {
            this.reportsManager.dateFromFilter.addEventListener('change', () => {
                this.onGlobalFiltersChanged();
            });
        }

        if (this.reportsManager.dateToFilter) {
            this.reportsManager.dateToFilter.addEventListener('change', () => {
                this.onGlobalFiltersChanged();
            });
        }

        // –í–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SlimSelect, —Ä–∞—Å—à–∏—Ä—è–µ–º –º–µ—Ç–æ–¥—ã ReportsManager
        this.extendReportsManagerMethods();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.globalFilterHandlersSetup = true;
        
        if (this.debugEnabled) {
        }
    }

    /**
     * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ ReportsManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
     */
    extendReportsManagerMethods() {
        try {
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            const originalHandleSegmentChange = this.reportsManager.handleSegmentChange.bind(this.reportsManager);
            const originalHandleSubsegmentChange = this.reportsManager.handleSubsegmentChange.bind(this.reportsManager);
            
            // –†–∞—Å—à–∏—Ä—è–µ–º handleSegmentChange
            this.reportsManager.handleSegmentChange = async (segmentId) => {
                // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                const result = await originalHandleSegmentChange(segmentId);
                
                // –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π setTimeout - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ EventBus —Å–æ–±—ã—Ç–∏—è
                
                return result;
            };
            
            // –†–∞—Å—à–∏—Ä—è–µ–º handleSubsegmentChange
            this.reportsManager.handleSubsegmentChange = async (subsegmentId) => {
                // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                const result = await originalHandleSubsegmentChange(subsegmentId);
                
                // –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π setTimeout - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ EventBus —Å–æ–±—ã—Ç–∏—è
                
                return result;
            };
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ ReportsManager:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (debounced –≤–µ—Ä—Å–∏—è)
     */
    onGlobalFiltersChanged() {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (this.filterChangeTimeout) {
            clearTimeout(this.filterChangeTimeout);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π timeout
        this.filterChangeTimeout = setTimeout(() => {
            this.onGlobalFiltersChangedImmediate();
        }, this.filterChangeDelay);
    }
    
    /**
     * –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async onGlobalFiltersChangedImmediate() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑–∞–Ω –ª–∏ –æ—Ç—á—ë—Ç —Ñ–ª–∏–ø–ø–∏–Ω–≥–∞
            const flippingCheck = document.getElementById('flippingProfitabilityReportCheck');
            const isFlippingReportVisible = flippingCheck?.checked || false;
            
            if (!isFlippingReportVisible) {
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç—á—ë—Ç
            if (!this.container || this.container.classList.contains('hidden')) {
                return;
            }

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            await this.applyFiltersImmediate();

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–∞
     */
    initializeEvaluationSelect() {
        if (!this.evaluationSelect) return;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SlimSelect
        this.evaluationSlimSelect = new SlimSelect({
            select: this.evaluationSelect,
            settings: {
                showSearch: false,
                placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É',
                allowDeselect: true
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        this.evaluationSelect.addEventListener('change', async (e) => {
            await this.onEvaluationChange(e.target.value);
        });
        
        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä (—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±—ä–µ–∫—Ç–∞)
        this.updateEvaluationSelectorState(false);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–∞
     */
    async onEvaluationChange(evaluation) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –æ—Ü–µ–Ω–∫–∏
        if (this.isLoadingEvaluation) {
            return;
        }
        
        if (this.selectedObjectId && evaluation) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é Map (—Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
            this.evaluations.set(this.selectedObjectId, evaluation);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            this.saveObjectEvaluation(this.selectedObjectId, evaluation);
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é —Ü–µ–Ω—É (–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º –≤—ã–±–æ—Ä–µ –æ–±—ä–µ–∫—Ç–∞)
            await this.calculateReferencePrice(true);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
            await this.updateObjectsDisplay();
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    async saveObjectEvaluation(objectId, evaluation) {
        try {
            if (!window.db) {
                console.error('‚ùå FlippingProfitabilityManager: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                return;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º objectId –∫–∞–∫ –µ—Å—Ç—å (—Å–ª–µ–¥—É—è –ø–∞—Ç—Ç–µ—Ä–Ω—É ComparativeAnalysisManager)
            const object = await window.db.get('objects', objectId);
            
            if (!object) {
                console.error('‚ùå FlippingProfitabilityManager: –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', objectId);
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –æ—Ü–µ–Ω–∫–∏
            object.user_evaluation = evaluation;
            object.evaluation_date = new Date().toISOString();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            await window.db.put('objects', object);
            
            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏ (–≤ this.filteredObjects)
            const filteredObject = this.filteredObjects?.find(obj => obj.id === objectId);
            if (filteredObject) {
                filteredObject.user_evaluation = evaluation;
                filteredObject.evaluation_date = object.evaluation_date;
            }
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä
     */
    async loadObjectEvaluation(objectId) {
        try {
            if (!objectId) {
                return;
            }
            
            let evaluation = null;
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é Map
            if (this.evaluations.has(objectId)) {
                evaluation = this.evaluations.get(objectId);
            } else if (window.db) {
                // –ï—Å–ª–∏ –≤ Map –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                try {
                    const object = await window.db.get('objects', objectId);
                    if (object && object.user_evaluation) {
                        evaluation = object.user_evaluation;
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é Map
                        this.evaluations.set(objectId, evaluation);
                    }
                } catch (error) {
                    console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î:', error);
                }
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π)
            this.isLoadingEvaluation = true;
            
            if (evaluation) {
                if (this.evaluationSlimSelect) {
                    this.evaluationSlimSelect.setSelected(evaluation);
                } else {
                    this.evaluationSelect.value = evaluation;
                }
            } else {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∏ –Ω–µ—Ç
                if (this.evaluationSlimSelect) {
                    this.evaluationSlimSelect.setSelected('');
                } else {
                    this.evaluationSelect.value = '';
                }
            }
            
            // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ–±—Ä–∞—Ç–Ω–æ
            this.isLoadingEvaluation = false;
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async loadAllEvaluations() {
        try {
            if (!this.filteredObjects || this.filteredObjects.length === 0) {
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            for (const obj of this.filteredObjects) {
                if (obj.user_evaluation) {
                    this.evaluations.set(obj.id, obj.user_evaluation);
                }
            }

            if (this.debugEnabled) {
                console.log(`üìä FlippingProfitabilityManager: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: ${this.evaluations.size}`);
            }

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ü–µ–Ω–æ–∫:', error);
        }
    }

    /**
     * –†–∞—Å—á—ë—Ç —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    /**
     * –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
     * - –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç: —Ä–∞—Å—á—ë—Ç —Ç–æ–ª—å–∫–æ –ø–æ –Ω–µ–º—É
     * - –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç: —Ä–∞—Å—á—ë—Ç –ø–æ –≤—Å–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
     * - –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø—É—Å—Ç: –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ
     */
    async calculateReferencePrice(updatePanel = true) {
        
        try {
            
            if (!this.filteredObjects || this.filteredObjects.length === 0) {
                if (this.debugEnabled) {
                    
                }
                this.referencePrice = { perMeter: null, total: null, area: null, count: 0 };
                this.referencePrices = []; // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ü–µ–Ω—ã
                return;
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫, —Å–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å –Ω—É–ª–µ–≤–æ–π —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π
            if (this.evaluations.size === 0) {
                if (this.debugEnabled) {
                    
                }
                await this.createBaseSubsegmentCards();
                if (updatePanel) {
                    await this.updateReferencePricePanel();
                }
                return;
            }

            const currentSegment = this.reportsManager.currentSegment;
            const currentSubsegment = this.reportsManager.currentSubsegment;
            
            if (this.debugEnabled) {
                console.log('üîç calculateReferencePrice: –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã', {
                    currentSegment: currentSegment?.name,
                    currentSubsegmentId: currentSubsegment?.id,
                    currentSubsegmentName: currentSubsegment?.name,
                    segments: this.reportsManager.segments?.length,
                    objectTypes: [...new Set(this.filteredObjects.map(o => o.property_type))]
                });
            }

            // –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–º–æ–Ω—Ç–∞ (–≤—Å–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ)
            const weights = {
                'flipping': 1.0,            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å - –ø—Ä—è–º–æ–π —ç—Ç–∞–ª–æ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                'designer_renovation': 0.9, // –í—ã—Å–æ–∫–∏–π –≤–µ—Å - –ø—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç
                'euro_renovation': 0.8      // –•–æ—Ä–æ—à–∏–π –≤–µ—Å - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç
            };

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if (currentSubsegment) {
                
                // –°–ª—É—á–∞–π 1: –í—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç - —Ä–∞—Å—á—ë—Ç —Ç–æ–ª—å–∫–æ –ø–æ –Ω–µ–º—É
                // –ù–∞–π–¥–µ–º —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
                let segmentName = null;
                for (const segment of this.reportsManager.segments) {
                    const subsegments = await this.database.getSubsegmentsBySegment(segment.id);
                    if (subsegments.find(s => s.id === currentSubsegment.id)) {
                        segmentName = segment.name;
                        break;
                    }
                }
                this.referencePrices = [await this.calculateSubsegmentReferencePrice(currentSubsegment, weights, segmentName)];
                this.referencePrice = this.referencePrices[0]?.referencePrice || { perMeter: null, total: null, area: null, count: 0 };
            } else if (currentSegment) {
                
                // –°–ª—É—á–∞–π 2: –í—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç - —Ä–∞—Å—á—ë—Ç –ø–æ –≤—Å–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
                const subsegments = await this.database.getSubsegmentsBySegment(currentSegment.id);
                
                this.referencePrices = [];
                for (const subsegment of subsegments) {
                    const price = await this.calculateSubsegmentReferencePrice(subsegment, weights, currentSegment.name);
                    if (price && price.referencePrice && price.referencePrice.count > 0) {
                        this.referencePrices.push(price);
                    }
                }
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ü–µ–Ω—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é (–∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)
                this.referencePrice = this.referencePrices[0]?.referencePrice || { perMeter: null, total: null, area: null, count: 0 };
            } else {
                if (this.debugEnabled) {
                    
                    
                }
                // –°–ª—É—á–∞–π 3: –§–∏–ª—å—Ç—Ä –ø—É—Å—Ç - –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
                this.referencePrices = [];
                const allSegments = await this.database.getSegments();
                for (const segment of allSegments) {
                    const subsegments = await this.database.getSubsegmentsBySegment(segment.id);
                    for (const subsegment of subsegments) {
                        const price = await this.calculateSubsegmentReferencePrice(subsegment, weights, segment.name);
                        if (price && price.referencePrice && price.referencePrice.count > 0) {
                            this.referencePrices.push(price);
                        }
                    }
                }
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ü–µ–Ω—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é (–∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)
                this.referencePrice = this.referencePrices[0]?.referencePrice || { perMeter: null, total: null, area: null, count: 0 };
            }

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã:', error);
            this.referencePrice = { perMeter: null, total: null, area: null, count: 0 };
            this.referencePrices = [];
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ updatePanel = true)
        if (updatePanel) {
            await this.updateReferencePricePanel();
        }
    }

    /**
     * –†–∞—Å—á—ë—Ç —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
     */
    async calculateSubsegmentReferencePrice(subsegment, weights, segmentName = null) {
        try {
            if (this.debugEnabled) {
                console.log(`üîç –†–∞—Å—á—ë—Ç —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ "${subsegment.name}" (—Å–µ–≥–º–µ–Ω—Ç: ${segmentName}):`, {
                    subsegmentId: subsegment.id,
                    segmentId: subsegment.segment_id,
                    filters: subsegment.filters,
                    totalFilteredObjects: this.filteredObjects.length
                });
            }
            
            // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –∞–¥—Ä–µ—Å–∞
            let segmentObjects = this.filteredObjects;
            
            if (subsegment.segment_id) {
                // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
                const segment = await this.database.getSegment(subsegment.segment_id);
                if (!segment) {
                    console.log(`‚ö†Ô∏è –°–µ–≥–º–µ–Ω—Ç ${subsegment.segment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    return {
                        id: subsegment.id,
                        name: subsegment.name,
                        segment: segmentName,
                        referencePrice: {
                            perMeter: null,
                            total: null,
                            area: null,
                            count: 0,
                            evaluatedCount: 0
                        },
                        exposure: { days: null, count: 0 },
                        objects: [],
                        evaluatedObjects: []
                    };
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
                const addresses = await this.database.getAddressesInMapArea(segment.map_area_id);
                const addressIds = new Set(addresses.map(a => a.id));
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å–µ–≥–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                let filteredAddresses = addresses;
                if (segment.filters) {
                    if (this.debugEnabled) {
                        
                    }
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ ReportsManager –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤
                    filteredAddresses = this.reportsManager.filterAddressesBySegmentCriteria(addresses, segment.filters);
                    if (this.debugEnabled) {
                        
                    }
                }
                
                // –°–æ–∑–¥–∞—ë–º Set –∏–∑ ID –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                const filteredAddressIds = new Set(filteredAddresses.map(a => a.id));
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞
                segmentObjects = this.filteredObjects.filter(obj => {
                    return obj.address_id && filteredAddressIds.has(obj.address_id);
                });
                
                if (this.debugEnabled) {
                    
                }
            }
            
            // –¢–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
            const subsegmentObjects = segmentObjects.filter(obj => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
                const matches = this.reportsManager.objectMatchesSubsegment(obj, subsegment);
                
                if (this.debugEnabled && matches) {
                    console.log(`üîç –û–±—ä–µ–∫—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è "${subsegment.name}":`, {
                        id: obj.id,
                        property_type: obj.property_type,
                        area_total: obj.area_total,
                        current_price: obj.current_price
                    });
                }
                
                return matches;
            });
            
            if (this.debugEnabled) {
                
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ –ü–†–û–î–ê–ù–ù–´–ï –æ–±—ä–µ–∫—Ç—ã —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–µ–º–æ–Ω—Ç–æ–º
            const evaluatedObjects = subsegmentObjects.filter(obj => 
                obj.status === 'archive' && // –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ
                this.evaluations.has(obj.id) && 
                weights[this.evaluations.get(obj.id)] > 0 &&
                obj.current_price > 0 &&
                obj.area_total > 0
            );


            if (evaluatedObjects.length === 0) {
                return {
                    id: subsegment.id,
                    name: subsegment.name,
                    segment: segmentName,
                    referencePrice: {
                        perMeter: null,
                        total: null,
                        area: null,
                        count: 0,
                        evaluatedCount: 0
                    },
                    exposure: { days: null, count: 0 },
                    objects: subsegmentObjects,
                    evaluatedObjects: []
                };
            }

            let weightedSum = 0;
            let totalWeight = 0;
            let totalArea = 0;

            evaluatedObjects.forEach(obj => {
                const evaluation = this.evaluations.get(obj.id);
                const pricePerMeter = obj.current_price / obj.area_total;
                const weight = weights[evaluation];
                
                // –£—á—ë—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂–∏ (—á–µ–º —Å–≤–µ–∂–µ–µ –ø—Ä–æ–¥–∞–∂–∞, —Ç–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–µ–µ —Ü–µ–Ω–∞)
                const daysSinceUpdate = (Date.now() - new Date(obj.updated).getTime()) / (1000 * 60 * 60 * 24);
                const recencyFactor = Math.max(0.7, 1 - daysSinceUpdate / 365); // –û—Ç 0.7 –¥–æ 1.0 –∑–∞ –≥–æ–¥
                
                const adjustedWeight = weight * recencyFactor;
                weightedSum += pricePerMeter * adjustedWeight;
                totalWeight += adjustedWeight;
                totalArea += obj.area_total;
            });

            const averageArea = totalArea / evaluatedObjects.length;
            const referencePricePerMeter = weightedSum / totalWeight;

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–æ–∫ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
            const exposure = await this.calculateSubsegmentExposure(subsegment.id);

            return {
                id: subsegment.id,
                name: subsegment.name,
                segment: segmentName,
                referencePrice: {
                    perMeter: Math.round(referencePricePerMeter),
                    total: Math.round(referencePricePerMeter * averageArea),
                    area: Math.round(averageArea),
                    count: subsegmentObjects.length, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
                    evaluatedCount: evaluatedObjects.length // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                },
                exposure: exposure || { days: null, count: 0 },
                objects: subsegmentObjects,
                evaluatedObjects: evaluatedObjects
            };

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞:', subsegment.name, error);
            return {
                id: subsegment.id,
                name: subsegment.name,
                segment: segmentName,
                referencePrice: {
                    perMeter: null,
                    total: null,
                    area: null,
                    count: 0,
                    evaluatedCount: 0
                },
                exposure: { days: null, count: 0 },
                objects: [],
                evaluatedObjects: []
            };
        }
    }

    /**
     * –†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Å—Ä–æ–∫–∞ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    calculateAverageExposure() {
        try {
            if (!this.filteredObjects || this.filteredObjects.length === 0 || this.evaluations.size === 0) {
                return null;
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            const evaluatedObjects = this.filteredObjects.filter(obj => 
                obj.status === 'archive' && // –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ
                this.evaluations.has(obj.id)
            );

            if (evaluatedObjects.length === 0) {
                return null;
            }

            const exposureDays = evaluatedObjects.map(obj => {
                const created = new Date(obj.created);
                const updated = new Date(obj.updated);
                const days = Math.floor((updated - created) / (1000 * 60 * 60 * 24));
                return days > 0 ? days : 1; // –ú–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å
            }).filter(days => days > 0); // –£–±–∏—Ä–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

            if (exposureDays.length === 0) {
                return null;
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –º–µ–¥–∏–∞–Ω—ã
            const sorted = exposureDays.sort((a, b) => a - b);
            
            // –†–∞—Å—á—ë—Ç –º–µ–¥–∏–∞–Ω—ã
            const median = sorted.length % 2 === 0
                ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2
                : sorted[Math.floor(sorted.length / 2)];
            
            // –†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
            const average = exposureDays.reduce((a, b) => a + b, 0) / exposureDays.length;

            return {
                median: Math.round(median),
                average: Math.round(average),
                min: sorted[0],
                max: sorted[sorted.length - 1],
                count: evaluatedObjects.length
            };

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–æ–∫–∞ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏:', error);
            return null;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ—Ü–µ–Ω–æ–∫
     */
    async createBaseSubsegmentCards() {
        try {
            const currentSegment = this.reportsManager?.currentSegment;
            
            let subsegments = [];
            
            if (currentSegment) {
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã
                subsegments = await this.database.getSubsegmentsBySegment(currentSegment.id);
            } else {
                // –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –í–°–ï –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã
                const allSegments = await this.database.getSegments();
                for (const segment of allSegments) {
                    const segmentSubsegments = await this.database.getSubsegmentsBySegment(segment.id);
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–µ –∫ –∫–∞–∂–¥–æ–º—É –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É
                    segmentSubsegments.forEach(subsegment => {
                        subsegment.segmentName = segment.name;
                    });
                    subsegments = subsegments.concat(segmentSubsegments);
                }
            }
            
            if (!subsegments || subsegments.length === 0) {
                this.referencePrices = [];
                return;
            }
            
            // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
            this.referencePrices = subsegments.map(subsegment => ({
                id: subsegment.id,
                name: subsegment.name,
                segment: subsegment.segmentName || currentSegment?.name || '–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã',
                referencePrice: { 
                    perMeter: null, 
                    total: null, 
                    area: null, 
                    count: 0,
                    evaluatedCount: 0,
                    status: 'no_evaluations'
                },
                exposure: { days: null, count: 0 },
                objects: [],
                evaluatedObjects: []
            }));
            
            
            if (this.debugEnabled) {
                
            }
            
        } catch (error) {
            console.error('‚ùå createBaseSubsegmentCards: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
            this.referencePrices = [];
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã –∏ —Å—Ä–æ–∫–∞ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏
     */
    async updateReferencePricePanel() {
        
        const cardsContainer = document.getElementById('referencePriceCardsContainer');
        
        if (!cardsContainer) {
            if (this.debugEnabled) {
                console.log('‚ö†Ô∏è updateReferencePricePanel: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            return;
        }
        
        if (this.referencePrices.length > 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
            cardsContainer.classList.remove('hidden');
            
            // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cardsContainer.innerHTML = '';
            
            // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            for (let index = 0; index < this.referencePrices.length; index++) {
                const price = this.referencePrices[index];
                const card = await this.createSubsegmentCard(price, index);
                cardsContainer.appendChild(card);
            }
            
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            cardsContainer.classList.add('hidden');
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π
     */
    async createSubsegmentCard(priceData, colorIndex = 0) {
        const colors = this.getSubsegmentColorScheme(colorIndex);
        const card = document.createElement('div');
        card.className = `p-2 ${colors.bgColor} rounded-lg text-xs leading-[1.3] ${colors.textColor} border-2 border-gray-200 cursor-pointer transition-all duration-150 hover:!border-blue-500 hover:shadow-[0_2px_8px_rgba(59,130,246,0.1)]`;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –≤–∏–¥
        const formatDays = (days) => {
            if (!days) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
            if (days === 1) return '1 –¥–µ–Ω—å';
            if (days < 5) return `${days} –¥–Ω—è`;
            return `${days} –¥–Ω–µ–π`;
        };
        
        const referencePrice = priceData.referencePrice;
        const exposure = priceData.exposure;
        
        card.innerHTML = `
            <div class="space-y-2">
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ -->
                <div class="font-medium ${colors.titleColor} text-sm border-b ${colors.borderColor} pb-2">
                    ${priceData.segment ? `${priceData.segment} - ${priceData.name}` : priceData.name}
                </div>
                
                <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ -->
                <div class="grid grid-cols-2 gap-3 text-xs">
                    <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞ -->
                    <div>
                        <div class="font-medium mb-1">–≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞:</div>
                        ${referencePrice.perMeter ? `
                        <div class="font-semibold">${new Intl.NumberFormat('ru-RU').format(referencePrice.perMeter)} ‚ÇΩ/–º¬≤</div>
                        <div>${new Intl.NumberFormat('ru-RU').format(referencePrice.total)} ‚ÇΩ (${referencePrice.area}–º¬≤)</div>
                        <div class="${colors.accentColor} mt-1">${referencePrice.evaluatedCount} –æ—Ü–µ–Ω–æ–∫ –∏–∑ ${referencePrice.count} –æ–±—ä–µ–∫—Ç–æ–≤</div>
                        ` : `
                        <div class="text-gray-400 text-xs">–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫</div>
                        <div class="${colors.accentColor} mt-1">${referencePrice.count} –æ–±—ä–µ–∫—Ç–æ–≤</div>
                        `}
                    </div>
                    
                    <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ -->
                    <div>
                        <div class="font-medium mb-1">–ú–µ–¥–∏–∞–Ω–∞ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏:</div>
                        ${exposure.days ? `
                        <div class="font-semibold">${formatDays(exposure.days)}</div>
                        <div class="${colors.accentColor}">–ù–∞ –æ—Å–Ω–æ–≤–µ ${exposure.count} –ø—Ä–æ–¥–∞–∂</div>
                        ` : `
                        <div class="text-gray-400 text-xs">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö</div>
                        `}
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        card.dataset.subsegmentId = priceData.id;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É
        card.addEventListener('click', (event) => {
            event.preventDefault();
            event.stopPropagation();
            this.handleSubsegmentCardClick(priceData.id);
        });
        
        // Hover —ç—Ñ—Ñ–µ–∫—Ç—ã —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ Tailwind –∫–ª–∞—Å—Å—ã
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ—Ç –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω
        if (this.activeSubsegmentId === priceData.id) {
            this.setCardActiveState(card, colors, true);
        }
        
        return card;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è —Ñ–æ–Ω–∞, –≥—Ä–∞–Ω–∏—Ü—ã, —Ç–µ–∫—Å—Ç–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    getSubsegmentColorScheme(index) {
        const colorSchemes = [
            {
                // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π (–∏–Ω–¥–∏–≥–æ)
                graphColor: '#8b5cf6',
                bgColor: 'bg-indigo-50',
                borderColor: 'border-indigo-200',
                textColor: 'text-indigo-800',
                titleColor: 'text-indigo-900',
                accentColor: 'text-indigo-600'
            },
            {
                // –ì–æ–ª—É–±–æ–π (—Ü–∏–∞–Ω)
                graphColor: '#06b6d4',
                bgColor: 'bg-cyan-50',
                borderColor: 'border-cyan-200',
                textColor: 'text-cyan-800',
                titleColor: 'text-cyan-900',
                accentColor: 'text-cyan-600'
            },
            {
                // –Ø–Ω—Ç–∞—Ä–Ω—ã–π 
                graphColor: '#f59e0b',
                bgColor: 'bg-amber-50',
                borderColor: 'border-amber-200',
                textColor: 'text-amber-800',
                titleColor: 'text-amber-900',
                accentColor: 'text-amber-600'
            },
            {
                // –ò–∑—É–º—Ä—É–¥–Ω—ã–π
                graphColor: '#10b981',
                bgColor: 'bg-emerald-50',
                borderColor: 'border-emerald-200',
                textColor: 'text-emerald-800',
                titleColor: 'text-emerald-900',
                accentColor: 'text-emerald-600'
            },
            {
                // –ö—Ä–∞—Å–Ω—ã–π
                graphColor: '#ef4444',
                bgColor: 'bg-red-50',
                borderColor: 'border-red-200',
                textColor: 'text-red-800',
                titleColor: 'text-red-900',
                accentColor: 'text-red-600'
            },
            {
                // –†–æ–∑–æ–≤—ã–π
                graphColor: '#ec4899',
                bgColor: 'bg-pink-50',
                borderColor: 'border-pink-200',
                textColor: 'text-pink-800',
                titleColor: 'text-pink-900',
                accentColor: 'text-pink-600'
            }
        ];
        
        return colorSchemes[index % colorSchemes.length];
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
     */
    async handleSubsegmentCardClick(subsegmentId) {
        try {
            // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            console.log(`üîç –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞: ${subsegmentId}`, {
                activeSubsegmentId: this.activeSubsegmentId,
                filteredObjectsCount: this.filteredObjects?.length
            });
            
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            if (this.activeSubsegmentId === subsegmentId) {
                this.clearSubsegmentFilter();
            } else {
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –Ω–æ–≤–æ–º—É –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É
                await this.setActiveSubsegment(subsegmentId);
            }
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É:', error);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
     */
    async setActiveSubsegment(subsegmentId) {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
            if (this.activeSubsegmentId === null) {
                this.originalFilteredObjects = [...this.filteredObjects];
                
            }
            
            this.activeSubsegmentId = subsegmentId;
            
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            const subsegment = await this.getSubsegmentById(subsegmentId);
            if (!subsegment) {
                console.error('‚ùå FlippingProfitabilityManager: –ü–æ–¥—Å–µ–≥–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', subsegmentId);
                return;
            }
            
            // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É (—á–µ—Ä–µ–∑ –∞–¥—Ä–µ—Å–∞), –∑–∞—Ç–µ–º –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É
            
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
            const segment = await this.database.getSegment(subsegment.segment_id);
            if (!segment) {
                console.error('‚ùå –°–µ–≥–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', subsegment.segment_id);
                this.filteredObjects = [];
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å–µ–≥–º–µ–Ω—Ç–∞
            const addresses = await this.database.getAddressesInMapArea(segment.map_area_id);
            let filteredAddresses = addresses;
            if (segment.filters) {
                filteredAddresses = this.reportsManager.filterAddressesBySegmentCriteria(addresses, segment.filters);
            }
            const filteredAddressIds = new Set(filteredAddresses.map(a => a.id));
            
            
            
            // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ª–∞–¥–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
            console.log('üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É:', {
                subsegmentName: subsegment.name,
                originalObjectsCount: this.originalFilteredObjects.length,
                originalActiveCount: this.originalFilteredObjects.filter(obj => obj.status === 'active').length,
                originalArchiveCount: this.originalFilteredObjects.filter(obj => obj.status === 'archive').length,
                filteredAddressesCount: filteredAddressIds.size
            });

            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É (–∞–¥—Ä–µ—Å–∞–º), –∑–∞—Ç–µ–º –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É
            this.filteredObjects = this.originalFilteredObjects.filter(obj => {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ —Å–µ–≥–º–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –∞–¥—Ä–µ—Å
                const belongsToSegment = obj.address_id && filteredAddressIds.has(obj.address_id);
                if (!belongsToSegment) {
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
                const matchesSubsegment = this.reportsManager.objectMatchesSubsegment(obj, subsegment);
                
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ò —Å–µ–≥–º–µ–Ω—Ç—É –ò –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É
                const finalMatch = belongsToSegment && matchesSubsegment;
                
                if (finalMatch) {
                    console.log(`‚úÖ –û–±—ä–µ–∫—Ç ${obj.id} (${obj.status}) –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Å–µ–≥–º–µ–Ω—Ç+–ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç`, {
                        property_type: obj.property_type,
                        area_total: obj.area_total,
                        address_id: obj.address_id,
                        status: obj.status
                    });
                }
                
                return finalMatch;
            });
            
            // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É:', {
                subsegmentName: subsegment.name,
                filteredObjectsCount: this.filteredObjects.length,
                filteredActiveCount: this.filteredObjects.filter(obj => obj.status === 'active').length,
                filteredArchiveCount: this.filteredObjects.filter(obj => obj.status === 'archive').length
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await this.updateInterfaceAfterSubsegmentFilter();
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞:', error);
        }
    }

    /**
     * –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É
     */
    async clearSubsegmentFilter() {
        try {
            
            
            this.activeSubsegmentId = null;
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
            // —á—Ç–æ–±—ã –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è
            if (this.selectedObjectId) {
                // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä–µ–∫—Ç–∞
                const selectedBlock = this.objectsGrid?.querySelector(`[data-object-id="${this.selectedObjectId}"]`);
                if (selectedBlock) {
                    selectedBlock.classList.remove('!bg-blue-50', '!border-blue-500');
                    selectedBlock.classList.add('bg-white', 'border-gray-200');
                }
                this.selectedObjectId = null;
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
            this.highlightedObjectId = null;
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            if (this.originalFilteredObjects.length > 0) {
                this.filteredObjects = [...this.originalFilteredObjects];
                this.originalFilteredObjects = [];
                
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await this.updateInterfaceAfterSubsegmentFilter();
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É
     */
    async updateInterfaceAfterSubsegmentFilter() {
        try {
            
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
            
            this.updateSubsegmentCardsActiveState();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            
            await this.updateMarketCorridorChart();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–ë–ï–ó –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤)
            
            await this.updateObjectsForEvaluation();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º FlippingController (—Ç–∞–±–ª–∏—Ü–∞ –æ–±—ä–µ–∫—Ç–æ–≤)
            if (this.flippingController) {
                
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                const objectsWithAddresses = await this.loadAddressesForObjects(this.filteredObjects);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                this.flippingController.filteredObjects = objectsWithAddresses;
                await this.flippingController.updateUIComponents();
            } else {
            }
            
            
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
     */
    async loadAddressesForObjects(objects) {
        try {
            
            
            const objectsWithAddresses = [];
            for (const obj of objects) {
                const objWithAddress = { ...obj };
                
                if (obj.address_id && !obj.address) {
                    try {
                        objWithAddress.address = await window.db.getAddress(obj.address_id);
                        console.log(`üîß –ó–∞–≥—Ä—É–∂–µ–Ω –∞–¥—Ä–µ—Å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${obj.id}:`, {
                            hasAddress: !!objWithAddress.address,
                            addressString: objWithAddress.address?.address_string,
                            hasCoords: !!(objWithAddress.address?.latitude && objWithAddress.address?.longitude),
                            addressData: objWithAddress.address
                        });
                    } catch (error) {
                        objWithAddress.address = null;
                    }
                }
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
                if (this.profitabilityService && objWithAddress.price && objWithAddress.area) {
                    try {
                        const profitabilityParams = this.getCurrentFormData();
                        objWithAddress.profitability = this.profitabilityService.calculateFlippingProfitability(objWithAddress, profitabilityParams);
                        console.log(`üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${obj.id}: ${objWithAddress.profitability.annualROI?.toFixed(1) || 0}% –≥–æ–¥–æ–≤—ã—Ö`);
                    } catch (error) {
                    }
                }
                
                objectsWithAddresses.push(objWithAddress);
            }
            
            console.log('üîß FlippingProfitabilityManager: –û–±—ä–µ–∫—Ç–æ–≤ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏:', 
                objectsWithAddresses.filter(obj => obj.address).length, '–∏–∑', objects.length);
            
            return objectsWithAddresses;
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤:', error);
            return objects; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
     */
    async updateObjectsForEvaluation() {
        try {
            if (this.debugEnabled) {
            }
            
            if (!this.objectsGrid || !this.filteredObjects) return;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            const objects = this.filteredObjects.filter(obj => 
                obj.status === 'archive' // –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            );
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ)
            this.objectsForEvaluation = objects;
            
            if (this.debugEnabled) {
                console.log('üìã –û–±—ä–µ–∫—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏:', {
                    totalFiltered: this.filteredObjects.length,
                    archiveCount: objects.length,
                    objectsForEvaluationSet: true
                });
            }
            
            // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º calculateReferencePrice() —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
            
            if (objects.length === 0) {
                this.objectsGrid.innerHTML = '<div class="text-center text-gray-500 py-4 text-sm">–ù–µ—Ç –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏</div>';
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ (–∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ updateObjectsDisplay)
            this.objectsGrid.innerHTML = objects.map(obj => {
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–µ–∑ —Ü–µ–Ω—ã
                const characteristics = this.formatObjectCharacteristics(obj);
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
                const price = obj.current_price || 0;
                const formattedPrice = this.formatPrice(price);
                
                // –¶–µ–Ω–∞ –∑–∞ –∫–≤.–º –±–µ–∑ —Å–∫–æ–±–æ–∫
                let pricePerSqm = '';
                if (price > 0 && obj.area_total > 0) {
                    const perSqm = Math.round(price / obj.area_total);
                    pricePerSqm = `${new Intl.NumberFormat('ru-RU').format(perSqm)} ‚ÇΩ/–º¬≤`;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ address_id
                const address = this.getAddressNameById(obj.address_id) || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                let dateInfo = '';
                if (obj.status === 'archive') {
                    // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö: –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    const createdDate = obj.created ? new Date(obj.created).toLocaleDateString('ru-RU') : '';
                    const updatedDate = obj.updated ? new Date(obj.updated).toLocaleDateString('ru-RU') : '';
                    if (createdDate && updatedDate) {
                        dateInfo = `–ê—Ä—Ö–∏–≤: ${createdDate} - ${updatedDate}`;
                    } else if (createdDate) {
                        dateInfo = `${createdDate}`;
                    } else if (updatedDate) {
                        dateInfo = `${updatedDate}`;
                    }
                } else {
                    // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö: —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                    const createdDate = obj.created ? new Date(obj.created).toLocaleDateString('ru-RU') : '';
                    const currentDate = new Date().toLocaleDateString('ru-RU');
                    dateInfo = `–ê–∫—Ç–∏–≤–Ω—ã–π: ${createdDate} - ${currentDate}`;
                }
                
                return `
                    <div class="flipping-object-block p-2 bg-white rounded-lg text-xs leading-[1.3] border-2 border-gray-200 cursor-pointer transition-all duration-150 hover:!border-blue-500 hover:shadow-[0_2px_8px_rgba(59,130,246,0.1)]" data-object-id="${obj.id}">
                        <div class="flex justify-between items-start mb-2">
                            <div class="flex-1 mr-2">
                                <div class="object-characteristics font-semibold text-sm">${characteristics}</div>
                            </div>
                            <div class="flex-shrink-0 text-right">
                                <div class="object-price">${formattedPrice}</div>
                                ${pricePerSqm ? `<div class="price-per-sqm">${pricePerSqm}</div>` : ''}
                            </div>
                        </div>
                        <div class="object-address text-xs text-gray-500">${address}</div>
                        ${dateInfo ? `<div class="object-dates text-xs text-gray-400 mt-1">${dateInfo}</div>` : ''}
                        ${this.evaluations.has(obj.id) ? (() => {
                            const evaluation = this.evaluations.get(obj.id);
                            const evaluationLabels = {
                                'flipping': '–§–ª–∏–ø–ø–∏–Ω–≥',
                                'designer_renovation': '–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π',
                                'euro_renovation': '–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç'
                            };
                            const evalLabel = evaluationLabels[evaluation] || evaluation;
                            return `<div class="mt-1"><span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-indigo-100 text-indigo-800">${evalLabel}</span></div>`;
                        })() : ''}
                    </div>
                `;
            }).join('');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–ª–æ–∫–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            this.objectsGrid.querySelectorAll('.flipping-object-block').forEach(block => {
                block.addEventListener('click', () => {
                    const objectId = block.dataset.objectId;
                    this.selectObject(objectId);
                });
            });
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (this.selectedObjectId) {
                const selectedBlock = this.objectsGrid.querySelector(`[data-object-id="${this.selectedObjectId}"]`);
                if (selectedBlock) {
                    selectedBlock.classList.remove('bg-white', 'border-gray-200');
                    selectedBlock.classList.add('!bg-blue-50', '!border-blue-500');
                    if (this.debugEnabled) {
                        
                    }
                } else if (this.debugEnabled) {
                    console.log('‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–æ–≤–æ–º —Å–ø–∏—Å–∫–µ:', this.selectedObjectId);
                    this.selectedObjectId = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∏—Å—á–µ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É FlippingController –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            console.log('üó∫Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FlippingController –∏ –∫–∞—Ä—Ç—ã:', {
                hasFlippingController: !!this.flippingController,
                hasFlippingMap: !!(this.flippingController && this.flippingController.flippingMap),
                activeSubsegmentId: this.activeSubsegmentId
            });
            
            if (this.flippingController && this.flippingController.flippingMap) {
                
                
                // –ü—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–µ –í–°–ï –æ–±—ä–µ–∫—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏–≤–Ω—ã–µ)
                // —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –ø–æ –¥–æ–º–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞
                let objectsForMap = [];
                
                if (this.activeSubsegmentId) {
                    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞,
                    // –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫ –∞–¥—Ä–µ—Å–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞ —ç—Ç–æ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
                    const subsegment = await this.getSubsegmentById(this.activeSubsegmentId);
                    if (subsegment) {
                        const segment = await this.database.getSegment(subsegment.segment_id);
                        if (segment) {
                            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
                            const addresses = await this.database.getAddressesInMapArea(segment.map_area_id);
                            let filteredAddresses = addresses;
                            if (segment.filters) {
                                filteredAddresses = this.reportsManager.filterAddressesBySegmentCriteria(addresses, segment.filters);
                            }
                            const filteredAddressIds = new Set(filteredAddresses.map(a => a.id));
                            
                            // –§–∏–ª—å—Ç—Ä—É–µ–º –í–°–ï –æ–±—ä–µ–∫—Ç—ã (–Ω–µ —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏–≤–Ω—ã–µ) –ø–æ –∞–¥—Ä–µ—Å–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞
                            objectsForMap = this.originalFilteredObjects.filter(obj => 
                                obj.address_id && filteredAddressIds.has(obj.address_id)
                            );
                            
                            
                            
                        } else {
                        }
                    }
                } else {
                    // –ï—Å–ª–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
                    objectsForMap = this.filteredObjects;
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                this.flippingController.filteredObjects = this.filteredObjects;
                
                // –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ FlippingController
            } else {
                if (this.debugEnabled) {
                }
            }
            
            if (this.debugEnabled) {
            }
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –≤ updateObjectsForEvaluation:', error);
        }
    }

    /**
     * –í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
     */
    async selectObject(objectId, disableScroll = false) {
        try {
            // console.log('üìã selectObject –≤—ã–∑–≤–∞–Ω:', {
            //     objectId,
            //     disableScroll,
            //     isDestroyed: this.isDestroyed,
            //     currentSelectedId: this.selectedObjectId
            // });
            
            // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            if (this.selectedObjectId === objectId) {
                console.log('üìã –°–Ω—è—Ç–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å –æ–±—ä–µ–∫—Ç–∞:', objectId);
                
                // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–∏
                const prevSelected = this.objectsGrid.querySelector(`[data-object-id="${objectId}"]`);
                if (prevSelected) {
                    prevSelected.classList.remove('!bg-blue-50', '!border-blue-500');
                    prevSelected.classList.add('bg-white', 'border-gray-200');
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ —É–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–∞
                this.selectedObjectId = null;
                await this.updateObjectHighlightOnChart(null);
                
                return;
            }

            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            if (this.selectedObjectId) {
                const prevSelected = this.objectsGrid.querySelector(`[data-object-id="${this.selectedObjectId}"]`);
                if (prevSelected) {
                    prevSelected.classList.remove('!bg-blue-50', '!border-blue-500');
                    prevSelected.classList.add('bg-white', 'border-gray-200');
                }
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            this.selectedObjectId = objectId;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –æ–±—ä–µ–∫—Ç—É
            const selectedBlock = this.objectsGrid.querySelector(`[data-object-id="${objectId}"]`);
            if (selectedBlock) {
                selectedBlock.classList.remove('bg-white', 'border-gray-200');
                selectedBlock.classList.add('!bg-blue-50', '!border-blue-500');
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)  
                if (!disableScroll) {
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    selectedBlock.scrollIntoView({
                        behavior: 'smooth',
                        block: 'nearest', // nearest –≤–º–µ—Å—Ç–æ center —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        inline: 'nearest'
                    });
                    console.log('üìã –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ –æ–±—ä–µ–∫—Ç–∞:', objectId);
                } else {
                    console.log('üìã –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –∫–ª–∏–∫–∞ –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞:', objectId);
                }
            } else {
                console.log('üìã –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM (–≤–æ–∑–º–æ–∂–Ω–æ, –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞):', objectId);
                // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è - –∫–∞—Ä—Ç–æ—á–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            }
            
            // –í—ã–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
            await this.updateObjectHighlightOnChart(objectId);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—Ü–µ–Ω–∫—É –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä
            await this.loadObjectEvaluation(objectId);
            
            console.log('üìã –í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏:', {
                objectId: objectId,
                hasEvaluation: this.evaluations.has(objectId),
                evaluation: this.evaluations.get(objectId)
            });
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
     * @param {string|null} objectId - ID –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ null –¥–ª—è —Å–Ω—è—Ç–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    async updateObjectHighlightOnChart(objectId) {
        try {
            if (!this.marketCorridorChart) {
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            if (this.highlightedObjectId === objectId) {
                return; // –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            }

            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –±—ã–ª–æ –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            const wasHighlighted = !!this.highlightedObjectId;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            this.highlightedObjectId = objectId;
            
            if (objectId) {
                console.log('üìä –í—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:', objectId);
            } else {
                console.log('üìä –°–Ω—è—Ç–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è');
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ updateMarketCorridorChart
            // —Ç–∞–∫ –∫–∞–∫ updateOptions –Ω–µ –≤—Å–µ–≥–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç discrete –º–∞—Ä–∫–µ—Ä—ã –≤ ApexCharts
            console.log('üìä –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:', {
                objectId,
                wasHighlighted,
                hasChart: !!this.marketCorridorChart
            });
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç
            await this.updateMarketCorridorChart();

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –º–∞—Ä–∫–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
     */
    getMarkerOptions() {
        console.log('üìä getMarkerOptions –≤—ã–∑–≤–∞–Ω:', {
            highlightedObjectId: this.highlightedObjectId,
            hasCurrentSeriesDataMapping: !!this.currentSeriesDataMapping
        });
        
        const baseOptions = {
            size: 4,
            opacity: 0.9,
            strokeColor: "#fff",
            strokeWidth: 2,
            style: 'inverted',
            hover: {
                size: 15
            },
            discrete: []
        };

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ discrete
        if (this.highlightedObjectId) {
            console.log('üìä –ü–æ–∏—Å–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞:', this.highlightedObjectId, {
                mode: this.marketCorridorMode,
                hasCurrentSeriesDataMapping: !!this.currentSeriesDataMapping,
                hasCurrentPointsData: !!this.currentPointsData,
                hasChart: !!this.marketCorridorChart?.w?.config?.series
            });
            
            if (this.marketCorridorMode === 'history') {
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º currentSeriesDataMapping, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–µ–Ω
                if (this.currentSeriesDataMapping && this.marketCorridorChart?.w?.config?.series) {
                    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–µ—Ä–∏—è–º –∏ –∏—Ö –º–∞–ø–ø–∏–Ω–≥–∞–º
                    for (let seriesIndex = 0; seriesIndex < this.currentSeriesDataMapping.length; seriesIndex++) {
                        const seriesMapping = this.currentSeriesDataMapping[seriesIndex];
                        if (seriesMapping && Array.isArray(seriesMapping)) {
                            // –ò—â–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞–ø–ø–∏–Ω–≥–µ —ç—Ç–æ–π —Å–µ—Ä–∏–∏
                            seriesMapping.forEach((point, dataPointIndex) => {
                                if (point && point.objectId === this.highlightedObjectId) {
                                    baseOptions.discrete.push({
                                        seriesIndex: seriesIndex,
                                        dataPointIndex: dataPointIndex,
                                        fillColor: '#ef4444',
                                        strokeColor: '#fff',
                                        size: 12,
                                        strokeWidth: 3
                                    });
                                    
                                    const seriesName = this.marketCorridorChart.w.config.series[seriesIndex]?.name || 'Unknown';
                                    console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏:', {
                                        objectId: this.highlightedObjectId,
                                        seriesIndex,
                                        dataPointIndex,
                                        series: seriesName
                                    });
                                }
                            });
                        }
                    }
                }
            } else if (this.currentSeriesDataMapping) {
                // –†–µ–∂–∏–º –∫–æ—Ä–∏–¥–æ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º seriesDataMapping –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                for (let sIdx = 0; sIdx < this.currentSeriesDataMapping.length; sIdx++) {
                    const seriesMap = this.currentSeriesDataMapping[sIdx];
                    if (seriesMap) {
                        for (let dIdx = 0; dIdx < seriesMap.length; dIdx++) {
                            if (seriesMap[dIdx] && seriesMap[dIdx].objectId === this.highlightedObjectId) {
                                baseOptions.discrete.push({
                                    seriesIndex: sIdx,
                                    dataPointIndex: dIdx,
                                    fillColor: '#ef4444',
                                    strokeColor: '#fff',
                                    size: 12,
                                    strokeWidth: 3
                                });
                                
                                console.log('üìä –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –∫–æ—Ä–∏–¥–æ—Ä–∞:', {
                                    objectId: this.highlightedObjectId,
                                    seriesIndex: sIdx,
                                    dataPointIndex: dIdx
                                });
                                break;
                            }
                        }
                    }
                }
            }
            
            if (baseOptions.discrete.length === 0) {
                console.warn('üìä –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', this.highlightedObjectId);
            }
        }

        console.log('üìä getMarkerOptions —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', baseOptions);
        return baseOptions;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    updateSubsegmentCardsActiveState() {
        try {
            const cardsContainer = document.getElementById('referencePriceCardsContainer');
            if (!cardsContainer) return;
            
            const cards = cardsContainer.querySelectorAll('[data-subsegment-id]');
            cards.forEach((card, index) => {
                const subsegmentId = card.dataset.subsegmentId; // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                const colors = this.getSubsegmentColorScheme(index);
                const isActive = this.activeSubsegmentId === subsegmentId;
                
                console.log(`üîß –ö–∞—Ä—Ç–æ—á–∫–∞ ${index}:`, {
                    subsegmentId,
                    activeSubsegmentId: this.activeSubsegmentId,
                    isActive
                });
                
                this.setCardActiveState(card, colors, isActive);
            });
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (–≤ —Å—Ç–∏–ª–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–±—ä–µ–∫—Ç–æ–≤)
     */
    setCardActiveState(card, colors, isActive) {
        try {
            if (isActive) {
                // –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤
                card.classList.remove(colors.bgColor, 'border-gray-200');
                card.classList.add('!bg-blue-50', '!border-blue-500');
            } else {
                // –û–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–µ—Ä—ã–π –±–æ—Ä–¥–µ—Ä –∫–∞–∫ —É –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
                card.classList.remove('!bg-blue-50', '!border-blue-500');
                card.classList.add(colors.bgColor, 'border-gray-200');
            }
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ ID
     */
    async getSubsegmentById(subsegmentId) {
        try {
            for (const segment of this.reportsManager.segments) {
                const segmentSubsegments = await this.database.getSubsegmentsBySegment(segment.id);
                const found = segmentSubsegments.find(s => s.id === subsegmentId);
                if (found) {
                    return found;
                }
            }
            return null;
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞:', error);
            return null;
        }
    }

    /**
     * –†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Å—Ä–æ–∫–∞ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
     */
    async calculateSubsegmentExposure(subsegmentId) {
        try {
            if (!this.filteredObjects || this.filteredObjects.length === 0 || this.evaluations.size === 0) {
                if (this.debugEnabled) {
                    
                }
                return null;
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç (–∏—â–µ–º –≤–æ –≤—Å–µ—Ö –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞—Ö –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
            let subsegment = null;
            for (const segment of this.reportsManager.segments) {
                const segmentSubsegments = await this.database.getSubsegmentsBySegment(segment.id);
                const found = segmentSubsegments.find(s => s.id === subsegmentId);
                if (found) {
                    subsegment = found;
                    break;
                }
            }
            
            if (!subsegment) {
                if (this.debugEnabled) {
                    console.log(`‚ö†Ô∏è –ü–æ–¥—Å–µ–≥–º–µ–Ω—Ç ${subsegmentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
                return null;
            }

            // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –∞–¥—Ä–µ—Å–∞
            let segmentObjects = this.filteredObjects;
            
            if (subsegment.segment_id) {
                // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
                const segment = await this.database.getSegment(subsegment.segment_id);
                if (!segment) {
                    console.log(`‚ö†Ô∏è –°–µ–≥–º–µ–Ω—Ç ${subsegment.segment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ ${subsegment.name}`);
                    return null;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
                const addresses = await this.database.getAddressesInMapArea(segment.map_area_id);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å–µ–≥–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                let filteredAddresses = addresses;
                if (segment.filters) {
                    filteredAddresses = this.reportsManager.filterAddressesBySegmentCriteria(addresses, segment.filters);
                }
                
                // –°–æ–∑–¥–∞—ë–º Set –∏–∑ ID –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                const filteredAddressIds = new Set(filteredAddresses.map(a => a.id));
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∞–¥—Ä–µ—Å–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞
                segmentObjects = this.filteredObjects.filter(obj => 
                    obj.address_id && filteredAddressIds.has(obj.address_id)
                );
                
                console.log(`üìç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É "${segment.name}": –∏–∑ ${this.filteredObjects.length} –æ–±—ä–µ–∫—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å ${segmentObjects.length}`);
            }

            // –¢–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
            const subsegmentObjects = segmentObjects.filter(obj => {
                return this.reportsManager.objectMatchesSubsegment(obj, subsegment);
            });

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            const evaluatedObjects = subsegmentObjects.filter(obj => 
                obj.status === 'archive' && // –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ
                this.evaluations.has(obj.id)
            );

            // –í–†–ï–ú–ï–ù–ù–´–ô –õ–û–ì: –≤—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log(`üîç calculateSubsegmentExposure –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ "${subsegment.name}" (ID: ${subsegmentId}):`, {
                    subsegmentId: subsegmentId,
                    totalFilteredObjects: this.filteredObjects.length,
                    subsegmentObjects: subsegmentObjects.length,
                    evaluatedObjects: evaluatedObjects.length,
                    evaluatedObjectIds: evaluatedObjects.map(obj => obj.id),
                    subsegmentFilters: subsegment.filters
                });
                
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
            if (subsegmentObjects.length > 0) {
                console.log(`üìã –ü–µ—Ä–≤—ã–µ 3 –æ–±—ä–µ–∫—Ç–∞ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ "${subsegment.name}":`, 
                    subsegmentObjects.slice(0, 3).map(obj => ({
                        id: obj.id,
                        property_type: obj.property_type,
                        area_total: obj.area_total,
                        current_price: obj.current_price,
                        status: obj.status,
                        hasEvaluation: this.evaluations.has(obj.id)
                    }))
                );
            }

            if (evaluatedObjects.length === 0) {
                return null;
            }

            const exposureDays = evaluatedObjects.map(obj => {
                const created = new Date(obj.created);
                const updated = new Date(obj.updated);
                const days = Math.floor((updated - created) / (1000 * 60 * 60 * 24));
                return days > 0 ? days : 1; // –ú–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å
            });

            exposureDays.sort((a, b) => a - b);
            
            const median = exposureDays.length % 2 === 0 
                ? Math.round((exposureDays[exposureDays.length / 2 - 1] + exposureDays[exposureDays.length / 2]) / 2)
                : exposureDays[Math.floor(exposureDays.length / 2)];
                
            const average = Math.round(exposureDays.reduce((sum, days) => sum + days, 0) / exposureDays.length);
            const min = Math.min(...exposureDays);
            const max = Math.max(...exposureDays);

            return {
                days: median, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–Ω—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                median,
                average,
                min,
                max,
                count: evaluatedObjects.length
            };

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–æ–∫–∞ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞:', error);
            return null;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
     */
    handleRoomFilterClick(event) {
        const button = event.target;
        const roomValue = button.dataset.rooms;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        const isActive = button.classList.contains('bg-blue-500');
        
        if (isActive) {
            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
            this.setButtonInactive(button);
            // –£–¥–∞–ª–∏—Ç—å –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
            const index = this.currentFilters.rooms.indexOf(roomValue);
            if (index > -1) {
                this.currentFilters.rooms.splice(index, 1);
            }
        } else {
            // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
            this.setButtonActive(button);
            // –î–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–∏–ª—å—Ç—Ä
            this.currentFilters.rooms.push(roomValue);
        }
        
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
     */
    setButtonActive(button) {
        button.classList.remove('bg-white', 'text-gray-700', 'border-gray-300', 'hover:bg-gray-100', 'hover:border-gray-400');
        button.classList.add('bg-blue-500', 'text-white', 'border-blue-500', 'hover:bg-blue-600');
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
     */
    setButtonInactive(button) {
        button.classList.remove('bg-blue-500', 'text-white', 'border-blue-500', 'hover:bg-blue-600');
        button.classList.add('bg-white', 'text-gray-700', 'border-gray-300', 'hover:bg-gray-100', 'hover:border-gray-400');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    updateInvestmentTable() {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π v0.1
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ FlippingController
        if (this.flippingController && this.filteredObjects) {
            this.flippingController.filteredObjects = this.filteredObjects;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞
     */
    handleParticipantsClick(event) {
        const button = event.target;
        const value = button.dataset.participants;
        
        // –°–Ω—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        const allButtons = this.filterContainer.querySelectorAll('[data-participants]');
        allButtons.forEach(btn => {
            this.setButtonInactive(btn);
        });
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
        this.setButtonActive(button);
        
        this.currentFilters.participants = value;
        
        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        this.toggleConditionalFields('participants', value);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.applyFilters();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–µ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏–±—ã–ª–∏
     */
    handleProfitSharingClick(event) {
        const button = event.target;
        const value = button.dataset.profitSharing;
        
        // –°–Ω—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        const allButtons = this.filterContainer.querySelectorAll('[data-profit-sharing]');
        allButtons.forEach(btn => {
            this.setButtonInactive(btn);
        });
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
        this.setButtonActive(button);
        
        this.currentFilters.profitSharing = value;
        
        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.toggleConditionalFields('profitSharing', value);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.applyFilters();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    handleFinancingClick(event) {
        const button = event.target;
        const value = button.dataset.financing;
        
        // –°–Ω—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        const allButtons = this.filterContainer.querySelectorAll('[data-financing]');
        allButtons.forEach(btn => {
            this.setButtonInactive(btn);
        });
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
        this.setButtonActive(button);
        
        this.currentFilters.financing = value;
        
        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ø–æ—Ç–µ–∫–∏
        this.toggleConditionalFields('financing', value);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.applyFilters();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ç–∏–ø—É –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è
     */
    handleTaxClick(event) {
        const button = event.target;
        const value = button.dataset.tax;
        
        // –°–Ω—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        const allButtons = this.filterContainer.querySelectorAll('[data-tax]');
        allButtons.forEach(btn => {
            this.setButtonInactive(btn);
        });
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
        this.setButtonActive(button);
        
        this.currentFilters.taxType = value;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.applyFilters();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ä–∞—Å—á—ë—Ç—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞
     */
    handleRenovationClick(event) {
        const button = event.target;
        const value = button.dataset.renovation;
        
        // –°–Ω—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        const allButtons = this.filterContainer.querySelectorAll('[data-renovation]');
        allButtons.forEach(btn => {
            this.setButtonInactive(btn);
        });
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
        this.setButtonActive(button);
        
        this.currentFilters.renovationType = value;
        
        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
        this.toggleConditionalFields('renovation', value);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        this.applyFilters();
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ø–æ–ª–µ–π
     */
    toggleConditionalFields(type, value) {
        switch (type) {
            case 'participants':
                const profitSharingSection = document.getElementById('flippingProfitSharingSection');
                if (profitSharingSection) {
                    if (value === 'flipper-investor') {
                        profitSharingSection.classList.remove('hidden');
                        profitSharingSection.classList.add('show');
                    } else {
                        profitSharingSection.classList.add('hidden');
                        profitSharingSection.classList.remove('show');
                    }
                }
                break;
                
            case 'profitSharing':
                const percentageSettings = document.getElementById('flippingProfitPercentageSettings');
                const fixedPlusSettings = document.getElementById('flippingFixedPlusPercentageSettings');
                
                if (percentageSettings && fixedPlusSettings) {
                    if (value === 'percentage') {
                        percentageSettings.classList.remove('hidden');
                        fixedPlusSettings.classList.add('hidden');
                    } else if (value === 'fix-plus-percentage') {
                        percentageSettings.classList.add('hidden');
                        fixedPlusSettings.classList.remove('hidden');
                    } else {
                        percentageSettings.classList.add('hidden');
                        fixedPlusSettings.classList.add('hidden');
                    }
                }
                break;
                
            case 'financing':
                const mortgageSection = document.getElementById('flippingMortgageSection');
                if (mortgageSection) {
                    if (value === 'mortgage') {
                        mortgageSection.classList.remove('hidden');
                        mortgageSection.classList.add('show');
                    } else {
                        mortgageSection.classList.add('hidden');
                        mortgageSection.classList.remove('show');
                    }
                }
                break;
                
            case 'renovation':
                const manualSection = document.getElementById('flippingManualRenovationSection');
                if (manualSection) {
                    if (value === 'manual') {
                        manualSection.classList.remove('hidden');
                        manualSection.classList.add('show');
                    } else {
                        manualSection.classList.add('hidden');
                        manualSection.classList.remove('show');
                    }
                }
                break;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–∑ ReportsManager
     */
    getCurrentSegmentData() {
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        let segment = this.reportsManager.currentSegment;
        if (!segment && this.reportsManager.segments && this.reportsManager.segments.length > 0) {
            segment = this.reportsManager.segments[0];
        }
        
        return {
            segment: segment,
            subsegment: this.reportsManager.currentSubsegment
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ ReportsManager
     */
    getActiveReportFilters() {
        const filters = {
            segment: this.reportsManager.currentSegment,
            subsegment: this.reportsManager.currentSubsegment,
            dateFrom: null,
            dateTo: null
        };

        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∞
        if (this.reportsManager.dateFromFilter && this.reportsManager.dateFromFilter.value) {
            filters.dateFrom = new Date(this.reportsManager.dateFromFilter.value);
        }
        
        if (this.reportsManager.dateToFilter && this.reportsManager.dateToFilter.value) {
            filters.dateTo = new Date(this.reportsManager.dateToFilter.value);
        }


        return filters;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã 
     */
    async loadData() {
        try {
            
            // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ ReportsManager (–∫–∞–∫ ComparativeAnalysisManager)
            const currentArea = this.reportsManager.areaPage.dataState?.getState('currentArea');
            if (!currentArea) {
                return [];
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç—á–µ—Ç–æ–≤ (–∫–∞–∫ ComparativeAnalysisManager)
            const segmentId = this.reportsManager.currentSegment?.id;
            const subsegmentId = this.reportsManager.currentSubsegment?.id;
            const dateFrom = new Date(this.reportsManager.dateFromFilter?.value || '2023-01-01');
            const dateTo = new Date(this.reportsManager.dateToFilter?.value || new Date().toISOString().split('T')[0]);
            
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–º–æ—â—å—é ReportsManager (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ ComparativeAnalysisManager)
            const objects = await this.reportsManager.getFilteredRealEstateObjects(
                currentArea.id, segmentId, subsegmentId, dateFrom, dateTo
            );
            
            
            this.realEstateObjects = objects;
            return objects;

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º –æ—Ç—á—ë—Ç–æ–≤
     */
    filterObjects(objects) {
        if (!objects || objects.length === 0) return [];

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç—á—ë—Ç–æ–≤
        const reportFilters = this.getActiveReportFilters();

        const filtered = objects.filter(obj => {
            // –§–∏–ª—å—Ç—Ä –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É –∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É (–∏–∑ ReportsManager)
            if (reportFilters.segment && obj.segment_id !== reportFilters.segment.id) {
                return false;
            }

            if (reportFilters.subsegment && obj.subsegment_id !== reportFilters.subsegment.id) {
                return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É (–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞)
            if (reportFilters.dateFrom || reportFilters.dateTo) {
                const objDate = new Date(obj.updated || obj.created);
                
                if (reportFilters.dateFrom && objDate < reportFilters.dateFrom) {
                    return false;
                }
                
                if (reportFilters.dateTo && objDate > reportFilters.dateTo) {
                    return false;
                }
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç (–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ñ–ª–∏–ø–ø–∏–Ω–≥–∞)
            if (this.currentFilters.rooms.length > 0) {
                const objRooms = obj.rooms ? obj.rooms.toString() : 'studio';
                const roomsMatch = this.currentFilters.rooms.some(room => {
                    if (room === 'studio') return objRooms === 'studio' || objRooms === '0';
                    if (room === '4+') return parseInt(objRooms) >= 4;
                    return objRooms === room;
                });
                if (!roomsMatch) return false;
            }

            return true;
        });

        if (this.debugEnabled) {
        }

        return filtered;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ (debounced –≤–µ—Ä—Å–∏—è)
     */
    applyFilters() {
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (this.applyFiltersTimeout) {
            clearTimeout(this.applyFiltersTimeout);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π timeout
        this.applyFiltersTimeout = setTimeout(() => {
            this.applyFiltersImmediate();
        }, this.applyFiltersDelay);
    }

    /**
     * –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±–µ–∑ debouncing
     */
    async applyFiltersImmediate() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        if (this.applyFiltersInProgress) {
            return;
        }
        
        this.applyFiltersInProgress = true;
        
        try {
            this.showPlaceholder("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É v0.1 –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if (this.flippingController) {
                await this.applyFiltersModular();
            } else {
                await this.applyFiltersLegacy();
            }
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
            this.showPlaceholder("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: " + error.message);
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            this.applyFiltersInProgress = false;
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
     */
    async applyFiltersModular() {
        try {
            
            // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ ReportsManager (–≤–∫–ª—é—á–∞—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã)
            const globalFilters = this.getActiveReportFilters();
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏–∑ ReportsManager
            const segmentData = this.getCurrentSegmentData();
            
            
            if (!segmentData.segment) {
                throw new Error('–ù–µ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            }

            // –ü–µ—Ä–µ–¥–∞—ë–º —Å–µ–≥–º–µ–Ω—Ç –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            this.flippingController.setCurrentSegment(segmentData.segment);
            
            // –í–ê–ñ–ù–û: –û–±—ä–µ–¥–∏–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Ñ–ª–∏–ø–ø–∏–Ω–≥–∞
            const combinedFilters = {
                ...this.currentFilters,
                // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                globalSegment: globalFilters.segment,
                globalSubsegment: globalFilters.subsegment,
                globalDateFrom: globalFilters.dateFrom,
                globalDateTo: globalFilters.dateTo
            };
            
            
            // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            this.flippingController.handleFilterChange(combinedFilters);
            
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–±–ª–∞—Å—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—ë–º –µ—ë –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            const currentArea = this.reportsManager.areaPage.dataState?.getState('currentArea');
            if (!currentArea) {
                throw new Error('–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä v0.1, –ø–µ—Ä–µ–¥–∞–≤–∞—è –æ–±–ª–∞—Å—Ç—å –∏ ReportsManager
            const filteredObjects = await this.flippingController.applyFiltersWithAreaAndReportsManager(
                currentArea, globalFilters, this.reportsManager
            );
            
            
            if (filteredObjects && filteredObjects.length > 0) {
                this.filteredObjects = filteredObjects;
                this.showContent();
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                await this.calculateProfitabilityForObjects();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                await this.loadAddresses();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
                await this.loadAllEvaluations();
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
                await this.calculateReferencePrice(true);
                
                // –ö–∞—Ä—Ç–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è FlippingController —á–µ—Ä–µ–∑ FlippingMap
                // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ä—Ç—É
                await this.loadMapData();
                
                // –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
                await this.createMarketCorridorChart();
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã —Å FlippingController –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI
                if (this.flippingController && this.flippingController.filteredObjects) {
                    this.filteredObjects = this.flippingController.filteredObjects;
                    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –æ–±—ä–µ–∫—Ç—ã —Å FlippingController (legacy)
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –æ–±—ä–µ–∫—Ç–æ–≤
                await this.updateObjectsDisplay();
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ—Ç—á—ë—Ç –±—ã–ª —Å–∫—Ä—ã—Ç/–ø–æ–∫–∞–∑–∞–Ω)
                if (this.referencePrices && this.referencePrices.length > 0) {
                    await this.updateReferencePricePanel();
                }
                
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –∫–æ–≥–¥–∞ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤
                this.showPlaceholder('–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ/–ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–µ');
                return; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º, –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—è –æ—à–∏–±–∫—É
            }
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ v0.1:', error);
            this.showPlaceholder("–û—à–∏–±–∫–∞: " + error.message);
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ legacy —Ä–µ–∂–∏–º–µ
     */
    async applyFiltersLegacy() {
        try {
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            const objects = await this.loadData();
            
            
            if (objects.length === 0) {
                this.showPlaceholder("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏");
                return;
            }

            // ReportsManager —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª –æ–±—ä–µ–∫—Ç—ã –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
            this.filteredObjects = objects;
            
            
            if (this.filteredObjects.length === 0) {
                this.showPlaceholder("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º");
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.showContent();
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            await this.calculateProfitabilityForObjects();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await this.loadAddresses();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
            await this.loadAllEvaluations();
            
            // –ö–∞—Ä—Ç–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è FlippingController —á–µ—Ä–µ–∑ FlippingMap
            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
            await this.calculateReferencePrice(true);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ legacy —Ä–µ–∂–∏–º–µ
            await this.loadMapData();
            
            // –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
            await this.createMarketCorridorChart();
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã —Å FlippingController –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI
            if (this.flippingController && this.flippingController.filteredObjects) {
                this.filteredObjects = this.flippingController.filteredObjects;
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –æ–±—ä–µ–∫—Ç—ã —Å FlippingController
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –æ–±—ä–µ–∫—Ç–æ–≤
            await this.updateObjectsDisplay();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ—Ç—á—ë—Ç –±—ã–ª —Å–∫—Ä—ã—Ç/–ø–æ–∫–∞–∑–∞–Ω)
            if (this.referencePrices && this.referencePrices.length > 0) {
                await this.updateReferencePricePanel();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            this.updateInvestmentTable();
            
        } catch (error) {
            throw error;
        }
    }

    /**
     * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
     */
    showPlaceholder(message) {
        if (this.placeholder) {
            this.placeholder.textContent = message;
            this.placeholder.classList.remove('hidden');
        }
        
        if (this.content) {
            this.content.classList.add('hidden');
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç—á—ë—Ç–∞
     */
    showContent() {
        if (this.placeholder) {
            this.placeholder.classList.add('hidden');
        }
        
        if (this.content) {
            this.content.classList.remove('hidden');
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –æ—Ç—á—ë—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ ReportsManager)
     */
    async show() {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—Ç—á—ë—Ç–∞
        this.isDestroyed = false;
        
        if (this.debugEnabled) {
        }
        
        try {            
            // –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
            try {
                await DatabaseUtils.ensureDatabaseReady();
                if (this.debugEnabled) {
                }
            } catch (error) {
                console.error('‚ùå FlippingProfitabilityManager: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞:', error);
                this.showPlaceholder('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                return;
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            if (!this.container) {
                await this.initialize();
            }
            
            // –ü–æ–∫–∞–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–º–µ—Å—Ç–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            this.showContent();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ReportsManager)
            this.setupGlobalFilterHandlers();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            await this.applyFiltersImmediate();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
            setTimeout(async () => {
                await this.forceUpdateChart();
            }, 500);
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç—á—ë—Ç–∞:', error);
            this.showPlaceholder('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞: ' + error.message);
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    async forceUpdateChart() {
        try {
            if (this.marketCorridorChart) {
                this.marketCorridorChart.updateOptions({
                    chart: {
                        redrawOnParentResize: true
                    }
                });
                this.marketCorridorChart.render();
            }
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
     */
    updateEvaluationSelectorState() {
        try {
            if (this.evaluationSelect) {
                // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                
            }
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ ComparativeAnalysisManager)
     */
    async loadAddresses() {
        try {
            const areaId = this.reportsManager.areaPage?.currentAreaId;
            if (!areaId) {
                this.addresses = [];
                return;
            }

            this.addresses = await this.database.getAddressesInMapArea(areaId);
            
            if (this.debugEnabled) {
                console.log(`üìç FlippingProfitabilityManager: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: ${this.addresses?.length || 0}`);
            }
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤:', error);
            this.addresses = [];
        }
    }

    // –ú–µ—Ç–æ–¥—ã –∫–∞—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã - –∫–∞—Ä—Ç–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è FlippingController —á–µ—Ä–µ–∑ FlippingMap

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞—Ä—Ç—É (—á–µ—Ä–µ–∑ FlippingController)
     */
    async loadMapData() {
        try {
            
            
            // –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ FlippingController –≤ updateObjectsDisplay
            if (this.flippingController) {
                await this.flippingController.updateUIComponents();
            }
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞—Ä—Ç—É:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏–¥–æ—Ä–∞
     */
    async createMarketCorridorChart() {
        try {
            if (!this.chartContainer) {
                return;
            }
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
            if (this.chartCreationInProgress) {
                return;
            }
            this.chartCreationInProgress = true;

            
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏ –∏ —Ü–≤–µ—Ç–∞ –∏–∑ prepareChartData() –∫–∞–∫ –≤ ReportsManager
            const { series: chartData, colors } = this.prepareChartData();
            
            // –û–ø—Ü–∏–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ ApexCharts (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ReportsManager)
            const options = {
                series: chartData || [],
                colors: colors,
                chart: {
                    type: this.marketCorridorMode === 'history' ? 'line' : 'scatter',
                    height: 400,
                    zoom: {
                        enabled: true
                    },
                    selection: {
                        enabled: false // –û—Ç–∫–ª—é—á–∞–µ–º selection —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                    },
                    animations: {
                        enabled: false
                    },
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
                            "shortMonths": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
                            "days": ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    events: {
                        dataPointSelection: (event, chartContext, config) => {
                            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤–æ –≤—Ä–µ–º—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
                            if (this.chartBeingDestroyed) {
                                if (event) {
                                    event.preventDefault && event.preventDefault();
                                    event.stopPropagation && event.stopPropagation();
                                }
                                return;
                            }
                            
                            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –ø—É—Å—Ç—ã–º –æ–±–ª–∞—Å—Ç—è–º
                            // ApexCharts –≤—ã–∑—ã–≤–∞–µ—Ç dataPointSelection –¥–∞–∂–µ –¥–ª—è –∫–ª–∏–∫–æ–≤ –≤–Ω–µ —Ç–æ—á–µ–∫ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ -1
                            if (!config || config.dataPointIndex < 0 || config.seriesIndex < 0) {
                                // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –ø—É—Å—Ç—ã–º –æ–±–ª–∞—Å—Ç—è–º
                                if (event) {
                                    event.preventDefault && event.preventDefault();
                                    event.stopPropagation && event.stopPropagation();
                                }
                                return;
                            }
                            
                            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–∑–æ–≤–æ–≤ –ø–æ—Å–ª–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
                            if (this.isDestroyed || !this.marketCorridorChart || !this.chartContainer || !document.contains(this.chartContainer)) {
                                return;
                            }
                            
                            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                            if (event) {
                                event.preventDefault && event.preventDefault();
                                event.stopPropagation && event.stopPropagation();
                            }
                            
                            try {
                                this.handleChartClick(config);
                            } catch (error) {
                                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É:', error);
                            }
                        }
                    }
                },
                stroke: {
                    width: this.marketCorridorMode === 'history' ? 2 : 0, // –õ–∏–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏
                    curve: this.marketCorridorMode === 'history' ? 'stepline' : 'straight'
                },
                markers: this.getMarkerOptions(),
                xaxis: {
                    type: 'datetime',
                    title: {
                        text: '–î–∞—Ç–∞'
                    }
                },
                yaxis: {
                    title: {
                        text: '–¶–µ–Ω–∞'
                    },
                    labels: {
                        formatter: function (val) {
                            return new Intl.NumberFormat('ru-RU').format(val);
                        }
                    }
                },
                tooltip: {
                    shared: false,
                    intersect: true,
                    custom: (tooltipModel) => {
                        const { series, seriesIndex, dataPointIndex, w } = tooltipModel;
                        
                        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                        const flippingManager = window.flippingProfitabilityManagerInstance;
                        
                        let point = null;
                        
                        if (flippingManager && flippingManager.currentPointsData) {
                            // –ò—â–µ–º —Ç–æ—á–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                            const seriesData = w.config.series[seriesIndex];
                            if (seriesData && seriesData.data && seriesData.data[dataPointIndex]) {
                                const [timestamp, price] = seriesData.data[dataPointIndex];
                                
                                point = flippingManager.currentPointsData.find(p => 
                                    Math.abs(p.x - timestamp) < 1000 && Math.abs(p.y - price) < 0.01
                                );
                            }
                        }
                        
                        if (!point) {
                            return '<div style="padding: 8px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
                        }

                        const price = new Intl.NumberFormat('ru-RU').format(point.y);
                        const date = new Date(point.x).toLocaleDateString('ru-RU');
                        const status = point.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ê—Ä—Ö–∏–≤';
                        const rooms = point.rooms || '–Ω/–¥';
                        const area = point.area ? `${point.area} –º¬≤` : '–Ω/–¥';
                        const floor = point.floor && point.floors_total ? `${point.floor}/${point.floors_total}` : '–Ω/–¥';

                        return `
                            <div style="background: white; border: 1px solid #d1d5db; border-radius: 8px; box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); padding: 12px; max-width: 300px;">
                                <div style="font-weight: 600; color: #1f2937; margin-bottom: 8px;">${rooms} –∫–æ–º–Ω., ${area}</div>
                                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">–≠—Ç–∞–∂: ${floor}</div>
                                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">–°—Ç–∞—Ç—É—Å: <span style="font-weight: 500; color: ${point.status === 'active' ? '#059669' : '#6b7280'};">${status}</span></div>
                                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">–î–∞—Ç–∞: ${date}</div>
                                <div style="font-weight: bold; font-size: 18px; color: #2563eb;">${price} ‚ÇΩ</div>
                                <div style="font-size: 12px; color: #9ca3af; margin-top: 8px;">–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π</div>
                            </div>
                        `;
                    }
                },
                legend: {
                    show: false,
                    showForSingleSeries: false,
                    showForNullSeries: false,
                    showForZeroSeries: false
                },
                title: {
                    text: '',
                    align: 'left'
                },
                annotations: {
                    yaxis: []  // –ë—É–¥–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏–Ω–∏—é —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã
                }
            };

            // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            if (this.marketCorridorChart) {
                try {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–ª–∞–≥ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤–æ –≤—Ä–µ–º—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è
                    this.chartBeingDestroyed = true;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä–∞—Ñ–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                    if (this.marketCorridorChart.destroy && typeof this.marketCorridorChart.destroy === 'function') {
                        this.marketCorridorChart.destroy();
                    }
                } catch (error) {
                    console.warn('üìä –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
                }
                this.marketCorridorChart = null;
                
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è querySelector –æ—à–∏–±–æ–∫
                if (this.chartContainer) {
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    const newContainer = this.chartContainer.cloneNode(false);
                    this.chartContainer.parentNode.replaceChild(newContainer, this.chartContainer);
                    this.chartContainer = newContainer;
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π ApexCharts
                await new Promise(resolve => setTimeout(resolve, 100));
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
                this.chartBeingDestroyed = false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!this.chartContainer || !document.contains(this.chartContainer)) {
                console.error('üìä –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                return;
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (–æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º)
            this.marketCorridorChart = new ApexCharts(this.chartContainer, options);
            await this.marketCorridorChart.render();

            // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è tooltip
            window.flippingProfitabilityManagerInstance = this;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç
            if (this.activeSubsegmentId) {
                this.updateReferencePriceAnnotation();
            }

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', error);
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è
            this.chartCreationInProgress = false;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏–¥–æ—Ä–∞
     */
    async updateMarketCorridorChart() {
        try {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (this.chartUpdateInProgress || this.chartCreationInProgress) {
                return;
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–°–ï–ì–î–ê –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
            // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –∏–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å ApexCharts
            console.log('üìä –ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞:', {
                hasChart: !!this.marketCorridorChart,
                highlightedObjectId: this.highlightedObjectId,
                activeSubsegmentId: this.activeSubsegmentId
            });
            
            await this.createMarketCorridorChart();
            return;
            
            // –ö–æ–¥ –Ω–∏–∂–µ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è - –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            this.chartUpdateInProgress = true;

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            const { series: chartData, colors } = this.prepareChartData();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            if (chartData && chartData.length > 0) {
                this.marketCorridorChart.updateSeries(chartData);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–Ω–∏—é —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
            this.updateReferencePriceAnnotation();

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:', error);
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.chartUpdateInProgress = false;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
     */
    updateReferencePriceAnnotation() {
        try {
            console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã:', {
                hasChart: !!this.marketCorridorChart,
                activeSubsegmentId: this.activeSubsegmentId,
                referencePrices: this.referencePrices
            });

            if (!this.marketCorridorChart) {
                return;
            }

            // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞, —É–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é
            if (!this.activeSubsegmentId) {
                console.log('üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞, —É–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é');
                
                // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
                try {
                    this.marketCorridorChart.clearAnnotations();
                    console.log('üìä –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º');
                } catch (error) {
                    console.warn('üìä –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º:', error);
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                    this.marketCorridorChart.updateOptions({
                        annotations: {
                            yaxis: []
                        }
                    });
                    console.log('üìä –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º');
                }
                return;
            }

            // –ù–∞—Ö–æ–¥–∏–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
            const subsegmentPrice = this.referencePrices.find(p => p.id === this.activeSubsegmentId);
            const subsegmentIndex = this.referencePrices.findIndex(p => p.id === this.activeSubsegmentId);
            const colors = this.getSubsegmentColorScheme(subsegmentIndex);
            
            console.log('üìä –ù–∞–π–¥–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞:', subsegmentPrice);
            console.log('üìä –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞:', colors);
            
            if (!subsegmentPrice || !subsegmentPrice.referencePrice || !subsegmentPrice.referencePrice.total) {
                console.log('üìä –ù–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞, —É–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é');
                // –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—ã, —É–±–∏—Ä–∞–µ–º –ª–∏–Ω–∏—é
                this.marketCorridorChart.updateOptions({
                    annotations: {
                        yaxis: []
                    }
                });
                return;
            }

            const totalPrice = subsegmentPrice.referencePrice.total;
            console.log('üìä –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã (–∑–∞ –æ–±—ä–µ–∫—Ç):', totalPrice);
            const formattedPrice = new Intl.NumberFormat('ru-RU').format(totalPrice);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
            const chartOptions = this.marketCorridorChart.opts;
            console.log('üìä –¢–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', {
                yaxis: chartOptions?.yaxis,
                hasData: !!this.filteredObjects?.length,
                minPrice: this.filteredObjects?.length ? Math.min(...this.filteredObjects.map(obj => obj.current_price).filter(p => p > 0)) : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                maxPrice: this.filteredObjects?.length ? Math.max(...this.filteredObjects.map(obj => obj.current_price).filter(p => p > 0)) : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã chart:', {
                clearAnnotations: typeof this.marketCorridorChart.clearAnnotations,
                addYaxisAnnotation: typeof this.marketCorridorChart.addYaxisAnnotation,
                updateOptions: typeof this.marketCorridorChart.updateOptions
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã
            // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            try {
                this.marketCorridorChart.clearAnnotations();
                console.log('üìä –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
                this.marketCorridorChart.addYaxisAnnotation({
                    y: totalPrice,
                    borderColor: colors.graphColor,
                    borderWidth: 2,
                    strokeDashArray: 5,  // –ü—Ä–µ—Ä—ã–≤–∏—Å—Ç–∞—è –ª–∏–Ω–∏—è
                    label: {
                        borderColor: colors.graphColor,
                        style: {
                            color: '#fff',
                            background: colors.graphColor,
                            fontSize: '12px',
                            fontWeight: 'bold'
                        },
                        text: `${formattedPrice} ‚ÇΩ`,
                        position: 'left'  // –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–¥–ø–∏—Å—å —Å–ª–µ–≤–∞
                    }
                });
                console.log('üìä –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } catch (annotationError) {
                console.error('üìä –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏:', annotationError);
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ updateOptions —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                this.marketCorridorChart.updateOptions({
                    annotations: {
                        yaxis: [{
                            y: totalPrice,
                            borderColor: colors.graphColor,
                            borderWidth: 2,
                            strokeDashArray: 5,  // –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è
                            label: {
                                borderColor: colors.graphColor,
                                style: {
                                    color: '#fff',
                                    background: colors.graphColor,
                                    fontSize: '12px',
                                    fontWeight: 600
                                },
                                text: `${formattedPrice} ‚ÇΩ`,
                                position: 'left',
                                offsetX: 10
                            }
                        }]
                    }
                }, false, true);  // false - –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–µ—Ä–∏–∏, true - –æ–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫
            }

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ü–µ–Ω—ã:', error);
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–∏–¥–µ–Ω—Ç–∏—á–Ω–æ ReportsManager)
     */
    prepareChartData() {
        try {
            
            if (!this.filteredObjects || this.filteredObjects.length === 0) {
                return [];
            }

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–∫–∞–∫ –≤ ReportsManager)
            const activePointsData = [];
            const archivePointsData = [];
            
            this.filteredObjects.forEach(obj => {
                if (obj.current_price <= 0) return;
                
                if (obj.status === 'archive') {
                    // –ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∞ –¥–∞—Ç—É —É—Ö–æ–¥–∞ —Å —Ä—ã–Ω–∫–∞
                    if (obj.updated) {
                        archivePointsData.push({
                            x: new Date(obj.updated).getTime(),
                            y: obj.current_price,
                            objectId: obj.id,
                            address: obj.address_id,
                            rooms: obj.rooms || obj.property_type,
                            area: obj.area_total,
                            floor: obj.floor,
                            floors_total: obj.floors_total,
                            status: obj.status,
                            created: obj.created,
                            updated: obj.updated
                        });
                    }
                } else if (obj.status === 'active') {
                    if (this.marketCorridorMode === 'history') {
                        // –†–µ–∂–∏–º "–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–∫–∞–∫ –≤ ReportsManager)
                        const objectPriceHistory = this.prepareObjectPriceHistoryForChart(obj);
                        
                        // –ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—ä–µ–∫—Ç–µ
                        objectPriceHistory.forEach(historyPoint => {
                            activePointsData.push({
                                x: historyPoint.date,
                                y: historyPoint.price,
                                objectId: obj.id,
                                address: obj.address_id,
                                rooms: obj.rooms || obj.property_type,
                                area: obj.area_total,
                                floor: obj.floor,
                                floors_total: obj.floors_total,
                                status: obj.status,
                                created: obj.created,
                                updated: obj.updated
                            });
                        });
                    } else {
                        // –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É (—Ä–µ–∂–∏–º "–ö–æ—Ä–∏–¥–æ—Ä –ø—Ä–æ–¥–∞–∂")
                        activePointsData.push({
                            x: new Date().getTime(),
                            y: obj.current_price,
                            objectId: obj.id,
                            address: obj.address_id,
                            rooms: obj.rooms || obj.property_type,
                            area: obj.area_total,
                            floor: obj.floor,
                            floors_total: obj.floors_total,
                            status: obj.status,
                            created: obj.created,
                            updated: obj.updated
                        });
                    }
                }
            });
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
            activePointsData.sort((a, b) => a.x - b.x);
            archivePointsData.sort((a, b) => a.x - b.x);

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–≤–µ—Ç–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ ReportsManager
            const series = [];
            const colors = []; // –¶–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–∏–π
            const seriesDataMapping = []; // –ú–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä–∏–π –∫ –¥–∞–Ω–Ω—ã–º (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞)
            
            // –û—Ç–ª–∞–¥–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
            if (this.debugEnabled) {
                console.log('üîç –û–¢–õ–ê–î–ö–ê: –†–µ–∂–∏–º –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –¥–∞–Ω–Ω—ã–µ:', {
                    mode: this.marketCorridorMode,
                    totalObjects: this.filteredObjects?.length || 0,
                    activeObjects: this.filteredObjects?.filter(obj => obj.status === 'active').length || 0,
                    archiveObjects: this.filteredObjects?.filter(obj => obj.status === 'archive').length || 0,
                    activePoints: activePointsData.length,
                    archivePoints: archivePointsData.length,
                    activeSubsegmentId: this.activeSubsegmentId
                });
            }

            if (this.marketCorridorMode === 'history') {
                console.log('üìä –†–µ–∂–∏–º –ò–°–¢–û–†–ò–ò: –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ ID');
                // –í —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è ReportsManager)
                const activeObjectsGrouped = {};
                const objectPointsMapping = {}; // –ú–∞–ø–ø–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –∫ –∏—Ö —Ç–æ—á–∫–∞–º –¥–ª—è seriesDataMapping
                
                activePointsData.forEach(point => {
                    if (!activeObjectsGrouped[point.objectId]) {
                        activeObjectsGrouped[point.objectId] = {
                            name: `–û–±—ä–µ–∫—Ç #${point.objectId}`,
                            data: [],
                            color: '#56c2d6'
                        };
                        objectPointsMapping[point.objectId] = [];
                    }
                    activeObjectsGrouped[point.objectId].data.push([point.x, point.y]);
                    objectPointsMapping[point.objectId].push(point);
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è ReportsManager)
                Object.entries(activeObjectsGrouped).forEach(([objectId, objectSeries]) => {
                    const seriesIndex = series.length;
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ª–∏–Ω–∏–π
                    objectSeries.data.sort((a, b) => a[0] - b[0]);
                    // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –ª–∏–Ω–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏
                    objectSeries.type = 'line';
                    series.push(objectSeries);
                    colors.push('#56c2d6'); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ –∫–∞–∫ –≤ ReportsManager
                    
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø–æ–ª–Ω—è–µ–º seriesDataMapping –¥–ª—è —Ä–µ–∂–∏–º–∞ –∏—Å—Ç–æ—Ä–∏–∏
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –æ–±—ä–µ–∫—Ç–∞ –ø–æ –¥–∞—Ç–µ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏
                    const sortedPoints = objectPointsMapping[objectId].sort((a, b) => a.x - b.x);
                    seriesDataMapping[seriesIndex] = sortedPoints;
                });
                
                // –ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è ReportsManager) 
                if (archivePointsData.length > 0) {
                    const seriesIndex = series.length;
                    series.push({
                        name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã',
                        data: archivePointsData.map(point => [point.x, point.y]),
                        type: 'scatter' // –¢–æ—á–∫–∏ –±–µ–∑ –ª–∏–Ω–∏–π
                    });
                    colors.push('#dc2626'); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ —É—Å–ª–æ–≤–∏—è –∫–∞–∫ –≤ ReportsManager
                    
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø–æ–ª–Ω—è–µ–º seriesDataMapping –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    seriesDataMapping[seriesIndex] = archivePointsData;
                }
            } else {
                // –†–µ–∂–∏–º "–ö–æ—Ä–∏–¥–æ—Ä –ø—Ä–æ–¥–∞–∂" - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è ReportsManager)
                if (activePointsData.length > 0) {
                    const seriesIndex = series.length;
                    series.push({
                        name: '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã',
                        data: activePointsData.map(point => [point.x, point.y])
                    });
                    colors.push('#56c2d6'); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ —É—Å–ª–æ–≤–∏—è –∫–∞–∫ –≤ ReportsManager
                    seriesDataMapping[seriesIndex] = activePointsData; // –ü—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥
                }
                
                if (archivePointsData.length > 0) {
                    const seriesIndex = series.length;
                    series.push({
                        name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã',
                        data: archivePointsData.map(point => [point.x, point.y])
                    });
                    colors.push('#dc2626'); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ —É—Å–ª–æ–≤–∏—è –∫–∞–∫ –≤ ReportsManager
                    seriesDataMapping[seriesIndex] = archivePointsData; // –ü—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥
                }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –¥–ª—è tooltip –∏ –º–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä–∏–π
            this.currentPointsData = [...activePointsData, ...archivePointsData];
            this.currentSeriesDataMapping = seriesDataMapping; // –ö–∞–∫ –≤ ReportsManager

            // –û—Ç–ª–∞–¥–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
            if (this.debugEnabled) {
                console.log('üîç –†–ï–ó–£–õ–¨–¢–ê–¢ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', {
                    mode: this.marketCorridorMode,
                    seriesCount: series.length,
                    colorsCount: colors.length,
                    seriesPreview: series.map(s => ({ 
                        name: s.name, 
                        type: s.type, 
                        dataPoints: s.data?.length,
                        hasArchive: s.name?.includes('–ê—Ä—Ö–∏–≤–Ω—ã–µ')
                    })),
                    hasArchiveSeries: series.some(s => s.name?.includes('–ê—Ä—Öiv–Ω—ã–µ'))
                });
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å series –∏ colors –∫–∞–∫ –≤ ReportsManager  
            return { series, colors };

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞:', error);
            return { series: [], colors: [] };
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–∫–æ–ø–∏—è –∏–∑ ReportsManager)
     */
    prepareObjectPriceHistoryForChart(realEstateObject) {
        const history = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if (realEstateObject.price_history && Array.isArray(realEstateObject.price_history)) {
            realEstateObject.price_history.forEach(item => {
                if (item.price && item.date) {
                    history.push({
                        date: new Date(item.date).getTime(),
                        price: parseInt(item.price)
                    });
                }
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –æ–±—ä–µ–∫—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ª–æ–≥–∏–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
        if (realEstateObject.current_price) {
            let endPriceDate;
            
            if (realEstateObject.status === 'active') {
                // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                endPriceDate = new Date();
            } else {
                // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ - –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                endPriceDate = new Date(realEstateObject.updated);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
            const lastHistoryDate = history.length > 0 ? history[history.length - 1].date : 0;
            if (Math.abs(endPriceDate.getTime() - lastHistoryDate) > 24 * 60 * 60 * 1000) {
                history.push({
                    date: endPriceDate.getTime(),
                    price: parseInt(realEstateObject.current_price)
                });
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        history.sort((a, b) => a.date - b.date);
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ü–µ–Ω –ø–æ–¥—Ä—è–¥, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏
        const filtered = [];
        for (let i = 0; i < history.length; i++) {
            if (i === 0 || i === history.length - 1 || history[i].price !== history[i-1].price) {
                filtered.push(history[i]);
            }
        }

        return filtered;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    async handleChartClick(config) {
        try {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ—Å–ª–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            if (this.isDestroyed || !this.marketCorridorChart || !this.chartContainer || !document.contains(this.chartContainer)) {
                console.warn('üìä –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–∫ –ø–æ—Å–ª–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞');
                return;
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ dataPointSelection)
            if (!config || config.dataPointIndex < 0 || config.seriesIndex < 0) {
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
            if (this.marketCorridorChart && this.marketCorridorChart.w && this.marketCorridorChart.w.config && this.marketCorridorChart.w.config.series) {
                const seriesData = this.marketCorridorChart.w.config.series[config.seriesIndex];
                if (seriesData && seriesData.data && seriesData.data[config.dataPointIndex]) {
                    const [timestamp, price] = seriesData.data[config.dataPointIndex];
                    
                    console.log('üìä –ö–ª–∏–∫ –ø–æ —Ç–æ—á–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞:', {
                        timestamp: new Date(timestamp),
                        price,
                        seriesIndex: config.seriesIndex,
                        dataPointIndex: config.dataPointIndex
                    });

                    // –ò—â–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–∫ –≤ ReportsManager - —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ seriesDataMapping, –ø–æ—Ç–æ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                    let clickedObject = null;
                    
                    if (this.marketCorridorMode === 'history') {
                        // –í —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–æ—á–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                        clickedObject = this.currentPointsData.find(p => 
                            Math.abs(p.x - timestamp) < 1000 && Math.abs(p.y - price) < 0.01
                        );
                    } else {
                        // –í —Ä–µ–∂–∏–º–µ –∫–æ—Ä–∏–¥–æ—Ä–∞ –ø—Ä–æ–¥–∞–∂ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–∏–∏-–º–∞–ø–ø–∏–Ω–≥
                        if (this.currentSeriesDataMapping && 
                            this.currentSeriesDataMapping[config.seriesIndex] && 
                            this.currentSeriesDataMapping[config.seriesIndex][config.dataPointIndex]) {
                            
                            const pointData = this.currentSeriesDataMapping[config.seriesIndex][config.dataPointIndex];
                            // pointData —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–µ, –≤–∫–ª—é—á–∞—è objectId
                            clickedObject = pointData;
                            
                        } else {
                            // Fallback - –∏—â–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                            clickedObject = this.currentPointsData.find(p => 
                                Math.abs(p.x - timestamp) < 1000 && Math.abs(p.y - price) < 0.01
                            );
                        }
                    }

                    if (clickedObject) {
                        const objectId = clickedObject.objectId;
                        console.log('üìä –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:', objectId);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –≤—ã–¥–µ–ª–µ–Ω —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç
                        if (this.selectedObjectId === objectId) {
                            // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ –ø–æ —É–∂–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                            console.log('üìä –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', objectId);
                            this.showObjectDetails(objectId);
                        } else {
                            // –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –≤—ã–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç (–∫–∞–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ)
                            console.log('üìä –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –≤—ã–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç:', objectId);
                            await this.selectObject(objectId, true); // disableScroll = true –¥–ª—è –∫–ª–∏–∫–æ–≤ –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
                        }
                    } else {
                        console.warn('üìä –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ—á–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞');
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ)
     * @param {string} objectId - ID –æ–±—ä–µ–∫—Ç–∞
     */
    async showObjectDetails(objectId) {
        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
            await DatabaseUtils.ensureDatabaseReady();
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –Ω–∞—à–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ (—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω)
            const object = this.filteredObjects.find(obj => obj.id === objectId);
            if (!object) {
                console.warn('‚ö†Ô∏è –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', objectId);
                return;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ DuplicatesManager —á–µ—Ä–µ–∑ reportsManager.areaPage
            if (this.reportsManager && this.reportsManager.areaPage && this.reportsManager.areaPage.duplicatesManager && this.reportsManager.areaPage.duplicatesManager.showObjectDetails) {
                await this.reportsManager.areaPage.duplicatesManager.showObjectDetails(objectId);
            } else {
                console.error('‚ùå FlippingProfitabilityManager: DuplicatesManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞');
                
                // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –∏–∑ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                const rooms = object.rooms || object.property_type || '–Ω/–¥';
                const area = object.area_total ? `${object.area_total} –º¬≤` : '–Ω/–¥';
                const price = new Intl.NumberFormat('ru-RU').format(object.current_price);
                const status = object.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ê—Ä—Ö–∏–≤–Ω—ã–π';
                
                alert(`üìã –û–±—ä–µ–∫—Ç ${objectId}\n\n` +
                      `–ö–æ–º–Ω–∞—Ç: ${rooms}\n` +
                      `–ü–ª–æ—â–∞–¥—å: ${area}\n` +
                      `–¶–µ–Ω–∞: ${price} ‚ÇΩ\n` +
                      `–°—Ç–∞—Ç—É—Å: ${status}\n\n` +
                      `–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª—è–º–∏"`);
            }
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
     */
    async updateObjectsDisplay() {
        try {
            
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –≤—ã–∑–æ–≤)
            await this.updateObjectsForEvaluation();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ FlippingController
            if (this.flippingController && this.flippingController.flippingTable) {
                await this.flippingController.flippingTable.updateData(this.filteredObjects, this.currentFilters);
                
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ FlippingController  
            if (this.flippingController && this.flippingController.flippingMap) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                const addressMap = new Map();
                for (const obj of this.filteredObjects) {
                    if (obj.address && obj.address_id) {
                        addressMap.set(obj.address_id, obj.address);
                    }
                }
                const uniqueAddresses = Array.from(addressMap.values());
                
                await this.flippingController.flippingMap.updateAddresses(uniqueAddresses, this.currentFilters, this.filteredObjects);
                
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            await this.updateMarketCorridorChart();
            

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:', error);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ ComparativeAnalysisManager)
     */
    formatPrice(price) {
        if (!price) return '0 ‚ÇΩ';
        return new Intl.NumberFormat('ru-RU').format(price) + ' ‚ÇΩ';
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ–±—ä–µ–∫—Ç–∞ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ ComparativeAnalysisManager)
     */
    formatObjectCharacteristics(realEstateObject) {
        const parts = [];
        
        // –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if (realEstateObject.property_type) {
            const types = {
                'studio': '–°—Ç—É–¥–∏—è',
                '1k': '1-–∫',
                '2k': '2-–∫',
                '3k': '3-–∫',
                '4k+': '4-–∫+'
            };
            parts.push(types[realEstateObject.property_type] || realEstateObject.property_type);
            parts.push('–∫–≤–∞—Ä—Ç–∏—Ä–∞');
        }
        
        // –ü–ª–æ—â–∞–¥–∏
        const areas = [];
        if (realEstateObject.area_total) areas.push(realEstateObject.area_total);
        if (realEstateObject.area_living) areas.push(realEstateObject.area_living);
        if (realEstateObject.area_kitchen) areas.push(realEstateObject.area_kitchen);
        if (areas.length > 0) parts.push(`${areas.join('/')}–º¬≤`);
        
        // –≠—Ç–∞–∂/—ç—Ç–∞–∂–Ω–æ—Å—Ç—å
        if (realEstateObject.floor && realEstateObject.total_floors) {
            parts.push(`${realEstateObject.floor}/${realEstateObject.total_floors} —ç—Ç.`);
        } else if (realEstateObject.floor && realEstateObject.floors_total) {
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—è floors_total –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            parts.push(`${realEstateObject.floor}/${realEstateObject.floors_total} —ç—Ç.`);
        }
        
        return parts.length > 0 ? parts.join(', ') : '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ ID (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ ComparativeAnalysisManager)
     */
    getAddressNameById(addressId) {
        if (!addressId || !this.addresses) return '';
        const address = this.addresses.find(addr => addr.id === addressId);
        return address ? address.address : '';
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –æ—Ç—á—ë—Ç–∞
     */
    hide() {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        this.isDestroyed = true;
        
        // –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏
        if (this.marketCorridorChart) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä–∞—Ñ–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                if (this.marketCorridorChart.destroy && typeof this.marketCorridorChart.destroy === 'function') {
                    this.marketCorridorChart.destroy();
                }
            } catch (error) {
                console.warn('üìä –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏:', error);
            }
            this.marketCorridorChart = null;
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è querySelector –æ—à–∏–±–æ–∫
            if (this.chartContainer) {
                this.chartContainer.innerHTML = '';
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FlippingProfitabilityManager;
}
