/**
 * FlippingProfitabilityManager - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–π –¥–ª—è –æ—Ç—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–ª–∏–ø–ø–∏–Ω–≥
 * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É legacy ReportsManager –∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π v0.1
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å FlippingController
 */
class FlippingProfitabilityManager {
    constructor(reportsManager) {
        this.reportsManager = reportsManager;
        this.database = window.db;
        this.eventBus = reportsManager.eventBus;
        
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π v0.1
        this.flippingController = null;
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.container = null;
        this.placeholder = null;
        this.content = null;
        this.filterContainer = null;
        this.mapContainer = null;
        this.tableContainer = null;
        
        // –§–∏–ª—å—Ç—Ä—ã
        this.currentFilters = {
            rooms: [],
            priceFrom: 0,
            priceTo: 10000000000,
            profitabilityPercent: 60,
            participants: 'flipper',
            profitSharing: '50/50',
            fixedPayment: 250000,
            financing: 'cash',
            downPayment: 20,
            mortgageRate: 17,
            mortgageTerm: 20,
            taxType: 'ip',
            renovationSpeed: 1.5,
            renovationType: 'auto',
            workCost: 10000,
            materialsCost: 10000,
            additionalExpenses: 100000
        };
        
        // –î–∞–Ω–Ω—ã–µ
        this.segments = [];
        this.subsegments = [];
        this.realEstateObjects = [];
        this.filteredObjects = [];
        
        // DataTable
        this.dataTable = null;
        
        this.debugEnabled = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async initialize() {
        try {
            await this.loadDebugSettings();
            
            if (this.debugEnabled) {
                console.log('üè† FlippingProfitabilityManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ª–æ—è');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.initializeElements();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventHandlers();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FlippingController –∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã v0.1
            await this.initializeFlippingController();
            
            if (this.debugEnabled) {
                console.log('üè† FlippingProfitabilityManager: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FlippingController –∏–∑ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
     */
    async initializeFlippingController() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º FlippingController —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            if (window.flippingController) {
                this.flippingController = window.flippingController;
                console.log('‚úÖ FlippingProfitabilityManager: FlippingController –ø–æ–ª—É—á–µ–Ω –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏');
            } else if (window.areaArchitectureIntegration && window.areaArchitectureIntegration.flippingController) {
                this.flippingController = window.areaArchitectureIntegration.flippingController;
                console.log('‚úÖ FlippingProfitabilityManager: FlippingController –ø–æ–ª—É—á–µ–Ω –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ª–æ—è');
            } else if (window.applicationController) {
                // Fallback - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                try {
                    this.flippingController = await window.applicationController.container.get('FlippingController');
                    // console.log('‚úÖ FlippingProfitabilityManager: FlippingController –ø–æ–ª—É—á–µ–Ω –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞');
                } catch (error) {
                    console.warn('‚ö†Ô∏è FlippingProfitabilityManager: FlippingController –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ');
                }
            } else {
                console.warn('‚ö†Ô∏è FlippingProfitabilityManager: –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ä–∞–±–æ—Ç–∞ –≤ legacy —Ä–µ–∂–∏–º–µ');
            }
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FlippingController:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
     */
    async loadDebugSettings() {
        try {
            if (!this.database || !this.database.db) return;
            const settings = await this.database.getSettings();
            this.debugEnabled = settings.find(s => s.key === 'debug_enabled')?.value === true;
        } catch (error) {
            this.debugEnabled = false;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    initializeElements() {
        this.container = document.getElementById('flippingProfitabilityContainer');
        this.placeholder = document.getElementById('flippingProfitabilityPlaceholder');
        this.content = document.getElementById('flippingProfitabilityContent');
        this.filterContainer = document.getElementById('flippingProfitabilityFilter');
        this.mapContainer = document.getElementById('flippingProfitabilityMap');
        this.tableContainer = document.getElementById('flippingTableContainer');

        if (this.debugEnabled) {
            console.log('üè† FlippingProfitabilityManager: –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
        const roomButtons = this.filterContainer.querySelectorAll('[data-rooms]');
        roomButtons.forEach(button => {
            button.addEventListener('click', (e) => this.handleRoomFilterClick(e));
        });

        // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
        const participantsButtons = this.filterContainer.querySelectorAll('[data-participants]');
        participantsButtons.forEach(button => {
            button.addEventListener('click', (e) => this.handleParticipantsClick(e));
        });

        // –§–æ—Ä–º–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏–±—ã–ª–∏
        const profitSharingButtons = this.filterContainer.querySelectorAll('[data-profit-sharing]');
        profitSharingButtons.forEach(button => {
            button.addEventListener('click', (e) => this.handleProfitSharingClick(e));
        });

        // –ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        const financingButtons = this.filterContainer.querySelectorAll('[data-financing]');
        financingButtons.forEach(button => {
            button.addEventListener('click', (e) => this.handleFinancingClick(e));
        });

        // –¢–∏–ø –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è
        const taxButtons = this.filterContainer.querySelectorAll('[data-tax]');
        taxButtons.forEach(button => {
            button.addEventListener('click', (e) => this.handleTaxClick(e));
        });

        // –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞
        const renovationButtons = this.filterContainer.querySelectorAll('[data-renovation]');
        renovationButtons.forEach(button => {
            button.addEventListener('click', (e) => this.handleRenovationClick(e));
        });

        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
        const applyButton = document.getElementById('flippingApplyFilterBtn');
        if (applyButton) {
            applyButton.addEventListener('click', () => this.applyFilters());
        }

        // –ü–æ–ª—è –≤–≤–æ–¥–∞
        this.setupInputHandlers();

        if (this.debugEnabled) {
            console.log('üè† FlippingProfitabilityManager: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
     */
    setupInputHandlers() {
        // –¶–µ–Ω–∞
        const priceFromInput = document.getElementById('flippingPriceFrom');
        const priceToInput = document.getElementById('flippingPriceTo');
        
        if (priceFromInput) {
            priceFromInput.addEventListener('input', (e) => {
                this.currentFilters.priceFrom = parseInt(e.target.value) || 0;
            });
        }
        
        if (priceToInput) {
            priceToInput.addEventListener('input', (e) => {
                this.currentFilters.priceTo = parseInt(e.target.value) || 10000000000;
            });
        }

        // –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        const profitabilityPercentInput = document.getElementById('flippingProfitabilityPercent');
        if (profitabilityPercentInput) {
            profitabilityPercentInput.addEventListener('input', (e) => {
                this.currentFilters.profitabilityPercent = parseInt(e.target.value) || 60;
            });
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
        const inputMappings = {
            'flippingFixedPayment': 'fixedPayment',
            'flippingDownPayment': 'downPayment',
            'flippingMortgageRate': 'mortgageRate',
            'flippingMortgageTerm': 'mortgageTerm',
            'flippingRenovationSpeed': 'renovationSpeed',
            'flippingWorkCost': 'workCost',
            'flippingMaterialsCost': 'materialsCost',
            'flippingAdditionalExpenses': 'additionalExpenses'
        };

        Object.entries(inputMappings).forEach(([inputId, filterKey]) => {
            const input = document.getElementById(inputId);
            if (input) {
                input.addEventListener('input', (e) => {
                    this.currentFilters[filterKey] = parseFloat(e.target.value) || 0;
                });
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
     */
    handleRoomFilterClick(event) {
        const button = event.target;
        const roomValue = button.dataset.rooms;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        const isActive = button.classList.contains('bg-blue-500');
        
        if (isActive) {
            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
            this.setButtonInactive(button);
            // –£–¥–∞–ª–∏—Ç—å –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
            const index = this.currentFilters.rooms.indexOf(roomValue);
            if (index > -1) {
                this.currentFilters.rooms.splice(index, 1);
            }
        } else {
            // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
            this.setButtonActive(button);
            // –î–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–∏–ª—å—Ç—Ä
            this.currentFilters.rooms.push(roomValue);
        }
        
        if (this.debugEnabled) {
            console.log('üè† FlippingProfitabilityManager: –§–∏–ª—å—Ç—Ä –∫–æ–º–Ω–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω:', this.currentFilters.rooms);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
     */
    setButtonActive(button) {
        button.classList.remove('bg-white', 'text-gray-700', 'border-gray-300', 'hover:bg-gray-100', 'hover:border-gray-400');
        button.classList.add('bg-blue-500', 'text-white', 'border-blue-500', 'hover:bg-blue-600');
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
     */
    setButtonInactive(button) {
        button.classList.remove('bg-blue-500', 'text-white', 'border-blue-500', 'hover:bg-blue-600');
        button.classList.add('bg-white', 'text-gray-700', 'border-gray-300', 'hover:bg-gray-100', 'hover:border-gray-400');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞
     */
    handleParticipantsClick(event) {
        const button = event.target;
        const value = button.dataset.participants;
        
        // –°–Ω—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        const allButtons = this.filterContainer.querySelectorAll('[data-participants]');
        allButtons.forEach(btn => {
            this.setButtonInactive(btn);
        });
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
        this.setButtonActive(button);
        
        this.currentFilters.participants = value;
        
        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        this.toggleConditionalFields('participants', value);
        
        if (this.debugEnabled) {
            console.log('üè† FlippingProfitabilityManager: –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:', value);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–µ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏–±—ã–ª–∏
     */
    handleProfitSharingClick(event) {
        const button = event.target;
        const value = button.dataset.profitSharing;
        
        // –°–Ω—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        const allButtons = this.filterContainer.querySelectorAll('[data-profit-sharing]');
        allButtons.forEach(btn => {
            this.setButtonInactive(btn);
        });
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
        this.setButtonActive(button);
        
        this.currentFilters.profitSharing = value;
        
        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–æ–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        this.toggleConditionalFields('profitSharing', value);
        
        if (this.debugEnabled) {
            console.log('üè† FlippingProfitabilityManager: –§–æ—Ä–º–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏–±—ã–ª–∏:', value);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    handleFinancingClick(event) {
        const button = event.target;
        const value = button.dataset.financing;
        
        // –°–Ω—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        const allButtons = this.filterContainer.querySelectorAll('[data-financing]');
        allButtons.forEach(btn => {
            this.setButtonInactive(btn);
        });
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
        this.setButtonActive(button);
        
        this.currentFilters.financing = value;
        
        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ø–æ—Ç–µ–∫–∏
        this.toggleConditionalFields('financing', value);
        
        if (this.debugEnabled) {
            console.log('üè† FlippingProfitabilityManager: –ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:', value);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ç–∏–ø—É –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è
     */
    handleTaxClick(event) {
        const button = event.target;
        const value = button.dataset.tax;
        
        // –°–Ω—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        const allButtons = this.filterContainer.querySelectorAll('[data-tax]');
        allButtons.forEach(btn => {
            this.setButtonInactive(btn);
        });
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
        this.setButtonActive(button);
        
        this.currentFilters.taxType = value;
        
        if (this.debugEnabled) {
            console.log('üè† FlippingProfitabilityManager: –¢–∏–ø –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è:', value);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ä–∞—Å—á—ë—Ç—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞
     */
    handleRenovationClick(event) {
        const button = event.target;
        const value = button.dataset.renovation;
        
        // –°–Ω—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        const allButtons = this.filterContainer.querySelectorAll('[data-renovation]');
        allButtons.forEach(btn => {
            this.setButtonInactive(btn);
        });
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
        this.setButtonActive(button);
        
        this.currentFilters.renovationType = value;
        
        // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞
        this.toggleConditionalFields('renovation', value);
        
        if (this.debugEnabled) {
            console.log('üè† FlippingProfitabilityManager: –¢–∏–ø —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞:', value);
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ø–æ–ª–µ–π
     */
    toggleConditionalFields(type, value) {
        switch (type) {
            case 'participants':
                const profitSharingSection = document.getElementById('flippingProfitSharingSection');
                if (profitSharingSection) {
                    if (value === 'flipper-investor') {
                        profitSharingSection.classList.remove('hidden');
                        profitSharingSection.classList.add('show');
                    } else {
                        profitSharingSection.classList.add('hidden');
                        profitSharingSection.classList.remove('show');
                    }
                }
                break;
                
            case 'profitSharing':
                const fixedPaymentSection = document.getElementById('flippingFixedPaymentSection');
                if (fixedPaymentSection) {
                    if (value === 'fix+30/70' || value === 'fix/100') {
                        fixedPaymentSection.classList.remove('hidden');
                        fixedPaymentSection.classList.add('show');
                    } else {
                        fixedPaymentSection.classList.add('hidden');
                        fixedPaymentSection.classList.remove('show');
                    }
                }
                break;
                
            case 'financing':
                const mortgageSection = document.getElementById('flippingMortgageSection');
                if (mortgageSection) {
                    if (value === 'mortgage') {
                        mortgageSection.classList.remove('hidden');
                        mortgageSection.classList.add('show');
                    } else {
                        mortgageSection.classList.add('hidden');
                        mortgageSection.classList.remove('show');
                    }
                }
                break;
                
            case 'renovation':
                const manualSection = document.getElementById('flippingManualRenovationSection');
                if (manualSection) {
                    if (value === 'manual') {
                        manualSection.classList.remove('hidden');
                        manualSection.classList.add('show');
                    } else {
                        manualSection.classList.add('hidden');
                        manualSection.classList.remove('show');
                    }
                }
                break;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏–∑ ReportsManager
     */
    getCurrentSegmentData() {
        console.log('üîç FlippingProfitabilityManager: reportsManager.currentSegment:', this.reportsManager.currentSegment);
        console.log('üîç FlippingProfitabilityManager: reportsManager.currentSubsegment:', this.reportsManager.currentSubsegment);
        console.log('üîç FlippingProfitabilityManager: reportsManager.segments:', this.reportsManager.segments);
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        let segment = this.reportsManager.currentSegment;
        if (!segment && this.reportsManager.segments && this.reportsManager.segments.length > 0) {
            segment = this.reportsManager.segments[0];
            console.log('üîç FlippingProfitabilityManager: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç:', segment.name);
        }
        
        return {
            segment: segment,
            subsegment: this.reportsManager.currentSubsegment
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã 
     */
    async loadData() {
        try {
            if (!this.database || !this.database.db) {
                throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏–∑ ReportsManager
            const segmentData = this.getCurrentSegmentData();
            
            if (!segmentData.segment) {
                throw new Error('–ù–µ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç');
            }

            if (this.debugEnabled) {
                console.log('üè† FlippingProfitabilityManager: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞:', segmentData.segment.name);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            const transaction = this.database.db.transaction(['real_estate_objects', 'addresses'], 'readonly');
            const objectStore = transaction.objectStore('real_estate_objects');
            const addressStore = transaction.objectStore('addresses');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞  
            const objects = [];
            const cursor = await objectStore.index('segment_id').openCursor(segmentData.segment.id);
            
            while (cursor) {
                const realEstateObject = cursor.value;
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
                if (realEstateObject.address_id) {
                    const address = await addressStore.get(realEstateObject.address_id);
                    if (address && address.latitude && address.longitude) {
                        realEstateObject.address = address;
                        objects.push(realEstateObject);
                    }
                }
                
                cursor.continue();
            }

            this.realEstateObjects = objects;

            if (this.debugEnabled) {
                console.log('üè† FlippingProfitabilityManager: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:', objects.length);
            }

            return objects;

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
     */
    filterObjects(objects) {
        if (!objects || objects.length === 0) return [];

        const filtered = objects.filter(obj => {
            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç
            if (this.currentFilters.rooms.length > 0) {
                const objRooms = obj.rooms ? obj.rooms.toString() : 'studio';
                const roomsMatch = this.currentFilters.rooms.some(room => {
                    if (room === 'studio') return objRooms === 'studio' || objRooms === '0';
                    if (room === '4+') return parseInt(objRooms) >= 4;
                    return objRooms === room;
                });
                if (!roomsMatch) return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            if (obj.price) {
                if (obj.price < this.currentFilters.priceFrom || obj.price > this.currentFilters.priceTo) {
                    return false;
                }
            }

            return true;
        });

        if (this.debugEnabled) {
            console.log('üè† FlippingProfitabilityManager: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:', filtered.length);
        }

        return filtered;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
     */
    async applyFilters() {
        try {
            if (this.debugEnabled) {
                console.log('üè† FlippingProfitabilityManager: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', this.currentFilters);
            }
            
            this.showPlaceholder("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            if (this.flippingController) {
                await this.applyFiltersModular();
            } else {
                await this.applyFiltersLegacy();
            }
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
            this.showPlaceholder("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: " + error.message);
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
     */
    async applyFiltersModular() {
        try {
            console.log('üîç FlippingProfitabilityManager: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏–∑ ReportsManager
            const segmentData = this.getCurrentSegmentData();
            console.log('üîç FlippingProfitabilityManager: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞:', segmentData);
            
            if (!segmentData.segment) {
                throw new Error('–ù–µ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            }

            console.log('üîç FlippingProfitabilityManager: –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä:', segmentData.segment.name || segmentData.segment.id);
            // –ü–µ—Ä–µ–¥–∞—ë–º —Å–µ–≥–º–µ–Ω—Ç –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            this.flippingController.setCurrentSegment(segmentData.segment);
            
            console.log('üîç FlippingProfitabilityManager: –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä:', this.currentFilters);
            // –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            this.flippingController.handleFilterChange(this.currentFilters);
            
            console.log('üîç FlippingProfitabilityManager: –í—ã–∑—ã–≤–∞–µ–º applyFilters() –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞');
            console.log('üîç FlippingProfitabilityManager: flippingController —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!this.flippingController);
            console.log('üîç FlippingProfitabilityManager: flippingController.applyFilters —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', typeof this.flippingController.applyFilters);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä v0.1
            const filteredObjects = await this.flippingController.applyFilters();
            
            console.log('üîç FlippingProfitabilityManager: –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç–æ–≤:', filteredObjects?.length || 0);
            console.log('üîç FlippingProfitabilityManager: –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', typeof filteredObjects);
            console.log('üîç FlippingProfitabilityManager: –†–µ–∑—É–ª—å—Ç–∞—Ç isArray:', Array.isArray(filteredObjects));
            
            if (filteredObjects && filteredObjects.length > 0) {
                this.filteredObjects = filteredObjects;
                console.log('üîç FlippingProfitabilityManager: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –æ–±—ä–µ–∫—Ç–∞–º–∏:', filteredObjects.length);
                this.showContent();
                
                if (this.debugEnabled) {
                    console.log('üè† FlippingProfitabilityManager: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –æ–±—ä–µ–∫—Ç–æ–≤:', filteredObjects.length);
                }
            } else {
                throw new Error('–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            }
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ v0.1:', error);
            this.showPlaceholder("–û—à–∏–±–∫–∞: " + error.message);
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ legacy —Ä–µ–∂–∏–º–µ
     */
    async applyFiltersLegacy() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            const objects = await this.loadData();
            
            if (objects.length === 0) {
                this.showPlaceholder("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏");
                return;
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            this.filteredObjects = this.filterObjects(objects);
            
            if (this.filteredObjects.length === 0) {
                this.showPlaceholder("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º");
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.showContent();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –∫–∞—Ä—Ç—É –≤ legacy —Ä–µ–∂–∏–º–µ
            await this.updateTableLegacy();
            await this.updateMapLegacy();
            
        } catch (error) {
            throw error;
        }
    }

    /**
     * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
     */
    showPlaceholder(message) {
        if (this.placeholder) {
            this.placeholder.textContent = message;
            this.placeholder.classList.remove('hidden');
        }
        
        if (this.content) {
            this.content.classList.add('hidden');
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç—á—ë—Ç–∞
     */
    showContent() {
        if (this.placeholder) {
            this.placeholder.classList.add('hidden');
        }
        
        if (this.content) {
            this.content.classList.remove('hidden');
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –æ—Ç—á—ë—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ ReportsManager)
     */
    async show() {
        try {
            console.log('üîç FlippingProfitabilityManager: show() –º–µ—Ç–æ–¥ –≤—ã–∑–≤–∞–Ω');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            if (!this.container) {
                console.log('üîç FlippingProfitabilityManager: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º');
                await this.initialize();
            }
            
            console.log('üîç FlippingProfitabilityManager: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç');
            // –ü–æ–∫–∞–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–º–µ—Å—Ç–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            this.showContent();
            
            console.log('üîç FlippingProfitabilityManager: –í—ã–∑—ã–≤–∞–µ–º applyFilters()');
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            await this.applyFilters();
            
        } catch (error) {
            console.error('‚ùå FlippingProfitabilityManager: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç—á—ë—Ç–∞:', error);
        }
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –æ—Ç—á—ë—Ç–∞
     */
    hide() {
        // –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ—Ç—á—ë—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ ReportsManager
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FlippingProfitabilityManager;
}