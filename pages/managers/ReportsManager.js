/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç—á—ë—Ç–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å—é –æ—Ç—á—ë—Ç–æ–≤ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
 */
class ReportsManager {
    constructor(areaPage) {
        this.areaPage = areaPage;
        this.database = window.db;
        this.eventBus = areaPage.eventBus;
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.panelContainer = null;
        this.panelContent = null;
        this.panelHeader = null;
        this.panelChevron = null;
        
        // –§–∏–ª—å—Ç—Ä—ã
        this.segmentFilter = null;
        this.subsegmentFilter = null;
        this.dateFromFilter = null;
        this.dateToFilter = null;
        this.reportsDropdownBtn = null;
        this.reportsDropdown = null;
        this.reportsContent = null;
        
        // SlimSelect instances
        this.segmentSlimSelect = null;
        this.subsegmentSlimSelect = null;
        this.marketCorridorModeSlimSelect = null;
        this.reportFilterSlimSelect = null;

        // –≠–ª–µ–º–µ–Ω—Ç—ã –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        this.creationChartPeriod = null;
        this.creationChartSellerType = null;
        this.creationChartPeriodSlimSelect = null;
        this.creationChartSellerTypeSlimSelect = null;
        
        // –ì—Ä–∞—Ñ–∏–∫–∏
        this.liquidityChart = null;
        this.priceChangesChart = null;
        this.marketCorridorChart = null;
        this.creationChart = null;
        
        // –î–∞–Ω–Ω—ã–µ
        this.segments = [];
        this.subsegments = [];
        this.currentSegment = null;
        this.currentSubsegment = null;
        
        // –†–µ–∂–∏–º –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
        this.marketCorridorMode = 'sales'; // 'sales' –∏–ª–∏ 'history'
        
        // HTML Export Manager
        this.htmlExportManager = null;

        // DataTables
        this.savedReportsDataTable = null;
        this.filterTemplatesDataTable = null;
        
        // –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.isRestoringTemplate = false; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞
        this.isInitializing = false; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

        this.debugEnabled = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤
     */
    async initialize() {
        try {
            this.isInitializing = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

            if (this.debugEnabled) {
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
            await this.loadDebugSettings();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTML Export Manager
            if (typeof HTMLExportManager !== 'undefined') {
                this.htmlExportManager = new HTMLExportManager();
                await this.htmlExportManager.init();
                if (this.debugEnabled) {
                }
            } else {
                console.warn('‚ö†Ô∏è ReportsManager: HTMLExportManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FlippingProfitabilityManager
            if (typeof FlippingProfitabilityManager !== 'undefined') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if (!this.flippingProfitabilityManager) {
                    this.flippingProfitabilityManager = new FlippingProfitabilityManager(this);
                    await this.flippingProfitabilityManager.initialize();
                    if (this.debugEnabled) {
                        console.log('üìä ReportsManager: FlippingProfitabilityManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                    }
                } else {
                    if (this.debugEnabled) {
                        console.log('üìä ReportsManager: FlippingProfitabilityManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                    }
                }
            } else {
                console.warn('‚ö†Ô∏è ReportsManager: FlippingProfitabilityManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.initializeElements();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventHandlers();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect
            this.initializeSlimSelects();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            await this.loadSegmentsData();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞—Ç
            this.setDefaultDateFilters();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
            this.setDefaultReportsSettings();

            // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 
            // –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
            // await this.updateReportsVisibility();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataTables –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
            await this.initializeSavedReportsDataTable();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataTables –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            await this.initializeFilterTemplatesDataTable();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            await this.initFilterTemplates();

            if (this.debugEnabled) {
            }

            // –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await this.updateReportsVisibility();

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        } finally {
            this.isInitializing = false; // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
     */
    async loadDebugSettings() {
        try {
            if (!this.database || !this.database.getSettings) {
                this.debugEnabled = false;
                return;
            }
            const settings = await this.database.getSettings();
            this.debugEnabled = settings?.find(s => s.key === 'debug_enabled')?.value || false;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏:', error);
            this.debugEnabled = false;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    initializeElements() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–Ω–µ–ª–∏
        this.panelContainer = document.getElementById('reportsPanelContainer');
        this.panelContent = document.getElementById('reportsPanelContent');
        this.panelHeader = document.getElementById('reportsPanelHeader');
        this.panelChevron = document.getElementById('reportsPanelChevron');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.segmentFilter = document.getElementById('reportsSegmentFilter');
        this.subsegmentFilter = document.getElementById('reportsSubsegmentFilter');
        this.dateFromFilter = document.getElementById('reportsDateFrom');
        this.dateToFilter = document.getElementById('reportsDateTo');
        this.reportsDropdownBtn = document.getElementById('reportsDropdownBtn');
        this.reportsDropdown = document.getElementById('reportsDropdown');
        this.reportsContent = document.getElementById('reportsContent');

        // –≠–ª–µ–º–µ–Ω—Ç—ã –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        this.creationChartPeriod = document.getElementById('creationChartPeriod');
        this.creationChartSellerType = document.getElementById('creationChartSellerType');

        if (!this.panelContainer) {
            throw new Error('–≠–ª–µ–º–µ–Ω—Ç reportsPanelContainer –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (this.debugEnabled) {
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è UIManager
        // –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

        // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤
        if (this.reportsDropdownBtn) {
            this.reportsDropdownBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.toggleReportsDropdown();
            });
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        const templateReportsToggleBtn = document.getElementById('templateReportsToggleBtn');
        const templateReportsDropdown = document.getElementById('templateReportsDropdown');

        if (templateReportsToggleBtn) {
            templateReportsToggleBtn.addEventListener('click', (e) => {
                e.preventDefault();
                templateReportsDropdown?.classList.toggle('hidden');
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
        document.addEventListener('click', (e) => {
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤
            if (this.reportsDropdown && this.reportsDropdownBtn &&
                !this.reportsDropdownBtn.contains(e.target) &&
                !this.reportsDropdown.contains(e.target)) {
                this.reportsDropdown.classList.add('hidden');
            }

            // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            if (templateReportsDropdown && templateReportsToggleBtn &&
                !templateReportsToggleBtn.contains(e.target) &&
                !templateReportsDropdown.contains(e.target)) {
                templateReportsDropdown.classList.add('hidden');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
        const liquidityCheck = document.getElementById('liquidityReportCheck');
        const priceChangesCheck = document.getElementById('priceChangesReportCheck');
        const marketCorridorCheck = document.getElementById('marketCorridorReportCheck');
        const comparativeAnalysisCheck = document.getElementById('comparativeAnalysisReportCheck');
        const flippingProfitabilityCheck = document.getElementById('flippingProfitabilityReportCheck');
        
        if (liquidityCheck) {
            liquidityCheck.addEventListener('change', () => {
                this.updateReportsVisibility();
                this.checkForUnsavedChanges();
                this.saveReportsCheckboxState();
            });
        }
        
        if (priceChangesCheck) {
            priceChangesCheck.addEventListener('change', () => {
                this.updateReportsVisibility();
                this.checkForUnsavedChanges();
                this.saveReportsCheckboxState();
            });
        }

        if (marketCorridorCheck) {
            marketCorridorCheck.addEventListener('change', () => {
                this.updateReportsVisibility();
                this.checkForUnsavedChanges();
                this.saveReportsCheckboxState();
            });
        }

        if (comparativeAnalysisCheck) {
            comparativeAnalysisCheck.addEventListener('change', () => {
                this.updateReportsVisibility();
                this.checkForUnsavedChanges();
                this.saveReportsCheckboxState();
            });
        }
        
        if (flippingProfitabilityCheck) {
            flippingProfitabilityCheck.addEventListener('change', () => {
                this.updateReportsVisibility();
                this.checkForUnsavedChanges();
                this.saveReportsCheckboxState();
            });
        }

        // –°–æ–±—ã—Ç–∏—è SlimSelect –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞—Ç
        if (this.dateFromFilter) {
            this.dateFromFilter.addEventListener('change', () => {
                this.updateReportsVisibility();
                this.checkForUnsavedChanges();
            });
        }

        if (this.dateToFilter) {
            this.dateToFilter.addEventListener('change', () => {
                this.updateReportsVisibility();
                this.checkForUnsavedChanges();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞
        const saveCurrentReportBtn = document.getElementById('saveCurrentReportBtn');
        if (saveCurrentReportBtn) {
            saveCurrentReportBtn.addEventListener('click', () => {
                this.saveCurrentReport();
            });
        }

        // –°–æ–±—ã—Ç–∏—è EventBus
        this.eventBus.on(CONSTANTS.EVENTS.AREA_LOADED, (area) => {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–∞—Å—Ç–∏
            setTimeout(() => {
                this.restoreReportsCheckboxState();
            }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        });

        this.eventBus.on(CONSTANTS.EVENTS.SEGMENTS_UPDATED, () => {
            this.loadSegmentsData();
        });

        this.eventBus.on(CONSTANTS.EVENTS.SUBSEGMENT_CREATED, () => {
            this.loadSegmentsData();
        });

        this.eventBus.on(CONSTANTS.EVENTS.SUBSEGMENT_UPDATED, () => {
            this.loadSegmentsData();
        });

        this.eventBus.on(CONSTANTS.EVENTS.SUBSEGMENT_DELETED, () => {
            this.loadSegmentsData();
        });

        if (this.debugEnabled) {
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect
     */
    initializeSlimSelects() {
        try {
            // SlimSelect –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ updateSegmentFilter –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            
            // –°–æ–∑–¥–∞–µ–º SlimSelect –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å—Ä–∞–∑—É (–≤ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
            if (this.subsegmentFilter && typeof SlimSelect !== 'undefined') {
                this.subsegmentSlimSelect = new SlimSelect({
                    select: this.subsegmentFilter,
                    settings: {
                        allowDeselect: true,
                        disabled: true,
                        placeholderText: '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã'
                    },
                    events: {
                        afterChange: (newVal) => {
                            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω
                            if (this.isRestoringTemplate) return;
                            
                            const subsegmentId = Array.isArray(newVal) && newVal.length > 0 ? newVal[0].value : 
                                               (newVal && newVal.value !== undefined ? newVal.value : newVal);
                                            this.handleSubsegmentChange(subsegmentId);
                        }
                    }
                });
                
                if (this.debugEnabled) {
                }
            }

            // –°–æ–∑–¥–∞–µ–º SlimSelect –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ä–µ–∂–∏–º–æ–≤ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
            const marketCorridorModeSelect = document.getElementById('marketCorridorModeSelect');
            if (marketCorridorModeSelect && typeof SlimSelect !== 'undefined') {
                this.marketCorridorModeSlimSelect = new SlimSelect({
                    select: marketCorridorModeSelect,
                    settings: {
                        showSearch: false
                    },
                    events: {
                        afterChange: (newVal) => {
                            const mode = Array.isArray(newVal) && newVal.length > 0 ? newVal[0].value : 
                                        (newVal && newVal.value !== undefined ? newVal.value : newVal);
                            this.handleMarketCorridorModeChange(mode);
                        }
                    }
                });
                
                if (this.debugEnabled) {
                }
            }

            // –°–æ–∑–¥–∞–µ–º SlimSelect –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
            const reportFilterSelect = document.getElementById('reportFilterSelect');
            if (reportFilterSelect && typeof SlimSelect !== 'undefined') {
                this.reportFilterSlimSelect = new SlimSelect({
                    select: reportFilterSelect,
                    settings: {
                        allowDeselect: true,
                        showSearch: true,
                        searchText: '–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤...',
                        searchPlaceholder: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞',
                        placeholderText: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä'
                    },
                    events: {
                        afterChange: (newVal) => {
                            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω
                            if (this.isRestoringTemplate) return;
                            
                            const templateId = Array.isArray(newVal) && newVal.length > 0 ? newVal[0].value : 
                                             (newVal && newVal.value !== undefined ? newVal.value : newVal);
                            this.onFilterTemplateSelect(templateId);
                        }
                    }
                });
                
                if (this.debugEnabled) {
                    console.log('üéØ ReportsManager: SlimSelect –¥–ª—è reportFilterSelect –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                }
            }

            // –°–æ–∑–¥–∞–µ–º SlimSelect –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            if (this.creationChartPeriod && typeof SlimSelect !== 'undefined') {
                this.creationChartPeriodSlimSelect = new SlimSelect({
                    select: this.creationChartPeriod,
                    settings: {
                        showSearch: false
                    },
                    events: {
                        afterChange: (newVal) => {
                            const period = Array.isArray(newVal) && newVal.length > 0 ? newVal[0].value :
                                         (newVal && newVal.value !== undefined ? newVal.value : newVal);
                            this.updateCreationChart();
                        }
                    }
                });
            }

            if (this.creationChartSellerType && typeof SlimSelect !== 'undefined') {
                this.creationChartSellerTypeSlimSelect = new SlimSelect({
                    select: this.creationChartSellerType,
                    settings: {
                        showSearch: false
                    },
                    events: {
                        afterChange: (newVal) => {
                            const sellerType = Array.isArray(newVal) && newVal.length > 0 ? newVal[0].value :
                                             (newVal && newVal.value !== undefined ? newVal.value : newVal);
                            this.updateCreationChart();
                        }
                    }
                });
            }

            if (this.debugEnabled) {
                console.log('‚úÖ ReportsManager: –í—Å–µ SlimSelect –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SlimSelect:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤
     */
    toggleReportsDropdown() {
        if (!this.reportsDropdown) return;

        this.reportsDropdown.classList.toggle('hidden');

        if (this.debugEnabled) {
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
     */
    async updateReportsVisibility() {
        if (!this.reportsContent) return;

        const liquidityCheck = document.getElementById('liquidityReportCheck');
        const priceChangesCheck = document.getElementById('priceChangesReportCheck');
        const marketCorridorCheck = document.getElementById('marketCorridorReportCheck');
        const comparativeAnalysisCheck = document.getElementById('comparativeAnalysisReportCheck');
        const flippingProfitabilityCheck = document.getElementById('flippingProfitabilityReportCheck');
        
        const showLiquidity = liquidityCheck?.checked || false;
        const showPriceChanges = priceChangesCheck?.checked || false;
        const showMarketCorridor = marketCorridorCheck?.checked || false;
        const showComparativeAnalysis = comparativeAnalysisCheck?.checked || false;
        const showFlippingProfitability = flippingProfitabilityCheck?.checked || false;

        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç—á—ë—Ç–æ–≤ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç—á—ë—Ç
        if (showLiquidity || showPriceChanges || showMarketCorridor || showComparativeAnalysis || showFlippingProfitability) {
            this.reportsContent.classList.remove('hidden');
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
            await this.generateReports({
                showLiquidity,
                showPriceChanges,
                showMarketCorridor,
                showComparativeAnalysis,
                showFlippingProfitability
            });
            
            // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
            const liquidityReport = document.querySelector('#liquidityChart').closest('.bg-white');
            const priceChangesReport = document.querySelector('#priceChangesChart').closest('.bg-white');
            const marketCorridorReport = document.querySelector('#marketCorridorChart').closest('.bg-white');
            const comparativeAnalysisReport = document.querySelector('#comparativeAnalysisContainer').closest('.bg-white');
            
            if (liquidityReport) {
                liquidityReport.style.display = showLiquidity ? 'block' : 'none';
            }
            
            if (priceChangesReport) {
                priceChangesReport.style.display = showPriceChanges ? 'block' : 'none';
            }

            if (marketCorridorReport) {
                marketCorridorReport.style.display = showMarketCorridor ? 'block' : 'none';
            }

            if (comparativeAnalysisReport) {
                comparativeAnalysisReport.style.display = showComparativeAnalysis ? 'block' : 'none';
            }

            // –ù–∞–π—Ç–∏ –æ—Ç—á—ë—Ç "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Ñ–ª–∏–ø–ø–∏–Ω–≥"
            const flippingProfitabilityReport = document.querySelector('#flippingProfitabilityReport');
            if (flippingProfitabilityReport) {
                flippingProfitabilityReport.style.display = showFlippingProfitability ? 'block' : 'none';
            }

            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if (showComparativeAnalysis && this.areaPage.comparativeAnalysisManager) {
                await this.areaPage.comparativeAnalysisManager.showComparativeAnalysis();
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏
                await this.areaPage.comparativeAnalysisManager.onPanelActivated();
            } else if (!showComparativeAnalysis && this.areaPage.comparativeAnalysisManager) {
                this.areaPage.comparativeAnalysisManager.hideComparativeAnalysis();
            }

            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–ª–∏–ø–ø–∏–Ω–≥
            if (!showFlippingProfitability && this.flippingProfitabilityManager) {
                this.flippingProfitabilityManager.hide();
            }
        } else {
            this.reportsContent.classList.add('hidden');
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç—á–µ—Ç–æ–≤ —Å–∫—Ä—ã—Ç
            if (this.areaPage.comparativeAnalysisManager) {
                this.areaPage.comparativeAnalysisManager.hideComparativeAnalysis();
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Ñ–ª–∏–ø–ø–∏–Ω–≥ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç—á–µ—Ç–æ–≤ —Å–∫—Ä—ã—Ç
            if (this.flippingProfitabilityManager) {
                this.flippingProfitabilityManager.hide();
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await this.updateCreationChart();

        if (this.debugEnabled) {
            console.log('üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á—ë—Ç–∞:', {
                showLiquidity,
                showPriceChanges,
                showMarketCorridor,
                showComparativeAnalysis
            });
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –æ—Ç—á—ë—Ç—ã (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ updateReportsVisibility)
     */
    toggleReports() {
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—á—ë—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const liquidityCheck = document.getElementById('liquidityReportCheck');
        const priceChangesCheck = document.getElementById('priceChangesReportCheck');
        const marketCorridorCheck = document.getElementById('marketCorridorReportCheck');
        
        if (liquidityCheck) liquidityCheck.checked = true;
        if (priceChangesCheck) priceChangesCheck.checked = true;
        if (marketCorridorCheck) marketCorridorCheck.checked = true;
        
        this.updateReportsVisibility();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    async loadSegmentsData() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–±–ª–∞—Å—Ç—å —á–µ—Ä–µ–∑ dataState (–∫–∞–∫ –≤ DuplicatesManager)
            const currentArea = this.areaPage.dataState?.getState('currentArea');
            if (!currentArea) {
                if (this.debugEnabled) {
                }
                return;
            }

            if (!this.database) {
                if (this.debugEnabled) {
                }
                return;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –∏ –≤ DuplicatesManager
            this.segments = await this.database.getSegmentsByMapArea(currentArea.id);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            this.updateSegmentFilter();

            if (this.debugEnabled) {
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', error);
            this.segments = [];
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    updateSegmentFilter() {
        if (!this.segmentFilter) return;

        // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏–∏ (–∫–∞–∫ –≤ DuplicatesManager)
        this.segmentFilter.innerHTML = '';
        
        this.segments.forEach(segment => {
            const option = document.createElement('option');
            option.value = segment.id;
            option.textContent = segment.name;
            this.segmentFilter.appendChild(option);
        });

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º SlimSelect —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (this.segmentSlimSelect) {
            this.segmentSlimSelect.destroy();
        }

        if (this.segments.length > 0) {
            this.segmentSlimSelect = new SlimSelect({
                select: this.segmentFilter,
                settings: {
                    allowDeselect: true,
                    showSearch: false,
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç'
                },
                events: {
                    afterChange: (newVal) => {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω
                        if (this.isRestoringTemplate) return;
                        
                        // newVal –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                        const segmentId = Array.isArray(newVal) && newVal.length > 0 ? newVal[0].value : 
                                         (newVal && newVal.value !== undefined ? newVal.value : newVal);
                                this.handleSegmentChange(segmentId);
                    }
                }
            });
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.segmentSlimSelect.setSelected([]);
        }

        if (this.debugEnabled) {
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ DuplicatesManager)
     */
    async handleSegmentChange(segmentId) {
        try {
            this.currentSegment = segmentId ? this.segments.find(s => s.id === segmentId || s.id === parseInt(segmentId)) : null;
            this.currentSubsegment = null;
            
            if (this.debugEnabled) {
            }
            
            if (!segmentId) {
                // –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                if (this.subsegmentSlimSelect) {
                    this.subsegmentSlimSelect.setData([{ text: '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã', value: '' }]);
                    this.subsegmentSlimSelect.enable(false);
                    this.subsegmentSlimSelect.setSelected([]);
                }
                this.subsegments = [];
            } else {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                const subsegments = await this.database.getSubsegmentsBySegment(segmentId);
                
                // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
                this.subsegmentFilter.innerHTML = '<option value="">–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã</option>';
                subsegments.forEach(subsegment => {
                    const option = document.createElement('option');
                    option.value = subsegment.id;
                    option.textContent = subsegment.name;
                    this.subsegmentFilter.appendChild(option);
                });
                
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SlimSelect
                if (this.subsegmentSlimSelect) {
                    this.subsegmentSlimSelect.setData([
                        { text: '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã', value: '' },
                        ...subsegments.map(subsegment => ({ 
                            text: subsegment.name, 
                            value: subsegment.id.toString() 
                        }))
                    ]);
                    this.subsegmentSlimSelect.enable(true);
                }
                
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã
                this.subsegments = subsegments;
            }

            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ (–Ω–æ –Ω–µ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
            if (!this.isInitializing) {
                await this.updateReportsVisibility();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            this.checkForUnsavedChanges();
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞:', error);
        }
    }


    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
     */
    async handleSubsegmentChange(subsegmentId) {
        this.currentSubsegment = subsegmentId ? this.subsegments.find(s => s.id === subsegmentId || s.id === parseInt(subsegmentId)) : null;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ (–Ω–æ –Ω–µ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
        if (!this.isInitializing) {
            await this.updateReportsVisibility();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.checkForUnsavedChanges();

    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
     */
    async handleMarketCorridorModeChange(mode) {
        this.marketCorridorMode = mode;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        this.updateMarketCorridorDescription(mode);

        // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω
        if (this.marketCorridorChart) {
            await this.createMarketCorridorChart();
        }

        if (this.debugEnabled) {
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
     */
    updateMarketCorridorDescription(mode) {
        const descriptionElement = document.getElementById('marketCorridorDescription');
        if (!descriptionElement) return;

        switch (mode) {
            case 'sales':
                descriptionElement.textContent = '–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–∞—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º –Ω–∞ –¥–∞—Ç—É —É—Ö–æ–¥–∞ —Å —Ä—ã–Ω–∫–∞, –∞–∫—Ç–∏–≤–Ω—ã–µ - —Å–∏–Ω–∏–º –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É.';
                break;
            case 'history':
                descriptionElement.textContent = '–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º). –ö–∞–∂–¥–∞—è –ª–∏–Ω–∏—è - –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç.';
                break;
            default:
                descriptionElement.textContent = '–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–∞—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏, –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.';
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    setDefaultDateFilters() {
        if (!this.dateFromFilter || !this.dateToFilter) return;

        const now = new Date();
        const yearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
        const tomorrow = new Date(now);
        tomorrow.setDate(now.getDate() + 1);

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        this.dateFromFilter.value = yearAgo.toISOString().split('T')[0];
        this.dateToFilter.value = tomorrow.toISOString().split('T')[0];
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
     */
    setDefaultReportsSettings() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
        this.restoreReportsCheckboxState();
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
     */
    saveReportsCheckboxState() {
        const currentArea = this.areaPage.dataState?.getState('currentArea');
        if (!currentArea) return;
        
        const checkboxStates = {
            liquidity: document.getElementById('liquidityReportCheck')?.checked || false,
            priceChanges: document.getElementById('priceChangesReportCheck')?.checked || false,
            marketCorridor: document.getElementById('marketCorridorReportCheck')?.checked || false,
            comparativeAnalysis: document.getElementById('comparativeAnalysisReportCheck')?.checked || false,
            flippingProfitability: document.getElementById('flippingProfitabilityReportCheck')?.checked || false
        };
        
        const stateKey = `reports_checkboxes_${currentArea.id}`;
        localStorage.setItem(stateKey, JSON.stringify(checkboxStates));
        
        if (this.debugEnabled) {
            console.log('üíæ ReportsManager: –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', checkboxStates);
        }
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
     */
    restoreReportsCheckboxState() {
        const currentArea = this.areaPage.dataState?.getState('currentArea');
        if (!currentArea) return;
        
        const stateKey = `reports_checkboxes_${currentArea.id}`;
        const savedState = localStorage.getItem(stateKey);
        
        if (savedState) {
            try {
                const checkboxStates = JSON.parse(savedState);
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤
                const liquidityCheck = document.getElementById('liquidityReportCheck');
                const priceChangesCheck = document.getElementById('priceChangesReportCheck');
                const marketCorridorCheck = document.getElementById('marketCorridorReportCheck');
                const comparativeAnalysisCheck = document.getElementById('comparativeAnalysisReportCheck');
                const flippingProfitabilityCheck = document.getElementById('flippingProfitabilityReportCheck');
                
                if (liquidityCheck) liquidityCheck.checked = checkboxStates.liquidity;
                if (priceChangesCheck) priceChangesCheck.checked = checkboxStates.priceChanges;
                if (marketCorridorCheck) marketCorridorCheck.checked = checkboxStates.marketCorridor;
                if (comparativeAnalysisCheck) comparativeAnalysisCheck.checked = checkboxStates.comparativeAnalysis;
                if (flippingProfitabilityCheck) flippingProfitabilityCheck.checked = checkboxStates.flippingProfitability;
                
                if (this.debugEnabled) {
                    console.log('üîÑ ReportsManager: –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', checkboxStates);
                }
            } catch (error) {
                console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤:', error);
            }
        } else {
            if (this.debugEnabled) {
                console.log('üí° ReportsManager: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            }
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –≤—ã–∫–ª—é—á–µ–Ω—ã (—É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ HTML)
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤ —Å –≤—ã–±–æ—Ä–æ—á–Ω—ã–º –ø–æ–∫–∞–∑–æ–º
     */
    async generateReports(options = {}) {
        try {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –æ—Ç—á—ë—Ç—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            const {
                showLiquidity = true,
                showPriceChanges = true,
                showMarketCorridor = true,
                showComparativeAnalysis = true,
                showFlippingProfitability = true
            } = options;

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç—á—ë—Ç)
            let reportData = null;
            if (showLiquidity || showPriceChanges || showMarketCorridor) {
                reportData = await this.getReportData();
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            if (showLiquidity && reportData) {
                this.createLiquidityChart(reportData);
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            if (showPriceChanges && reportData) {
                this.createPriceChangesChart(reportData);
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            if (showMarketCorridor && reportData) {
                await this.createMarketCorridorChart(reportData);
            }

            // –ü–æ–∫–∞–∑ –æ—Ç—á—ë—Ç–∞ —Ñ–ª–∏–ø–ø–∏–Ω–≥ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            if (showFlippingProfitability && this.flippingProfitabilityManager) {
                await this.flippingProfitabilityManager.show();
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
     */
    async getReportData() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const currentArea = this.areaPage.dataState?.getState('currentArea');
            if (!currentArea) {
                if (this.debugEnabled) {
                }
                return this.getEmptyReportData();
            }

            const segmentId = this.currentSegment?.id;
            const subsegmentId = this.currentSubsegment?.id;
            const dateFrom = new Date(this.dateFromFilter?.value || '2023-01-01');
            const dateTo = new Date(this.dateToFilter?.value || new Date().toISOString().split('T')[0]);

            if (this.debugEnabled) {
                console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:', {
                    areaId: currentArea.id,
                    segmentId,
                    subsegmentId,
                    segmentName: this.currentSegment?.name || '–í—Å—è –æ–±–ª–∞—Å—Ç—å',
                    dateFrom: dateFrom.toISOString(),
                    dateTo: dateTo.toISOString()
                });
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const objects = await this.getFilteredRealEstateObjects(currentArea.id, segmentId, subsegmentId, dateFrom, dateTo);
            
            if (this.debugEnabled) {
            }

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
            const reportData = this.processObjectsForReports(objects, dateFrom, dateTo);

            return reportData;

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤:', error);
            return this.getEmptyReportData();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    async getFilteredRealEstateObjects(areaId, segmentId, subsegmentId, dateFrom, dateTo) {
        try {
            let objects = [];

            if (segmentId) {
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                const segment = await this.database.getSegment(segmentId);
                if (!segment) {
                    if (this.debugEnabled) {
                    }
                    return [];
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
                const addresses = await this.database.getAddressesInMapArea(segment.map_area_id);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å–µ–≥–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                let filteredAddresses = addresses;
                if (segment.filters) {
                    filteredAddresses = this.filterAddressesBySegmentCriteria(addresses, segment.filters);
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
                for (const address of filteredAddresses) {
                    const addressObjects = await this.database.getObjectsByAddress(address.id);
                    objects.push(...addressObjects);
                }
                
                if (subsegmentId) {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
                    const subsegment = await this.database.getSubsegment(subsegmentId);
                    
                    if (subsegment && subsegment.filters) {
                        const objectsBeforeFilter = objects.length;
                        objects = this.filterObjectsBySubsegment(objects, subsegment);
                    } else {
                    }
                }
                
                if (this.debugEnabled) {
                }
            } else {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –æ–±–ª–∞—Å—Ç–∏
                const addresses = await this.database.getAddressesInMapArea(areaId);
                for (const address of addresses) {
                    const addressObjects = await this.database.getObjectsByAddress(address.id);
                    objects.push(...addressObjects);
                }
                
                if (this.debugEnabled) {
                }
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∫–ª—é—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ –ø–µ—Ä–∏–æ–¥
            objects = objects.filter(obj => {
                // –û–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∞—Ç—É
                if (!obj.created && !obj.updated) return false;
                
                const createdDate = obj.created ? new Date(obj.created) : null;
                const updatedDate = obj.updated ? new Date(obj.updated) : null;
                
                // –í–∫–ª—é—á–∞–µ–º –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏:
                // 1. –°–æ–∑–¥–∞–Ω –í –ø–µ—Ä–∏–æ–¥, –ò–õ–ò
                // 2. –û–±–Ω–æ–≤–ª–µ–Ω –í –ø–µ—Ä–∏–æ–¥ (–∏–º–µ–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–µ—Ä–∏–æ–¥), –ò–õ–ò
                // 3. –°–æ–∑–¥–∞–Ω –î–û –ø–µ—Ä–∏–æ–¥–∞ –Ω–æ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω (–¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
                
                const createdInPeriod = createdDate && createdDate >= dateFrom && createdDate <= dateTo;
                const updatedInPeriod = updatedDate && updatedDate >= dateFrom && updatedDate <= dateTo;
                const createdBeforePeriod = createdDate && createdDate < dateFrom;
                
                const shouldInclude = createdInPeriod || updatedInPeriod || createdBeforePeriod;
                
                if (this.debugEnabled && !shouldInclude) {
                    console.log('üìÖ –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á—ë–Ω –ø–æ –¥–∞—Ç–∞–º:', {
                        created: createdDate?.toISOString(),
                        updated: updatedDate?.toISOString(),
                        dateFrom: dateFrom.toISOString(),
                        dateTo: dateTo.toISOString(),
                        obj: obj.id
                    });
                }
                
                return shouldInclude;
            });

            return objects;

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:', error);
            return [];
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
     */
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å–µ–≥–º–µ–Ω—Ç–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ DuplicatesManager)
     */
    filterAddressesBySegmentCriteria(addresses, segmentFilters) {
        if (!segmentFilters) return addresses;
        
        return addresses.filter(address => {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–æ–º–∞
            if (segmentFilters.type && segmentFilters.type.length > 0) {
                if (!segmentFilters.type.includes(address.building_type)) {
                    return false;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
            if (segmentFilters.addresses && Array.isArray(segmentFilters.addresses) && segmentFilters.addresses.length > 0) {
                if (!segmentFilters.addresses.includes(address.id)) {
                    return false;
                }
            }
            
            // –î—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
            // (–ø–ª–æ—â–∞–¥—å –¥–æ–º–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –∏ —Ç.–¥.)
            
            return true;
        });
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
     */
    filterObjectsBySubsegment(objects, subsegment) {
        if (!subsegment.filters) return objects;

        return objects.filter(obj => {
            const criteria = subsegment.filters;
            
            // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç)
            if (criteria.property_type && criteria.property_type.length > 0) {
                if (!criteria.property_type.includes(obj.property_type)) return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–∂–∞–º
            if (criteria.floor_from && obj.floor < criteria.floor_from) return false;
            if (criteria.floor_to && obj.floor > criteria.floor_to) return false;

            // –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏
            if (criteria.area_from && obj.area_total < criteria.area_from) return false;
            if (criteria.area_to && obj.area_total > criteria.area_to) return false;

            // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            if (criteria.price_from && obj.current_price < criteria.price_from) return false;
            if (criteria.price_to && obj.current_price > criteria.price_to) return false;

            return true;
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
     */
    processObjectsForReports(objects, dateFrom, dateTo) {
        // –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –º–µ—Å—è—Ü–µ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ
        const months = this.generateMonthsArray(dateFrom, dateTo);
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–∏–æ–¥–∞, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
        if (months.length === 0) {
            const currentDate = new Date();
            months.push(new Date(currentDate.getFullYear(), currentDate.getMonth(), 1));
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        const reportData = {
            new: new Array(months.length).fill(0),
            close: new Array(months.length).fill(0),
            active: new Array(months.length).fill(0),
            average–°ost: new Array(months.length).fill(0),
            average–°ostMeter: new Array(months.length).fill(0),
            average–°ostArchive: new Array(months.length).fill(0),
            average–°ostMeterArchive: new Array(months.length).fill(0),
            datetime: months.map(date => {
                // ApexCharts —Ç—Ä–µ–±—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –∏–ª–∏ timestamp
                return date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-01';
            })
        };

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –í–°–ï –æ–±—ä–µ–∫—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–∂–¥–æ–º –º–µ—Å—è—Ü–µ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞)
        objects.forEach(obj => {
            const createdDate = new Date(obj.created);
            const monthIndex = this.getMonthIndex(createdDate, months);
            
            if (monthIndex >= 0 && obj.created) {
                // –ù–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã - –í–°–ï —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                reportData.new[monthIndex]++;
            }
        });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —É—à–µ–¥—à–∏—Ö —Å —Ä—ã–Ω–∫–∞
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ê—Ä—Ö–∏–≤" –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        objects.forEach(obj => {
            if (obj.status === 'archive' && obj.updated) {
                const closeDate = new Date(obj.updated);
                const monthIndex = this.getMonthIndex(closeDate, months);
                if (monthIndex >= 0) {
                    reportData.close[monthIndex]++;
                }
            }
        });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
        months.forEach((month, index) => {
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
            const activeAtMonthStart = objects.filter(obj => {
                if (!obj.created) return false;
                
                const createdDate = new Date(obj.created);
                const updatedDate = obj.updated ? new Date(obj.updated) : null;
                
                // –û–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –î–û –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
                if (createdDate >= month) return false;
                
                // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∞—Ä—Ö–∏–≤–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –æ–Ω —Å—Ç–∞–ª –∞—Ä—Ö–∏–≤–Ω—ã–º
                if (obj.status === 'archive') {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ–Ω–∞ –î–û –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ - –æ–±—ä–µ–∫—Ç —É–∂–µ –±—ã–ª –∞—Ä—Ö–∏–≤–Ω—ã–º
                    if (updatedDate && updatedDate < month) {
                        return false;
                    }
                    // –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ü–û–°–õ–ï –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ - –æ–±—ä–µ–∫—Ç –µ—â–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
                    return true;
                }
                
                // –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                return obj.status === 'active';
            }).length;
            
            reportData.active[index] = activeAtMonthStart;
        });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
        months.forEach((month, index) => {
            // –ù–∞—Ö–æ–¥–∏–º –ê–ö–¢–ò–í–ù–´–ï –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
            const activeObjects = objects.filter(obj => {
                if (!obj.created || obj.status === 'archive') return false;
                
                const createdDate = new Date(obj.created);
                const updatedDate = obj.updated ? new Date(obj.updated) : new Date(); // –ï—Å–ª–∏ –Ω–µ—Ç updated - –æ–±—ä–µ–∫—Ç –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                
                // –û–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ –µ—Å–ª–∏: created <= –Ω–∞—á–∞–ª–æ_–º–µ—Å—è—Ü–∞ < updated
                return createdDate <= month && month < updatedDate;
            });

            // –ù–∞—Ö–æ–¥–∏–º –ê–†–•–ò–í–ù–´–ï –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
            const archiveObjects = objects.filter(obj => {
                if (!obj.created || obj.status !== 'archive') return false;
                
                const createdDate = new Date(obj.created);
                const updatedDate = obj.updated ? new Date(obj.updated) : new Date();
                
                // –ê—Ä—Ö–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ –µ—Å–ª–∏: created <= –Ω–∞—á–∞–ª–æ_–º–µ—Å—è—Ü–∞ < updated
                return createdDate <= month && month < updatedDate;
            });

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ê–ö–¢–ò–í–ù–´–ï –æ–±—ä–µ–∫—Ç—ã
            if (activeObjects.length > 0) {
                const pricesAtMonth = [];
                const pricesPerMeterAtMonth = [];

                activeObjects.forEach(obj => {
                    // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                    const priceAtMonth = this.getPriceAtDate(obj, month);
                    const pricePerMeterAtMonth = this.getPricePerMeterAtDate(obj, month);
                    
                    if (priceAtMonth > 0) {
                        pricesAtMonth.push(priceAtMonth);
                    }
                    
                    if (pricePerMeterAtMonth > 0) {
                        pricesPerMeterAtMonth.push(pricePerMeterAtMonth);
                    }
                });

                // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                if (pricesAtMonth.length > 0) {
                    const totalPrice = pricesAtMonth.reduce((sum, price) => sum + price, 0);
                    reportData.average–°ost[index] = Math.round(totalPrice / pricesAtMonth.length);
                }

                if (pricesPerMeterAtMonth.length > 0) {
                    const totalPricePerMeter = pricesPerMeterAtMonth.reduce((sum, price) => sum + price, 0);
                    reportData.average–°ostMeter[index] = Math.round(totalPricePerMeter / pricesPerMeterAtMonth.length);
                }
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ê–†–•–ò–í–ù–´–ï –æ–±—ä–µ–∫—Ç—ã
            if (archiveObjects.length > 0) {
                const pricesAtMonthArchive = [];
                const pricesPerMeterAtMonthArchive = [];

                archiveObjects.forEach(obj => {
                    // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                    const priceAtMonth = this.getPriceAtDate(obj, month);
                    const pricePerMeterAtMonth = this.getPricePerMeterAtDate(obj, month);
                    
                    if (priceAtMonth > 0) {
                        pricesAtMonthArchive.push(priceAtMonth);
                    }
                    
                    if (pricePerMeterAtMonth > 0) {
                        pricesPerMeterAtMonthArchive.push(pricePerMeterAtMonth);
                    }
                });

                // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                if (pricesAtMonthArchive.length > 0) {
                    const totalPriceArchive = pricesAtMonthArchive.reduce((sum, price) => sum + price, 0);
                    reportData.average–°ostArchive[index] = Math.round(totalPriceArchive / pricesAtMonthArchive.length);
                }

                if (pricesPerMeterAtMonthArchive.length > 0) {
                    const totalPricePerMeterArchive = pricesPerMeterAtMonthArchive.reduce((sum, price) => sum + price, 0);
                    reportData.average–°ostMeterArchive[index] = Math.round(totalPricePerMeterArchive / pricesPerMeterAtMonthArchive.length);
                }
            }
        });

        if (this.debugEnabled) {
            console.log('üìà –î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:', {
                months: reportData.datetime,
                new: reportData.new,
                close: reportData.close,
                active: reportData.active,
                average–°ost: reportData.average–°ost,
                average–°ostMeter: reportData.average–°ostMeter,
                average–°ostArchive: reportData.average–°ostArchive,
                average–°ostMeterArchive: reportData.average–°ostMeterArchive,
                totalObjects: objects.length
            });
        }

        return reportData;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –º–µ—Å—è—Ü–µ–≤ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
     */
    generateMonthsArray(dateFrom, dateTo) {
        const months = [];
        const current = new Date(dateFrom.getFullYear(), dateFrom.getMonth(), 1);
        const end = new Date(dateTo.getFullYear(), dateTo.getMonth(), 1);

        while (current <= end) {
            months.push(new Date(current));
            current.setMonth(current.getMonth() + 1);
        }

        return months;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –º–µ—Å—è—Ü–∞ –≤ –º–∞—Å—Å–∏–≤–µ
     */
    getMonthIndex(date, months) {
        return months.findIndex(month => this.isSameMonth(date, month));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
     */
    isSameMonth(date1, date2) {
        return date1.getFullYear() === date2.getFullYear() && 
               date1.getMonth() === date2.getMonth();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
     */
    getEmptyReportData() {
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ ApexCharts
        const currentDate = new Date();
        const dateStr = currentDate.getFullYear() + '-' + String(currentDate.getMonth() + 1).padStart(2, '0') + '-01';
        
        return {
            new: [0],
            close: [0],
            active: [0],
            average–°ost: [0],
            average–°ostMeter: [0],
            average–°ostArchive: [0],
            average–°ostMeterArchive: [0],
            datetime: [dateStr]
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
     */
    createLiquidityChart(data) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if (!data || !data.datetime || data.datetime.length === 0) {
                document.getElementById('liquidityChart').innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
                return;
            }

            const options = {
                series: [
                    {
                        name: '–ù–æ–≤—ã–µ',
                        type: 'column',
                        data: data['new']
                    },
                    {
                        name: '–£—à–µ–¥—à–∏–µ —Å —Ä—ã–Ω–∫–∞',
                        type: 'column',
                        data: data['close']
                    },
                    {
                        name: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞',
                        type: 'line',
                        data: data['active']
                    }
                ],
                colors: ['#60ba5d', '#bd5f5f', '#629bc2'],
                chart: {
                    height: 350,
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
                            "shortMonths": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
                            "days": ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    zoom: {
                        enabled: true
                    }
                },
                responsive: [{
                    breakpoint: 480,
                    options: {
                        legend: {
                            position: 'bottom',
                            offsetX: -10,
                            offsetY: 0
                        }
                    }
                }],
                dataLabels: {
                    enabled: true,
                },
                plotOptions: {
                    bar: {
                        borderRadius: 8,
                        horizontal: false,
                    },
                },
                xaxis: {
                    type: 'datetime',
                    categories: data['datetime'],
                },
                legend: {
                    position: 'bottom'
                },
                fill: {
                    opacity: 1
                }
            };

            document.getElementById('liquidityChart').innerHTML = '';
            this.liquidityChart = new ApexCharts(document.querySelector("#liquidityChart"), options);
            this.liquidityChart.render();

            if (this.debugEnabled) {
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
     */
    createPriceChangesChart(data) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if (!data || !data.datetime || data.datetime.length === 0) {
                document.getElementById('priceChangesChart').innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
                return;
            }


            const options = {
                series: [
                    {
                        name: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞ (–ê–∫—Ç–∏–≤–Ω—ã–µ)',
                        type: 'column',
                        data: data['average–°ostMeter']
                    },
                    {
                        name: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ (–ê–∫—Ç–∏–≤–Ω—ã–µ)',
                        type: 'line',
                        data: data['average–°ost']
                    },
                    {
                        name: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞ (–ê—Ä—Ö–∏–≤)',
                        type: 'column',
                        data: data['average–°ostMeterArchive']
                    },
                    {
                        name: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ (–ê—Ä—Ö–∏–≤)',
                        type: 'line',
                        data: data['average–°ostArchive']
                    }
                ],
                colors: ['#60ba5d', '#629bc2', '#ff9800', '#e91e63'],
                chart: {
                    height: 350,
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
                            "shortMonths": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
                            "days": ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    zoom: {
                        enabled: true
                    }
                },
                stroke: {
                    width: [0, 4]
                },
                title: {
                    text: '–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω'
                },
                dataLabels: {
                    enabled: false,
                },
                xaxis: {
                    type: 'datetime',
                    categories: data['datetime'],
                },
                yaxis: [
                    {
                        seriesName: ['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞ (–ê–∫—Ç–∏–≤–Ω—ã–µ)', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞ (–ê—Ä—Ö–∏–≤)'],
                        title: {
                            text: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞',
                        },
                        labels: {
                            formatter: function (val) {
                                return new Intl.NumberFormat('ru-RU').format(val);
                            }
                        }
                    },
                    {
                        seriesName: ['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ (–ê–∫—Ç–∏–≤–Ω—ã–µ)', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ (–ê—Ä—Ö–∏–≤)'],
                        opposite: true,
                        title: {
                            text: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞'
                        },
                        labels: {
                            formatter: function (val) {
                                return new Intl.NumberFormat('ru-RU').format(val);
                            }
                        }
                    }
                ]
            };

            document.getElementById('priceChangesChart').innerHTML = '';
            this.priceChangesChart = new ApexCharts(document.querySelector("#priceChangesChart"), options);
            this.priceChangesChart.render();

            if (this.debugEnabled) {
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    async createMarketCorridorChart(data) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const pointsData = await this.getMarketCorridorData();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if (!pointsData || !pointsData.series || pointsData.series.length === 0 || pointsData.series[0].data.length === 0) {
                document.getElementById('marketCorridorChart').innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
                return;
            }
            
            const options = {
                chart: {
                    height: 600,
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º mixed —Ç–∏–ø –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (–ª–∏–Ω–∏–∏ + —Ç–æ—á–∫–∏)
                    type: this.marketCorridorMode === 'history' ? 'line' : 'scatter',
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
                            "shortMonths": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
                            "days": ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    events: {
                        click: (event, chartContext, config) => {
                            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ
                            this.handleMarketCorridorPointClick(event, chartContext, config);
                        }
                    }
                },
                stroke: {
                    width: this.marketCorridorMode === 'history' ? 2 : 0, // –õ–∏–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏
                    curve: this.marketCorridorMode === 'history' ? 'stepline' : 'straight'
                },
                series: pointsData.series,
                colors: pointsData.colors,
                xaxis: {
                    type: 'datetime'
                },
                legend: {
                    show: false,
                    showForSingleSeries: false,
                    showForNullSeries: false,
                    showForZeroSeries: false
                },
                title: {
                    text: this.marketCorridorMode === 'history' ? '–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤' : '–ö–æ—Ä–∏–¥–æ—Ä —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                    align: 'left',
                    style: {
                        fontSize: "14px",
                        color: 'rgba(102,102,102,0.56)'
                    }
                },
                markers: {
                    size: 4,
                    opacity: 0.9,
                    strokeColor: "#fff",
                    strokeWidth: 2,
                    style: 'inverted',
                    hover: {
                        size: 15
                    }
                },
                tooltip: {
                    shared: false,
                    intersect: true,
                    custom: (tooltipModel) => {
                        const { series, seriesIndex, dataPointIndex, w } = tooltipModel;
                        
                        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ this
                        const reportsManager = window.reportsManagerInstance; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                        
                        let point = null;
                        
                        if (reportsManager && reportsManager.currentPointsData) {
                            if (reportsManager.marketCorridorMode === 'history') {
                                // –í —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–æ—á–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                                const seriesData = w.config.series[seriesIndex];
                                if (seriesData && seriesData.data && seriesData.data[dataPointIndex]) {
                                    const [timestamp, price] = seriesData.data[dataPointIndex];
                                    
                                    // –ò—â–µ–º —Ç–æ—á–∫—É —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                    point = reportsManager.currentPointsData.find(p => 
                                        Math.abs(p.x - timestamp) < 1000 && Math.abs(p.y - price) < 0.01
                                    );
                                }
                            } else {
                                // –í —Ä–µ–∂–∏–º–µ –∫–æ—Ä–∏–¥–æ—Ä–∞ –ø—Ä–æ–¥–∞–∂ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–∏–∏-–º–∞–ø–ø–∏–Ω–≥
                                if (reportsManager.currentSeriesDataMapping && 
                                    reportsManager.currentSeriesDataMapping[seriesIndex] && 
                                    reportsManager.currentSeriesDataMapping[seriesIndex][dataPointIndex]) {
                                    
                                    point = reportsManager.currentSeriesDataMapping[seriesIndex][dataPointIndex];
                                    
                                } else {
                                    // Fallback - –∏—â–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                                    const seriesData = w.config.series[seriesIndex];
                                    if (seriesData && seriesData.data && seriesData.data[dataPointIndex]) {
                                        const [timestamp, price] = seriesData.data[dataPointIndex];
                                        
                                        point = reportsManager.currentPointsData.find(p => 
                                            Math.abs(p.x - timestamp) < 1000 && Math.abs(p.y - price) < 0.01
                                        );
                                    }
                                }
                            }
                        }
                        
                        if (!point) {
                            return '<div style="padding: 8px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
                        }

                        const price = new Intl.NumberFormat('ru-RU').format(point.y);
                        const date = new Date(point.x).toLocaleDateString('ru-RU');
                        const status = point.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ê—Ä—Ö–∏–≤';
                        const rooms = point.rooms || '–Ω/–¥';
                        const area = point.area ? `${point.area} –º¬≤` : '–Ω/–¥';
                        const floor = point.floor && point.floors_total ? `${point.floor}/${point.floors_total}` : '–Ω/–¥';

                        return `
                            <div style="background: white; border: 1px solid #d1d5db; border-radius: 8px; box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); padding: 12px; max-width: 300px;">
                                <div style="font-weight: 600; color: #1f2937; margin-bottom: 8px;">${rooms} –∫–æ–º–Ω., ${area}</div>
                                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">–≠—Ç–∞–∂: ${floor}</div>
                                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">–°—Ç–∞—Ç—É—Å: <span style="font-weight: 500; color: ${point.status === 'active' ? '#059669' : '#6b7280'};">${status}</span></div>
                                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">–î–∞—Ç–∞: ${date}</div>
                                <div style="font-weight: bold; font-size: 18px; color: #2563eb;">${price} ‚ÇΩ</div>
                                <div style="font-size: 12px; color: #9ca3af; margin-top: 8px;">–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π</div>
                            </div>
                        `;
                    }
                },
                yaxis: {
                    min: pointsData.minPrice,
                    max: pointsData.maxPrice,
                    title: {
                        text: '–¶–µ–Ω–∞'
                    }
                },
                grid: {
                    show: true,
                    position: 'back',
                    xaxis: {
                        lines: {
                            show: true
                        }
                    },
                    yaxis: {
                        lines: {
                            show: true
                        }
                    },
                    borderColor: '#eeeeee'
                },
                legend: {
                    show: true
                },
                responsive: [{
                    breakpoint: 600,
                    options: {
                        chart: {
                            toolbar: {
                                show: true
                            }
                        },
                        legend: {
                            show: true
                        }
                    }
                }]
            };

            document.getElementById('marketCorridorChart').innerHTML = '';
            this.marketCorridorChart = new ApexCharts(document.querySelector("#marketCorridorChart"), options);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
            this.currentPointsData = pointsData.pointsData;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä–∏–π –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤
            this.currentSeriesDataMapping = pointsData.seriesDataMapping;
            
            // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è tooltip
            window.reportsManagerInstance = this;
            
            this.marketCorridorChart.render();

            if (this.debugEnabled) {
                console.log('üìä –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏–¥–æ—Ä–∞:', {
                    pointsCount: pointsData.pointsData.length,
                    samplePoint: pointsData.pointsData[0],
                    globalInstance: !!window.reportsManagerInstance
                });
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async getMarketCorridorData() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const currentArea = this.areaPage.dataState?.getState('currentArea');
            if (!currentArea) {
                return this.getEmptyMarketCorridorData();
            }

            const segmentId = this.currentSegment?.id;
            const subsegmentId = this.currentSubsegment?.id;
            const dateFrom = new Date(this.dateFromFilter?.value || '2023-01-01');
            const dateTo = new Date(this.dateToFilter?.value || new Date().toISOString().split('T')[0]);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const objects = await this.getFilteredRealEstateObjects(currentArea.id, segmentId, subsegmentId, dateFrom, dateTo);
            
            if (objects.length === 0) {
                return this.getEmptyMarketCorridorData();
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            const activePointsData = [];
            const archivePointsData = [];
            
            objects.forEach(obj => {
                if (obj.current_price <= 0) return;
                
                if (obj.status === 'archive') {
                    // –ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∞ –¥–∞—Ç—É —É—Ö–æ–¥–∞ —Å —Ä—ã–Ω–∫–∞ (–≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞)
                    if (obj.updated) {
                        archivePointsData.push({
                            x: new Date(obj.updated).getTime(),
                            y: obj.current_price,
                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è tooltip –∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                            objectId: obj.id,
                            address: obj.address_id,
                            rooms: obj.rooms || obj.property_type,
                            area: obj.area_total,
                            floor: obj.floor,
                            floors_total: obj.floors_total,
                            status: obj.status,
                            created: obj.created,
                            updated: obj.updated
                        });
                    }
                } else if (obj.status === 'active') {
                    // –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∂–∏–º–∞
                    if (this.marketCorridorMode === 'history') {
                        // –†–µ–∂–∏–º "–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                        const objectPriceHistory = this.prepareObjectPriceHistoryForChart(obj);
                        
                        // –ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—ä–µ–∫—Ç–µ
                        objectPriceHistory.forEach(historyPoint => {
                            activePointsData.push({
                                x: historyPoint.date,
                                y: historyPoint.price,
                                objectId: obj.id,
                                address: obj.address_id,
                                rooms: obj.rooms || obj.property_type,
                                area: obj.area_total,
                                floor: obj.floor,
                                floors_total: obj.floors_total,
                                status: obj.status,
                                created: obj.created,
                                updated: obj.updated,
                                historyEntry: true
                            });
                        });
                    } else {
                        // –†–µ–∂–∏–º "–ö–æ—Ä–∏–¥–æ—Ä –ø—Ä–æ–¥–∞–∂" - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                        activePointsData.push({
                            x: new Date().getTime(),
                            y: obj.current_price,
                            objectId: obj.id,
                            address: obj.address_id,
                            rooms: obj.rooms || obj.property_type,
                            area: obj.area_total,
                            floor: obj.floor,
                            floors_total: obj.floors_total,
                            status: obj.status,
                            created: obj.created,
                            updated: obj.updated
                        });
                    }
                }
            });
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
            activePointsData.sort((a, b) => a.x - b.x);
            archivePointsData.sort((a, b) => a.x - b.x);

            // –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã –¥–ª—è –æ—Å–∏ Y
            const allPrices = [...activePointsData, ...archivePointsData].map(point => point.y);
            const minPrice = allPrices.length > 0 ? Math.min(...allPrices) : 0;
            const maxPrice = allPrices.length > 0 ? Math.max(...allPrices) : 0;

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const priceRange = maxPrice - minPrice;
            const padding = priceRange * 0.1; // 10% –æ—Ç—Å—Ç—É–ø

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
            const series = [];
            const colors = [];
            const seriesDataMapping = []; // –ú–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä–∏–π –∫ –¥–∞–Ω–Ω—ã–º
            
            if (this.marketCorridorMode === 'history') {
                // –í —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
                const activeObjectsGrouped = {};
                activePointsData.forEach(point => {
                    if (!activeObjectsGrouped[point.objectId]) {
                        activeObjectsGrouped[point.objectId] = {
                            name: `–û–±—ä–µ–∫—Ç #${point.objectId}`,
                            data: [],
                            color: '#56c2d6'
                        };
                    }
                    activeObjectsGrouped[point.objectId].data.push([point.x, point.y]);
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é
                Object.values(activeObjectsGrouped).forEach(objectSeries => {
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ª–∏–Ω–∏–π
                    objectSeries.data.sort((a, b) => a[0] - b[0]);
                    // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –ª–∏–Ω–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏
                    objectSeries.type = 'line';
                    series.push(objectSeries);
                    colors.push('#56c2d6');
                });
                
                // –ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
                if (archivePointsData.length > 0) {
                    series.push({
                        name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã',
                        data: archivePointsData.map(point => [point.x, point.y]),
                        type: 'scatter' // –¢–æ—á–∫–∏ –±–µ–∑ –ª–∏–Ω–∏–π
                    });
                    colors.push('#dc2626');
                }
            } else {
                // –í —Ä–µ–∂–∏–º–µ –∫–æ—Ä–∏–¥–æ—Ä–∞ –ø—Ä–æ–¥–∞–∂ - –æ–±—ã—á–Ω—ã–µ scatter —Ç–æ—á–∫–∏
                if (activePointsData.length > 0) {
                    const seriesIndex = series.length;
                    series.push({
                        name: '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã',
                        data: activePointsData.map(point => [point.x, point.y])
                    });
                    colors.push('#56c2d6'); // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    seriesDataMapping[seriesIndex] = activePointsData; // –ü—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥
                }
                
                if (archivePointsData.length > 0) {
                    const seriesIndex = series.length;
                    series.push({
                        name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã',
                        data: archivePointsData.map(point => [point.x, point.y])
                    });
                    colors.push('#dc2626'); // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö
                    seriesDataMapping[seriesIndex] = archivePointsData; // –ü—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥
                }
            }

            return {
                series: series,
                colors: colors,
                minPrice: Math.max(0, minPrice - padding),
                maxPrice: maxPrice + padding,
                pointsData: [...activePointsData, ...archivePointsData].sort((a, b) => a.x - b.x), // –°–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                seriesDataMapping: seriesDataMapping // –ü—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥ —Å–µ—Ä–∏–π –∫ –¥–∞–Ω–Ω—ã–º
            };

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞:', error);
            return this.getEmptyMarketCorridorData();
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–∫–æ–ø–∏—è –∏–∑ DuplicatesManager)
     */
    prepareObjectPriceHistoryForChart(realEstateObject) {
        const history = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if (realEstateObject.price_history && Array.isArray(realEstateObject.price_history)) {
            realEstateObject.price_history.forEach(item => {
                if (item.price && item.date) {
                    history.push({
                        date: new Date(item.date).getTime(),
                        price: parseInt(item.price)
                    });
                }
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –æ–±—ä–µ–∫—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ª–æ–≥–∏–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
        if (realEstateObject.current_price) {
            let endPriceDate;
            
            if (realEstateObject.status === 'active') {
                // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                endPriceDate = new Date();
            } else {
                // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ - –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                endPriceDate = new Date(realEstateObject.updated);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
            const lastHistoryDate = history.length > 0 ? history[history.length - 1].date : 0;
            if (Math.abs(endPriceDate.getTime() - lastHistoryDate) > 24 * 60 * 60 * 1000) {
                history.push({
                    date: endPriceDate.getTime(),
                    price: parseInt(realEstateObject.current_price)
                });
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        history.sort((a, b) => a.date - b.date);
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ü–µ–Ω –ø–æ–¥—Ä—è–¥, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏
        const filtered = [];
        for (let i = 0; i < history.length; i++) {
            if (i === 0 || i === history.length - 1 || history[i].price !== history[i-1].price) {
                filtered.push(history[i]);
            }
        }

        return filtered;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
     */
    getEmptyMarketCorridorData() {
        return {
            series: [{
                name: '–û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                data: []
            }],
            colors: ['#56c2d6'],
            minPrice: 0,
            maxPrice: 1000000
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     * @param {Object} obj - –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     * @param {Date} targetDate - —Ü–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
     * @returns {number} - —Ü–µ–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
     */
    getPriceAtDate(obj, targetDate) {
        try {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            if (!obj.price_history || !Array.isArray(obj.price_history) || obj.price_history.length === 0) {
                return obj.current_price || 0;
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –¥–∞—Ç–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
            const sortedHistory = [...obj.price_history].sort((a, b) => {
                const dateA = new Date(a.date || a.timestamp || a.created);
                const dateB = new Date(b.date || b.timestamp || b.created);
                return dateA - dateB;
            });

            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –î–û –∏–ª–∏ –ù–ê —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
            let priceAtDate = null;
            for (const priceEntry of sortedHistory) {
                const entryDate = new Date(priceEntry.date || priceEntry.timestamp || priceEntry.created);
                if (entryDate <= targetDate) {
                    priceAtDate = priceEntry.price || priceEntry.current_price || 0;
                } else {
                    break; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫, —Ç–∞–∫ –∫–∞–∫ –¥–æ—à–ª–∏ –¥–æ –¥–∞—Ç—ã –ø–æ—Å–ª–µ —Ü–µ–ª–µ–≤–æ–π
                }
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–æ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            if (priceAtDate === null && sortedHistory.length > 0) {
                priceAtDate = sortedHistory[0].price || sortedHistory[0].current_price || 0;
            }

            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
            return priceAtDate || obj.current_price || 0;

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ –¥–∞—Ç—É:', error);
            return obj.current_price || 0;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
     * @param {Event} event - —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
     * @param {Object} chartContext - –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥—Ä–∞—Ñ–∏–∫–∞
     * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—á–∫–∏
     */
    handleMarketCorridorPointClick(event, chartContext, config) {
        try {
            let point = null;
            
            if (config && config.dataPointIndex >= 0 && config.seriesIndex >= 0) {
                if (this.marketCorridorMode === 'history') {
                    // –í —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–æ—á–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                    if (this.marketCorridorChart) {
                        const seriesData = this.marketCorridorChart.w.config.series[config.seriesIndex];
                        if (seriesData && seriesData.data && seriesData.data[config.dataPointIndex]) {
                            const [timestamp, price] = seriesData.data[config.dataPointIndex];
                            
                            // –ò—â–µ–º —Ç–æ—á–∫—É —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                            point = this.currentPointsData.find(p => 
                                Math.abs(p.x - timestamp) < 1000 && Math.abs(p.y - price) < 0.01
                            );
                        }
                    }
                } else {
                    // –í —Ä–µ–∂–∏–º–µ –∫–æ—Ä–∏–¥–æ—Ä–∞ –ø—Ä–æ–¥–∞–∂ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–∏–∏-–º–∞–ø–ø–∏–Ω–≥
                    if (this.currentSeriesDataMapping && 
                        this.currentSeriesDataMapping[config.seriesIndex] && 
                        this.currentSeriesDataMapping[config.seriesIndex][config.dataPointIndex]) {
                        
                        point = this.currentSeriesDataMapping[config.seriesIndex][config.dataPointIndex];
                        
                    } else {
                        // Fallback - –∏—â–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                        if (this.marketCorridorChart) {
                            const seriesData = this.marketCorridorChart.w.config.series[config.seriesIndex];
                            if (seriesData && seriesData.data && seriesData.data[config.dataPointIndex]) {
                                const [timestamp, price] = seriesData.data[config.dataPointIndex];
                                
                                point = this.currentPointsData.find(p => 
                                    Math.abs(p.x - timestamp) < 1000 && Math.abs(p.y - price) < 0.01
                                );
                            }
                        }
                    }
                }
            }
            
            if (point) {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
                this.showObjectDetails(point.objectId);
            }
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ)
     * @param {string} objectId - ID –æ–±—ä–µ–∫—Ç–∞
     */
    async showObjectDetails(objectId) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ DuplicatesManager —á–µ—Ä–µ–∑ areaPage
            if (this.areaPage && this.areaPage.duplicatesManager && this.areaPage.duplicatesManager.showObjectDetails) {
                await this.areaPage.duplicatesManager.showObjectDetails(objectId);
            } else {
                console.error('‚ùå ReportsManager: DuplicatesManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞');
                
                // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä–µ–∫—Ç–∞: ${objectId}\n\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª—è–º–∏"`);
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –º¬≤ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     * @param {Object} obj - –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     * @param {Date} targetDate - —Ü–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
     * @returns {number} - —Ü–µ–Ω–∞ –∑–∞ –º¬≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
     */
    getPricePerMeterAtDate(obj, targetDate) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –Ω–∞ –¥–∞—Ç—É
            const priceAtDate = this.getPriceAtDate(obj, targetDate);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–ª–æ—â–∞–¥—å, –≤—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É –∑–∞ –º¬≤
            if (priceAtDate > 0 && obj.area_total > 0) {
                return Math.round(priceAtDate / obj.area_total);
            }

            // –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ price_per_meter, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (obj.price_history && Array.isArray(obj.price_history)) {
                const sortedHistory = [...obj.price_history].sort((a, b) => {
                    const dateA = new Date(a.date || a.timestamp || a.created);
                    const dateB = new Date(b.date || b.timestamp || b.created);
                    return dateA - dateB;
                });

                let pricePerMeterAtDate = null;
                for (const priceEntry of sortedHistory) {
                    const entryDate = new Date(priceEntry.date || priceEntry.timestamp || priceEntry.created);
                    if (entryDate <= targetDate && (priceEntry.price_per_meter || priceEntry.pricePerMeter)) {
                        pricePerMeterAtDate = priceEntry.price_per_meter || priceEntry.pricePerMeter;
                    } else if (entryDate > targetDate) {
                        break;
                    }
                }

                if (pricePerMeterAtDate) {
                    return pricePerMeterAtDate;
                }
            }

            // Fallback –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
            return obj.price_per_meter || 0;

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –º¬≤ –Ω–∞ –¥–∞—Ç—É:', error);
            return obj.price_per_meter || 0;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å
     */
    showPanel() {
        if (this.panelContainer) {
            this.panelContainer.style.display = 'block';
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
     */
    hidePanel() {
        if (this.panelContainer) {
            this.panelContainer.style.display = 'none';
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataTables –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
     */
    async initializeSavedReportsDataTable() {
        try {
            // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
            window.reportsManager = this;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã
            if (!document.getElementById('savedReportsTable')) {
                console.warn('‚ö†Ô∏è ReportsManager: –≠–ª–µ–º–µ–Ω—Ç savedReportsTable –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            if ($.fn.DataTable.isDataTable('#savedReportsTable')) {
                $('#savedReportsTable').DataTable().destroy();
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataTable —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            this.savedReportsDataTable = $('#savedReportsTable').DataTable({
                language: {
                    url: '../libs/datatables/ru.json'
                },
                pageLength: 10,
                responsive: true,
                order: [[1, 'desc']], // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
                columnDefs: [
                    { orderable: false, targets: [2] }, // –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ "–î–µ–π—Å—Ç–≤–∏—è"
                    { width: "50%", targets: 0 }, // –ù–∞–∑–≤–∞–Ω–∏–µ
                    { width: "30%", targets: 1 }, // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    { width: "20%", targets: 2 }  // –î–µ–π—Å—Ç–≤–∏—è
                ],
                data: [], // –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                columns: [
                    { title: '–ù–∞–∑–≤–∞–Ω–∏–µ' },
                    { title: '–°–æ–∑–¥–∞–Ω' },
                    { title: '–î–µ–π—Å—Ç–≤–∏—è' }
                ]
            });
            
            // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è - –æ—Ç—á—ë—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à–∞–±–ª–æ–Ω–∞
            // await this.loadSavedReportsData(); // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –æ—Ç—á—ë—Ç–æ–≤

            // –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            $('#savedReportsLoader').hide();
            $('#savedReportsTable').show();
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DataTables –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ —Å–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
            $('#savedReportsLoader').hide();
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataTable –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async initializeFilterTemplatesDataTable() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã
            if (!document.getElementById('filterTemplatesTable')) {
                if (this.debugEnabled) {
                    console.warn('‚ö†Ô∏è ReportsManager: –≠–ª–µ–º–µ–Ω—Ç filterTemplatesTable –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
                return;
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataTable —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            this.filterTemplatesDataTable = $('#filterTemplatesTable').DataTable({
                language: {
                    url: '../libs/datatables/ru.json'
                },
                pageLength: 5,
                responsive: true,
                order: [[5, 'desc']], // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
                columnDefs: [
                    { orderable: false, targets: [6] }, // –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ "–î–µ–π—Å—Ç–≤–∏—è"
                    { orderable: false, targets: [4] }, // –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ "–û—Ç—á—ë—Ç—ã"
                    { width: "20%", targets: 0 }, // –ù–∞–∑–≤–∞–Ω–∏–µ
                    { width: "15%", targets: 1 }, // –°–µ–≥–º–µ–Ω—Ç
                    { width: "15%", targets: 2 }, // –ü–æ–¥—Å–µ–≥–º–µ–Ω—Ç  
                    { width: "12%", targets: 3 }, // –ü–µ—Ä–∏–æ–¥
                    { width: "15%", targets: 4 }, // –û—Ç—á—ë—Ç—ã
                    { width: "13%", targets: 5 }, // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    { width: "10%", targets: 6 }  // –î–µ–π—Å—Ç–≤–∏—è
                ],
                searching: true, // –í–∫–ª—é—á–∞–µ–º –ø–æ–∏—Å–∫
                data: [], // –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                columns: [
                    { title: '–ù–∞–∑–≤–∞–Ω–∏–µ' },
                    { title: '–°–µ–≥–º–µ–Ω—Ç' },
                    { title: '–ü–æ–¥—Å–µ–≥–º–µ–Ω—Ç' },
                    { title: '–ü–µ—Ä–∏–æ–¥' },
                    { title: '–û—Ç—á—ë—Ç—ã' },
                    { title: '–°–æ–∑–¥–∞–Ω' },
                    { title: '–î–µ–π—Å—Ç–≤–∏—è' }
                ]
            });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadFilterTemplatesData();

            // –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            $('#filterTemplatesLoader').hide();
            $('#filterTemplatesTable').show();

            if (this.debugEnabled) {
                console.log('‚úÖ ReportsManager: DataTable –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DataTable –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ —Å–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
            $('#filterTemplatesLoader').hide();
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ DataTable —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
     * @param {number|null} filterByTemplateId - ID —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (null –¥–ª—è –≤—Å–µ—Ö –æ—Ç—á—ë—Ç–æ–≤)
     */
    async loadSavedReportsData(filterByTemplateId = null) {
        try {
            if (!this.savedReportsDataTable) return;
            
            const areaId = this.areaPage.dataState?.getState('currentArea')?.id;
            if (!areaId) {
                // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                this.savedReportsDataTable.clear().draw();
                return;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ –æ—Ç—á—ë—Ç—ã (–Ω–µ —à–∞–±–ª–æ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤)
            let reports = await window.db.getFullReportsByArea(areaId);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã –ø–æ —à–∞–±–ª–æ–Ω—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω filterByTemplateId
            if (filterByTemplateId !== null) {
                reports = reports.filter(report => {
                    return report.filter_template_id && report.filter_template_id === filterByTemplateId;
                });
            }
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è DataTables
            const tableData = reports.map(report => {
                const date = new Date(report.created_at).toLocaleDateString('ru-RU');
                const time = new Date(report.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                const filterParts = [];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (report.filter_template_id) {
                    const templateName = report.name.includes(' - ') ? 
                        report.name.split(' - ')[0] : '–®–∞–±–ª–æ–Ω';
                    filterParts.push(`üìã ${templateName}`);
                }
                
                if (report.filters.segment_name && report.filters.segment_name !== '–í—Å—è –æ–±–ª–∞—Å—Ç—å') {
                    filterParts.push(report.filters.segment_name);
                }
                if (report.filters.subsegment_name) {
                    filterParts.push(report.filters.subsegment_name);
                }
                if (report.filters.date_from && report.filters.date_to) {
                    const dateFrom = new Date(report.filters.date_from).toLocaleDateString('ru-RU');
                    const dateTo = new Date(report.filters.date_to).toLocaleDateString('ru-RU');
                    filterParts.push(`${dateFrom} - ${dateTo}`);
                }
                
                const filtersDescription = filterParts.length > 0 ? filterParts.join(', ') : '–í—Å–µ –¥–∞–Ω–Ω—ã–µ';
                
                const actions = `
                    <div class="flex space-x-1">
                        <button data-action="download" data-report-id="${report.id}" 
                                class="report-action-btn text-blue-600 hover:text-blue-900 text-xs px-2 py-1 border border-blue-300 rounded hover:bg-blue-50"
                                title="–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON">
                            üì• JSON
                        </button>
                        <button data-action="download-html" data-report-id="${report.id}" 
                                class="report-action-btn text-green-600 hover:text-green-900 text-xs px-2 py-1 border border-green-300 rounded hover:bg-green-50"
                                title="–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML">
                            üìÑ HTML
                        </button>
                        <button data-action="delete" data-report-id="${report.id}" 
                                class="report-action-btn text-red-600 hover:text-red-900 text-xs px-2 py-1 border border-red-300 rounded hover:bg-red-50"
                                title="–£–¥–∞–ª–∏—Ç—å –æ—Ç—á—ë—Ç">
                            üóëÔ∏è
                        </button>
                    </div>
                `;
                
                return [
                    report.name,
                    `${date} ${time}`,
                    actions
                ];
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            this.savedReportsDataTable.clear().rows.add(tableData).draw();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            await this.updateReportsFilterIndicator(filterByTemplateId, reports.length);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π (CSP-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ)
            this.attachReportActionHandlers();
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤:', error);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—á—ë—Ç–æ–≤ (CSP-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ)
     */
    attachReportActionHandlers() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        $(document).off('click', '.report-action-btn');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        $(document).on('click', '.report-action-btn', async (event) => {
            event.preventDefault();
            const button = event.currentTarget;
            const action = button.getAttribute('data-action');
            const reportId = button.getAttribute('data-report-id');
            
            if (action === 'download') {
                await this.downloadReportAsJSON(reportId);
            } else if (action === 'download-html') {
                await this.downloadReportAsHTML(reportId);
            } else if (action === 'delete') {
                await this.deleteReportWithConfirmation(reportId);
            }
        });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç—á—ë—Ç–∞—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
     */
    formatReportsInfo(reportsConfig) {
        if (!reportsConfig) {
            return '<span class="text-gray-400 text-xs">–ù–µ —É–∫–∞–∑–∞–Ω—ã</span>';
        }

        const reportLabels = {
            liquidity: { icon: 'üìä', label: '–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å' },
            price_changes: { icon: 'üìà', label: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω' },
            market_corridor: { icon: 'üè†', label: '–ö–æ—Ä–∏–¥–æ—Ä —Ä—ã–Ω–∫–∞' },
            comparative_analysis: { icon: '‚öñÔ∏è', label: '–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑' },
            flipping_profitability: { icon: 'üí∞', label: '–§–ª–∏–ø–ø–∏–Ω–≥' }
        };

        const enabledReports = Object.entries(reportsConfig)
            .filter(([key, enabled]) => enabled && reportLabels[key])
            .map(([key, enabled]) => reportLabels[key]);

        if (enabledReports.length === 0) {
            return '<span class="text-gray-400 text-xs">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö</span>';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏ —Å —Ç—É–ª—Ç–∏–ø–æ–º
        return enabledReports.map(report => 
            `<span class="inline-block mx-1 text-sm" title="${report.label}">${report.icon}</span>`
        ).join('');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ DataTable —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async loadFilterTemplatesData() {
        try {
            if (!this.filterTemplatesDataTable) return;
            
            const areaId = this.areaPage.dataState?.getState('currentArea')?.id;
            if (!areaId) {
                // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                this.filterTemplatesDataTable.clear().draw();
                return;
            }
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–µ–≥–º–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            await this.loadSegmentsData();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const filterTemplates = await window.db.getFilterTemplatesByArea(areaId);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è DataTables
            const tableData = [];
            for (const template of filterTemplates) {
                const date = new Date(template.created_at).toLocaleDateString('ru-RU');
                const time = new Date(template.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–µ –∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–µ
                let segmentName = '–í—Å—è –æ–±–ª–∞—Å—Ç—å';
                let subsegmentName = '–í–µ—Å—å —Å–µ–≥–º–µ–Ω—Ç';
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ ID
                if (template.filters.segment_id) {
                    const segment = this.segments.find(s => s.id === template.filters.segment_id);
                    if (segment) {
                        segmentName = segment.name;
                    }
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ ID
                if (template.filters.subsegment_id && template.filters.segment_id) {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                    const templateSubsegments = await this.database.getSubsegmentsBySegment(template.filters.segment_id);
                    const subsegment = templateSubsegments.find(s => s.id === template.filters.subsegment_id);
                    if (subsegment) {
                        subsegmentName = subsegment.name;
                    }
                }
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
                let period = '–í–µ—Å—å –ø–µ—Ä–∏–æ–¥';
                if (template.filters.date_from && template.filters.date_to) {
                    const dateFrom = new Date(template.filters.date_from).toLocaleDateString('ru-RU');
                    const dateTo = new Date(template.filters.date_to).toLocaleDateString('ru-RU');
                    period = `${dateFrom} - ${dateTo}`;
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
                let reportsInfo = this.formatReportsInfo(template.filters.reports_config);
                
                const actions = `
                    <div class="flex space-x-1">
                        <button data-action="select" data-template-id="${template.id}" 
                                class="template-action-btn text-blue-600 hover:text-blue-900 text-xs px-2 py-1 border border-blue-300 rounded hover:bg-blue-50"
                                title="–í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞">
                            üìã –í—ã–±—Ä–∞—Ç—å
                        </button>
                        <button data-action="delete" data-template-id="${template.id}" 
                                class="template-action-btn text-red-600 hover:text-red-900 text-xs px-2 py-1 border border-red-300 rounded hover:bg-red-50"
                                title="–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω">
                            üóëÔ∏è
                        </button>
                    </div>
                `;
                
                tableData.push([
                    template.name,
                    segmentName,
                    subsegmentName,
                    period,
                    reportsInfo,
                    `${date} ${time}`,
                    actions
                ]);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            this.filterTemplatesDataTable.clear().rows.add(tableData).draw();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
            this.attachTemplateActionHandlers();

            if (this.debugEnabled) {
                console.log('üîÑ ReportsManager: –î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', filterTemplates.length);
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ —à–∞–±–ª–æ–Ω–æ–≤
     */
    attachTemplateActionHandlers() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        $(document).off('click', '.template-action-btn');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        $(document).on('click', '.template-action-btn', async (event) => {
            event.preventDefault();
            const button = event.currentTarget;
            const action = button.getAttribute('data-action');
            const templateId = button.getAttribute('data-template-id'); // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            
            if (action === 'select') {
                await this.selectFilterTemplate(templateId);
            } else if (action === 'delete') {
                await this.deleteFilterTemplate(templateId);
            }
        });
    }

    /**
     * –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
     */
    async selectFilterTemplate(templateId) {
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ SlimSelect
            // afterChange —Å–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–æ–≤–µ—Ç onFilterTemplateSelect
            if (this.reportFilterSlimSelect) {
                this.reportFilterSlimSelect.setSelected(templateId.toString());
            } else {
                $('#reportFilterSelect').val(templateId);
                // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ select –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä—É—á–Ω—É—é
                await this.onFilterTemplateSelect(templateId.toString());
            }

            if (this.debugEnabled) {
                console.log('üìã ReportsManager: –®–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:', templateId);
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:', error);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
     */
    async deleteFilterTemplate(templateId) {
        try {
            if (this.debugEnabled) {
                console.log('üóëÔ∏è ReportsManager: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å ID:', templateId, typeof templateId);
            }
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (this.debugEnabled) {
                const areaId = this.areaPage.dataState?.getState('currentArea')?.id;
                if (areaId) {
                    const allTemplates = await window.db.getFilterTemplatesByArea(areaId);
                    console.log('üóëÔ∏è ReportsManager: –í—Å–µ —à–∞–±–ª–æ–Ω—ã –≤ –æ–±–ª–∞—Å—Ç–∏:', allTemplates.map(t => ({id: t.id, name: t.name})));
                }
            }
            
            const template = await window.db.getSavedReport(templateId);
            if (!template) {
                console.error('‚ùå ReportsManager: –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, ID:', templateId);
                alert('–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            if (this.debugEnabled) {
                console.log('üóëÔ∏è ReportsManager: –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', template);
            }
            
            if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω "${template.name}"?`)) {
                return;
            }
            
            await window.db.deleteSavedReport(templateId);
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã —Å —ç—Ç–∏–º —à–∞–±–ª–æ–Ω–æ–º
            const areaId = this.areaPage.dataState?.getState('currentArea')?.id;
            if (areaId) {
                const allReports = await window.db.getFullReportsByArea(areaId);
                const relatedReports = allReports.filter(report => 
                    report.filter_template_id && report.filter_template_id === templateId
                );
                
                if (relatedReports.length > 0) {
                    if (this.debugEnabled) {
                        console.log(`üóëÔ∏è ReportsManager: –ù–∞–π–¥–µ–Ω–æ ${relatedReports.length} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
                    }
                    
                    // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç
                    for (const report of relatedReports) {
                        await window.db.deleteSavedReport(report.id);
                        if (this.debugEnabled) {
                            console.log(`üóëÔ∏è ReportsManager: –£–¥–∞–ª—ë–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç: ${report.name} (ID: ${report.id})`);
                        }
                    }
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            await this.loadFilterTemplatesData();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
            await this.loadSavedReportsData();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º SlimSelect
            await this.loadFilterTemplates();
            
            // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π —à–∞–±–ª–æ–Ω –±—ã–ª –≤—ã–±—Ä–∞–Ω, –æ—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            const currentTemplateId = $('#reportFilterId').val();
            if (currentTemplateId == templateId) {
                this.clearFilterForm();
            }
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ UIManager –≤–º–µ—Å—Ç–æ alert
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'success',
                    message: `üóëÔ∏è –®–∞–±–ª–æ–Ω "${template.name}" —É–¥–∞–ª—ë–Ω`,
                    duration: 3000
                });
            }

            if (this.debugEnabled) {
                console.log('üóëÔ∏è ReportsManager: –®–∞–±–ª–æ–Ω —É–¥–∞–ª—ë–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:', templateId);
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:', error);
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞');
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    clearFilterForm() {
        // –û—á–∏—â–∞–µ–º SlimSelect
        if (this.reportFilterSlimSelect) {
            this.reportFilterSlimSelect.setSelected('');
        } else {
            $('#reportFilterSelect').val('');
        }
        
        $('#reportFilterName').val('');
        $('#reportFilterId').val('');
        $('#deleteReportFilterBtn').prop('disabled', true);

        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        this.clearTableHighlight();

        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        $('.filter-indicator').remove();

        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç—á—ë—Ç–æ–≤ (–±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π)
        if (this.savedReportsDataTable) {
            this.savedReportsDataTable.clear().draw();
        }
    }

    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —à–∞–±–ª–æ–Ω–æ–≤
     */
    highlightTemplateInTable(templateId) {
        if (!this.filterTemplatesDataTable || !templateId) return;
        
        try {
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
            this.clearTableHighlight();
            
            // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º templateId
            const tableData = this.filterTemplatesDataTable.data();
            let rowIndex = -1;
            
            tableData.each((rowData, index) => {
                // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å data-template-id
                const actionsHtml = rowData[5]; // –ö–æ–ª–æ–Ω–∫–∞ "–î–µ–π—Å—Ç–≤–∏—è" - –∏–Ω–¥–µ–∫—Å 5
                if (actionsHtml.includes(`data-template-id="${templateId}"`)) {
                    rowIndex = index;
                    return false; // break –∏–∑ each
                }
            });
            
            if (rowIndex >= 0) {
                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                const row = this.filterTemplatesDataTable.row(rowIndex);
                const $rowElement = $(row.node());
                $rowElement.addClass('bg-blue-100 border-l-4 border-l-blue-500');
                
                if (this.debugEnabled) {
                    console.log('üéØ ReportsManager: –°—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–¥—Å–≤–µ—á–µ–Ω–∞:', templateId);
                }
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ:', error);
        }
    }

    /**
     * –£–±—Ä–∞—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —à–∞–±–ª–æ–Ω–æ–≤
     */
    clearTableHighlight() {
        if (!this.filterTemplatesDataTable) return;
        
        try {
            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
            const $table = $('#filterTemplatesTable');
            $table.find('tr').removeClass('bg-blue-100 border-l-4 border-l-blue-500');
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤
     */
    async updateReportsFilterIndicator(filterByTemplateId, reportsCount) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
            const $tableContainer = $('#savedReportsTable').closest('.datatables-container');
            
            // –£–¥–∞–ª—è–µ–º –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            $('.filter-indicator').remove();
            
            if (filterByTemplateId) {
                // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
                const template = await window.db.getSavedReport(filterByTemplateId);
                if (!template) {
                    // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                    if (this.debugEnabled) {
                        console.warn('‚ö†Ô∏è ReportsManager: –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞:', filterByTemplateId);
                    }
                    return;
                }
                const templateName = template.name;
                
                // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                const $indicator = $(`
                    <div class="filter-indicator bg-blue-50 border border-blue-200 rounded-md p-2 mb-3 flex items-center justify-between">
                        <div class="flex items-center">
                            <svg class="h-4 w-4 text-blue-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.414A1 1 0 013 6.707V4z"></path>
                            </svg>
                            <span class="text-sm text-blue-700">
                                <strong>–§–∏–ª—å—Ç—Ä –ø–æ —à–∞–±–ª–æ–Ω—É:</strong> "${templateName}" 
                                <span class="text-blue-600">(–Ω–∞–π–¥–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: ${reportsCount})</span>
                            </span>
                        </div>
                        <button id="clearReportsFilter" class="text-blue-600 hover:text-blue-800 text-sm underline">
                            –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—á—ë—Ç—ã
                        </button>
                    </div>
                `);
                
                // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
                $tableContainer.before($indicator);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—á—ë—Ç—ã"
                $('#clearReportsFilter').off('click').on('click', () => {
                    this.clearFilterForm();
                });

                if (this.debugEnabled) {
                    console.log(`üîç ReportsManager: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: "${templateName}" (${reportsCount} –æ—Ç—á—ë—Ç–æ–≤)`);
                }
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —à–∞–±–ª–æ–Ω–∞–º–∏
     */
    showTemplateLoadingIndicator(message = '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞...') {
        // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        let $indicator = $('#templateLoadingIndicator');
        if ($indicator.length === 0) {
            $indicator = $(`
                <div id="templateLoadingIndicator" class="fixed top-4 right-4 bg-blue-600 text-white px-4 py-3 rounded-lg shadow-lg z-50 flex items-center space-x-3">
                    <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    <span class="text-sm font-medium"></span>
                </div>
            `);
            $('body').append($indicator);
        }
        
        $indicator.find('span').text(message);
        $indicator.show();
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —à–∞–±–ª–æ–Ω–∞–º–∏
     */
    hideTemplateLoadingIndicator() {
        $('#templateLoadingIndicator').fadeOut(300);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    async saveCurrentReport() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞
            const templateId = $('#reportFilterId').val();
            const templateName = $('#reportFilterName').val()?.trim();
            
            if (!templateId || !templateName) {
                if (this.areaPage && this.areaPage.uiManager) {
                    this.areaPage.uiManager.showNotification({
                        type: 'warning',
                        message: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—á—ë—Ç–∞',
                        duration: 4000
                    });
                }
                return;
            }
            
            const areaId = this.areaPage.dataState?.getState('currentArea')?.id;
            if (!areaId) {
                if (this.areaPage && this.areaPage.uiManager) {
                    this.areaPage.uiManager.showNotification({
                        type: 'error',
                        message: '–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏',
                        duration: 4000
                    });
                }
                return;
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
            const currentDate = new Date().toLocaleDateString('ru-RU');
            const reportName = `${templateName} - ${currentDate}`;

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è reports_config
            const template = await window.db.getSavedReport(templateId);
            const reportsConfig = template?.filters?.reports_config || {
                liquidity: true,
                price_changes: true,
                market_corridor: true,
                comparative_analysis: true,
                flipping_profitability: true
            };

            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const reportData = {
                name: reportName,
                area_id: areaId,
                type: 'full_report',
                filter_template_id: templateId,
                filters: {
                    segment_id: this.currentSegment?.id || null,
                    segment_name: this.currentSegment?.name || '–í—Å—è –æ–±–ª–∞—Å—Ç—å',
                    subsegment_id: this.currentSubsegment?.id || null,
                    subsegment_name: this.currentSubsegment?.name || null,
                    date_from: this.dateFromFilter?.value || null,
                    date_to: this.dateToFilter?.value || null,
                    reports_config: reportsConfig // –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–∞
                },
                // ‚úÖ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
                charts_data: await this.getAllChartsData(reportsConfig),
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                comparative_analysis: null,
                // ‚úÖ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–ª–∏–ø–ø–∏–Ω–≥ –æ—Ç—á—ë—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç—á—ë—Ç –≤–∫–ª—é—á—ë–Ω
                flipping_data: null,
                // ‚úÖ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥—É–±–ª–µ–π
                duplicates_data: null
            };

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–ª–∏–ø–ø–∏–Ω–≥–∞
            if (reportsConfig.flipping_profitability) {
                console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–ª–∏–ø–ø–∏–Ω–≥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...');
                const rawFlippingData = await this.getCurrentFlippingData();
                console.log('üìä –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–ª–∏–ø–ø–∏–Ω–≥–∞:', {
                    hasData: !!rawFlippingData,
                    objectsCount: rawFlippingData?.objects?.length || 0,
                    firstObject: rawFlippingData?.objects?.[0]
                });

                const sanitizedFlippingData = this.sanitizeDataForStorage(rawFlippingData);
                console.log('üßπ –ü–æ—Å–ª–µ sanitize:', {
                    hasData: !!sanitizedFlippingData,
                    objectsCount: sanitizedFlippingData?.objects?.length || 0
                });

                reportData.flipping_data = sanitizedFlippingData;
            }

            // –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ flipping_data
            console.log('üíæ ReportsManager.saveCurrentReport - –∏—Ç–æ–≥–æ–≤—ã–π flipping_data:', {
                configEnabled: reportsConfig.flipping_profitability,
                hasFlippingData: !!reportData.flipping_data,
                objectsCount: reportData.flipping_data?.objects?.length || 0
            });

            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—É–±–ª–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ collectReportDataForDuplicates –¥–ª—è —Å–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤
            try {
                const duplicatesInputData = await this.collectReportDataForDuplicates(reportData.filters);
                if (duplicatesInputData) {
                    reportData.duplicates_data = this.sanitizeDataForStorage(
                        this.buildDuplicatesData(
                            duplicatesInputData.objects,
                            duplicatesInputData.listings,
                            duplicatesInputData.addresses
                        )
                    );
                    if (this.debugEnabled) {
                        console.log('‚úÖ ReportsManager: –î–∞–Ω–Ω—ã–µ –¥—É–±–ª–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ —Å–æ–±—Ä–∞–Ω—ã', {
                            objects: duplicatesInputData.objects.length,
                            listings: duplicatesInputData.listings.length,
                            addresses: duplicatesInputData.addresses.length
                        });
                    }
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è ReportsManager: –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥—É–±–ª–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞:', error);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞ –ò –æ—Ç—á—ë—Ç –≤–∫–ª—é—á—ë–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if (reportsConfig.comparative_analysis &&
                this.areaPage.comparativeAnalysisManager &&
                this.areaPage.comparativeAnalysisManager.evaluations) {
                reportData.comparative_analysis = {
                    evaluations: Object.fromEntries(this.areaPage.comparativeAnalysisManager.evaluations),
                    corridors: this.areaPage.comparativeAnalysisManager.corridors,
                    selected_object_id: this.areaPage.comparativeAnalysisManager.selectedObjectId,
                    selected_listing_id: this.areaPage.comparativeAnalysisManager.selectedListingId
                };
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            if (this.debugEnabled) {
                console.log('üìä ReportsManager: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç —Å –¥–∞–Ω–Ω—ã–º–∏:', {
                    name: reportData.name,
                    hasChartsData: !!reportData.charts_data,
                    chartsDataKeys: reportData.charts_data ? Object.keys(reportData.charts_data) : [],
                    hasComparativeAnalysis: !!reportData.comparative_analysis,
                    hasFlippingData: !!reportData.flipping_data
                });
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É/–ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            let statsAddresses = 0, statsObjects = 0, statsListings = 0;

            if (this.currentSegment) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–∞
                    if (this.currentSegment.filters && this.currentSegment.filters.addresses) {
                        statsAddresses = this.currentSegment.filters.addresses.length;

                        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –æ–±—ä–µ–∫—Ç—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞
                        let allSegmentObjects = [];

                        for (const addressId of this.currentSegment.filters.addresses) {
                            try {
                                const addressObjects = await window.db.getObjectsByAddress(addressId);
                                if (addressObjects && addressObjects.length > 0) {
                                    allSegmentObjects.push(...addressObjects);
                                }
                            } catch (error) {
                                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É:', addressId, error);
                            }
                        }

                        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                        let filteredObjects = allSegmentObjects;
                        if (this.currentSubsegment) {
                            filteredObjects = allSegmentObjects.filter(obj => {
                                return this.objectMatchesSubsegment(obj, this.currentSubsegment);
                            });
                        }

                        statsObjects = filteredObjects.length;

                        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                        for (const object of filteredObjects) {
                            try {
                                // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
                                const objectListings = await window.db.getByIndex('listings', 'object_id', object.id);
                                if (objectListings) {
                                    statsListings += objectListings.length;
                                }
                            } catch (e) {
                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥—Å—á—ë—Ç–∞
                            }
                        }
                    }
                } catch (error) {
                    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
                }
            }

            // –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º–æ–≥–æ –æ—Ç—á—ë—Ç–∞
            console.log('üíæ ReportsManager: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞:', {
                addresses: statsAddresses,
                objects: statsObjects,
                listings: statsListings,
                segment: this.currentSegment?.name || '–í—Å—è –æ–±–ª–∞—Å—Ç—å',
                subsegment: this.currentSubsegment?.name || '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã',
                report_name: reportData.name,
                date_from: reportData.filters.date_from,
                date_to: reportData.filters.date_to
            });

            console.log('üíæ –ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î - reportData.flipping_data:', {
                hasFlippingData: !!reportData.flipping_data,
                objectsCount: reportData.flipping_data?.objects?.length || 0,
                firstObject: reportData.flipping_data?.objects?.[0]
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
            await window.db.saveSavedReport(reportData);

            console.log('‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î, ID:', reportData.id);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            await this.loadSavedReportsData();
            
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'success',
                    message: `üìä –û—Ç—á—ë—Ç "${reportName}" —Å–æ—Ö—Ä–∞–Ω—ë–Ω`,
                    duration: 3000
                });
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞:', error);
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'error',
                    message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞',
                    duration: 5000
                });
            }
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
     */
    async loadSavedReport(reportId) {
        try {
            const report = await window.db.getSavedReport(reportId);
            if (!report) {
                alert('–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if (report.filters.segment_id && this.segments.length > 0) {
                const segment = this.segments.find(s => s.id === report.filters.segment_id);
                if (segment && this.segmentSlimSelect) {
                    this.segmentSlimSelect.setSelected([report.filters.segment_id.toString()]);
                    await this.handleSegmentChange(report.filters.segment_id);
                }
            } else if (this.segmentSlimSelect) {
                this.segmentSlimSelect.setSelected([]);
                await this.handleSegmentChange(null);
            }
            
            if (report.filters.subsegment_id && this.subsegments.length > 0) {
                const subsegment = this.subsegments.find(s => s.id === report.filters.subsegment_id);
                if (subsegment && this.subsegmentSlimSelect) {
                    this.subsegmentSlimSelect.setSelected([report.filters.subsegment_id.toString()]);
                    await this.handleSubsegmentChange(report.filters.subsegment_id);
                }
            }
            
            if (report.filters.date_from && this.dateFromFilter) {
                this.dateFromFilter.value = report.filters.date_from;
            }
            
            if (report.filters.date_to && this.dateToFilter) {
                this.dateToFilter.value = report.filters.date_to;
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if (report.comparative_analysis && this.areaPage.comparativeAnalysisManager) {
                const cam = this.areaPage.comparativeAnalysisManager;
                cam.evaluations = new Map(Object.entries(report.comparative_analysis.evaluations));
                cam.corridors = report.comparative_analysis.corridors;
                cam.selectedObjectId = report.comparative_analysis.selected_object_id;
                cam.selectedListingId = report.comparative_analysis.selected_listing_id;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                cam.saveComparativeState();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç—ã
            await this.updateReportsVisibility();
            
            alert(`–û—Ç—á—ë—Ç "${report.name}" –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞');
        }
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
     */
    async deleteSavedReport(reportId) {
        try {
            const report = await window.db.getSavedReport(reportId);
            if (!report) {
                alert('–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—á—ë—Ç "${report.name}"?`)) return;
            
            await window.db.deleteSavedReport(reportId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            await this.loadSavedReportsData();
            
            alert(`–û—Ç—á—ë—Ç "${report.name}" —É–¥–∞–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ!`);
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞');
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
     */
    async deleteReportWithConfirmation(reportId) {
        let button, originalText;
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
            button = $(`[data-report-id="${reportId}"][data-action="delete"]`);
            originalText = button.html();
            button.html('‚è≥').prop('disabled', true);
            
            const report = await window.db.getSavedReport(reportId);
            if (!report) {
                if (this.areaPage && this.areaPage.uiManager) {
                    this.areaPage.uiManager.showNotification({
                        type: 'error',
                        message: '–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                        duration: 3000
                    });
                }
                return;
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞
            button.html(originalText).prop('disabled', false);
            
            if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—á—ë—Ç "${report.name}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
                return;
            }
            
            // –°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            button.html('‚è≥').prop('disabled', true);
            
            await window.db.deleteSavedReport(reportId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            await this.loadSavedReportsData();
            
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'success',
                    message: `üóëÔ∏è –û—Ç—á—ë—Ç "${report.name}" —É–¥–∞–ª—ë–Ω`,
                    duration: 3000
                });
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞:', error);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if (button && originalText) {
                button.html(originalText).prop('disabled', false);
            }
            
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'error',
                    message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞',
                    duration: 5000
                });
            }
        }
    }

    // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –®–ê–ë–õ–û–ù–ê–ú–ò –§–ò–õ–¨–¢–†–û–í =====

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async initFilterTemplates() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã
            await this.loadFilterTemplates();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            $('#saveReportFilterBtn').off('click').on('click', () => this.saveCurrentAsFilterTemplate());
            $('#deleteReportFilterBtn').off('click').on('click', () => this.deleteSelectedFilterTemplate());
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è reportFilterSelect —Ç–µ–ø–µ—Ä—å –≤ SlimSelect (initializeSlimSelects)
            
            if (this.debugEnabled) {
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
     */
    async loadFilterTemplates() {
        try {
            const areaId = this.areaPage.dataState?.getState('currentArea')?.id;
            if (!areaId) return;

            const filterTemplates = await window.db.getFilterTemplatesByArea(areaId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ SlimSelect API
            if (this.reportFilterSlimSelect) {
                const options = [
                    { text: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä', value: '' }
                ];
                
                filterTemplates.forEach(template => {
                    options.push({ 
                        text: template.name, 
                        value: template.id.toString() 
                    });
                });

                this.reportFilterSlimSelect.setData(options);
                
                if (this.debugEnabled) {
                    console.log('üîÑ ReportsManager: –®–∞–±–ª–æ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ SlimSelect:', filterTemplates.length);
                }
            } else {
                // Fallback –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ SlimSelect –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                const $select = $('#reportFilterSelect');
                $select.empty();
                $select.append('<option value="">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä</option>');
                
                filterTemplates.forEach(template => {
                    $select.append(`<option value="${template.id}">${template.name}</option>`);
                });

                if (this.debugEnabled) {
                    console.log('‚ö†Ô∏è ReportsManager: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ (SlimSelect –Ω–µ –Ω–∞–π–¥–µ–Ω)');
                }
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤
     */
    getReportsConfig() {
        return {
            liquidity: document.getElementById('liquidityReportCheck')?.checked || false,
            price_changes: document.getElementById('priceChangesReportCheck')?.checked || false,
            market_corridor: document.getElementById('marketCorridorReportCheck')?.checked || false,
            comparative_analysis: document.getElementById('comparativeAnalysisReportCheck')?.checked || false,
            flipping_profitability: document.getElementById('flippingProfitabilityReportCheck')?.checked || false
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω
     * (–∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ "–û—Ç—á—ë—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞")
     */
    getTemplateReportsConfig() {
        return {
            liquidity: document.getElementById('templateLiquidityCheck')?.checked || false,
            price_changes: document.getElementById('templatePriceChangesCheck')?.checked || false,
            market_corridor: document.getElementById('templateMarketCorridorCheck')?.checked || false,
            comparative_analysis: document.getElementById('templateComparativeAnalysisCheck')?.checked || false,
            flipping_profitability: document.getElementById('templateFlippingCheck')?.checked || false
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    getComparativeAnalysisConfig() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ areaPage
            const comparativeManager = this.areaPage?.comparativeAnalysisManager;
            if (comparativeManager && typeof comparativeManager.getCurrentSettings === 'function') {
                return comparativeManager.getCurrentSettings();
            }
            
            return null;
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
            return null;
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–∞
     */
    async applyReportsConfig(reportsConfig) {
        try {
            if (!reportsConfig) return;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
            const checkboxes = {
                'liquidityReportCheck': reportsConfig.liquidity,
                'priceChangesReportCheck': reportsConfig.price_changes,
                'marketCorridorReportCheck': reportsConfig.market_corridor,
                'comparativeAnalysisReportCheck': reportsConfig.comparative_analysis,
                'flippingProfitabilityReportCheck': reportsConfig.flipping_profitability
            };

            Object.entries(checkboxes).forEach(([checkboxId, checked]) => {
                const checkbox = document.getElementById(checkboxId);
                if (checkbox) {
                    checkbox.checked = checked;
                }
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –æ—Ç—á—ë—Ç–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await this.updateReportsVisibility();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤
            this.saveReportsCheckboxState();

            if (this.debugEnabled) {
                console.log('üìã ReportsManager: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞:', reportsConfig);
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤:', error);
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
     */
    async applyComparativeAnalysisConfig(comparativeConfig) {
        try {
            if (!comparativeConfig) return;

            // –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            const comparativeManager = this.areaPage?.comparativeAnalysisManager;
            if (comparativeManager && typeof comparativeManager.applySettings === 'function') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –µ—Å–ª–∏ –æ–Ω —Å–∫—Ä—ã—Ç
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage, —Ç.–∫. –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
                await comparativeManager.showComparativeAnalysis(true);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
                await comparativeManager.applySettings(comparativeConfig);
                
                if (this.debugEnabled) {
                    console.log('üìä ReportsManager: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:', comparativeConfig);
                }
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–∫ —à–∞–±–ª–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞
     */
    async saveCurrentAsFilterTemplate() {
        try {
            const filterName = $('#reportFilterName').val()?.trim();
            if (!filterName) {
                alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞');
                return;
            }
            
            const areaId = this.areaPage.dataState?.getState('currentArea')?.id;
            if (!areaId) {
                alert('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∏–ª—å—Ç—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            const existingTemplates = await window.db.getFilterTemplatesByArea(areaId);
            const existingTemplate = existingTemplates.find(t => t.name === filterName);
            const filterId = $('#reportFilterId').val();
            
            if (existingTemplate && existingTemplate.id !== filterId) {
                alert('–§–∏–ª—å—Ç—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return;
            }
            
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const filterData = {
                id: filterId || undefined,
                name: filterName,
                area_id: areaId,
                type: 'filter_template',
                filters: {
                    // –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                    segment_id: this.currentSegment?.id || null,
                    subsegment_id: this.currentSubsegment?.id || null,
                    date_from: $('#reportsDateFrom').val() || null,
                    date_to: $('#reportsDateTo').val() || null,

                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ - –±–µ—Ä—ë–º –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ "–û—Ç—á—ë—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞"
                    reports_config: this.getTemplateReportsConfig(),

                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    comparative_analysis_config: this.getComparativeAnalysisConfig()
                }
            };
            
            const savedFilter = await window.db.saveSavedReport(filterData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
            await this.loadFilterTemplates();
            await this.loadFilterTemplatesData();
            
            // –í—ã–±–∏—Ä–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
            if (this.reportFilterSlimSelect) {
                this.reportFilterSlimSelect.setSelected(savedFilter.id.toString());
            } else {
                $('#reportFilterSelect').val(savedFilter.id);
            }
            $('#reportFilterId').val(savedFilter.id);
            
            // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            $('#deleteReportFilterBtn').prop('disabled', false);
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ UIManager –≤–º–µ—Å—Ç–æ alert
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'success',
                    message: `üíæ –®–∞–±–ª–æ–Ω "${filterName}" —Å–æ—Ö—Ä–∞–Ω—ë–Ω`,
                    duration: 3000
                });
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            this.hideUnsavedChangesIndicator();
            this.hideComparativeUnsavedIndicator();
            
            if (this.debugEnabled) {
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    async onFilterTemplateSelect(templateId) {
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
            this.isRestoringTemplate = true;
            
            const $deleteBtn = $('#deleteReportFilterBtn');
            const $nameField = $('#reportFilterName');
            const $idField = $('#reportFilterId');
            
            if (!templateId) {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
                $deleteBtn.prop('disabled', true);
                $nameField.val('');
                $idField.val('');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç—á—ë—Ç—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                await this.loadSavedReportsData(null);
                this.isRestoringTemplate = false; // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showTemplateLoadingIndicator('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞...');
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            const template = await window.db.getSavedReport(templateId);
            if (!template) {
                this.hideTemplateLoadingIndicator();
                this.isRestoringTemplate = false; // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
                alert('–®–∞–±–ª–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
            $nameField.val(template.name);
            $idField.val(template.id);
            $deleteBtn.prop('disabled', false);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if (template.filters) {
                // –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                if (template.filters.segment_id) {
                    this.showTemplateLoadingIndicator('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞...');
                    await this.loadSegmentById(template.filters.segment_id);
                }
                if (template.filters.subsegment_id) {
                    this.showTemplateLoadingIndicator('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞...');
                    await this.loadSubsegmentById(template.filters.subsegment_id);
                }
                if (template.filters.date_from) {
                    $('#reportsDateFrom').val(template.filters.date_from);
                }
                if (template.filters.date_to) {
                    $('#reportsDateTo').val(template.filters.date_to);
                }

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á—ë—Ç–æ–≤
                if (template.filters.reports_config) {
                    this.showTemplateLoadingIndicator('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—á—ë—Ç–æ–≤...');
                    await this.applyReportsConfig(template.filters.reports_config);
                }

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                if (template.filters.comparative_analysis_config) {
                    this.showTemplateLoadingIndicator('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
                    await this.applyComparativeAnalysisConfig(template.filters.comparative_analysis_config);
                }
            }

            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ —à–∞–±–ª–æ–Ω–æ–≤
            this.highlightTemplateInTable(templateId);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —à–∞–±–ª–æ–Ω—É
            this.showTemplateLoadingIndicator('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤...');
            await this.loadSavedReportsData(templateId || null);

            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.hideTemplateLoadingIndicator();
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
            this.hideUnsavedChangesIndicator();
            this.hideComparativeUnsavedIndicator();
            
            if (this.debugEnabled) {
                console.log('üìã ReportsManager: –®–∞–±–ª–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–∏–º–µ–Ω—ë–Ω:', template ? template.name : '–ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä');
            }
            
        } catch (error) {
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            this.hideTemplateLoadingIndicator();
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞');
        } finally {
            // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            this.isRestoringTemplate = false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ ID (–¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞)
     */
    async loadSegmentById(segmentId) {
        try {
            const segment = await window.db.getSegment(segmentId);
            if (segment && this.segmentSlimSelect) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Ñ–ª–∞–≥–æ–º isRestoringTemplate)
                this.segmentSlimSelect.setSelected([segmentId.toString()]);
                this.currentSegment = segment;
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                await this.handleSegmentChangeForTemplate(segmentId);
            }
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ (–±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤)
     */
    async handleSegmentChangeForTemplate(segmentId) {
        try {
            this.currentSegment = segmentId ? this.segments.find(s => s.id === segmentId || s.id === parseInt(segmentId)) : null;
            this.currentSubsegment = null;
            
            if (!segmentId) {
                // –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                if (this.subsegmentSlimSelect) {
                    this.subsegmentSlimSelect.setData([{ text: '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã', value: '' }]);
                    this.subsegmentSlimSelect.enable(false);
                    this.subsegmentSlimSelect.setSelected([]);
                }
                this.subsegments = [];
            } else {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                const subsegments = await this.database.getSubsegmentsBySegment(segmentId);
                
                // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
                this.subsegmentFilter.innerHTML = '<option value="">–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã</option>';
                subsegments.forEach(subsegment => {
                    const option = document.createElement('option');
                    option.value = subsegment.id;
                    option.textContent = subsegment.name;
                    this.subsegmentFilter.appendChild(option);
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SlimSelect
                if (this.subsegmentSlimSelect) {
                    this.subsegmentSlimSelect.setData([
                        { text: '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã', value: '' },
                        ...subsegments.map(subsegment => ({ 
                            text: subsegment.name, 
                            value: subsegment.id.toString() 
                        }))
                    ]);
                    this.subsegmentSlimSelect.enable(true);
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã
                this.subsegments = subsegments;
            }

            // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º updateReportsVisibility() –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ ID (–¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞)
     */
    async loadSubsegmentById(subsegmentId) {
        try {
            const subsegment = await window.db.getSubsegment(subsegmentId);
            if (subsegment && this.subsegmentSlimSelect) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Ñ–ª–∞–≥–æ–º isRestoringTemplate)
                this.subsegmentSlimSelect.setSelected([subsegmentId.toString()]);
                this.currentSubsegment = subsegment;
            }
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞:', error);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    async deleteSelectedFilterTemplate() {
        try {
            const templateId = $('#reportFilterId').val();
            if (!templateId) {
                alert('–ù–µ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                return;
            }
            
            const template = await window.db.getSavedReport(templateId);
            if (!template) {
                alert('–®–∞–±–ª–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞ "${template.name}"?`)) return;
            
            await window.db.deleteSavedReport(templateId);
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            if (this.reportFilterSlimSelect) {
                this.reportFilterSlimSelect.setSelected('');
            } else {
                $('#reportFilterSelect').val('');
            }
            $('#reportFilterName').val('');
            $('#reportFilterId').val('');
            $('#deleteReportFilterBtn').prop('disabled', true);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
            await this.loadFilterTemplates();
            await this.loadFilterTemplatesData();
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ UIManager –≤–º–µ—Å—Ç–æ alert
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'success',
                    message: `üóëÔ∏è –®–∞–±–ª–æ–Ω "${template.name}" —É–¥–∞–ª—ë–Ω`,
                    duration: 3000
                });
            }
            
            if (this.debugEnabled) {
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞:', error);
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞');
        }
    }

    // ===== –ò–ù–î–ò–ö–ê–¢–û–†–´ –ù–ï–°–û–•–†–ê–ù–Å–ù–ù–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô =====

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
     */
    showUnsavedChangesIndicator() {
        const indicator = document.getElementById('unsavedChangesIndicator');
        if (indicator) {
            indicator.classList.remove('hidden');
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
     */
    hideUnsavedChangesIndicator() {
        const indicator = document.getElementById('unsavedChangesIndicator');
        if (indicator) {
            indicator.classList.add('hidden');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
     */
    showComparativeUnsavedIndicator() {
        const indicator = document.getElementById('comparativeUnsavedIndicator');
        if (indicator) {
            indicator.classList.remove('hidden');
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
     */
    hideComparativeUnsavedIndicator() {
        const indicator = document.getElementById('comparativeUnsavedIndicator');
        if (indicator) {
            indicator.classList.add('hidden');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    checkForUnsavedChanges() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        const selectedTemplateId = $('#reportFilterId').val();
        
        if (!selectedTemplateId) {
            // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            const hasActiveFilters = this.hasActiveFilters();
            if (hasActiveFilters) {
                this.showUnsavedChangesIndicator();
            } else {
                this.hideUnsavedChangesIndicator();
            }
            return;
        }

        // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞–Ω, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏
        this.compareWithSavedTemplate(selectedTemplateId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    hasActiveFilters() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        const hasSegment = this.currentSegment && this.currentSegment.id;
        const hasSubsegment = this.currentSubsegment && this.currentSubsegment.id;
        const hasDateFilter = this.dateFromFilter?.value || this.dateToFilter?.value;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á—ë—Ç–æ–≤
        const hasReportsConfig = this.hasNonDefaultReportsConfig();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        const hasComparativeChanges = this.hasComparativeAnalysisChanges();

        return hasSegment || hasSubsegment || hasDateFilter || hasReportsConfig || hasComparativeChanges;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    hasNonDefaultReportsConfig() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –æ—Ç—á—ë—Ç–æ–≤
        const checkboxes = document.querySelectorAll('#reportsConfigContainer input[type="checkbox"]');
        for (const checkbox of checkboxes) {
            // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –Ω–µ –æ—Ç–º–µ—á–µ–Ω (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ –≤–∫–ª—é—á–µ–Ω—ã), —Ç–æ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (!checkbox.checked) {
                return true;
            }
        }
        return false;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
     */
    hasComparativeAnalysisChanges() {
        const comparativeManager = this.areaPage?.comparativeAnalysisManager;
        if (!comparativeManager) return false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ü–µ–Ω–æ–∫
        const hasEvaluations = comparativeManager.evaluations && comparativeManager.evaluations.size > 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        const hasSelectedObject = comparativeManager.selectedObjectId;

        return hasEvaluations || hasSelectedObject;
    }

    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º
     */
    async compareWithSavedTemplate(templateId) {
        try {
            const template = await window.db.getSavedReport(templateId);
            if (!template) {
                this.hideUnsavedChangesIndicator();
                return;
            }

            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —à–∞–±–ª–æ–Ω–æ–º
            const currentConfig = this.getCurrentFiltersConfig();
            const hasChanges = !this.deepEqual(currentConfig, template.filters);

            if (hasChanges) {
                this.showUnsavedChangesIndicator();
            } else {
                this.hideUnsavedChangesIndicator();
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —à–∞–±–ª–æ–Ω–æ–º:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    getCurrentFiltersConfig() {
        return {
            segment_id: this.currentSegment?.id || null,
            subsegment_id: this.currentSubsegment?.id || null,
            date_from: this.dateFromFilter?.value || null,
            date_to: this.dateToFilter?.value || null,
            reports_config: this.getReportsConfig(),
            comparative_analysis_config: this.getComparativeAnalysisConfig()
        };
    }

    /**
     * –ì–ª—É–±–æ–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
     */
    deepEqual(obj1, obj2) {
        if (obj1 === obj2) return true;
        if (!obj1 || !obj2) return false;
        if (typeof obj1 !== 'object' || typeof obj2 !== 'object') return false;

        const keys1 = Object.keys(obj1);
        const keys2 = Object.keys(obj2);

        if (keys1.length !== keys2.length) return false;

        for (const key of keys1) {
            if (!keys2.includes(key)) return false;
            if (!this.deepEqual(obj1[key], obj2[key])) return false;
        }

        return true;
    }

    // ===== –≠–ö–°–ü–û–†–¢ –û–¢–ß–Å–¢–û–í –í JSON =====

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
     */
    async downloadReportAsJSON(reportId) {
        let button, originalText;
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            button = $(`[data-report-id="${reportId}"]`);
            originalText = button.html();
            button.html('‚è≥ –≠–∫—Å–ø–æ—Ä—Ç...').prop('disabled', true);
            
            if (this.debugEnabled) {
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç
            const report = await window.db.getSavedReport(reportId);
            if (!report) {
                alert('–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞
            const exportData = await this.collectReportExportData(report);
            
            // –°–æ–∑–¥–∞—ë–º –∏–º—è —Ñ–∞–π–ª–∞
            const fileName = this.generateExportFileName(report.name);
            
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            this.downloadJSONFile(exportData, fileName);
            
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'success',
                    message: `üì• –û—Ç—á—ë—Ç "${report.name}" —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω`,
                    duration: 3000
                });
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á—ë—Ç–∞:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'error',
                    message: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á—ë—Ç–∞',
                    duration: 5000
                });
            } else {
                alert('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á—ë—Ç–∞');
            }
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (button && originalText) {
                button.html(originalText).prop('disabled', false);
            }
        }
    }

    /**
     * –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    async collectReportExportData(report) {
        const areaId = report.area_id;

        console.log('üì¶ collectReportExportData - –≤—Ö–æ–¥—è—â–∏–π report:', {
            hasFlippingData: !!report.flipping_data,
            flippingObjectsCount: report.flipping_data?.objects?.length || 0,
            hasChartsData: !!report.charts_data,
            hasFilters: !!report.filters
        });

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        const area = await window.db.getMapArea(areaId);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
        let addresses = [];
        let segments = [];
        let subsegments = [];
        let realEstateObjects = [];
        let listings = [];

        if (!report.filters.segment_id) {
            // –£–†–û–í–ï–ù–¨ 1: –¢–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç—å - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë
            addresses = await window.db.getAddressesInMapArea(areaId);
            segments = await window.db.getSegmentsByMapArea(areaId);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            for (const segment of segments) {
                const segmentSubsegments = await window.db.getSubsegmentsBySegment(segment.id);
                subsegments.push(...segmentSubsegments);
            }

        } else if (!report.filters.subsegment_id) {
            // –£–†–û–í–ï–ù–¨ 2: –í—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞
            try {
                const segment = await window.db.getSegment(report.filters.segment_id);

                if (segment && segment.filters && segment.filters.addresses) {
                    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–∞
                    for (const addressId of segment.filters.addresses) {
                        try {
                            const address = await window.db.getAddress(addressId);
                            if (address) addresses.push(address);
                        } catch (error) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —Å–µ–≥–º–µ–Ω—Ç–∞:', addressId, error);
                        }
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞
                    for (const addressId of segment.filters.addresses) {
                        try {
                            const addressObjects = await window.db.getObjectsByAddress(addressId);
                            if (addressObjects && addressObjects.length > 0) {
                                realEstateObjects.push(...addressObjects);
                            }
                        } catch (error) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É:', addressId, error);
                        }
                    }
                }

                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                subsegments = await window.db.getSubsegmentsBySegment(report.filters.segment_id);

            } catch (error) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞:', report.filters.segment_id, error);
            }

        } else {
            // –£–†–û–í–ï–ù–¨ 3: –í—ã–±—Ä–∞–Ω –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
            try {
                const targetSubsegment = await window.db.getSubsegment(report.filters.subsegment_id);
                const segment = await window.db.getSegment(report.filters.segment_id);

                if (segment && segment.filters && segment.filters.addresses && targetSubsegment) {
                    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–∞
                    for (const addressId of segment.filters.addresses) {
                        try {
                            const address = await window.db.getAddress(addressId);
                            if (address) addresses.push(address);
                        } catch (error) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —Å–µ–≥–º–µ–Ω—Ç–∞:', addressId, error);
                        }
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –æ–±—ä–µ–∫—Ç—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞
                    let allSegmentObjects = [];
                    for (const addressId of segment.filters.addresses) {
                        try {
                            const addressObjects = await window.db.getObjectsByAddress(addressId);
                            if (addressObjects && addressObjects.length > 0) {
                                allSegmentObjects.push(...addressObjects);
                            }
                        } catch (error) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É:', addressId, error);
                        }
                    }

                    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
                    realEstateObjects = allSegmentObjects.filter(obj => {
                        return this.objectMatchesSubsegment(obj, targetSubsegment);
                    });
                }

            } catch (error) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞:', report.filters.subsegment_id, error);
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        for (const object of realEstateObjects) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
                const objectListings = await window.db.getByIndex('listings', 'object_id', object.id);

                if (objectListings && objectListings.length > 0) {
                    listings.push(...objectListings);
                }
            } catch (listingError) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', object.id, listingError);
            }
        }

        // üîß –û–ë–û–ì–ê–©–ï–ù–ò–ï –ê–î–†–ï–°–û–í –°–ü–†–ê–í–û–ß–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
        if (addresses.length > 0) {
            if (this.debugEnabled) {
                console.log('üìã ReportsManager: –û–±–æ–≥–∞—â–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
            }

            addresses = await this.enrichAddressesWithReferenceData(addresses);

            if (this.debugEnabled) {
                console.log('‚úÖ ReportsManager: –ê–¥—Ä–µ—Å–∞ –æ–±–æ–≥–∞—â–µ–Ω—ã —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
            }
        }

        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—É–±–ª–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É—è —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –ª–∏—Å—Ç–∏–Ω–≥–∏
        let duplicatesData = null;
        try {
            duplicatesData = this.buildDuplicatesData(realEstateObjects, listings, addresses);
            if (this.debugEnabled) {
                console.log('‚úÖ ReportsManager: –î–∞–Ω–Ω—ã–µ –¥—É–±–ª–µ–π —Å–æ–±—Ä–∞–Ω—ã', {
                    tableDataCount: duplicatesData?.tableData?.length || 0,
                    addressesMapKeys: duplicatesData?.addressesMap ? Object.keys(duplicatesData.addressesMap).length : 0
                });
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è ReportsManager: –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥—É–±–ª–µ–π:', error);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–∫—Å–ø–æ—Ä—Ç–∞
        const exportData = {
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_info: {
                export_date: new Date().toISOString(),
                version: "1.0",
                area_id: areaId,
                report_id: report.id,
                generated_by: "Neocenka Extension"
            },
            
            // –î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞
            report: {
                id: report.id,
                name: report.name,
                type: report.type,
                filter_template_id: report.filter_template_id,
                filters: report.filters,
                comparative_analysis: report.comparative_analysis,
                charts_data: report.charts_data,
                flipping_data: report.flipping_data,
                created_at: report.created_at
            },
            
            // –î–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
            area: area,
            
            // –ê–¥—Ä–µ—Å–∞ (—É—Ä–æ–≤–µ–Ω—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±–æ—Ä–∞)
            addresses: addresses,

            // –°–µ–≥–º–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
            segments: segments.length > 0 ? segments.map(segment => ({
                ...segment,
                subsegments: subsegments.filter(sub => sub.segment_id === segment.id)
            })) : [],
            
            // –û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
            real_estate_objects: realEstateObjects.map(object => ({
                ...object,
                listings: listings.filter(listing => listing.object_id === object.id)
            })),

            // –î–∞–Ω–Ω—ã–µ –¥—É–±–ª–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            duplicates_data: duplicatesData
        };
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ HTML –æ—Ç—á—ë—Ç–∞
        const exportLevel = !report.filters.segment_id ? '–û–ë–õ–ê–°–¢–¨' :
                           !report.filters.subsegment_id ? '–°–ï–ì–ú–ï–ù–¢' : '–ü–û–î–°–ï–ì–ú–ï–ù–¢';

        console.log('üìä ReportsManager: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã HTML —ç–∫—Å–ø–æ—Ä—Ç–∞:', {
            level: exportLevel,
            addresses: addresses.length,
            segments: segments.length,
            subsegments: subsegments.length,
            objects: realEstateObjects.length,
            listings: listings.length,
            segment: report.filters.segment_name || '–í—Å—è –æ–±–ª–∞—Å—Ç—å',
            subsegment: report.filters.subsegment_name || '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã',
            report_name: report.name,
            hasFlippingData: !!exportData.report.flipping_data,
            flippingObjectsCount: exportData.report.flipping_data?.objects?.length || 0
        });

        return exportData;
    }

    /**
     * –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–µ–π
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ collectReportExportData
     */
    async collectReportDataForDuplicates(filters) {
        try {
            const areaId = this.areaPage?.currentArea?.id;
            if (!areaId) return null;

            let addresses = [];
            let realEstateObjects = [];
            let listings = [];

            const segmentId = filters.segment_id;
            const subsegmentId = filters.subsegment_id;

            if (!segmentId) {
                // –£–†–û–í–ï–ù–¨ 1: –¢–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç—å - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë
                addresses = await window.db.getAddressesInMapArea(areaId);
            } else if (!subsegmentId) {
                // –£–†–û–í–ï–ù–¨ 2: –í—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç
                const segment = await window.db.getSegment(segmentId);
                if (segment && segment.filters && segment.filters.addresses) {
                    for (const addressId of segment.filters.addresses) {
                        try {
                            const address = await window.db.getAddress(addressId);
                            if (address) addresses.push(address);

                            const addressObjects = await window.db.getObjectsByAddress(addressId);
                            if (addressObjects && addressObjects.length > 0) {
                                realEstateObjects.push(...addressObjects);
                            }
                        } catch (error) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–¥—Ä–µ—Å—É:', addressId, error);
                        }
                    }
                }
            } else {
                // –£–†–û–í–ï–ù–¨ 3: –í—ã–±—Ä–∞–Ω –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç
                const segment = await window.db.getSegment(segmentId);
                const subsegment = await window.db.getSubsegment(subsegmentId);

                if (segment && segment.filters && segment.filters.addresses && subsegment) {
                    for (const addressId of segment.filters.addresses) {
                        try {
                            const address = await window.db.getAddress(addressId);
                            if (address) addresses.push(address);

                            const addressObjects = await window.db.getObjectsByAddress(addressId);
                            if (addressObjects && addressObjects.length > 0) {
                                realEstateObjects.push(...addressObjects);
                            }
                        } catch (error) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–¥—Ä–µ—Å—É:', addressId, error);
                        }
                    }

                    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É—Å–ª–æ–≤–∏—è–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
                    realEstateObjects = realEstateObjects.filter(obj => {
                        return this.objectMatchesSubsegment(obj, subsegment);
                    });
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            for (const object of realEstateObjects) {
                try {
                    const objectListings = await window.db.getByIndex('listings', 'object_id', object.id);
                    if (objectListings && objectListings.length > 0) {
                        listings.push(...objectListings);
                    }
                } catch (error) {
                    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', object.id, error);
                }
            }

            return {
                objects: realEstateObjects,
                listings: listings,
                addresses: addresses
            };

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥—É–±–ª–µ–π:', error);
            return null;
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥—É–±–ª–µ–π –∏–∑ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤
     * @param {Array} realEstateObjects - –£–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
     * @param {Array} listings - –£–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏
     * @param {Array} addresses - –ê–¥—Ä–µ—Å–∞
     */
    buildDuplicatesData(realEstateObjects, listings, addresses) {
        try {
            // –°–æ–∑–¥–∞—ë–º addressesMap
            const addressesObject = {};
            addresses.forEach(addr => {
                addressesObject[addr.id] = addr;
            });

            // –û–±–æ–≥–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–¥—Ä–µ—Å–µ –∏ —Ç–∏–ø–µ
            const objectsData = realEstateObjects.map(obj => ({
                ...obj,
                address: addressesObject[obj.address_id],
                type: 'object'
            }));

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∫ –ª–∏—Å—Ç–∏–Ω–≥–∞–º (–Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö)
            const listingsData = listings.map(listing => ({
                ...listing,
                type: 'listing'
            }));

            // –í —Ç–∞–±–ª–∏—Ü—É –¥—É–±–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã
            // –õ–∏—Å—Ç–∏–Ω–≥–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥–æ—á–µ—Ä–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü
            const tableData = [
                ...objectsData,
                ...listingsData  // –õ–∏—Å—Ç–∏–Ω–≥–∏ –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ object_id –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
            ];

            return {
                tableData: tableData,
                addressesMap: addressesObject
            };

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥—É–±–ª–µ–π:', error);
            return null;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–∫–∏ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ
     */
    isPointInPolygon(point, polygon) {
        const lat = point[0];
        const lng = point[1];
        let inside = false;

        for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
            const xi = polygon[i][0];
            const yi = polygon[i][1];
            const xj = polygon[j][0];
            const yj = polygon[j][1];

            if (((yi > lng) !== (yj > lng)) && (lat < (xj - xi) * (lng - yi) / (yj - yi) + xi)) {
                inside = !inside;
            }
        }

        return inside;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—É
     */
    objectMatchesSubsegment(object, subsegment) {
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
        const filters = subsegment.filters;
        if (!filters) {
            return true; // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤, –æ–±—ä–µ–∫—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∫–æ–º–Ω–∞—Ç–Ω–æ—Å—Ç—å)
        if (filters.property_type && filters.property_type.length > 0) {
            if (!filters.property_type.includes(object.property_type)) {
                return false;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–æ—â–∞–¥—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º area_total –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤)
        const objectArea = object.area_total || object.area;
        if (filters.area_from && objectArea < filters.area_from) {
            return false;
        }
        if (filters.area_to && objectArea > filters.area_to) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∞–∂
        if (filters.floor_from && object.floor < filters.floor_from) {
            return false;
        }
        if (filters.floor_to && object.floor > filters.floor_to) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º current_price –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤)
        const objectPrice = object.current_price || object.price;
        if (filters.price_from && objectPrice < filters.price_from) {
            return false;
        }
        if (filters.price_to && objectPrice > filters.price_to) {
            return false;
        }
        
        return true;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    generateExportFileName(reportName) {
        // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const cleanName = reportName
            .replace(/[<>:"/\\|?*]/g, '_')
            .replace(/\s+/g, '_');
            
        const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
        return `neocenka_report_${cleanName}_${timestamp}.json`;
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
     */
    downloadJSONFile(data, fileName) {
        const jsonString = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        a.style.display = 'none';
        
        document.body.appendChild(a);
        a.click();
        
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ HTML —Ñ–∞–π–ª–∞
     */
    downloadHTMLFile(htmlContent, fileName) {
        const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        a.style.display = 'none';
        
        document.body.appendChild(a);
        a.click();
        
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    // ===== –≠–ö–°–ü–û–†–¢ –û–¢–ß–Å–¢–û–í –í HTML =====

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
     */
    async downloadReportAsHTML(reportId) {
        let button, originalText;
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            button = $(`[data-report-id="${reportId}"][data-action="download-html"]`);
            originalText = button.html();
            button.html('‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...').prop('disabled', true);
            
            if (this.debugEnabled) {
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç
            const report = await window.db.getSavedReport(reportId);
            if (!report) {
                if (this.areaPage && this.areaPage.uiManager) {
                    this.areaPage.uiManager.showNotification({
                        type: 'error',
                        message: '–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                        duration: 4000
                    });
                }
                return;
            }

            console.log('üìÑ –û—Ç—á—ë—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î:', {
                reportId: reportId,
                hasFlippingData: !!report.flipping_data,
                flippingObjectsCount: report.flipping_data?.objects?.length || 0,
                hasChartsData: !!report.charts_data
            });
            
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞
            const exportData = await this.collectReportExportData(report);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —á–µ—Ä–µ–∑ HTMLExportManager
            let htmlContent;
            if (this.htmlExportManager) {
                htmlContent = await this.htmlExportManager.generateHTMLReport(exportData);
            } else {
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                htmlContent = await this.generateHTMLReportFallback(exportData);
            }
            
            // –°–æ–∑–¥–∞—ë–º –∏–º—è —Ñ–∞–π–ª–∞
            const fileName = this.generateHTMLFileName(report.name);
            
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            this.downloadHTMLFile(htmlContent, fileName);
            
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'success',
                    message: `üìÑ HTML –æ—Ç—á—ë—Ç "${report.name}" —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω`,
                    duration: 3000
                });
            }
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á—ë—Ç–∞:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'error',
                    message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á—ë—Ç–∞',
                    duration: 5000
                });
            }
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (button && originalText) {
                button.html(originalText).prop('disabled', false);
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ HTML —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    generateHTMLFileName(reportName) {
        // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const cleanName = reportName
            .replace(/[<>:"/\\|?*]/g, '_')
            .replace(/\s+/g, '_');
            
        const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
        return `neocenka_report_${cleanName}_${timestamp}.html`;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á—ë—Ç–∞ (fallback –º–µ—Ç–æ–¥)
     */
    async generateHTMLReportFallback(exportData) {
        const { report, area, addresses, segments, real_estate_objects, export_info } = exportData;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
        const reportTitle = report.name;
        const reportDate = new Date(report.created_at).toLocaleDateString('ru-RU');
        const exportDate = new Date(export_info.export_date).toLocaleDateString('ru-RU');
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const chartsData = report.charts_data || {};
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        const objectsTableData = real_estate_objects;
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        const comparativeAnalysis = report.comparative_analysis || {};
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
        const htmlContent = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á—ë—Ç Neocenka: ${reportTitle}</title>
    <style>
        ${this.getEmbeddedCSS()}
    </style>
    <!-- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ -->
    <script src="https://cdn.jsdelivr.net/npm/apexcharts@3.44.0/dist/apexcharts.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css">
</head>
<body>
    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞ -->
    <header class="report-header">
        <div class="container">
            <div class="header-content">
                <div class="logo-section">
                    <h1>üè† Neocenka</h1>
                    <p class="tagline">–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</p>
                </div>
                <div class="report-info">
                    <h2>${reportTitle}</h2>
                    <div class="report-meta">
                        <span>–°–æ–∑–¥–∞–Ω: ${reportDate}</span>
                        <span>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${exportDate}</span>
                        <span>–û–±–ª–∞—Å—Ç—å: ${area.name}</span>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ -->
    <main class="container">
        <!-- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ -->
        ${this.generateFilterSummaryHTML(report.filters)}
        
        <!-- –ì—Ä–∞—Ñ–∏–∫–∏ -->
        ${this.generateChartsHTML(chartsData)}
        
        <!-- –ö–∞—Ä—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ -->
        ${this.generateMapHTML(area, real_estate_objects)}
        
        <!-- –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä–µ–∫—Ç–æ–≤ -->
        ${this.generateObjectsTableHTML(objectsTableData)}
        
        <!-- –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ -->
        ${this.generateComparativeAnalysisHTML(comparativeAnalysis)}
        
        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        ${this.generateStatisticsHTML(export_info, real_estate_objects)}
    </main>

    <!-- –§—É—Ç–µ—Ä -->
    <footer class="report-footer">
        <div class="container">
            <div class="footer-content">
                <div class="generated-info">
                    <p>–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º Neocenka Extension</p>
                    <p class="timestamp">${export_info.export_date}</p>
                </div>
                <div class="contact-info">
                    <p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ Neocenka</p>
                </div>
            </div>
        </div>
    </footer>

    <!-- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫—Ä–∏–ø—Ç—ã -->
    <script>
        // –î–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞
        const reportData = ${JSON.stringify(exportData, null, 2)};
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('DOMContentLoaded', function() {
            ${this.generateInitializationScript(chartsData, area, real_estate_objects)}
        });
    </script>
</body>
</html>`;

        return htmlContent;
    }

    // ===== –ú–ï–¢–û–î–´ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ì–†–ê–§–ò–ö–û–í –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê =====

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
     */
    getCurrentLiquidityChartData() {
        try {
            if (!this.liquidityChart || !this.liquidityChart.w || !this.liquidityChart.w.config) {
                if (this.debugEnabled) {
                    console.log('üîç ReportsManager: –ì—Ä–∞—Ñ–∏–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                }
                return null;
            }

            const config = this.liquidityChart.w.config;

            return {
                series: config.series || [],
                options: {
                    chart: config.chart || {},
                    xaxis: config.xaxis || {},
                    yaxis: config.yaxis || [],
                    colors: config.colors || [],
                    plotOptions: config.plotOptions || {},
                    legend: config.legend || {},
                    tooltip: config.tooltip || {},
                    dataLabels: config.dataLabels || {},
                    grid: config.grid || {}
                }
            };
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
     */
    getCurrentPriceChartData() {
        try {
            if (!this.priceChangesChart || !this.priceChangesChart.w || !this.priceChangesChart.w.config) {
                if (this.debugEnabled) {
                    console.log('üîç ReportsManager: –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                }
                return null;
            }

            const config = this.priceChangesChart.w.config;

            return {
                series: config.series || [],
                options: {
                    chart: config.chart || {},
                    xaxis: config.xaxis || {},
                    yaxis: config.yaxis || [],
                    colors: config.colors || [],
                    stroke: config.stroke || {},
                    markers: config.markers || {},
                    legend: config.legend || {},
                    tooltip: config.tooltip || {},
                    dataLabels: config.dataLabels || {},
                    grid: config.grid || {}
                }
            };
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
     */
    getCurrentMarketCorridorData() {
        try {
            if (!this.marketCorridorChart || !this.marketCorridorChart.w || !this.marketCorridorChart.w.config) {
                if (this.debugEnabled) {
                    console.log('üîç ReportsManager: –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                }
                return null;
            }

            const config = this.marketCorridorChart.w.config;

            return {
                series: config.series || [],
                mode: this.marketCorridorMode || 'sales', // 'sales' –∏–ª–∏ 'history'
                options: {
                    chart: config.chart || {},
                    xaxis: config.xaxis || {},
                    yaxis: config.yaxis || [],
                    colors: config.colors || [],
                    plotOptions: config.plotOptions || {},
                    legend: config.legend || {},
                    tooltip: config.tooltip || {},
                    dataLabels: config.dataLabels || {},
                    grid: config.grid || {}
                }
            };
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    getCurrentCreationChartData() {
        try {
            if (!this.creationChart || !this.creationChart.w || !this.creationChart.w.config) {
                if (this.debugEnabled) {
                    console.log('üîç ReportsManager: –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                }
                return null;
            }

            const config = this.creationChart.w.config;

            return {
                series: config.series || [],
                period: this.creationChartPeriod?.value || 'month',
                seller_type: this.creationChartSellerType?.value || 'all',
                options: {
                    chart: config.chart || {},
                    xaxis: config.xaxis || {},
                    yaxis: config.yaxis || [],
                    colors: config.colors || [],
                    plotOptions: config.plotOptions || {},
                    legend: config.legend || {},
                    tooltip: config.tooltip || {},
                    dataLabels: config.dataLabels || {},
                    grid: config.grid || {}
                }
            };
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–ª–∏–ø–ø–∏–Ω–≥ –æ—Ç—á—ë—Ç–∞
     */
    async getCurrentFlippingData() {
        try {
            if (!this.flippingProfitabilityManager) {
                console.warn('‚ö†Ô∏è ReportsManager: FlippingProfitabilityManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return null;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            if (typeof this.flippingProfitabilityManager.exportCurrentReportData === 'function') {
                const data = await this.flippingProfitabilityManager.exportCurrentReportData();
                console.log('üìä ReportsManager.getCurrentFlippingData —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
                    hasData: !!data,
                    hasObjects: !!data?.objects,
                    objectsCount: data?.objects?.length || 0
                });
                return data;
            } else {
                console.warn('‚ö†Ô∏è ReportsManager: –ú–µ—Ç–æ–¥ exportCurrentReportData –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FlippingProfitabilityManager');
                return null;
            }
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–ª–∏–ø–ø–∏–Ω–≥ –æ—Ç—á—ë—Ç–∞:', error);
            return null;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è IndexedDB
     */
    sanitizeDataForStorage(obj) {
        if (obj === null || obj === undefined) {
            return obj;
        }

        if (typeof obj === 'function') {
            return undefined; // –ò—Å–ø–æ–ª—å–∑—É–µ–º undefined –≤–º–µ—Å—Ç–æ null
        }

        if (Array.isArray(obj)) {
            return obj.map(item => this.sanitizeDataForStorage(item)).filter(item => item !== undefined);
        }

        if (typeof obj === 'object') {
            const cleaned = {};
            for (const key in obj) {
                if (obj.hasOwnProperty(key)) {
                    const value = obj[key];
                    if (typeof value !== 'function') {
                        const sanitized = this.sanitizeDataForStorage(value);
                        if (sanitized !== undefined) {
                            cleaned[key] = sanitized;
                        }
                    }
                    // –§—É–Ω–∫—Ü–∏–∏ –∏ undefined –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                }
            }
            return cleaned;
        }

        return obj; // –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    async getAllChartsData(reportsConfig = null) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–æ–≤ (–Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ApexCharts)
            const reportData = await this.getReportData();

            if (!reportData) {
                if (this.debugEnabled) {
                    console.log('üìä ReportsManager: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤');
                }
                return {};
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
            const originalMode = this.marketCorridorMode;

            const chartsData = {};

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç—á—ë—Ç –≤–∫–ª—é—á—ë–Ω
            if (!reportsConfig || reportsConfig.liquidity) {
                chartsData.liquidity = {
                    new: reportData.new,
                    close: reportData.close,
                    active: reportData.active,
                    datetime: reportData.datetime
                };
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç—á—ë—Ç –≤–∫–ª—é—á—ë–Ω
            if (!reportsConfig || reportsConfig.price_changes) {
                chartsData.price_changes = {
                    average–°ost: reportData.average–°ost,
                    average–°ostMeter: reportData.average–°ostMeter,
                    average–°ostArchive: reportData.average–°ostArchive,
                    average–°ostMeterArchive: reportData.average–°ostMeterArchive,
                    datetime: reportData.datetime
                };
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º market_corridor —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç—á—ë—Ç –≤–∫–ª—é—á—ë–Ω
            if (!reportsConfig || reportsConfig.market_corridor) {
                chartsData.market_corridor = {};
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç—á—ë—Ç –≤–∫–ª—é—á—ë–Ω
            if (!reportsConfig || reportsConfig.market_corridor) {
                try {
                    // –†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∂
                    this.marketCorridorMode = 'sales';
                    const salesData = await this.getMarketCorridorData();
                    if (salesData && salesData.series) {
                        chartsData.market_corridor.sales = {
                            series: salesData.series,
                            mode: 'sales',
                            pointsData: salesData.pointsData,
                            seriesDataMapping: salesData.seriesDataMapping
                        };
                    }

                    // –†–µ–∂–∏–º –∏—Å—Ç–æ—Ä–∏–∏
                    this.marketCorridorMode = 'history';
                    const historyData = await this.getMarketCorridorData();
                    if (historyData && historyData.series) {
                        chartsData.market_corridor.history = {
                            series: historyData.series,
                            mode: 'history',
                            pointsData: historyData.pointsData,
                            seriesDataMapping: historyData.seriesDataMapping
                        };
                    }
                } finally {
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º
                    this.marketCorridorMode = originalMode;
                }
            }

            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ IndexedDB
            const cleanedChartsData = this.sanitizeDataForStorage(chartsData);

            if (this.debugEnabled) {
                console.log('üìä ReportsManager: –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤:', {
                    liquidity: !!cleanedChartsData.liquidity,
                    price_changes: !!cleanedChartsData.price_changes,
                    market_corridor_sales: !!(cleanedChartsData.market_corridor && cleanedChartsData.market_corridor.sales),
                    market_corridor_history: !!(cleanedChartsData.market_corridor && cleanedChartsData.market_corridor.history)
                });
            }

            return cleanedChartsData;
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤:', error);
            return {};
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        // –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        if (this.liquidityChart) {
            this.liquidityChart.destroy();
            this.liquidityChart = null;
        }

        if (this.priceChangesChart) {
            this.priceChangesChart.destroy();
            this.priceChangesChart = null;
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ SlimSelect
        if (this.segmentSlimSelect) {
            this.segmentSlimSelect.destroy();
            this.segmentSlimSelect = null;
        }

        if (this.subsegmentSlimSelect) {
            this.subsegmentSlimSelect.destroy();
            this.subsegmentSlimSelect = null;
        }

        if (this.reportFilterSlimSelect) {
            this.reportFilterSlimSelect.destroy();
            this.reportFilterSlimSelect = null;
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ DataTable —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        if (this.savedReportsDataTable) {
            this.savedReportsDataTable.destroy();
            this.savedReportsDataTable = null;
        }

        if (this.filterTemplatesDataTable) {
            this.filterTemplatesDataTable.destroy();
            this.filterTemplatesDataTable = null;
        }
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        $(document).off('click', '.report-action-btn');
        $(document).off('click', '.template-action-btn');

        // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        $('#templateLoadingIndicator').remove();
        $('.filter-indicator').remove();

        // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π EventBus
        this.eventBus.off(CONSTANTS.EVENTS.AREA_LOADED);
        this.eventBus.off(CONSTANTS.EVENTS.SEGMENTS_UPDATED);
        this.eventBus.off(CONSTANTS.EVENTS.SUBSEGMENT_CREATED);
        this.eventBus.off(CONSTANTS.EVENTS.SUBSEGMENT_UPDATED);
        this.eventBus.off(CONSTANTS.EVENTS.SUBSEGMENT_DELETED);

        if (this.debugEnabled) {
        }
    }

    // ===== –ì–†–ê–§–ò–ö –°–û–ó–î–ê–ù–ò–Ø –û–ë–™–Ø–í–õ–ï–ù–ò–ô =====

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async updateCreationChart() {
        try {
            if (!this.creationChartPeriod || !this.creationChartSellerType) {
                return;
            }

            const period = this.creationChartPeriod.value || 'days';
            const sellerType = this.creationChartSellerType.value || 'owner';

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            const chartData = await this.getCreationChartData(period, sellerType);

            // –†–µ–Ω–¥–µ—Ä–∏–º –≥—Ä–∞—Ñ–∏–∫
            this.renderCreationChart(chartData, period, sellerType);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            this.updateCreationSummary(chartData, sellerType, period);

            if (this.debugEnabled) {
                console.log('üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω:', { period, sellerType, dataPoints: chartData.length });
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async getCreationChartData(period, sellerType) {
        try {
            const currentArea = this.areaPage.dataState?.getState('currentArea');
            if (!currentArea) return [];

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
            let listings;
            if (window.dataCacheManager) {
                listings = await window.dataCacheManager.getAll('listings');
            } else {
                // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º - –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î
                console.warn('‚ö†Ô∏è DataCacheManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î');
                listings = await window.db.getAll('listings');
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –æ–±–ª–∞—Å—Ç–∏
            const areaListings = listings.filter(listing => listing.map_area_id === currentArea.id);

            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –ø—Ä–æ–¥–∞–≤—Ü–∞
            let filteredListings = areaListings;
            if (sellerType === 'owner') {
                filteredListings = areaListings.filter(listing => listing.seller_type === 'owner');
            } else if (sellerType === 'agent') {
                filteredListings = areaListings.filter(listing => listing.seller_type === 'agent');
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–Ω–æ–π –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è
            const validListings = filteredListings.filter(listing =>
                listing.created && listing.created !== null && new Date(listing.created).getTime() > 0
            );

            // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É
            if (period === 'days') {
                return this.aggregateCreationByDays(validListings, 30);
            } else {
                return this.aggregateCreationByMonths(validListings, 12);
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
            return [];
        }
    }

    /**
     * –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º
     */
    aggregateCreationByDays(listings, days) {
        const now = new Date();
        const result = [];

        for (let i = days - 1; i >= 0; i--) {
            const date = new Date(now);
            date.setDate(date.getDate() - i);
            date.setHours(0, 0, 0, 0);

            const nextDate = new Date(date);
            nextDate.setDate(nextDate.getDate() + 1);

            const count = listings.filter(listing => {
                const createdDate = new Date(listing.created);
                return createdDate >= date && createdDate < nextDate;
            }).length;

            result.push({
                date: date.toISOString().split('T')[0],
                count: count,
                label: date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })
            });
        }

        return result;
    }

    /**
     * –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Å—è—Ü–∞–º
     */
    aggregateCreationByMonths(listings, months) {
        const now = new Date();
        const result = [];

        for (let i = months - 1; i >= 0; i--) {
            const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
            const nextDate = new Date(date.getFullYear(), date.getMonth() + 1, 1);

            const count = listings.filter(listing => {
                const createdDate = new Date(listing.created);
                return createdDate >= date && createdDate < nextDate;
            }).length;

            result.push({
                date: `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`,
                count: count,
                label: date.toLocaleDateString('ru-RU', { month: 'short', year: 'numeric' })
            });
        }

        return result;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    renderCreationChart(data, period, sellerType) {
        const container = document.getElementById('creationChart');
        if (!container) return;

        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
        if (this.creationChart) {
            this.creationChart.destroy();
        }

        const options = {
            chart: {
                type: 'line',
                height: 320,
                toolbar: {
                    show: false
                },
                zoom: {
                    enabled: false
                }
            },
            series: [{
                name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
                data: data.map(item => item.count)
            }],
            xaxis: {
                categories: data.map(item => item.label),
                title: {
                    text: period === 'days' ? '–î–Ω–∏' : '–ú–µ—Å—è—Ü—ã'
                }
            },
            yaxis: {
                title: {
                    text: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                },
                min: 0
            },
            title: {
                text: this.getChartTitle(period, sellerType),
                align: 'left',
                style: {
                    fontSize: '16px',
                    fontWeight: 500
                }
            },
            stroke: {
                curve: 'smooth',
                width: 3
            },
            colors: ['#3b82f6'],
            grid: {
                show: true,
                borderColor: '#e5e7eb'
            },
            markers: {
                size: 4,
                colors: ['#3b82f6'],
                strokeWidth: 0,
                hover: {
                    size: 6
                }
            },
            tooltip: {
                y: {
                    formatter: function(value) {
                        return value + ' –æ–±—ä—è–≤–ª–µ–Ω–∏–π';
                    }
                }
            }
        };

        this.creationChart = new ApexCharts(container, options);
        this.creationChart.render();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    getChartTitle(period, sellerType) {
        const periodText = period === 'days' ? '–ø–æ –¥–Ω—è–º' : '–ø–æ –º–µ—Å—è—Ü–∞–º';
        const sellerText = sellerType === 'owner' ? '–æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤' :
                          sellerType === 'agent' ? '–æ—Ç –∞–≥–µ–Ω—Ç–æ–≤' : '–≤—Å–µ–≥–æ';
        return `–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ${periodText} (${sellerText})`;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
     */
    async updateCreationSummary(chartData, sellerType, period) {
        try {
            const currentArea = this.areaPage.dataState?.getState('currentArea');
            if (!currentArea) return;

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
            let allListings;
            if (window.dataCacheManager) {
                allListings = await window.dataCacheManager.getAll('listings');
            } else {
                console.warn('‚ö†Ô∏è DataCacheManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î');
                allListings = await window.db.getAll('listings');
            }
            const areaListings = allListings.filter(listing =>
                listing.map_area_id === currentArea.id &&
                listing.created && listing.created !== null && new Date(listing.created).getTime() > 0
            );

            const totalCreated = chartData.reduce((sum, item) => sum + item.count, 0);
            const avgPerPeriod = totalCreated > 0 ? (totalCreated / chartData.length).toFixed(1) : 0;
            const maxPerPeriod = chartData.length > 0 ? Math.max(...chartData.map(item => item.count)) : 0;

            const ownerCount = areaListings.filter(listing => listing.seller_type === 'owner').length;
            const agentCount = areaListings.filter(listing => listing.seller_type === 'agent').length;

            // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–≤–æ–¥–∫–∏
            this.updateSummaryElement('totalCreated', totalCreated);
            this.updateSummaryElement('avgPerDay', avgPerPeriod);
            this.updateSummaryElement('maxPerDay', maxPerPeriod);
            this.updateSummaryElement('ownerCount', ownerCount);
            this.updateSummaryElement('agentCount', agentCount);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
            this.updateSummaryLabels(period);

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–≤–æ–¥–∫–∏
     */
    updateSummaryElement(elementId, value) {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = value;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π —Å–≤–æ–¥–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
     */
    updateSummaryLabels(period) {
        const avgLabel = period === 'days' ? '–°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å:' : '–°—Ä–µ–¥–Ω–µ–µ –≤ –º–µ—Å—è—Ü:';
        const maxLabel = period === 'days' ? '–ú–∞–∫—Å–∏–º—É–º –≤ –¥–µ–Ω—å:' : '–ú–∞–∫—Å–∏–º—É–º –≤ –º–µ—Å—è—Ü:';

        // –ù–∞–π–¥–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã label –∏ –æ–±–Ω–æ–≤–∏–º –∏—Ö —Ç–µ–∫—Å—Ç
        const avgLabelElement = document.querySelector('#creationSummary .flex:nth-child(2) .text-gray-600');
        const maxLabelElement = document.querySelector('#creationSummary .flex:nth-child(3) .text-gray-600');

        if (avgLabelElement) {
            avgLabelElement.textContent = avgLabel;
        }

        if (maxLabelElement) {
            maxLabelElement.textContent = maxLabel;
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–∏—Ö –æ—Ç—á—ë—Ç–æ–≤ –≤ HTML
     */
    async exportCurrentReportsAsHTML() {
        try {
            if (this.debugEnabled) {
                console.log('üìÑ ReportsManager: –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–∏—Ö –æ—Ç—á—ë—Ç–æ–≤ –≤ HTML');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HTMLExportManager
            if (!this.htmlExportManager) {
                throw new Error('HTMLExportManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏
            const area = this.areaPage.currentArea;
            if (!area) {
                throw new Error('–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            }

            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—É–±–ª–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            let duplicatesData = null;
            try {
                const filters = {
                    segment_id: this.currentSegment?.id || null,
                    subsegment_id: this.currentSubsegment?.id || null
                };
                const duplicatesInputData = await this.collectReportDataForDuplicates(filters);
                if (duplicatesInputData) {
                    duplicatesData = this.buildDuplicatesData(
                        duplicatesInputData.objects,
                        duplicatesInputData.listings,
                        duplicatesInputData.addresses
                    );
                    if (this.debugEnabled) {
                        console.log('‚úÖ ReportsManager: –î–∞–Ω–Ω—ã–µ –¥—É–±–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–±—Ä–∞–Ω—ã', {
                            objects: duplicatesInputData.objects.length,
                            listings: duplicatesInputData.listings.length,
                            tableDataCount: duplicatesData?.tableData?.length || 0
                        });
                    }
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è ReportsManager: –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥—É–±–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏—Ö –æ—Ç—á—ë—Ç–æ–≤
            const exportData = {
                // –î–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
                area: {
                    id: area.id,
                    name: area.name,
                    polygon: area.polygon,
                    created_at: area.created_at
                },

                // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç/–ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç
                segment: this.currentSegment ? {
                    id: this.currentSegment.id,
                    name: this.currentSegment.name,
                    filters: this.currentSegment.filters
                } : null,

                subsegment: this.currentSubsegment ? {
                    id: this.currentSubsegment.id,
                    name: this.currentSubsegment.name,
                    filters: this.currentSubsegment.filters
                } : null,

                // –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
                reports_data: {
                    liquidity: this.getCurrentLiquidityChartData(),
                    price_changes: this.getCurrentPriceChangesChartData(),
                    market_corridor: this.getCurrentMarketCorridorChartData(),
                    comparative_analysis: this.getCurrentComparativeAnalysisData(),
                    flipping_profitability: await this.getCurrentFlippingData()
                },

                // –ê–¥—Ä–µ—Å–∞ –¥–ª—è –∫–∞—Ä—Ç—ã
                addresses: await this.getSubsegmentAddresses(),

                // –î–∞–Ω–Ω—ã–µ –¥—É–±–ª–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                duplicates_data: duplicatesData,

                // –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                export_info: {
                    generated_at: new Date().toISOString(),
                    period_from: this.dateFromFilter ? this.dateFromFilter.value : '',
                    period_to: this.dateToFilter ? this.dateToFilter.value : '',
                    filter_name: this.getActiveFilterName()
                }
            };

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π HTMLExportManager
            const htmlContent = await this.htmlExportManager.generateHTMLReport(exportData);

            // –°–æ–∑–¥–∞—ë–º –∏–º—è —Ñ–∞–π–ª–∞
            const fileName = `–æ—Ç—á—ë—Ç_${area.name}_${new Date().toISOString().slice(0,10)}.html`;

            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            this.downloadHTMLFile(htmlContent, fileName);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'success',
                    message: `üìÑ HTML –æ—Ç—á—ë—Ç –ø–æ –æ–±–ª–∞—Å—Ç–∏ "${area.name}" —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω`,
                    duration: 3000
                });
            }

            if (this.debugEnabled) {
                console.log('‚úÖ ReportsManager: HTML —ç–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–∏—Ö –æ—Ç—á—ë—Ç–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—É—â–∏—Ö –æ—Ç—á—ë—Ç–æ–≤ –≤ HTML:', error);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if (this.areaPage && this.areaPage.uiManager) {
                this.areaPage.uiManager.showNotification({
                    type: 'error',
                    message: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—É—â–∏—Ö –æ—Ç—á—ë—Ç–æ–≤ –≤ HTML',
                    duration: 5000
                });
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è –∫–∞—Ä—Ç—ã
     */
    async getSubsegmentAddresses() {
        try {
            if (!this.areaPage.currentArea) {
                return [];
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞/–ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
            const objects = await window.db.getRealEstateObjectsByAreaAndSegment(
                this.areaPage.currentArea.id,
                this.currentSegment?.id,
                this.currentSubsegment?.id
            );

            // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            const addressIds = [...new Set(objects.map(obj => obj.address_id))];
            const addresses = await Promise.all(
                addressIds.map(id => window.db.getAddress(id))
            );

            return addresses.filter(addr => addr && addr.coordinates);

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    getActiveFilterName() {
        const parts = [];

        if (this.currentSegment) {
            parts.push(this.currentSegment.name);
        }

        if (this.currentSubsegment) {
            parts.push(this.currentSubsegment.name);
        }

        return parts.length > 0 ? parts.join(' ‚Üí ') : '–í—Å–µ –æ–±—ä–µ–∫—Ç—ã';
    }

    /**
     * –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞
     */
    async enrichAddressesWithReferenceData(addresses) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            const [houseSeries, houseClasses, wallMaterials, ceilingMaterials] = await Promise.all([
                window.db.getAll('house_series'),
                window.db.getAll('house_classes'),
                window.db.getAll('wall_materials'),
                window.db.getAll('ceiling_materials')
            ]);

            // –°–æ–∑–¥–∞–µ–º –º–∞–ø—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const houseSeriesMap = new Map(houseSeries.map(item => [item.id, item.name]));
            const houseClassesMap = new Map(houseClasses.map(item => [item.id, item.name]));
            const wallMaterialsMap = new Map(wallMaterials.map(item => [item.id, item.name]));
            const wallMaterialsColorMap = new Map(wallMaterials.map(item => [item.id, item.color]));
            const ceilingMaterialsMap = new Map(ceilingMaterials.map(item => [item.id, item.name]));

            // –û–±–æ–≥–∞—â–∞–µ–º –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å
            return addresses.map(address => ({
                ...address,
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
                house_series: address.house_series_id ? houseSeriesMap.get(address.house_series_id) : null,
                house_class: address.house_class_id ? houseClassesMap.get(address.house_class_id) : null,
                wall_material: address.wall_material_id ? wallMaterialsMap.get(address.wall_material_id) : null,
                wall_material_color: address.wall_material_id ? wallMaterialsColorMap.get(address.wall_material_id) : null,
                ceiling_material: address.ceiling_material_id ? ceilingMaterialsMap.get(address.ceiling_material_id) : null,

                // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ–ª–µ–π
                floors: address.floors_count,
                house_year: address.build_year
            }));

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return addresses;
        }
    }
}