/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç—á—ë—Ç–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å—é –æ—Ç—á—ë—Ç–æ–≤ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
 */
class ReportsManager {
    constructor(areaPage) {
        this.areaPage = areaPage;
        this.database = window.db;
        this.eventBus = areaPage.eventBus;
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.panelContainer = null;
        this.panelContent = null;
        this.panelHeader = null;
        this.panelChevron = null;
        
        // –§–∏–ª—å—Ç—Ä—ã
        this.segmentFilter = null;
        this.subsegmentFilter = null;
        this.dateFromFilter = null;
        this.dateToFilter = null;
        this.reportsDropdownBtn = null;
        this.reportsDropdown = null;
        this.reportsContent = null;
        
        // SlimSelect instances
        this.segmentSlimSelect = null;
        this.subsegmentSlimSelect = null;
        
        // –ì—Ä–∞—Ñ–∏–∫–∏
        this.liquidityChart = null;
        this.priceChangesChart = null;
        this.marketCorridorChart = null;
        
        // –î–∞–Ω–Ω—ã–µ
        this.segments = [];
        this.subsegments = [];
        this.currentSegment = null;
        this.currentSubsegment = null;
        
        this.debugEnabled = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤
     */
    async initialize() {
        try {
            if (this.debugEnabled) {
                console.log('üîç ReportsManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
            await this.loadDebugSettings();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.initializeElements();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventHandlers();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect
            this.initializeSlimSelects();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            await this.loadSegmentsData();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞—Ç
            this.setDefaultDateFilters();

            // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–æ–≤
            await this.updateReportsVisibility();

            if (this.debugEnabled) {
                console.log('‚úÖ ReportsManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
     */
    async loadDebugSettings() {
        try {
            if (!this.database || !this.database.getSettings) {
                this.debugEnabled = false;
                return;
            }
            const settings = await this.database.getSettings();
            this.debugEnabled = settings?.find(s => s.key === 'debug_enabled')?.value || false;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏:', error);
            this.debugEnabled = false;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    initializeElements() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–Ω–µ–ª–∏
        this.panelContainer = document.getElementById('reportsPanelContainer');
        this.panelContent = document.getElementById('reportsPanelContent');
        this.panelHeader = document.getElementById('reportsPanelHeader');
        this.panelChevron = document.getElementById('reportsPanelChevron');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.segmentFilter = document.getElementById('reportsSegmentFilter');
        this.subsegmentFilter = document.getElementById('reportsSubsegmentFilter');
        this.dateFromFilter = document.getElementById('reportsDateFrom');
        this.dateToFilter = document.getElementById('reportsDateTo');
        this.reportsDropdownBtn = document.getElementById('reportsDropdownBtn');
        this.reportsDropdown = document.getElementById('reportsDropdown');
        this.reportsContent = document.getElementById('reportsContent');

        if (!this.panelContainer) {
            throw new Error('–≠–ª–µ–º–µ–Ω—Ç reportsPanelContainer –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (this.debugEnabled) {
            console.log('üîç ReportsManager: –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        if (this.panelHeader) {
            this.panelHeader.addEventListener('click', () => {
                this.togglePanel();
            });
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤
        if (this.reportsDropdownBtn) {
            this.reportsDropdownBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.toggleReportsDropdown();
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            if (this.reportsDropdown && this.reportsDropdownBtn &&
                !this.reportsDropdownBtn.contains(e.target) && 
                !this.reportsDropdown.contains(e.target)) {
                this.reportsDropdown.classList.add('hidden');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
        const liquidityCheck = document.getElementById('liquidityReportCheck');
        const priceChangesCheck = document.getElementById('priceChangesReportCheck');
        const marketCorridorCheck = document.getElementById('marketCorridorReportCheck');
        
        if (liquidityCheck) {
            liquidityCheck.addEventListener('change', () => {
                this.updateReportsVisibility();
            });
        }
        
        if (priceChangesCheck) {
            priceChangesCheck.addEventListener('change', () => {
                this.updateReportsVisibility();
            });
        }

        if (marketCorridorCheck) {
            marketCorridorCheck.addEventListener('change', () => {
                this.updateReportsVisibility();
            });
        }

        // –°–æ–±—ã—Ç–∏—è SlimSelect –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

        // –°–æ–±—ã—Ç–∏—è EventBus
        this.eventBus.on(CONSTANTS.EVENTS.SEGMENTS_UPDATED, () => {
            this.loadSegmentsData();
        });

        this.eventBus.on(CONSTANTS.EVENTS.SUBSEGMENT_CREATED, () => {
            this.loadSegmentsData();
        });

        this.eventBus.on(CONSTANTS.EVENTS.SUBSEGMENT_UPDATED, () => {
            this.loadSegmentsData();
        });

        this.eventBus.on(CONSTANTS.EVENTS.SUBSEGMENT_DELETED, () => {
            this.loadSegmentsData();
        });

        if (this.debugEnabled) {
            console.log('üîç ReportsManager: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect
     */
    initializeSlimSelects() {
        try {
            // SlimSelect –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ updateSegmentFilter –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            
            // –°–æ–∑–¥–∞–µ–º SlimSelect –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å—Ä–∞–∑—É (–≤ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
            if (this.subsegmentFilter && typeof SlimSelect !== 'undefined') {
                this.subsegmentSlimSelect = new SlimSelect({
                    select: this.subsegmentFilter,
                    settings: {
                        allowDeselect: true,
                        disabled: true,
                        placeholderText: '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã'
                    },
                    events: {
                        afterChange: (newVal) => {
                            const subsegmentId = Array.isArray(newVal) && newVal.length > 0 ? newVal[0].value : 
                                               (newVal && newVal.value !== undefined ? newVal.value : newVal);
                            console.log('üîç ReportsManager: SlimSelect –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω:', newVal, '–∏–∑–≤–ª–µ—á–µ–Ω–æ ID:', subsegmentId);
                            this.handleSubsegmentChange(subsegmentId);
                        }
                    }
                });
                
                if (this.debugEnabled) {
                    console.log('üîç ReportsManager: SlimSelect –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–æ—Ç–∫–ª—é—á–µ–Ω)');
                }
            }
            
            if (this.debugEnabled) {
                console.log('üîç ReportsManager: SlimSelect –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SlimSelect:', error);
        }
    }

    /**
     * –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
     */
    togglePanel() {
        if (!this.panelContent || !this.panelChevron) return;

        const isHidden = this.panelContent.classList.contains('hidden');
        
        if (isHidden) {
            this.panelContent.classList.remove('hidden');
            this.panelChevron.style.transform = 'rotate(0deg)';
        } else {
            this.panelContent.classList.add('hidden');
            this.panelChevron.style.transform = 'rotate(-90deg)';
        }

        if (this.debugEnabled) {
            console.log('üîç ReportsManager: –ü–∞–Ω–µ–ª—å', isHidden ? '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞' : '—Å–≤–µ—Ä–Ω—É—Ç–∞');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤
     */
    toggleReportsDropdown() {
        if (!this.reportsDropdown) return;

        this.reportsDropdown.classList.toggle('hidden');

        if (this.debugEnabled) {
            console.log('üîç ReportsManager: –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
     */
    async updateReportsVisibility() {
        if (!this.reportsContent) return;

        const liquidityCheck = document.getElementById('liquidityReportCheck');
        const priceChangesCheck = document.getElementById('priceChangesReportCheck');
        const marketCorridorCheck = document.getElementById('marketCorridorReportCheck');
        
        const showLiquidity = liquidityCheck?.checked || false;
        const showPriceChanges = priceChangesCheck?.checked || false;
        const showMarketCorridor = marketCorridorCheck?.checked || false;

        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç—á—ë—Ç–æ–≤ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç—á—ë—Ç
        if (showLiquidity || showPriceChanges || showMarketCorridor) {
            this.reportsContent.classList.remove('hidden');
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤
            await this.generateReports();
            
            // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
            const liquidityReport = document.querySelector('#liquidityChart').closest('.bg-white');
            const priceChangesReport = document.querySelector('#priceChangesChart').closest('.bg-white');
            const marketCorridorReport = document.querySelector('#marketCorridorChart').closest('.bg-white');
            
            if (liquidityReport) {
                liquidityReport.style.display = showLiquidity ? 'block' : 'none';
            }
            
            if (priceChangesReport) {
                priceChangesReport.style.display = showPriceChanges ? 'block' : 'none';
            }

            if (marketCorridorReport) {
                marketCorridorReport.style.display = showMarketCorridor ? 'block' : 'none';
            }
        } else {
            this.reportsContent.classList.add('hidden');
        }

        if (this.debugEnabled) {
            console.log('üîç ReportsManager: –í–∏–¥–∏–º–æ—Å—Ç—å –æ—Ç—á—ë—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', {
                showLiquidity,
                showPriceChanges,
                showMarketCorridor
            });
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –æ—Ç—á—ë—Ç—ã (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ updateReportsVisibility)
     */
    toggleReports() {
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—á—ë—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const liquidityCheck = document.getElementById('liquidityReportCheck');
        const priceChangesCheck = document.getElementById('priceChangesReportCheck');
        const marketCorridorCheck = document.getElementById('marketCorridorReportCheck');
        
        if (liquidityCheck) liquidityCheck.checked = true;
        if (priceChangesCheck) priceChangesCheck.checked = true;
        if (marketCorridorCheck) marketCorridorCheck.checked = true;
        
        this.updateReportsVisibility();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    async loadSegmentsData() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–±–ª–∞—Å—Ç—å —á–µ—Ä–µ–∑ dataState (–∫–∞–∫ –≤ DuplicatesManager)
            const currentArea = this.areaPage.dataState?.getState('currentArea');
            if (!currentArea) {
                if (this.debugEnabled) {
                    console.log('üîç ReportsManager: –ù–µ—Ç —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤');
                }
                return;
            }

            if (!this.database) {
                if (this.debugEnabled) {
                    console.log('üîç ReportsManager: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                }
                return;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –∏ –≤ DuplicatesManager
            this.segments = await this.database.getSegmentsByMapArea(currentArea.id);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            this.updateSegmentFilter();

            if (this.debugEnabled) {
                console.log('üîç ReportsManager: –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', this.segments.length, '–¥–ª—è –æ–±–ª–∞—Å—Ç–∏:', currentArea.name);
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', error);
            this.segments = [];
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    updateSegmentFilter() {
        if (!this.segmentFilter) return;

        // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏–∏ (–∫–∞–∫ –≤ DuplicatesManager)
        this.segmentFilter.innerHTML = '';
        
        this.segments.forEach(segment => {
            const option = document.createElement('option');
            option.value = segment.id;
            option.textContent = segment.name;
            this.segmentFilter.appendChild(option);
        });

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º SlimSelect —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (this.segmentSlimSelect) {
            this.segmentSlimSelect.destroy();
        }

        if (this.segments.length > 0) {
            this.segmentSlimSelect = new SlimSelect({
                select: this.segmentFilter,
                settings: {
                    allowDeselect: true,
                    showSearch: false,
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç'
                },
                events: {
                    afterChange: (newVal) => {
                        // newVal –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                        const segmentId = Array.isArray(newVal) && newVal.length > 0 ? newVal[0].value : 
                                         (newVal && newVal.value !== undefined ? newVal.value : newVal);
                        console.log('üîç ReportsManager: SlimSelect afterChange –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞:', newVal, '–∏–∑–≤–ª–µ—á–µ–Ω–æ ID:', segmentId);
                        this.handleSegmentChange(segmentId);
                    }
                }
            });
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.segmentSlimSelect.setSelected([]);
        }

        if (this.debugEnabled) {
            console.log('üîç ReportsManager: –§–∏–ª—å—Ç—Ä —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω, —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', this.segments.length);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ DuplicatesManager)
     */
    async handleSegmentChange(segmentId) {
        try {
            console.log('üîç ReportsManager: handleSegmentChange –≤—ã–∑–≤–∞–Ω —Å segmentId:', segmentId, '—Ç–∏–ø:', typeof segmentId);
            
            this.currentSegment = segmentId ? this.segments.find(s => s.id === parseInt(segmentId)) : null;
            this.currentSubsegment = null;
            
            if (!segmentId) {
                console.log('üîç ReportsManager: –°–µ–≥–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã');
                // –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                if (this.subsegmentSlimSelect) {
                    this.subsegmentSlimSelect.setData([{ text: '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã', value: '' }]);
                    this.subsegmentSlimSelect.enable(false);
                    this.subsegmentSlimSelect.setSelected([]);
                }
                this.subsegments = [];
            } else {
                console.log('üîç ReportsManager: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞:', segmentId);
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                const subsegments = await this.database.getSubsegmentsBySegment(segmentId);
                console.log('üîç ReportsManager: –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤:', subsegments.length, subsegments);
                
                // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
                this.subsegmentFilter.innerHTML = '<option value="">–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã</option>';
                subsegments.forEach(subsegment => {
                    const option = document.createElement('option');
                    option.value = subsegment.id;
                    option.textContent = subsegment.name;
                    this.subsegmentFilter.appendChild(option);
                    console.log('üîç ReportsManager: –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç:', subsegment.name, 'id:', subsegment.id);
                });
                
                console.log('üîç ReportsManager: HTML –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤:', this.subsegmentFilter.innerHTML);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SlimSelect
                if (this.subsegmentSlimSelect) {
                    console.log('üîç ReportsManager: –û–±–Ω–æ–≤–ª—è–µ–º SlimSelect –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤');
                    this.subsegmentSlimSelect.setData([
                        { text: '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã', value: '' },
                        ...subsegments.map(subsegment => ({ 
                            text: subsegment.name, 
                            value: subsegment.id.toString() 
                        }))
                    ]);
                    this.subsegmentSlimSelect.enable(true);
                }
                
                console.log('üîç ReportsManager: –ü–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã
                this.subsegments = subsegments;
            }

            console.log('üîç ReportsManager: –í—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç:', this.currentSegment?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω', '–ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤:', this.subsegments?.length || 0);
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞:', error);
        }
    }


    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
     */
    handleSubsegmentChange(subsegmentId) {
        this.currentSubsegment = subsegmentId ? this.subsegments.find(s => s.id === parseInt(subsegmentId)) : null;

        if (this.debugEnabled) {
            console.log('üîç ReportsManager: –í—ã–±—Ä–∞–Ω –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç:', this.currentSubsegment?.name || '–í–µ—Å—å —Å–µ–≥–º–µ–Ω—Ç');
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    setDefaultDateFilters() {
        if (!this.dateFromFilter || !this.dateToFilter) return;

        const now = new Date();
        const yearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
        const tomorrow = new Date(now);
        tomorrow.setDate(now.getDate() + 1);

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        this.dateFromFilter.value = yearAgo.toISOString().split('T')[0];
        this.dateToFilter.value = tomorrow.toISOString().split('T')[0];
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤
     */
    async generateReports() {
        try {
            if (this.debugEnabled) {
                console.log('üîç ReportsManager: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤...');
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
            const reportData = await this.getReportData();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            this.createLiquidityChart(reportData);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
            this.createPriceChangesChart(reportData);

            // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            this.createMarketCorridorChart(reportData);

            if (this.debugEnabled) {
                console.log('‚úÖ ReportsManager: –û—Ç—á—ë—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
     */
    async getReportData() {
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
        
        const testData = {
            "new": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 2, 1, 1, 5, 4, 4, 4, 10, 10, 5, 4, 2, 1, 6, 2, 6, 3, 0],
            "close": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 11, 14, 6, 6, 1, 1, 3, 7, 7, 0],
            "active": [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 6, 7, 8, 10, 11, 12, 17, 21, 25, 29, 27, 26, 17, 15, 11, 11, 16, 15, 14, 10],
            "average–°ost": [0, 15423275, 15423275, 15423275, 15423275, 15423275, 15423275, 15423275, 15423275, 15423275, 15423275, 15423275, 16111638, 16111638, 16061638, 16061638, 15274425, 14780819, 14780819, 14780819, 14364655, 14364655, 14364655, 13537213, 14789039, 14752909, 14922328, 15520298, 15235273, 15640193, 16353442, 16196491, 16573527, 17011566, 17858549, 18674647, 19897933, 21143545, 19899000, 20245938, 20439667, 20349286, 21428000],
            "average–°ostMeter": [0, 289367, 289367, 289367, 289367, 289367, 289367, 289367, 289367, 289367, 289367, 289367, 274708, 274708, 273856, 273856, 294116, 303663, 303663, 303663, 307068, 307068, 307068, 311320, 317946, 322821, 317564, 316800, 303240, 305824, 293523, 291724, 289799, 287663, 292689, 290032, 290001, 287525, 286541, 296943, 291828, 316439, 334186],
            "datetime": ["12/02/2021", "01/02/2022", "02/02/2022", "03/02/2022", "04/02/2022", "05/02/2022", "06/02/2022", "07/02/2022", "08/02/2022", "09/02/2022", "10/02/2022", "11/02/2022", "12/02/2022", "01/02/2023", "02/02/2023", "03/02/2023", "04/02/2023", "05/02/2023", "06/02/2023", "07/02/2023", "08/02/2023", "09/02/2023", "10/02/2023", "11/02/2023", "12/02/2023", "01/02/2024", "02/02/2024", "03/02/2024", "04/02/2024", "05/02/2024", "06/02/2024", "07/02/2024", "08/02/2024", "09/02/2024", "10/02/2024", "11/02/2024", "12/02/2024", "01/02/2025", "02/02/2025", "03/02/2025", "04/02/2025", "05/02/2025", "06/02/2025"]
        };

        return testData;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
     */
    createLiquidityChart(data) {
        try {
            const options = {
                series: [
                    {
                        name: '–ù–æ–≤—ã–µ',
                        type: 'column',
                        data: data['new']
                    },
                    {
                        name: '–£—à–µ–¥—à–∏–µ —Å —Ä—ã–Ω–∫–∞',
                        type: 'column',
                        data: data['close']
                    },
                    {
                        name: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞',
                        type: 'line',
                        data: data['active']
                    }
                ],
                colors: ['#60ba5d', '#bd5f5f', '#629bc2'],
                chart: {
                    height: 350,
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
                            "shortMonths": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
                            "days": ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    zoom: {
                        enabled: true
                    }
                },
                responsive: [{
                    breakpoint: 480,
                    options: {
                        legend: {
                            position: 'bottom',
                            offsetX: -10,
                            offsetY: 0
                        }
                    }
                }],
                dataLabels: {
                    enabled: true,
                },
                plotOptions: {
                    bar: {
                        borderRadius: 8,
                        horizontal: false,
                    },
                },
                xaxis: {
                    type: 'datetime',
                    categories: data['datetime'],
                },
                legend: {
                    position: 'bottom'
                },
                fill: {
                    opacity: 1
                }
            };

            document.getElementById('liquidityChart').innerHTML = '';
            this.liquidityChart = new ApexCharts(document.querySelector("#liquidityChart"), options);
            this.liquidityChart.render();

            if (this.debugEnabled) {
                console.log('‚úÖ ReportsManager: –ì—Ä–∞—Ñ–∏–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
     */
    createPriceChangesChart(data) {
        try {
            const options = {
                series: [
                    {
                        name: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞',
                        type: 'column',
                        data: data['average–°ostMeter']
                    },
                    {
                        name: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞',
                        type: 'line',
                        data: data['average–°ost']
                    }
                ],
                colors: ['#60ba5d', '#629bc2'],
                chart: {
                    height: 350,
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
                            "shortMonths": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
                            "days": ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    zoom: {
                        enabled: true
                    }
                },
                stroke: {
                    width: [0, 4]
                },
                title: {
                    text: '–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω'
                },
                dataLabels: {
                    enabled: false,
                },
                xaxis: {
                    type: 'datetime',
                    categories: data['datetime'],
                },
                yaxis: [
                    {
                        title: {
                            text: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞',
                        },
                    },
                    {
                        opposite: true,
                        title: {
                            text: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞'
                        }
                    }
                ]
            };

            document.getElementById('priceChangesChart').innerHTML = '';
            this.priceChangesChart = new ApexCharts(document.querySelector("#priceChangesChart"), options);
            this.priceChangesChart.render();

            if (this.debugEnabled) {
                console.log('‚úÖ ReportsManager: –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω —Å–æ–∑–¥–∞–Ω');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    createMarketCorridorChart(data) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ (–∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –≤ PANEL_REPORTS.md)
            const pointsData = this.getMarketCorridorData();
            
            const options = {
                chart: {
                    height: 600,
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
                            "shortMonths": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
                            "days": ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    type: 'line',
                    shadow: {
                        enabled: false,
                        color: 'rgba(187,187,187,0.47)',
                        top: 3,
                        left: 2,
                        blur: 3,
                        opacity: 1
                    }
                },
                stroke: {
                    curve: 'stepline',
                    width: [2, 2, 2] // —à–∏—Ä–∏–Ω—ã –ª–∏–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ä–∏–∏
                },
                series: pointsData.series,
                colors: pointsData.colors,
                xaxis: {
                    type: 'datetime'
                },
                title: {
                    text: '–ö–æ—Ä–∏–¥–æ—Ä —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                    align: 'left',
                    style: {
                        fontSize: "14px",
                        color: 'rgba(102,102,102,0.56)'
                    }
                },
                markers: {
                    size: 4,
                    opacity: 0.9,
                    colors: ["#56c2d6"],
                    strokeColor: "#fff",
                    strokeWidth: 2,
                    style: 'inverted',
                    hover: {
                        size: 15
                    }
                },
                tooltip: {
                    shared: false,
                    intersect: true
                },
                yaxis: {
                    min: pointsData.minPrice,
                    max: pointsData.maxPrice,
                    title: {
                        text: '–¶–µ–Ω–∞'
                    }
                },
                grid: {
                    show: true,
                    position: 'back',
                    xaxis: {
                        lines: {
                            show: true
                        }
                    },
                    yaxis: {
                        lines: {
                            show: true
                        }
                    },
                    borderColor: '#eeeeee'
                },
                legend: {
                    show: true
                },
                responsive: [{
                    breakpoint: 600,
                    options: {
                        chart: {
                            toolbar: {
                                show: true
                            }
                        },
                        legend: {
                            show: true
                        }
                    }
                }]
            };

            document.getElementById('marketCorridorChart').innerHTML = '';
            this.marketCorridorChart = new ApexCharts(document.querySelector("#marketCorridorChart"), options);
            this.marketCorridorChart.render();

            if (this.debugEnabled) {
                console.log('‚úÖ ReportsManager: –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
     */
    getMarketCorridorData() {
        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return {
            series: [
                {
                    name: '–û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                    data: [
                        [new Date('2024-01-15').getTime(), 12000000],
                        [new Date('2024-02-10').getTime(), 13500000],
                        [new Date('2024-03-05').getTime(), 11800000],
                        [new Date('2024-04-20').getTime(), 15200000],
                        [new Date('2024-05-12').getTime(), 14100000],
                        [new Date('2024-06-08').getTime(), 16800000],
                        [new Date('2024-07-25').getTime(), 13900000],
                        [new Date('2024-08-14').getTime(), 17500000]
                    ]
                }
            ],
            colors: ['#56c2d6'],
            minPrice: 10000000,
            maxPrice: 20000000
        };
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å
     */
    showPanel() {
        if (this.panelContainer) {
            this.panelContainer.style.display = 'block';
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
     */
    hidePanel() {
        if (this.panelContainer) {
            this.panelContainer.style.display = 'none';
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        // –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        if (this.liquidityChart) {
            this.liquidityChart.destroy();
            this.liquidityChart = null;
        }

        if (this.priceChangesChart) {
            this.priceChangesChart.destroy();
            this.priceChangesChart = null;
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ SlimSelect
        if (this.segmentSlimSelect) {
            this.segmentSlimSelect.destroy();
            this.segmentSlimSelect = null;
        }

        if (this.subsegmentSlimSelect) {
            this.subsegmentSlimSelect.destroy();
            this.subsegmentSlimSelect = null;
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π EventBus
        this.eventBus.off(CONSTANTS.EVENTS.SEGMENTS_UPDATED);
        this.eventBus.off(CONSTANTS.EVENTS.SUBSEGMENT_CREATED);
        this.eventBus.off(CONSTANTS.EVENTS.SUBSEGMENT_UPDATED);
        this.eventBus.off(CONSTANTS.EVENTS.SUBSEGMENT_DELETED);

        if (this.debugEnabled) {
            console.log('üîç ReportsManager: –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
        }
    }
}