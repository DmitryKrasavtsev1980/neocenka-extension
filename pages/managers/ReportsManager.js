/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç—á—ë—Ç–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å—é –æ—Ç—á—ë—Ç–æ–≤ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
 */
class ReportsManager {
    constructor(areaPage) {
        this.areaPage = areaPage;
        this.database = window.db;
        this.eventBus = areaPage.eventBus;
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.panelContainer = null;
        this.panelContent = null;
        this.panelHeader = null;
        this.panelChevron = null;
        
        // –§–∏–ª—å—Ç—Ä—ã
        this.segmentFilter = null;
        this.subsegmentFilter = null;
        this.dateFromFilter = null;
        this.dateToFilter = null;
        this.reportsDropdownBtn = null;
        this.reportsDropdown = null;
        this.reportsContent = null;
        
        // SlimSelect instances
        this.segmentSlimSelect = null;
        this.subsegmentSlimSelect = null;
        this.marketCorridorModeSlimSelect = null;
        
        // –ì—Ä–∞—Ñ–∏–∫–∏
        this.liquidityChart = null;
        this.priceChangesChart = null;
        this.marketCorridorChart = null;
        
        // –î–∞–Ω–Ω—ã–µ
        this.segments = [];
        this.subsegments = [];
        this.currentSegment = null;
        this.currentSubsegment = null;
        
        // –†–µ–∂–∏–º –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
        this.marketCorridorMode = 'sales'; // 'sales' –∏–ª–∏ 'history'
        
        this.debugEnabled = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤
     */
    async initialize() {
        try {
            if (this.debugEnabled) {
                // console.log('üîç ReportsManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
            await this.loadDebugSettings();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.initializeElements();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupEventHandlers();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect
            this.initializeSlimSelects();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            await this.loadSegmentsData();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞—Ç
            this.setDefaultDateFilters();

            // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–æ–≤
            await this.updateReportsVisibility();

            if (this.debugEnabled) {
                // console.log('‚úÖ ReportsManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
     */
    async loadDebugSettings() {
        try {
            if (!this.database || !this.database.getSettings) {
                this.debugEnabled = false;
                return;
            }
            const settings = await this.database.getSettings();
            this.debugEnabled = settings?.find(s => s.key === 'debug_enabled')?.value || false;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏:', error);
            this.debugEnabled = false;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    initializeElements() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–Ω–µ–ª–∏
        this.panelContainer = document.getElementById('reportsPanelContainer');
        this.panelContent = document.getElementById('reportsPanelContent');
        this.panelHeader = document.getElementById('reportsPanelHeader');
        this.panelChevron = document.getElementById('reportsPanelChevron');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.segmentFilter = document.getElementById('reportsSegmentFilter');
        this.subsegmentFilter = document.getElementById('reportsSubsegmentFilter');
        this.dateFromFilter = document.getElementById('reportsDateFrom');
        this.dateToFilter = document.getElementById('reportsDateTo');
        this.reportsDropdownBtn = document.getElementById('reportsDropdownBtn');
        this.reportsDropdown = document.getElementById('reportsDropdown');
        this.reportsContent = document.getElementById('reportsContent');

        if (!this.panelContainer) {
            throw new Error('–≠–ª–µ–º–µ–Ω—Ç reportsPanelContainer –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (this.debugEnabled) {
            // console.log('üîç ReportsManager: –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        if (this.panelHeader) {
            this.panelHeader.addEventListener('click', () => {
                this.togglePanel();
            });
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤
        if (this.reportsDropdownBtn) {
            this.reportsDropdownBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.toggleReportsDropdown();
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            if (this.reportsDropdown && this.reportsDropdownBtn &&
                !this.reportsDropdownBtn.contains(e.target) && 
                !this.reportsDropdown.contains(e.target)) {
                this.reportsDropdown.classList.add('hidden');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
        const liquidityCheck = document.getElementById('liquidityReportCheck');
        const priceChangesCheck = document.getElementById('priceChangesReportCheck');
        const marketCorridorCheck = document.getElementById('marketCorridorReportCheck');
        const comparativeAnalysisCheck = document.getElementById('comparativeAnalysisReportCheck');
        
        if (liquidityCheck) {
            liquidityCheck.addEventListener('change', () => {
                this.updateReportsVisibility();
            });
        }
        
        if (priceChangesCheck) {
            priceChangesCheck.addEventListener('change', () => {
                this.updateReportsVisibility();
            });
        }

        if (marketCorridorCheck) {
            marketCorridorCheck.addEventListener('change', () => {
                this.updateReportsVisibility();
            });
        }

        if (comparativeAnalysisCheck) {
            comparativeAnalysisCheck.addEventListener('change', () => {
                this.updateReportsVisibility();
            });
        }

        // –°–æ–±—ã—Ç–∏—è SlimSelect –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞—Ç
        if (this.dateFromFilter) {
            this.dateFromFilter.addEventListener('change', () => {
                this.updateReportsVisibility();
            });
        }

        if (this.dateToFilter) {
            this.dateToFilter.addEventListener('change', () => {
                this.updateReportsVisibility();
            });
        }

        // –°–æ–±—ã—Ç–∏—è EventBus
        this.eventBus.on(CONSTANTS.EVENTS.SEGMENTS_UPDATED, () => {
            this.loadSegmentsData();
        });

        this.eventBus.on(CONSTANTS.EVENTS.SUBSEGMENT_CREATED, () => {
            this.loadSegmentsData();
        });

        this.eventBus.on(CONSTANTS.EVENTS.SUBSEGMENT_UPDATED, () => {
            this.loadSegmentsData();
        });

        this.eventBus.on(CONSTANTS.EVENTS.SUBSEGMENT_DELETED, () => {
            this.loadSegmentsData();
        });

        if (this.debugEnabled) {
            // console.log('üîç ReportsManager: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SlimSelect
     */
    initializeSlimSelects() {
        try {
            // SlimSelect –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ updateSegmentFilter –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            
            // –°–æ–∑–¥–∞–µ–º SlimSelect –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å—Ä–∞–∑—É (–≤ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
            if (this.subsegmentFilter && typeof SlimSelect !== 'undefined') {
                this.subsegmentSlimSelect = new SlimSelect({
                    select: this.subsegmentFilter,
                    settings: {
                        allowDeselect: true,
                        disabled: true,
                        placeholderText: '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã'
                    },
                    events: {
                        afterChange: (newVal) => {
                            const subsegmentId = Array.isArray(newVal) && newVal.length > 0 ? newVal[0].value : 
                                               (newVal && newVal.value !== undefined ? newVal.value : newVal);
                                            this.handleSubsegmentChange(subsegmentId);
                        }
                    }
                });
                
                if (this.debugEnabled) {
                    // console.log('üîç ReportsManager: SlimSelect –¥–ª—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–æ—Ç–∫–ª—é—á–µ–Ω)');
                }
            }

            // –°–æ–∑–¥–∞–µ–º SlimSelect –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ä–µ–∂–∏–º–æ–≤ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
            const marketCorridorModeSelect = document.getElementById('marketCorridorModeSelect');
            if (marketCorridorModeSelect && typeof SlimSelect !== 'undefined') {
                this.marketCorridorModeSlimSelect = new SlimSelect({
                    select: marketCorridorModeSelect,
                    settings: {
                        showSearch: false
                    },
                    events: {
                        afterChange: (newVal) => {
                            const mode = Array.isArray(newVal) && newVal.length > 0 ? newVal[0].value : 
                                        (newVal && newVal.value !== undefined ? newVal.value : newVal);
                            this.handleMarketCorridorModeChange(mode);
                        }
                    }
                });
                
                if (this.debugEnabled) {
                    console.log('üîç ReportsManager: SlimSelect –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                }
            }
            
            if (this.debugEnabled) {
                // console.log('üîç ReportsManager: SlimSelect –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SlimSelect:', error);
        }
    }

    /**
     * –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
     */
    togglePanel() {
        if (!this.panelContent || !this.panelChevron) return;

        const isHidden = this.panelContent.classList.contains('hidden');
        
        if (isHidden) {
            this.panelContent.classList.remove('hidden');
            this.panelChevron.style.transform = 'rotate(0deg)';
        } else {
            this.panelContent.classList.add('hidden');
            this.panelChevron.style.transform = 'rotate(-90deg)';
        }

        if (this.debugEnabled) {
            // console.log('üîç ReportsManager: –ü–∞–Ω–µ–ª—å', isHidden ? '—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞' : '—Å–≤–µ—Ä–Ω—É—Ç–∞');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤
     */
    toggleReportsDropdown() {
        if (!this.reportsDropdown) return;

        this.reportsDropdown.classList.toggle('hidden');

        if (this.debugEnabled) {
            // console.log('üîç ReportsManager: –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
     */
    async updateReportsVisibility() {
        if (!this.reportsContent) return;

        const liquidityCheck = document.getElementById('liquidityReportCheck');
        const priceChangesCheck = document.getElementById('priceChangesReportCheck');
        const marketCorridorCheck = document.getElementById('marketCorridorReportCheck');
        const comparativeAnalysisCheck = document.getElementById('comparativeAnalysisReportCheck');
        
        const showLiquidity = liquidityCheck?.checked || false;
        const showPriceChanges = priceChangesCheck?.checked || false;
        const showMarketCorridor = marketCorridorCheck?.checked || false;
        const showComparativeAnalysis = comparativeAnalysisCheck?.checked || false;

        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç—á—ë—Ç–æ–≤ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç—á—ë—Ç
        if (showLiquidity || showPriceChanges || showMarketCorridor || showComparativeAnalysis) {
            this.reportsContent.classList.remove('hidden');
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤
            await this.generateReports();
            
            // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
            const liquidityReport = document.querySelector('#liquidityChart').closest('.bg-white');
            const priceChangesReport = document.querySelector('#priceChangesChart').closest('.bg-white');
            const marketCorridorReport = document.querySelector('#marketCorridorChart').closest('.bg-white');
            const comparativeAnalysisReport = document.querySelector('#comparativeAnalysisContainer').closest('.bg-white');
            
            if (liquidityReport) {
                liquidityReport.style.display = showLiquidity ? 'block' : 'none';
            }
            
            if (priceChangesReport) {
                priceChangesReport.style.display = showPriceChanges ? 'block' : 'none';
            }

            if (marketCorridorReport) {
                marketCorridorReport.style.display = showMarketCorridor ? 'block' : 'none';
            }

            if (comparativeAnalysisReport) {
                comparativeAnalysisReport.style.display = showComparativeAnalysis ? 'block' : 'none';
            }

            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if (showComparativeAnalysis && this.areaPage.comparativeAnalysisManager) {
                await this.areaPage.comparativeAnalysisManager.showComparativeAnalysis();
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏
                await this.areaPage.comparativeAnalysisManager.onPanelActivated();
            } else if (!showComparativeAnalysis && this.areaPage.comparativeAnalysisManager) {
                this.areaPage.comparativeAnalysisManager.hideComparativeAnalysis();
            }
        } else {
            this.reportsContent.classList.add('hidden');
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç—á–µ—Ç–æ–≤ —Å–∫—Ä—ã—Ç
            if (this.areaPage.comparativeAnalysisManager) {
                this.areaPage.comparativeAnalysisManager.hideComparativeAnalysis();
            }
        }

        if (this.debugEnabled) {
            console.log('üîç ReportsManager: –í–∏–¥–∏–º–æ—Å—Ç—å –æ—Ç—á—ë—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', {
                showLiquidity,
                showPriceChanges,
                showMarketCorridor,
                showComparativeAnalysis
            });
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –æ—Ç—á—ë—Ç—ã (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ updateReportsVisibility)
     */
    toggleReports() {
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—á—ë—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const liquidityCheck = document.getElementById('liquidityReportCheck');
        const priceChangesCheck = document.getElementById('priceChangesReportCheck');
        const marketCorridorCheck = document.getElementById('marketCorridorReportCheck');
        
        if (liquidityCheck) liquidityCheck.checked = true;
        if (priceChangesCheck) priceChangesCheck.checked = true;
        if (marketCorridorCheck) marketCorridorCheck.checked = true;
        
        this.updateReportsVisibility();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    async loadSegmentsData() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–±–ª–∞—Å—Ç—å —á–µ—Ä–µ–∑ dataState (–∫–∞–∫ –≤ DuplicatesManager)
            const currentArea = this.areaPage.dataState?.getState('currentArea');
            if (!currentArea) {
                if (this.debugEnabled) {
                    console.log('‚ö†Ô∏è ReportsManager: –ù–µ—Ç —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤');
                }
                return;
            }

            if (!this.database) {
                if (this.debugEnabled) {
                    console.log('‚ö†Ô∏è ReportsManager: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                }
                return;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –∏ –≤ DuplicatesManager
            this.segments = await this.database.getSegmentsByMapArea(currentArea.id);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            this.updateSegmentFilter();

            if (this.debugEnabled) {
                console.log('‚úÖ ReportsManager: –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', this.segments.length, '–¥–ª—è –æ–±–ª–∞—Å—Ç–∏:', currentArea.name);
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', error);
            this.segments = [];
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    updateSegmentFilter() {
        if (!this.segmentFilter) return;

        // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏–∏ (–∫–∞–∫ –≤ DuplicatesManager)
        this.segmentFilter.innerHTML = '';
        
        this.segments.forEach(segment => {
            const option = document.createElement('option');
            option.value = segment.id;
            option.textContent = segment.name;
            this.segmentFilter.appendChild(option);
        });

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º SlimSelect —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (this.segmentSlimSelect) {
            this.segmentSlimSelect.destroy();
        }

        if (this.segments.length > 0) {
            this.segmentSlimSelect = new SlimSelect({
                select: this.segmentFilter,
                settings: {
                    allowDeselect: true,
                    showSearch: false,
                    placeholderText: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–º–µ–Ω—Ç'
                },
                events: {
                    afterChange: (newVal) => {
                        // newVal –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                        const segmentId = Array.isArray(newVal) && newVal.length > 0 ? newVal[0].value : 
                                         (newVal && newVal.value !== undefined ? newVal.value : newVal);
                                this.handleSegmentChange(segmentId);
                    }
                }
            });
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.segmentSlimSelect.setSelected([]);
        }

        if (this.debugEnabled) {
            // console.log('üîç ReportsManager: –§–∏–ª—å—Ç—Ä —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω, —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', this.segments.length);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ DuplicatesManager)
     */
    async handleSegmentChange(segmentId) {
        try {
            this.currentSegment = segmentId ? this.segments.find(s => s.id === segmentId || s.id === parseInt(segmentId)) : null;
            this.currentSubsegment = null;
            
            if (this.debugEnabled) {
                console.log('üîç ReportsManager: –í—ã–±—Ä–∞–Ω —Å–µ–≥–º–µ–Ω—Ç:', this.currentSegment?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω');
            }
            
            if (!segmentId) {
                // –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                if (this.subsegmentSlimSelect) {
                    this.subsegmentSlimSelect.setData([{ text: '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã', value: '' }]);
                    this.subsegmentSlimSelect.enable(false);
                    this.subsegmentSlimSelect.setSelected([]);
                }
                this.subsegments = [];
            } else {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                const subsegments = await this.database.getSubsegmentsBySegment(segmentId);
                
                // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤
                this.subsegmentFilter.innerHTML = '<option value="">–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã</option>';
                subsegments.forEach(subsegment => {
                    const option = document.createElement('option');
                    option.value = subsegment.id;
                    option.textContent = subsegment.name;
                    this.subsegmentFilter.appendChild(option);
                });
                
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SlimSelect
                if (this.subsegmentSlimSelect) {
                    this.subsegmentSlimSelect.setData([
                        { text: '–í—Å–µ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã', value: '' },
                        ...subsegments.map(subsegment => ({ 
                            text: subsegment.name, 
                            value: subsegment.id.toString() 
                        }))
                    ]);
                    this.subsegmentSlimSelect.enable(true);
                }
                
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã
                this.subsegments = subsegments;
            }

            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
            await this.updateReportsVisibility();
            
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞:', error);
        }
    }


    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
     */
    async handleSubsegmentChange(subsegmentId) {
        this.currentSubsegment = subsegmentId ? this.subsegments.find(s => s.id === subsegmentId || s.id === parseInt(subsegmentId)) : null;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
        await this.updateReportsVisibility();

    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
     */
    async handleMarketCorridorModeChange(mode) {
        this.marketCorridorMode = mode;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        this.updateMarketCorridorDescription(mode);

        // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω
        if (this.marketCorridorChart) {
            await this.createMarketCorridorChart();
        }

        if (this.debugEnabled) {
            console.log('üîç ReportsManager: –ò–∑–º–µ–Ω–µ–Ω —Ä–µ–∂–∏–º –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞:', mode);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
     */
    updateMarketCorridorDescription(mode) {
        const descriptionElement = document.getElementById('marketCorridorDescription');
        if (!descriptionElement) return;

        switch (mode) {
            case 'sales':
                descriptionElement.textContent = '–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–∞—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º –Ω–∞ –¥–∞—Ç—É —É—Ö–æ–¥–∞ —Å —Ä—ã–Ω–∫–∞, –∞–∫—Ç–∏–≤–Ω—ã–µ - —Å–∏–Ω–∏–º –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É.';
                break;
            case 'history':
                descriptionElement.textContent = '–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º). –ö–∞–∂–¥–∞—è –ª–∏–Ω–∏—è - –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç.';
                break;
            default:
                descriptionElement.textContent = '–ì—Ä–∞—Ñ–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –≤ –æ–±—ä–µ–∫—Ç–∞—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏, –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.';
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    setDefaultDateFilters() {
        if (!this.dateFromFilter || !this.dateToFilter) return;

        const now = new Date();
        const yearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
        const tomorrow = new Date(now);
        tomorrow.setDate(now.getDate() + 1);

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        this.dateFromFilter.value = yearAgo.toISOString().split('T')[0];
        this.dateToFilter.value = tomorrow.toISOString().split('T')[0];
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤
     */
    async generateReports() {
        try {
            if (this.debugEnabled) {
                // console.log('üîç ReportsManager: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤...');
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
            const reportData = await this.getReportData();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            this.createLiquidityChart(reportData);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
            this.createPriceChangesChart(reportData);

            // –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            await this.createMarketCorridorChart(reportData);

            if (this.debugEnabled) {
                // console.log('‚úÖ ReportsManager: –û—Ç—á—ë—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
     */
    async getReportData() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const currentArea = this.areaPage.dataState?.getState('currentArea');
            if (!currentArea) {
                if (this.debugEnabled) {
                    // console.log('üîç ReportsManager: –ù–µ—Ç —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏');
                }
                return this.getEmptyReportData();
            }

            const segmentId = this.currentSegment?.id;
            const subsegmentId = this.currentSubsegment?.id;
            const dateFrom = new Date(this.dateFromFilter?.value || '2023-01-01');
            const dateTo = new Date(this.dateToFilter?.value || new Date().toISOString().split('T')[0]);

            if (this.debugEnabled) {
                console.log('üîç ReportsManager: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞:', {
                    areaId: currentArea.id,
                    segmentId,
                    subsegmentId,
                    segmentName: this.currentSegment?.name || '–í—Å—è –æ–±–ª–∞—Å—Ç—å',
                    dateFrom: dateFrom.toISOString(),
                    dateTo: dateTo.toISOString()
                });
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const objects = await this.getFilteredRealEstateObjects(currentArea.id, segmentId, subsegmentId, dateFrom, dateTo);
            
            if (this.debugEnabled) {
                // console.log('üîç ReportsManager: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:', objects.length);
            }

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
            const reportData = this.processObjectsForReports(objects, dateFrom, dateTo);

            return reportData;

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤:', error);
            return this.getEmptyReportData();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    async getFilteredRealEstateObjects(areaId, segmentId, subsegmentId, dateFrom, dateTo) {
        try {
            let objects = [];

            if (segmentId) {
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                const segment = await this.database.getSegment(segmentId);
                if (!segment) {
                    if (this.debugEnabled) {
                        console.log('‚ö†Ô∏è ReportsManager: –°–µ–≥–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', segmentId);
                    }
                    return [];
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
                const addresses = await this.database.getAddressesInMapArea(segment.map_area_id);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å–µ–≥–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                let filteredAddresses = addresses;
                if (segment.filters) {
                    filteredAddresses = this.filterAddressesBySegmentCriteria(addresses, segment.filters);
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
                for (const address of filteredAddresses) {
                    const addressObjects = await this.database.getObjectsByAddress(address.id);
                    objects.push(...addressObjects);
                }
                
                if (subsegmentId) {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
                    const subsegment = await this.database.getSubsegment(subsegmentId);
                    
                    if (subsegment && subsegment.filters) {
                        const objectsBeforeFilter = objects.length;
                        objects = this.filterObjectsBySubsegment(objects, subsegment);
                    } else {
                    }
                }
                
                if (this.debugEnabled) {
                    console.log(`üîç ReportsManager: –°–µ–≥–º–µ–Ω—Ç ${segment.name}: ${filteredAddresses.length} –∞–¥—Ä–µ—Å–æ–≤ ‚Üí ${objects.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
                }
            } else {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –æ–±–ª–∞—Å—Ç–∏
                const addresses = await this.database.getAddressesInMapArea(areaId);
                for (const address of addresses) {
                    const addressObjects = await this.database.getObjectsByAddress(address.id);
                    objects.push(...addressObjects);
                }
                
                if (this.debugEnabled) {
                    console.log(`üîç ReportsManager: –í—Å—è –æ–±–ª–∞—Å—Ç—å: ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤ ‚Üí ${objects.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
                }
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∫–ª—é—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ –ø–µ—Ä–∏–æ–¥
            objects = objects.filter(obj => {
                // –û–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∞—Ç—É
                if (!obj.created && !obj.updated) return false;
                
                const createdDate = obj.created ? new Date(obj.created) : null;
                const updatedDate = obj.updated ? new Date(obj.updated) : null;
                
                // –í–∫–ª—é—á–∞–µ–º –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏:
                // 1. –°–æ–∑–¥–∞–Ω –í –ø–µ—Ä–∏–æ–¥, –ò–õ–ò
                // 2. –û–±–Ω–æ–≤–ª–µ–Ω –í –ø–µ—Ä–∏–æ–¥ (–∏–º–µ–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–µ—Ä–∏–æ–¥), –ò–õ–ò
                // 3. –°–æ–∑–¥–∞–Ω –î–û –ø–µ—Ä–∏–æ–¥–∞ –Ω–æ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω (–¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
                
                const createdInPeriod = createdDate && createdDate >= dateFrom && createdDate <= dateTo;
                const updatedInPeriod = updatedDate && updatedDate >= dateFrom && updatedDate <= dateTo;
                const createdBeforePeriod = createdDate && createdDate < dateFrom;
                
                const shouldInclude = createdInPeriod || updatedInPeriod || createdBeforePeriod;
                
                if (this.debugEnabled && !shouldInclude) {
                    console.log('üîç ReportsManager: –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø–µ—Ä–∏–æ–¥:', {
                        created: createdDate?.toISOString(),
                        updated: updatedDate?.toISOString(),
                        dateFrom: dateFrom.toISOString(),
                        dateTo: dateTo.toISOString(),
                        obj: obj.id
                    });
                }
                
                return shouldInclude;
            });

            return objects;

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:', error);
            return [];
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
     */
    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å–µ–≥–º–µ–Ω—Ç–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ DuplicatesManager)
     */
    filterAddressesBySegmentCriteria(addresses, segmentFilters) {
        if (!segmentFilters) return addresses;
        
        return addresses.filter(address => {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–æ–º–∞
            if (segmentFilters.type && segmentFilters.type.length > 0) {
                if (!segmentFilters.type.includes(address.building_type)) {
                    return false;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
            if (segmentFilters.addresses && Array.isArray(segmentFilters.addresses) && segmentFilters.addresses.length > 0) {
                if (!segmentFilters.addresses.includes(address.id)) {
                    return false;
                }
            }
            
            // –î—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
            // (–ø–ª–æ—â–∞–¥—å –¥–æ–º–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –∏ —Ç.–¥.)
            
            return true;
        });
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞
     */
    filterObjectsBySubsegment(objects, subsegment) {
        if (!subsegment.filters) return objects;

        return objects.filter(obj => {
            const criteria = subsegment.filters;
            
            // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç)
            if (criteria.property_type && criteria.property_type.length > 0) {
                if (!criteria.property_type.includes(obj.property_type)) return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–∂–∞–º
            if (criteria.floor_from && obj.floor < criteria.floor_from) return false;
            if (criteria.floor_to && obj.floor > criteria.floor_to) return false;

            // –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏
            if (criteria.area_from && obj.area_total < criteria.area_from) return false;
            if (criteria.area_to && obj.area_total > criteria.area_to) return false;

            // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            if (criteria.price_from && obj.current_price < criteria.price_from) return false;
            if (criteria.price_to && obj.current_price > criteria.price_to) return false;

            return true;
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
     */
    processObjectsForReports(objects, dateFrom, dateTo) {
        // –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –º–µ—Å—è—Ü–µ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ
        const months = this.generateMonthsArray(dateFrom, dateTo);
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–∏–æ–¥–∞, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
        if (months.length === 0) {
            const currentDate = new Date();
            months.push(new Date(currentDate.getFullYear(), currentDate.getMonth(), 1));
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        const reportData = {
            new: new Array(months.length).fill(0),
            close: new Array(months.length).fill(0),
            active: new Array(months.length).fill(0),
            average–°ost: new Array(months.length).fill(0),
            average–°ostMeter: new Array(months.length).fill(0),
            average–°ostArchive: new Array(months.length).fill(0),
            average–°ostMeterArchive: new Array(months.length).fill(0),
            datetime: months.map(date => {
                // ApexCharts —Ç—Ä–µ–±—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –∏–ª–∏ timestamp
                return date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-01';
            })
        };

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –í–°–ï –æ–±—ä–µ–∫—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–∂–¥–æ–º –º–µ—Å—è—Ü–µ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞)
        objects.forEach(obj => {
            const createdDate = new Date(obj.created);
            const monthIndex = this.getMonthIndex(createdDate, months);
            
            if (monthIndex >= 0 && obj.created) {
                // –ù–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã - –í–°–ï —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
                reportData.new[monthIndex]++;
            }
        });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —É—à–µ–¥—à–∏—Ö —Å —Ä—ã–Ω–∫–∞
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ê—Ä—Ö–∏–≤" –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        objects.forEach(obj => {
            if (obj.status === 'archive' && obj.updated) {
                const closeDate = new Date(obj.updated);
                const monthIndex = this.getMonthIndex(closeDate, months);
                if (monthIndex >= 0) {
                    reportData.close[monthIndex]++;
                }
            }
        });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
        months.forEach((month, index) => {
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
            const activeAtMonthStart = objects.filter(obj => {
                if (!obj.created) return false;
                
                const createdDate = new Date(obj.created);
                const updatedDate = obj.updated ? new Date(obj.updated) : null;
                
                // –û–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –î–û –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
                if (createdDate >= month) return false;
                
                // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∞—Ä—Ö–∏–≤–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –æ–Ω —Å—Ç–∞–ª –∞—Ä—Ö–∏–≤–Ω—ã–º
                if (obj.status === 'archive') {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ–Ω–∞ –î–û –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ - –æ–±—ä–µ–∫—Ç —É–∂–µ –±—ã–ª –∞—Ä—Ö–∏–≤–Ω—ã–º
                    if (updatedDate && updatedDate < month) {
                        return false;
                    }
                    // –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ü–û–°–õ–ï –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ - –æ–±—ä–µ–∫—Ç –µ—â–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
                    return true;
                }
                
                // –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                return obj.status === 'active';
            }).length;
            
            reportData.active[index] = activeAtMonthStart;
        });

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
        months.forEach((month, index) => {
            // –ù–∞—Ö–æ–¥–∏–º –ê–ö–¢–ò–í–ù–´–ï –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
            const activeObjects = objects.filter(obj => {
                if (!obj.created || obj.status === 'archive') return false;
                
                const createdDate = new Date(obj.created);
                const updatedDate = obj.updated ? new Date(obj.updated) : new Date(); // –ï—Å–ª–∏ –Ω–µ—Ç updated - –æ–±—ä–µ–∫—Ç –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                
                // –û–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ –µ—Å–ª–∏: created <= –Ω–∞—á–∞–ª–æ_–º–µ—Å—è—Ü–∞ < updated
                return createdDate <= month && month < updatedDate;
            });

            // –ù–∞—Ö–æ–¥–∏–º –ê–†–•–ò–í–ù–´–ï –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
            const archiveObjects = objects.filter(obj => {
                if (!obj.created || obj.status !== 'archive') return false;
                
                const createdDate = new Date(obj.created);
                const updatedDate = obj.updated ? new Date(obj.updated) : new Date();
                
                // –ê—Ä—Ö–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ –µ—Å–ª–∏: created <= –Ω–∞—á–∞–ª–æ_–º–µ—Å—è—Ü–∞ < updated
                return createdDate <= month && month < updatedDate;
            });

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ê–ö–¢–ò–í–ù–´–ï –æ–±—ä–µ–∫—Ç—ã
            if (activeObjects.length > 0) {
                const pricesAtMonth = [];
                const pricesPerMeterAtMonth = [];

                activeObjects.forEach(obj => {
                    // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                    const priceAtMonth = this.getPriceAtDate(obj, month);
                    const pricePerMeterAtMonth = this.getPricePerMeterAtDate(obj, month);
                    
                    if (priceAtMonth > 0) {
                        pricesAtMonth.push(priceAtMonth);
                    }
                    
                    if (pricePerMeterAtMonth > 0) {
                        pricesPerMeterAtMonth.push(pricePerMeterAtMonth);
                    }
                });

                // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                if (pricesAtMonth.length > 0) {
                    const totalPrice = pricesAtMonth.reduce((sum, price) => sum + price, 0);
                    reportData.average–°ost[index] = Math.round(totalPrice / pricesAtMonth.length);
                }

                if (pricesPerMeterAtMonth.length > 0) {
                    const totalPricePerMeter = pricesPerMeterAtMonth.reduce((sum, price) => sum + price, 0);
                    reportData.average–°ostMeter[index] = Math.round(totalPricePerMeter / pricesPerMeterAtMonth.length);
                }
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ê–†–•–ò–í–ù–´–ï –æ–±—ä–µ–∫—Ç—ã
            if (archiveObjects.length > 0) {
                const pricesAtMonthArchive = [];
                const pricesPerMeterAtMonthArchive = [];

                archiveObjects.forEach(obj => {
                    // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                    const priceAtMonth = this.getPriceAtDate(obj, month);
                    const pricePerMeterAtMonth = this.getPricePerMeterAtDate(obj, month);
                    
                    if (priceAtMonth > 0) {
                        pricesAtMonthArchive.push(priceAtMonth);
                    }
                    
                    if (pricePerMeterAtMonth > 0) {
                        pricesPerMeterAtMonthArchive.push(pricePerMeterAtMonth);
                    }
                });

                // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                if (pricesAtMonthArchive.length > 0) {
                    const totalPriceArchive = pricesAtMonthArchive.reduce((sum, price) => sum + price, 0);
                    reportData.average–°ostArchive[index] = Math.round(totalPriceArchive / pricesAtMonthArchive.length);
                }

                if (pricesPerMeterAtMonthArchive.length > 0) {
                    const totalPricePerMeterArchive = pricesPerMeterAtMonthArchive.reduce((sum, price) => sum + price, 0);
                    reportData.average–°ostMeterArchive[index] = Math.round(totalPricePerMeterArchive / pricesPerMeterAtMonthArchive.length);
                }
            }
        });

        if (this.debugEnabled) {
            console.log('üîç ReportsManager: –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:', {
                months: reportData.datetime,
                new: reportData.new,
                close: reportData.close,
                active: reportData.active,
                average–°ost: reportData.average–°ost,
                average–°ostMeter: reportData.average–°ostMeter,
                average–°ostArchive: reportData.average–°ostArchive,
                average–°ostMeterArchive: reportData.average–°ostMeterArchive,
                totalObjects: objects.length
            });
        }

        return reportData;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –º–µ—Å—è—Ü–µ–≤ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
     */
    generateMonthsArray(dateFrom, dateTo) {
        const months = [];
        const current = new Date(dateFrom.getFullYear(), dateFrom.getMonth(), 1);
        const end = new Date(dateTo.getFullYear(), dateTo.getMonth(), 1);

        while (current <= end) {
            months.push(new Date(current));
            current.setMonth(current.getMonth() + 1);
        }

        return months;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –º–µ—Å—è—Ü–∞ –≤ –º–∞—Å—Å–∏–≤–µ
     */
    getMonthIndex(date, months) {
        return months.findIndex(month => this.isSameMonth(date, month));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
     */
    isSameMonth(date1, date2) {
        return date1.getFullYear() === date2.getFullYear() && 
               date1.getMonth() === date2.getMonth();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
     */
    getEmptyReportData() {
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ ApexCharts
        const currentDate = new Date();
        const dateStr = currentDate.getFullYear() + '-' + String(currentDate.getMonth() + 1).padStart(2, '0') + '-01';
        
        return {
            new: [0],
            close: [0],
            active: [0],
            average–°ost: [0],
            average–°ostMeter: [0],
            average–°ostArchive: [0],
            average–°ostMeterArchive: [0],
            datetime: [dateStr]
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
     */
    createLiquidityChart(data) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if (!data || !data.datetime || data.datetime.length === 0) {
                document.getElementById('liquidityChart').innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
                return;
            }

            const options = {
                series: [
                    {
                        name: '–ù–æ–≤—ã–µ',
                        type: 'column',
                        data: data['new']
                    },
                    {
                        name: '–£—à–µ–¥—à–∏–µ —Å —Ä—ã–Ω–∫–∞',
                        type: 'column',
                        data: data['close']
                    },
                    {
                        name: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞',
                        type: 'line',
                        data: data['active']
                    }
                ],
                colors: ['#60ba5d', '#bd5f5f', '#629bc2'],
                chart: {
                    height: 350,
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
                            "shortMonths": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
                            "days": ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    zoom: {
                        enabled: true
                    }
                },
                responsive: [{
                    breakpoint: 480,
                    options: {
                        legend: {
                            position: 'bottom',
                            offsetX: -10,
                            offsetY: 0
                        }
                    }
                }],
                dataLabels: {
                    enabled: true,
                },
                plotOptions: {
                    bar: {
                        borderRadius: 8,
                        horizontal: false,
                    },
                },
                xaxis: {
                    type: 'datetime',
                    categories: data['datetime'],
                },
                legend: {
                    position: 'bottom'
                },
                fill: {
                    opacity: 1
                }
            };

            document.getElementById('liquidityChart').innerHTML = '';
            this.liquidityChart = new ApexCharts(document.querySelector("#liquidityChart"), options);
            this.liquidityChart.render();

            if (this.debugEnabled) {
                // console.log('‚úÖ ReportsManager: –ì—Ä–∞—Ñ–∏–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
     */
    createPriceChangesChart(data) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if (!data || !data.datetime || data.datetime.length === 0) {
                document.getElementById('priceChangesChart').innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
                return;
            }


            const options = {
                series: [
                    {
                        name: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞ (–ê–∫—Ç–∏–≤–Ω—ã–µ)',
                        type: 'column',
                        data: data['average–°ostMeter']
                    },
                    {
                        name: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ (–ê–∫—Ç–∏–≤–Ω—ã–µ)',
                        type: 'line',
                        data: data['average–°ost']
                    },
                    {
                        name: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞ (–ê—Ä—Ö–∏–≤)',
                        type: 'column',
                        data: data['average–°ostMeterArchive']
                    },
                    {
                        name: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ (–ê—Ä—Ö–∏–≤)',
                        type: 'line',
                        data: data['average–°ostArchive']
                    }
                ],
                colors: ['#60ba5d', '#629bc2', '#ff9800', '#e91e63'],
                chart: {
                    height: 350,
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
                            "shortMonths": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
                            "days": ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    zoom: {
                        enabled: true
                    }
                },
                stroke: {
                    width: [0, 4]
                },
                title: {
                    text: '–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω'
                },
                dataLabels: {
                    enabled: false,
                },
                xaxis: {
                    type: 'datetime',
                    categories: data['datetime'],
                },
                yaxis: [
                    {
                        seriesName: ['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞ (–ê–∫—Ç–∏–≤–Ω—ã–µ)', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞ (–ê—Ä—Ö–∏–≤)'],
                        title: {
                            text: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–∞',
                        },
                        labels: {
                            formatter: function (val) {
                                return new Intl.NumberFormat('ru-RU').format(val);
                            }
                        }
                    },
                    {
                        seriesName: ['–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ (–ê–∫—Ç–∏–≤–Ω—ã–µ)', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ (–ê—Ä—Ö–∏–≤)'],
                        opposite: true,
                        title: {
                            text: '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞'
                        },
                        labels: {
                            formatter: function (val) {
                                return new Intl.NumberFormat('ru-RU').format(val);
                            }
                        }
                    }
                ]
            };

            document.getElementById('priceChangesChart').innerHTML = '';
            this.priceChangesChart = new ApexCharts(document.querySelector("#priceChangesChart"), options);
            this.priceChangesChart.render();

            if (this.debugEnabled) {
                // console.log('‚úÖ ReportsManager: –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω —Å–æ–∑–¥–∞–Ω');
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    async createMarketCorridorChart(data) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const pointsData = await this.getMarketCorridorData();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if (!pointsData || !pointsData.series || pointsData.series.length === 0 || pointsData.series[0].data.length === 0) {
                document.getElementById('marketCorridorChart').innerHTML = '<div class="flex items-center justify-center h-full text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
                return;
            }
            
            const options = {
                chart: {
                    height: 600,
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º mixed —Ç–∏–ø –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (–ª–∏–Ω–∏–∏ + —Ç–æ—á–∫–∏)
                    type: this.marketCorridorMode === 'history' ? 'line' : 'scatter',
                    locales: [{
                        "name": "ru",
                        "options": {
                            "months": ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"],
                            "shortMonths": ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"],
                            "days": ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"],
                            "shortDays": ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
                            "toolbar": {
                                "exportToSVG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG",
                                "exportToPNG": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG",
                                "exportToCSV": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV",
                                "menu": "–ú–µ–Ω—é",
                                "selection": "–í—ã–±–æ—Ä",
                                "selectionZoom": "–í—ã–±–æ—Ä —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º",
                                "zoomIn": "–£–≤–µ–ª–∏—á–∏—Ç—å",
                                "zoomOut": "–£–º–µ–Ω—å—à–∏—Ç—å",
                                "pan": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
                                "reset": "–°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"
                            }
                        }
                    }],
                    defaultLocale: "ru",
                    events: {
                        click: (event, chartContext, config) => {
                            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ
                            this.handleMarketCorridorPointClick(event, chartContext, config);
                        }
                    }
                },
                stroke: {
                    width: this.marketCorridorMode === 'history' ? 2 : 0, // –õ–∏–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏
                    curve: this.marketCorridorMode === 'history' ? 'stepline' : 'straight'
                },
                series: pointsData.series,
                colors: pointsData.colors,
                xaxis: {
                    type: 'datetime'
                },
                legend: {
                    show: false,
                    showForSingleSeries: false,
                    showForNullSeries: false,
                    showForZeroSeries: false
                },
                title: {
                    text: this.marketCorridorMode === 'history' ? '–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤' : '–ö–æ—Ä–∏–¥–æ—Ä —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                    align: 'left',
                    style: {
                        fontSize: "14px",
                        color: 'rgba(102,102,102,0.56)'
                    }
                },
                markers: {
                    size: 4,
                    opacity: 0.9,
                    strokeColor: "#fff",
                    strokeWidth: 2,
                    style: 'inverted',
                    hover: {
                        size: 15
                    }
                },
                tooltip: {
                    shared: false,
                    intersect: true,
                    custom: (tooltipModel) => {
                        const { series, seriesIndex, dataPointIndex, w } = tooltipModel;
                        
                        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ this
                        const reportsManager = window.reportsManagerInstance; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                        
                        let point = null;
                        
                        if (reportsManager && reportsManager.currentPointsData) {
                            if (reportsManager.marketCorridorMode === 'history') {
                                // –í —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–æ—á–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                                const seriesData = w.config.series[seriesIndex];
                                if (seriesData && seriesData.data && seriesData.data[dataPointIndex]) {
                                    const [timestamp, price] = seriesData.data[dataPointIndex];
                                    
                                    // –ò—â–µ–º —Ç–æ—á–∫—É —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                    point = reportsManager.currentPointsData.find(p => 
                                        Math.abs(p.x - timestamp) < 1000 && Math.abs(p.y - price) < 0.01
                                    );
                                }
                            } else {
                                // –í —Ä–µ–∂–∏–º–µ –∫–æ—Ä–∏–¥–æ—Ä–∞ –ø—Ä–æ–¥–∞–∂ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                                point = reportsManager.currentPointsData[dataPointIndex];
                            }
                        }
                        
                        if (!point) {
                            return '<div style="padding: 8px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
                        }

                        const price = new Intl.NumberFormat('ru-RU').format(point.y);
                        const date = new Date(point.x).toLocaleDateString('ru-RU');
                        const status = point.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ê—Ä—Ö–∏–≤';
                        const rooms = point.rooms || '–Ω/–¥';
                        const area = point.area ? `${point.area} –º¬≤` : '–Ω/–¥';
                        const floor = point.floor && point.floors_total ? `${point.floor}/${point.floors_total}` : '–Ω/–¥';

                        return `
                            <div style="background: white; border: 1px solid #d1d5db; border-radius: 8px; box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); padding: 12px; max-width: 300px;">
                                <div style="font-weight: 600; color: #1f2937; margin-bottom: 8px;">${rooms} –∫–æ–º–Ω., ${area}</div>
                                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">–≠—Ç–∞–∂: ${floor}</div>
                                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">–°—Ç–∞—Ç—É—Å: <span style="font-weight: 500; color: ${point.status === 'active' ? '#059669' : '#6b7280'};">${status}</span></div>
                                <div style="font-size: 14px; color: #6b7280; margin-bottom: 4px;">–î–∞—Ç–∞: ${date}</div>
                                <div style="font-weight: bold; font-size: 18px; color: #2563eb;">${price} ‚ÇΩ</div>
                                <div style="font-size: 12px; color: #9ca3af; margin-top: 8px;">–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π</div>
                            </div>
                        `;
                    }
                },
                yaxis: {
                    min: pointsData.minPrice,
                    max: pointsData.maxPrice,
                    title: {
                        text: '–¶–µ–Ω–∞'
                    }
                },
                grid: {
                    show: true,
                    position: 'back',
                    xaxis: {
                        lines: {
                            show: true
                        }
                    },
                    yaxis: {
                        lines: {
                            show: true
                        }
                    },
                    borderColor: '#eeeeee'
                },
                legend: {
                    show: true
                },
                responsive: [{
                    breakpoint: 600,
                    options: {
                        chart: {
                            toolbar: {
                                show: true
                            }
                        },
                        legend: {
                            show: true
                        }
                    }
                }]
            };

            document.getElementById('marketCorridorChart').innerHTML = '';
            this.marketCorridorChart = new ApexCharts(document.querySelector("#marketCorridorChart"), options);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–µ–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
            this.currentPointsData = pointsData.pointsData;
            
            // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è tooltip
            window.reportsManagerInstance = this;
            
            this.marketCorridorChart.render();

            if (this.debugEnabled) {
                console.log('‚úÖ ReportsManager: –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω', {
                    pointsCount: pointsData.pointsData.length,
                    samplePoint: pointsData.pointsData[0],
                    globalInstance: !!window.reportsManagerInstance
                });
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async getMarketCorridorData() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const currentArea = this.areaPage.dataState?.getState('currentArea');
            if (!currentArea) {
                return this.getEmptyMarketCorridorData();
            }

            const segmentId = this.currentSegment?.id;
            const subsegmentId = this.currentSubsegment?.id;
            const dateFrom = new Date(this.dateFromFilter?.value || '2023-01-01');
            const dateTo = new Date(this.dateToFilter?.value || new Date().toISOString().split('T')[0]);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
            const objects = await this.getFilteredRealEstateObjects(currentArea.id, segmentId, subsegmentId, dateFrom, dateTo);
            
            if (objects.length === 0) {
                return this.getEmptyMarketCorridorData();
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            const activePointsData = [];
            const archivePointsData = [];
            
            objects.forEach(obj => {
                if (obj.current_price <= 0) return;
                
                if (obj.status === 'archive') {
                    // –ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∞ –¥–∞—Ç—É —É—Ö–æ–¥–∞ —Å —Ä—ã–Ω–∫–∞ (–≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞)
                    if (obj.updated) {
                        archivePointsData.push({
                            x: new Date(obj.updated).getTime(),
                            y: obj.current_price,
                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è tooltip –∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                            objectId: obj.id,
                            address: obj.address_id,
                            rooms: obj.rooms || obj.property_type,
                            area: obj.area_total,
                            floor: obj.floor,
                            floors_total: obj.floors_total,
                            status: obj.status,
                            created: obj.created,
                            updated: obj.updated
                        });
                    }
                } else if (obj.status === 'active') {
                    // –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∂–∏–º–∞
                    if (this.marketCorridorMode === 'history') {
                        // –†–µ–∂–∏–º "–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                        const objectPriceHistory = this.prepareObjectPriceHistoryForChart(obj);
                        
                        // –ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—ä–µ–∫—Ç–µ
                        objectPriceHistory.forEach(historyPoint => {
                            activePointsData.push({
                                x: historyPoint.date,
                                y: historyPoint.price,
                                objectId: obj.id,
                                address: obj.address_id,
                                rooms: obj.rooms || obj.property_type,
                                area: obj.area_total,
                                floor: obj.floor,
                                floors_total: obj.floors_total,
                                status: obj.status,
                                created: obj.created,
                                updated: obj.updated,
                                historyEntry: true
                            });
                        });
                    } else {
                        // –†–µ–∂–∏–º "–ö–æ—Ä–∏–¥–æ—Ä –ø—Ä–æ–¥–∞–∂" - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                        activePointsData.push({
                            x: new Date().getTime(),
                            y: obj.current_price,
                            objectId: obj.id,
                            address: obj.address_id,
                            rooms: obj.rooms || obj.property_type,
                            area: obj.area_total,
                            floor: obj.floor,
                            floors_total: obj.floors_total,
                            status: obj.status,
                            created: obj.created,
                            updated: obj.updated
                        });
                    }
                }
            });
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
            activePointsData.sort((a, b) => a.x - b.x);
            archivePointsData.sort((a, b) => a.x - b.x);

            // –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã –¥–ª—è –æ—Å–∏ Y
            const allPrices = [...activePointsData, ...archivePointsData].map(point => point.y);
            const minPrice = allPrices.length > 0 ? Math.min(...allPrices) : 0;
            const maxPrice = allPrices.length > 0 ? Math.max(...allPrices) : 0;

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const priceRange = maxPrice - minPrice;
            const padding = priceRange * 0.1; // 10% –æ—Ç—Å—Ç—É–ø

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
            const series = [];
            const colors = [];
            
            if (this.marketCorridorMode === 'history') {
                // –í —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
                const activeObjectsGrouped = {};
                activePointsData.forEach(point => {
                    if (!activeObjectsGrouped[point.objectId]) {
                        activeObjectsGrouped[point.objectId] = {
                            name: `–û–±—ä–µ–∫—Ç #${point.objectId}`,
                            data: [],
                            color: '#56c2d6'
                        };
                    }
                    activeObjectsGrouped[point.objectId].data.push([point.x, point.y]);
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ—Ä–∏—é
                Object.values(activeObjectsGrouped).forEach(objectSeries => {
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ª–∏–Ω–∏–π
                    objectSeries.data.sort((a, b) => a[0] - b[0]);
                    // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –ª–∏–Ω–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏
                    objectSeries.type = 'line';
                    series.push(objectSeries);
                    colors.push('#56c2d6');
                });
                
                // –ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
                if (archivePointsData.length > 0) {
                    series.push({
                        name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã',
                        data: archivePointsData.map(point => [point.x, point.y]),
                        type: 'scatter' // –¢–æ—á–∫–∏ –±–µ–∑ –ª–∏–Ω–∏–π
                    });
                    colors.push('#dc2626');
                }
            } else {
                // –í —Ä–µ–∂–∏–º–µ –∫–æ—Ä–∏–¥–æ—Ä–∞ –ø—Ä–æ–¥–∞–∂ - –æ–±—ã—á–Ω—ã–µ scatter —Ç–æ—á–∫–∏
                if (activePointsData.length > 0) {
                    series.push({
                        name: '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã',
                        data: activePointsData.map(point => [point.x, point.y])
                    });
                    colors.push('#56c2d6'); // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
                }
                
                if (archivePointsData.length > 0) {
                    series.push({
                        name: '–ê—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã',
                        data: archivePointsData.map(point => [point.x, point.y])
                    });
                    colors.push('#dc2626'); // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö
                }
            }

            return {
                series: series,
                colors: colors,
                minPrice: Math.max(0, minPrice - padding),
                maxPrice: maxPrice + padding,
                pointsData: [...activePointsData, ...archivePointsData] // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è tooltip –∏ –∫–ª–∏–∫–æ–≤
            };

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞:', error);
            return this.getEmptyMarketCorridorData();
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–∫–æ–ø–∏—è –∏–∑ DuplicatesManager)
     */
    prepareObjectPriceHistoryForChart(realEstateObject) {
        const history = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if (realEstateObject.price_history && Array.isArray(realEstateObject.price_history)) {
            realEstateObject.price_history.forEach(item => {
                if (item.price && item.date) {
                    history.push({
                        date: new Date(item.date).getTime(),
                        price: parseInt(item.price)
                    });
                }
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –æ–±—ä–µ–∫—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ª–æ–≥–∏–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
        if (realEstateObject.current_price) {
            let endPriceDate;
            
            if (realEstateObject.status === 'active') {
                // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                endPriceDate = new Date();
            } else {
                // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ - –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                endPriceDate = new Date(realEstateObject.updated_at || realEstateObject.created_at || Date.now());
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
            const lastHistoryDate = history.length > 0 ? history[history.length - 1].date : 0;
            if (Math.abs(endPriceDate.getTime() - lastHistoryDate) > 24 * 60 * 60 * 1000) {
                history.push({
                    date: endPriceDate.getTime(),
                    price: parseInt(realEstateObject.current_price)
                });
            }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        history.sort((a, b) => a.date - b.date);
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ü–µ–Ω –ø–æ–¥—Ä—è–¥, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏
        const filtered = [];
        for (let i = 0; i < history.length; i++) {
            if (i === 0 || i === history.length - 1 || history[i].price !== history[i-1].price) {
                filtered.push(history[i]);
            }
        }

        return filtered;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
     */
    getEmptyMarketCorridorData() {
        return {
            series: [{
                name: '–û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                data: []
            }],
            colors: ['#56c2d6'],
            minPrice: 0,
            maxPrice: 1000000
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     * @param {Object} obj - –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     * @param {Date} targetDate - —Ü–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
     * @returns {number} - —Ü–µ–Ω–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
     */
    getPriceAtDate(obj, targetDate) {
        try {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            if (!obj.price_history || !Array.isArray(obj.price_history) || obj.price_history.length === 0) {
                return obj.current_price || 0;
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –¥–∞—Ç–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
            const sortedHistory = [...obj.price_history].sort((a, b) => {
                const dateA = new Date(a.date || a.timestamp || a.created);
                const dateB = new Date(b.date || b.timestamp || b.created);
                return dateA - dateB;
            });

            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –î–û –∏–ª–∏ –ù–ê —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É
            let priceAtDate = null;
            for (const priceEntry of sortedHistory) {
                const entryDate = new Date(priceEntry.date || priceEntry.timestamp || priceEntry.created);
                if (entryDate <= targetDate) {
                    priceAtDate = priceEntry.price || priceEntry.current_price || 0;
                } else {
                    break; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫, —Ç–∞–∫ –∫–∞–∫ –¥–æ—à–ª–∏ –¥–æ –¥–∞—Ç—ã –ø–æ—Å–ª–µ —Ü–µ–ª–µ–≤–æ–π
                }
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–æ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
            if (priceAtDate === null && sortedHistory.length > 0) {
                priceAtDate = sortedHistory[0].price || sortedHistory[0].current_price || 0;
            }

            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
            return priceAtDate || obj.current_price || 0;

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ –¥–∞—Ç—É:', error);
            return obj.current_price || 0;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞
     * @param {Event} event - —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
     * @param {Object} chartContext - –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥—Ä–∞—Ñ–∏–∫–∞
     * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—á–∫–∏
     */
    handleMarketCorridorPointClick(event, chartContext, config) {
        try {
            if (this.debugEnabled) {
                console.log('üîç ReportsManager: –ö–ª–∏–∫ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É –∫–æ—Ä–∏–¥–æ—Ä–∞ —Ä—ã–Ω–∫–∞:', { event, chartContext, config });
            }

            let point = null;
            
            if (config && config.dataPointIndex >= 0 && this.currentPointsData) {
                if (this.marketCorridorMode === 'history') {
                    // –í —Ä–µ–∂–∏–º–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–æ—á–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                    if (config.seriesIndex >= 0 && this.marketCorridorChart) {
                        const seriesData = this.marketCorridorChart.w.config.series[config.seriesIndex];
                        if (seriesData && seriesData.data && seriesData.data[config.dataPointIndex]) {
                            const [timestamp, price] = seriesData.data[config.dataPointIndex];
                            
                            // –ò—â–µ–º —Ç–æ—á–∫—É —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                            point = this.currentPointsData.find(p => 
                                Math.abs(p.x - timestamp) < 1000 && Math.abs(p.y - price) < 0.01
                            );
                        }
                    }
                } else {
                    // –í —Ä–µ–∂–∏–º–µ –∫–æ—Ä–∏–¥–æ—Ä–∞ –ø—Ä–æ–¥–∞–∂ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                    point = this.currentPointsData[config.dataPointIndex];
                }
            }
            
            if (point) {
                if (this.debugEnabled) {
                    console.log('üîç ReportsManager: –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–∫–∞:', point);
                }
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
                this.showObjectDetails(point.objectId);
            } else {
                if (this.debugEnabled) {
                    console.log('üîç ReportsManager: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏:', {
                        dataPointIndex: config?.dataPointIndex,
                        seriesIndex: config?.seriesIndex,
                        mode: this.marketCorridorMode,
                        currentPointsDataLength: this.currentPointsData?.length
                    });
                }
            }
        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ)
     * @param {string} objectId - ID –æ–±—ä–µ–∫—Ç–∞
     */
    async showObjectDetails(objectId) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ DuplicatesManager —á–µ—Ä–µ–∑ areaPage
            if (this.areaPage && this.areaPage.duplicatesManager && this.areaPage.duplicatesManager.showObjectDetails) {
                await this.areaPage.duplicatesManager.showObjectDetails(objectId);
            } else {
                console.error('‚ùå ReportsManager: DuplicatesManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞');
                
                // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                alert(`–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä–µ–∫—Ç–∞: ${objectId}\n\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª—è–º–∏"`);
            }

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä–µ–∫—Ç–∞:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –º¬≤ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     * @param {Object} obj - –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     * @param {Date} targetDate - —Ü–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞
     * @returns {number} - —Ü–µ–Ω–∞ –∑–∞ –º¬≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
     */
    getPricePerMeterAtDate(obj, targetDate) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –Ω–∞ –¥–∞—Ç—É
            const priceAtDate = this.getPriceAtDate(obj, targetDate);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–ª–æ—â–∞–¥—å, –≤—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É –∑–∞ –º¬≤
            if (priceAtDate > 0 && obj.area_total > 0) {
                return Math.round(priceAtDate / obj.area_total);
            }

            // –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ price_per_meter, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (obj.price_history && Array.isArray(obj.price_history)) {
                const sortedHistory = [...obj.price_history].sort((a, b) => {
                    const dateA = new Date(a.date || a.timestamp || a.created);
                    const dateB = new Date(b.date || b.timestamp || b.created);
                    return dateA - dateB;
                });

                let pricePerMeterAtDate = null;
                for (const priceEntry of sortedHistory) {
                    const entryDate = new Date(priceEntry.date || priceEntry.timestamp || priceEntry.created);
                    if (entryDate <= targetDate && (priceEntry.price_per_meter || priceEntry.pricePerMeter)) {
                        pricePerMeterAtDate = priceEntry.price_per_meter || priceEntry.pricePerMeter;
                    } else if (entryDate > targetDate) {
                        break;
                    }
                }

                if (pricePerMeterAtDate) {
                    return pricePerMeterAtDate;
                }
            }

            // Fallback –∫ —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
            return obj.price_per_meter || 0;

        } catch (error) {
            console.error('‚ùå ReportsManager: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –º¬≤ –Ω–∞ –¥–∞—Ç—É:', error);
            return obj.price_per_meter || 0;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å
     */
    showPanel() {
        if (this.panelContainer) {
            this.panelContainer.style.display = 'block';
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å
     */
    hidePanel() {
        if (this.panelContainer) {
            this.panelContainer.style.display = 'none';
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        // –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        if (this.liquidityChart) {
            this.liquidityChart.destroy();
            this.liquidityChart = null;
        }

        if (this.priceChangesChart) {
            this.priceChangesChart.destroy();
            this.priceChangesChart = null;
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ SlimSelect
        if (this.segmentSlimSelect) {
            this.segmentSlimSelect.destroy();
            this.segmentSlimSelect = null;
        }

        if (this.subsegmentSlimSelect) {
            this.subsegmentSlimSelect.destroy();
            this.subsegmentSlimSelect = null;
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π EventBus
        this.eventBus.off(CONSTANTS.EVENTS.SEGMENTS_UPDATED);
        this.eventBus.off(CONSTANTS.EVENTS.SUBSEGMENT_CREATED);
        this.eventBus.off(CONSTANTS.EVENTS.SUBSEGMENT_UPDATED);
        this.eventBus.off(CONSTANTS.EVENTS.SUBSEGMENT_DELETED);

        if (this.debugEnabled) {
            // console.log('üîç ReportsManager: –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
        }
    }
}