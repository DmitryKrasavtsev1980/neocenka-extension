/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–º–ø–æ—Ä—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ GeoJSON "–†–µ—Ñ–æ—Ä–º–∞ –ñ–ö–•"
 */
class GeoJsonImportManager {
  constructor(databaseManager, progressManager) {
    this.db = databaseManager;
    this.progressManager = progressManager;
    this.importer = null;
    this.selectedFile = null;
    
    this.initializeEventListeners();
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  initializeEventListeners() {
    // –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
    const fileInput = document.getElementById('geojsonFile');
    const selectBtn = document.getElementById('selectGeoJsonBtn');
    const importBtn = document.getElementById('startGeoJsonImport');
    
    if (fileInput && selectBtn && importBtn) {
      // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
      selectBtn.addEventListener('click', () => {
        fileInput.click();
      });
      
      // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      fileInput.addEventListener('change', (event) => {
        this.handleFileSelection(event);
      });
      
      // –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
      importBtn.addEventListener('click', () => {
        this.startImport();
      });
      
      // –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
      const stopBtn = document.getElementById('stopGeoJsonImport');
      stopBtn.addEventListener('click', () => {
        this.stopImport();
      });
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
   */
  handleFileSelection(event) {
    const file = event.target.files[0];
    const fileNameDiv = document.getElementById('selectedFileName');
    const importBtn = document.getElementById('startGeoJsonImport');
    
    if (file) {
      this.selectedFile = file;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
      const validation = this.validateFile(file);
      
      if (validation.valid) {
        fileNameDiv.textContent = `–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${file.name} (${this.formatFileSize(file.size)})`;
        fileNameDiv.className = 'text-xs text-green-600';
        fileNameDiv.classList.remove('hidden');
        
        importBtn.disabled = false;
        importBtn.classList.remove('opacity-50', 'cursor-not-allowed');
      } else {
        fileNameDiv.textContent = `–û—à–∏–±–∫–∞: ${validation.error}`;
        fileNameDiv.className = 'text-xs text-red-600';
        fileNameDiv.classList.remove('hidden');
        
        importBtn.disabled = true;
        importBtn.classList.add('opacity-50', 'cursor-not-allowed');
        this.selectedFile = null;
      }
    } else {
      this.selectedFile = null;
      fileNameDiv.classList.add('hidden');
      importBtn.disabled = true;
      importBtn.classList.add('opacity-50', 'cursor-not-allowed');
    }
  }
  
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
   */
  validateFile(file) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    const allowedExtensions = ['.geojson', '.json'];
    const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));
    
    if (!allowedExtensions.includes(fileExtension)) {
      return {
        valid: false,
        error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .geojson –∏ .json'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 100MB)
    const maxSize = 100 * 1024 * 1024; // 100MB
    if (file.size > maxSize) {
      return {
        valid: false,
        error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100MB'
      };
    }
    
    return { valid: true };
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
   */
  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
  
  /**
   * –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞
   */
  async startImport() {
    if (!this.selectedFile) {
      this.showError('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
      return;
    }
    
    const debugEnabled = await this.getDebugSetting();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const options = this.getImportOptions();
      
      if (debugEnabled) {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç GeoJSON —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', options);
      }
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º UI –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      this.setUIState(false);
      this.showStopButton();
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.clearResults();
      
      // –°–æ–∑–¥–∞–µ–º –∏–º–ø–æ—Ä—Ç–µ—Ä
      this.importer = new ReformaGKHImporter(this.db);
      this.importer.setOptions(options);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å callback –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const result = await this.importer.importFromFile(
        this.selectedFile,
        (progressData) => this.updateProgress(progressData)
      );
      
      if (result.success) {
        this.showResults(result.stats);
        
        if (debugEnabled) {
          console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result.stats);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        document.dispatchEvent(new CustomEvent('addressesUpdated'));
        
      } else {
        this.showError(result.error);
        
        if (result.errors && result.errors.length > 0) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞:', result.errors);
        }
      }
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
      this.showError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º UI –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      this.setUIState(true);
      this.hideStopButton();
      this.importer = null;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ UI
   */
  getImportOptions() {
    return {
      createReferences: document.getElementById('createReferences')?.checked || false,
      batchSize: 150
    };
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  updateProgress(progressData) {
    const { stage, progress, stats, message } = progressData;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞–ø—Ä—è–º—É—é
    const progressElement = document.getElementById('import-addressesProgress');
    const progressBar = document.getElementById('import-addressesProgressBar');
    const statusElement = document.getElementById('import-addressesStatus');
    
    if (progressElement) {
      progressElement.textContent = `${Math.round(progress)}%`;
    }
    
    if (progressBar) {
      progressBar.style.width = `${progress}%`;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ
    if (stats) {
      const statusText = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.processed}/${stats.total}, ` +
                        `–¥–æ–±–∞–≤–ª–µ–Ω–æ: ${stats.added}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${stats.skipped}, –æ—à–∏–±–æ–∫: ${stats.errors}`;
      
      if (statusElement) {
        statusElement.textContent = statusText;
        statusElement.classList.remove('hidden');
      }
    } else if (message && statusElement) {
      statusElement.textContent = message;
      statusElement.classList.remove('hidden');
    }
    
    // –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    if (stage === 'completed' || stage === 'error') {
      setTimeout(() => {
        if (progressElement) progressElement.textContent = '0%';
        if (progressBar) progressBar.style.width = '0%';
        if (statusElement) statusElement.classList.add('hidden');
      }, 3000);
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–º–ø–æ—Ä—Ç–∞
   */
  showResults(stats) {
    const resultsDiv = document.getElementById('geojsonImportResults');
    if (!resultsDiv) return;
    
    const referencesCreatedText = stats.referencesCreated > 0 
      ? `<li class="text-blue-600">–°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö: ${stats.referencesCreated}</li>` 
      : '';
      
    const referencesFoundText = stats.referencesFound > 0 
      ? `<li class="text-green-600">–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö: ${stats.referencesFound}</li>` 
      : '';
    
    resultsDiv.innerHTML = `
      <div class="bg-green-50 border border-green-200 rounded-md p-4">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-green-800">–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ</h3>
            <div class="mt-2 text-sm text-green-700">
              <ul class="list-disc list-inside space-y-1">
                <li>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${stats.total}</li>
                <li>–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: ${stats.added}</li>
                <li>–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: ${stats.updated}</li>
                <li>–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–µ–π: ${stats.skipped}</li>
                <li class="text-orange-600">–û—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${stats.errors}</li>
                ${referencesFoundText}
                ${referencesCreatedText}
              </ul>
            </div>
          </div>
        </div>
      </div>
    `;
    
    resultsDiv.classList.remove('hidden');
  }
  
  /**
   * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
   */
  showError(errorMessage) {
    const resultsDiv = document.getElementById('geojsonImportResults');
    if (!resultsDiv) return;
    
    resultsDiv.innerHTML = `
      <div class="bg-red-50 border border-red-200 rounded-md p-4">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞</h3>
            <div class="mt-2 text-sm text-red-700">
              ${errorMessage}
            </div>
          </div>
        </div>
      </div>
    `;
    
    resultsDiv.classList.remove('hidden');
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  clearResults() {
    const resultsDiv = document.getElementById('geojsonImportResults');
    if (resultsDiv) {
      resultsDiv.classList.add('hidden');
      resultsDiv.innerHTML = '';
    }
  }
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
   */
  setUIState(enabled) {
    const importBtn = document.getElementById('startGeoJsonImport');
    const fileInput = document.getElementById('geojsonFile');
    const selectBtn = document.getElementById('selectGeoJsonBtn');
    
    [importBtn, fileInput, selectBtn].forEach(element => {
      if (element) {
        element.disabled = !enabled;
        if (enabled) {
          element.classList.remove('opacity-50', 'cursor-not-allowed');
        } else {
          element.classList.add('opacity-50', 'cursor-not-allowed');
        }
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    if (importBtn) {
      if (enabled) {
        importBtn.innerHTML = `
          <svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
          </svg>
          –ù–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç –∏–∑ GeoJSON
        `;
      } else {
        importBtn.innerHTML = `
          <svg class="-ml-1 mr-2 h-4 w-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          –ò–º–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...
        `;
      }
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
   */
  async getDebugSetting() {
    try {
      return await this.db.getSetting('debug_enabled') || false;
    } catch {
      return false;
    }
  }
  
  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
   */
  stopImport() {
    if (this.importer) {
      this.importer.cancel();
      this.showError('–ò–º–ø–æ—Ä—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    }
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
   */
  showStopButton() {
    const stopBtn = document.getElementById('stopGeoJsonImport');
    const importBtn = document.getElementById('startGeoJsonImport');
    const buttonText = document.getElementById('importButtonText');
    
    if (stopBtn) stopBtn.classList.remove('hidden');
    if (buttonText) buttonText.textContent = '–ò–º–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
    if (importBtn) importBtn.disabled = true;
  }
  
  /**
   * –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
   */
  hideStopButton() {
    const stopBtn = document.getElementById('stopGeoJsonImport');
    const importBtn = document.getElementById('startGeoJsonImport');
    const buttonText = document.getElementById('importButtonText');
    
    if (stopBtn) stopBtn.classList.add('hidden');
    if (buttonText) buttonText.textContent = '–ù–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç –∏–∑ GeoJSON';
    if (importBtn) importBtn.disabled = false;
  }
  
  /**
   * –û—Ç–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞
   */
  cancelImport() {
    if (this.importer) {
      this.importer.cancel();
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
if (typeof module !== 'undefined' && module.exports) {
  module.exports = GeoJsonImportManager;
} else if (typeof window !== 'undefined') {
  window.GeoJsonImportManager = GeoJsonImportManager;
}