/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Avito –∏ Cian
 */

class ParsingManager {
    constructor(dataState, eventBus, progressManager) {
        this.dataState = dataState;
        this.eventBus = eventBus;
        this.progressManager = progressManager;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        this.settings = {
            maxPages: 10,
            delay: 2000,
            batchSize: 5,
            updateIntervalDays: 7,
            maxRetries: 3
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        this.parsing = {
            isActive: false,
            isUpdating: false,
            currentOperation: null,
            totalProgress: 0
        };
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.bindEvents();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        if (this.eventBus) {
            this.eventBus.on(CONSTANTS.EVENTS.AREA_CHANGED, async (area) => {
                await this.onAreaChanged(area);
            });
        }
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–Ω–æ–ø–∫–∞–º
        document.getElementById('parseListingsBtn')?.addEventListener('click', () => {
            this.parseListings();
        });
        
        document.getElementById('updateListingsBtn')?.addEventListener('click', () => {
            this.updateListings();
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
     */
    async onAreaChanged(area) {
        if (this.parsing.isActive) {
            await Helpers.debugLog('üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏');
            await this.stopParsing();
        }
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async parseListings() {
        if (this.parsing.isActive) {
            this.progressManager.showInfo('–ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return;
        }
        
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) {
            this.progressManager.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
            return;
        }
        
        if (!currentArea.avito_filter_url && !currentArea.cian_filter_url) {
            this.progressManager.showError('–ù–µ —É–∫–∞–∑–∞–Ω—ã URL —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
            return;
        }
        
        try {
            this.parsing.isActive = true;
            this.parsing.currentOperation = 'parsing';
            this.dataState.setState('processing', { 
                ...this.dataState.getState('processing'), 
                parsing: true 
            });
            
            await Helpers.debugLog('üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–ª–∞—Å—Ç–∏:', currentArea.name);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            this.eventBus.emit(CONSTANTS.EVENTS.PARSING_STARTED, {
                area: currentArea,
                timestamp: new Date()
            });
            
            this.progressManager.updateProgressBar('parsing', 0, '–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...');
            
            let totalParsed = 0;
            let totalErrors = 0;
            
            // –ü–∞—Ä—Å–∏–Ω–≥ Avito –µ—Å–ª–∏ –µ—Å—Ç—å URL
            if (currentArea.avito_filter_url) {
                this.progressManager.updateProgressBar('parsing', 20, '–ü–∞—Ä—Å–∏–Ω–≥ Avito...');
                await Helpers.debugLog('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Avito –¥–ª—è –æ–±–ª–∞—Å—Ç–∏');
                
                try {
                    const avitoResult = await this.parseAvitoForArea(currentArea);
                    await Helpers.debugLog('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ Avito –∑–∞–≤–µ—Ä—à–µ–Ω:', avitoResult);
                    
                    totalParsed += avitoResult.parsed;
                    totalErrors += avitoResult.errors;
                    
                    this.progressManager.updateProgressBar('parsing', 50, '–ü–∞—Ä—Å–∏–Ω–≥ Avito –∑–∞–≤–µ—Ä—à–µ–Ω');
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                    this.eventBus.emit(CONSTANTS.EVENTS.PARSING_PROGRESS, {
                        source: 'avito',
                        parsed: avitoResult.parsed,
                        errors: avitoResult.errors,
                        progress: 50
                    });
                    
                } catch (error) {
                    await Helpers.debugLog('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Avito:', error);
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Avito:', error);
                    totalErrors++;
                    
                    this.eventBus.emit(CONSTANTS.EVENTS.PARSING_ERROR, {
                        source: 'avito',
                        error: error.message
                    });
                }
            }
            
            // –ü–∞—Ä—Å–∏–Ω–≥ Cian –µ—Å–ª–∏ –µ—Å—Ç—å URL
            if (currentArea.cian_filter_url) {
                this.progressManager.updateProgressBar('parsing', 60, '–ü–∞—Ä—Å–∏–Ω–≥ Cian...');
                await Helpers.debugLog('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Cian –¥–ª—è –æ–±–ª–∞—Å—Ç–∏');
                
                try {
                    const cianResult = await this.parseCianForArea(currentArea);
                    await Helpers.debugLog('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ Cian –∑–∞–≤–µ—Ä—à–µ–Ω:', cianResult);
                    
                    totalParsed += cianResult.parsed;
                    totalErrors += cianResult.errors;
                    
                    this.progressManager.updateProgressBar('parsing', 90, '–ü–∞—Ä—Å–∏–Ω–≥ Cian –∑–∞–≤–µ—Ä—à–µ–Ω');
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                    this.eventBus.emit(CONSTANTS.EVENTS.PARSING_PROGRESS, {
                        source: 'cian',
                        parsed: cianResult.parsed,
                        errors: cianResult.errors,
                        progress: 90
                    });
                    
                } catch (error) {
                    await Helpers.debugLog('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Cian:', error);
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Cian:', error);
                    totalErrors++;
                    
                    this.eventBus.emit(CONSTANTS.EVENTS.PARSING_ERROR, {
                        source: 'cian',
                        error: error.message
                    });
                }
            }
            
            await Helpers.debugLog('üèÅ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', totalParsed, '–æ—à–∏–±–æ–∫:', totalErrors);
            this.progressManager.updateProgressBar('parsing', 100, '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            this.eventBus.emit(CONSTANTS.EVENTS.PARSING_COMPLETED, {
                area: currentArea,
                totalParsed,
                totalErrors,
                timestamp: new Date()
            });
            
            this.progressManager.showSuccess(`–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalParsed}, –æ—à–∏–±–æ–∫: ${totalErrors}`);
            await Helpers.debugLog('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω');
            
        } catch (error) {
            console.error('Error during parsing:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ' + error.message);
            
            this.eventBus.emit(CONSTANTS.EVENTS.PARSING_ERROR, {
                source: 'general',
                error: error.message
            });
            
        } finally {
            this.parsing.isActive = false;
            this.parsing.currentOperation = null;
            this.dataState.setState('processing', { 
                ...this.dataState.getState('processing'), 
                parsing: false 
            });
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                this.progressManager.updateProgressBar('parsing', 0, '');
            }, 2000);
        }
    }
    
    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ Avito –¥–ª—è –æ–±–ª–∞—Å—Ç–∏
     */
    async parseAvitoForArea(area) {
        try {
            await Helpers.debugLog('–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Avito –¥–ª—è –æ–±–ª–∞—Å—Ç–∏:', area.name);
            
            return new Promise((resolve) => {
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∫–ª–∞–¥–∫–∏
                setTimeout(() => {
                    this.createTabWithRetry(area.avito_filter_url, this.settings.maxRetries)
                        .then(async (newTab) => {
                            await Helpers.debugLog('–û—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ Avito:', newTab.id);
                            
                            try {
                                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º content script
                                await this.waitForPageLoad(newTab.id);
                                await this.injectContentScript(newTab.id);
                                
                                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                                const response = await this.waitForContentScriptAndParse(newTab.id, {
                                    areaId: area.id,
                                    areaName: area.name,
                                    maxPages: this.settings.maxPages,
                                    delay: this.settings.delay,
                                    avitoFilterUrl: area.avito_filter_url,
                                    listingsContainer: '.styles-container-rnTvX',
                                    listingSelector: '.styles-snippet-ZgKUd',
                                    linkSelector: 'a[href*=\"/kvartiry/\"]'
                                });
                                
                                // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                await Helpers.debugLog('–ü–∞—Ä—Å–∏–Ω–≥ Avito –∑–∞–≤–µ—Ä—à–µ–Ω, –≤–∫–ª–∞–¥–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
                                
                                if (response && response.success) {
                                    resolve({ parsed: response.parsed || 0, errors: response.errors || 0 });
                                } else {
                                    throw new Error(response?.error || '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Avito');
                                }
                                
                            } catch (error) {
                                await Helpers.debugLog('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Avito:', error);
                                // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                await Helpers.debugLog('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –≤–∫–ª–∞–¥–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
                                resolve({ parsed: 0, errors: 1 });
                            }
                        })
                        .catch((error) => {
                            Helpers.debugLog('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É:', error);
                            resolve({ parsed: 0, errors: 1 });
                        });
                }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ 500–º—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∫–ª–∞–¥–∫–∏
            });
        } catch (error) {
            console.error('Error parsing Avito:', error);
            return { parsed: 0, errors: 1 };
        }
    }
    
    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ Cian –¥–ª—è –æ–±–ª–∞—Å—Ç–∏
     */
    async parseCianForArea(area) {
        try {
            await Helpers.debugLog('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Cian –ø–æ —Ñ–∏–ª—å—Ç—Ä—É:', area.cian_filter_url);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ background script –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            const response = await chrome.runtime.sendMessage({
                action: 'parseMassByFilter',
                source: 'cian',
                filterUrl: area.cian_filter_url,
                areaId: area.id
            });
            
            if (response && response.success) {
                return {
                    parsed: response.parsed || 0,
                    errors: response.errors || 0
                };
            } else {
                throw new Error(response?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Cian');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Cian:', error);
            return { parsed: 0, errors: 1 };
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async updateListings() {
        if (this.parsing.isUpdating) {
            this.progressManager.showInfo('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return;
        }
        
        const currentArea = this.dataState.getState('currentArea');
        if (!currentArea) {
            this.progressManager.showError('–û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞');
            return;
        }
        
        try {
            this.parsing.isUpdating = true;
            this.dataState.setState('processing', { 
                ...this.dataState.getState('processing'), 
                updating: true 
            });
            
            await Helpers.debugLog('–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–ª–∞—Å—Ç–∏:', currentArea.name);
            this.progressManager.updateProgressBar('updating', 0, '–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const settings = await this.getUpdateSettings();
            const updateIntervalDays = settings.update_days || this.settings.updateIntervalDays;
            
            await Helpers.debugLog(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateIntervalDays} –¥–Ω–µ–π`);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏
            const allAreaListings = await this.getListingsInArea(currentArea.id);
            
            if (allAreaListings.length === 0) {
                this.progressManager.showInfo('–í –æ–±–ª–∞—Å—Ç–∏ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                return;
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - updateIntervalDays);
            
            const areaListings = allAreaListings.filter(listing => {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                if (listing.status !== 'active') {
                    Helpers.debugLog(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: —Å—Ç–∞—Ç—É—Å \"${listing.status}\" (–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–µ)`);
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if (!listing.updated_at) {
                    return true; // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º
                }
                
                const lastUpdate = new Date(listing.updated_at);
                const needsUpdate = lastUpdate < cutoffDate;
                
                if (!needsUpdate) {
                    Helpers.debugLog(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${lastUpdate.toLocaleDateString()}`);
                }
                
                return needsUpdate;
            });
            
            if (areaListings.length === 0) {
                const activeListings = allAreaListings.filter(l => l.status === 'active').length;
                this.progressManager.showInfo(`–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeListings} –∏–∑ ${allAreaListings.length}, –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ ${updateIntervalDays} –¥–Ω–µ–π`);
                return;
            }
            
            this.progressManager.updateProgressBar('updating', 10, 
                `–ù–∞–π–¥–µ–Ω–æ ${areaListings.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–∑ ${allAreaListings.length} –≤—Å–µ–≥–æ)`);
            
            let updatedCount = 0;
            let errorCount = 0;
            const batchSize = this.settings.batchSize;
            
            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
            for (let i = 0; i < areaListings.length; i += batchSize) {
                const batch = areaListings.slice(i, i + batchSize);
                const progress = 10 + ((i / areaListings.length) * 80);
                
                this.progressManager.updateProgressBar('updating', progress, 
                    `–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${i + 1}-${Math.min(i + batchSize, areaListings.length)} –∏–∑ ${areaListings.length}`);
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                const batchPromises = batch.map(listing => this.updateSingleListing(listing));
                const batchResults = await Promise.allSettled(batchPromises);
                
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                batchResults.forEach(result => {
                    if (result.status === 'fulfilled' && result.value.success) {
                        updatedCount++;
                    } else {
                        errorCount++;
                        Helpers.debugLog('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', result.reason || result.value?.error);
                    }
                });
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                await Helpers.sleep(1000);
            }
            
            this.progressManager.updateProgressBar('updating', 100, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–µ—Å—å –∫–µ—à –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (window.dataCacheManager && updatedCount > 0) {
                await window.dataCacheManager.invalidate('listings');
                await window.dataCacheManager.invalidate('objects');
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.eventBus.emit(CONSTANTS.EVENTS.LISTINGS_UPDATED, {
                area: currentArea,
                totalUpdated: updatedCount,
                totalErrors: errorCount,
                totalSkipped: allAreaListings.length - areaListings.length,
                timestamp: new Date()
            });
            
            const skippedCount = allAreaListings.length - areaListings.length;
            let resultMessage = `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`;
            if (errorCount > 0) {
                resultMessage += `, –æ—à–∏–±–æ–∫: ${errorCount}`;
            }
            if (skippedCount > 0) {
                resultMessage += `, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã)`;
            }
            
            this.progressManager.showSuccess(resultMessage);
            
        } catch (error) {
            console.error('Error during updating:', error);
            this.progressManager.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + error.message);
            
            this.eventBus.emit(CONSTANTS.EVENTS.PARSING_ERROR, {
                source: 'updating',
                error: error.message
            });
            
        } finally {
            this.parsing.isUpdating = false;
            this.dataState.setState('processing', { 
                ...this.dataState.getState('processing'), 
                updating: false 
            });
            
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                this.progressManager.updateProgressBar('updating', 0, '');
            }, 2000);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async updateSingleListing(listing) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–º–µ–µ—Ç URL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (!listing.url) {
                return { success: false, error: 'URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' };
            }
            
            await Helpers.debugLog('–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:', listing.url);
            
            // –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const tab = await this.createTabWithRetry(listing.url, 2);
            
            try {
                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º content script
                await this.waitForPageLoad(tab.id);
                await this.injectContentScript(tab.id);
                
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                const response = await this.waitForContentScriptAndParse(tab.id, {
                    action: 'parseCurrentListing',
                    areaId: this.dataState.getState('currentAreaId'),
                    existingListingId: listing.id
                });
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É
                try {
                    chrome.tabs.remove(tab.id);
                } catch (closeError) {
                    await Helpers.debugLog('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É:', closeError);
                }
                
                if (response && response.success && response.data) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    const updatedListing = {
                        ...listing,
                        ...response.data,
                        id: listing.id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID
                        created_at: listing.created_at, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
                        updated_at: new Date(),
                        // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º source_metadata –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                        source_metadata: listing.source_metadata
                    };
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    if (listing.price !== response.data.price) {
                        if (!updatedListing.price_history) {
                            updatedListing.price_history = listing.price_history || [];
                        }
                        updatedListing.price_history.push({
                            date: new Date(),
                            old_price: listing.price,
                            new_price: response.data.price
                        });
                    }
                    
                    await window.db.update('listings', updatedListing);

                    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    if (window.dataCacheManager) {
                        await window.dataCacheManager.invalidate('listings', listing.id);
                        if (updatedListing.object_id) {
                            await window.dataCacheManager.invalidate('objects', updatedListing.object_id);
                        }
                    }

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    this.eventBus.emit(CONSTANTS.EVENTS.LISTING_UPDATED, {
                        listing: updatedListing,
                        oldListing: listing,
                        priceChanged: listing.price !== response.data.price
                    });

                    return { success: true, updated: true };
                } else {
                    // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∞—Ä—Ö–∏–≤–Ω–æ–µ
                    const archivedListing = {
                        ...listing,
                        status: 'archived',
                        last_seen: new Date(),
                        updated_at: new Date()
                    };
                    
                    await window.db.update('listings', archivedListing);

                    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    if (window.dataCacheManager) {
                        await window.dataCacheManager.invalidate('listings', listing.id);
                        if (archivedListing.object_id) {
                            await window.dataCacheManager.invalidate('objects', archivedListing.object_id);
                        }
                    }

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
                    this.eventBus.emit(CONSTANTS.EVENTS.LISTING_UPDATED, {
                        listing: archivedListing,
                        oldListing: listing,
                        archived: true
                    });

                    return { success: true, archived: true };
                }
                
            } catch (error) {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                try {
                    chrome.tabs.remove(tab.id);
                } catch (closeError) {
                    await Helpers.debugLog('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', closeError);
                }
                throw error;
            }
            
        } catch (error) {
            await Helpers.debugLog('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            return { success: false, error: error.message };
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
     */
    async createTabWithRetry(url, maxRetries = 3) {
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                return await new Promise((resolve, reject) => {
                    chrome.tabs.create({ url: url, active: false }, (newTab) => {
                        if (chrome.runtime.lastError) {
                            reject(new Error(chrome.runtime.lastError.message));
                        } else {
                            resolve(newTab);
                        }
                    });
                });
            } catch (error) {
                await Helpers.debugLog(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} —Å–æ–∑–¥–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
                
                if (attempt === maxRetries) {
                    throw error;
                }
                
                // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                const delay = Math.pow(2, attempt) * 1000;
                await Helpers.sleep(delay);
            }
        }
    }
    
    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async waitForPageLoad(tabId) {
        return new Promise((resolve) => {
            const checkPageLoad = () => {
                chrome.tabs.get(tabId, (tab) => {
                    if (chrome.runtime.lastError) {
                        resolve();
                        return;
                    }
                    
                    if (tab.status === 'complete') {
                        setTimeout(resolve, 2000); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    } else {
                        setTimeout(checkPageLoad, 500);
                    }
                });
            };
            
            checkPageLoad();
        });
    }
    
    /**
     * –ò–Ω–∂–µ–∫—Ü–∏—è content script
     */
    async injectContentScript(tabId) {
        try {
            await Helpers.debugLog('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∂–µ–∫—Ü–∏—è content script...');
            
            // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            await chrome.scripting.executeScript({
                target: { tabId: tabId },
                files: ['data/database.js']
            });
            
            // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä
            await chrome.scripting.executeScript({
                target: { tabId: tabId },
                files: ['content-scripts/avito-parser.js']
            });
            
            await Helpers.debugLog('Content script —É—Å–ø–µ—à–Ω–æ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω');
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await Helpers.sleep(3000);
            
        } catch (error) {
            await Helpers.debugLog('–û—à–∏–±–∫–∞ –∏–Ω–∂–µ–∫—Ü–∏–∏ content script:', error);
            throw error;
        }
    }
    
    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ content script –∏ –ø–∞—Ä—Å–∏–Ω–≥
     */
    async waitForContentScriptAndParse(tabId, settings) {
        const maxAttempts = 10;
        const attemptDelay = 2000;
        
        for (let attempt = 1; attempt <= maxAttempts; attempt++) {
            try {
                await Helpers.debugLog(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts} —Å–≤—è–∑–∞—Ç—å—Å—è —Å content script...`);
                
                // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                const response = await chrome.tabs.sendMessage(tabId, {
                    action: 'parseMassByFilter',
                    areaId: settings.areaId,
                    areaName: settings.areaName,
                    maxPages: settings.maxPages || 10,
                    delay: settings.delay || 2000
                });
                
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                await Helpers.debugLog('Content script –æ—Ç–≤–µ—Ç–∏–ª:', response);
                return response;
                
            } catch (error) {
                await Helpers.debugLog(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
                
                if (attempt === maxAttempts) {
                    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å content script –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`);
                }
                
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await Helpers.sleep(attemptDelay);
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async getUpdateSettings() {
        return new Promise((resolve) => {
            chrome.storage.local.get(['neocenka_settings'], (result) => {
                const settings = result.neocenka_settings || {};
                resolve(settings);
            });
        });
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏
     */
    async getListingsInArea(areaId) {
        try {
            const allListings = await window.dataCacheManager.getAll('listings');
            return allListings.filter(listing => listing.map_area_id === areaId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±–ª–∞—Å—Ç–∏:', error);
            return [];
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    async stopParsing() {
        if (this.parsing.isActive) {
            this.parsing.isActive = false;
            this.progressManager.showWarning('–ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            
            this.eventBus.emit(CONSTANTS.EVENTS.PARSING_ERROR, {
                source: 'general',
                error: '–ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
            });
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    getParsingStatus() {
        return {
            isActive: this.parsing.isActive,
            isUpdating: this.parsing.isUpdating,
            currentOperation: this.parsing.currentOperation,
            totalProgress: this.parsing.totalProgress
        };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    updateSettings(newSettings) {
        this.settings = { ...this.settings, ...newSettings };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    getSettings() {
        return { ...this.settings };
    }
    
    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        if (this.eventBus) {
            this.eventBus.offAll(CONSTANTS.EVENTS.AREA_CHANGED);
        }
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        this.stopParsing();
        
        // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        document.getElementById('parseListingsBtn')?.removeEventListener('click', this.parseListings);
        document.getElementById('updateListingsBtn')?.removeEventListener('click', this.updateListings);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ParsingManager;
} else {
    window.ParsingManager = ParsingManager;
}