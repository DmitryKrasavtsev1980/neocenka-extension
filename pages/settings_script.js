/**
 * JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */

class SettingsPage {
  constructor() {
    this.settings = {};
    this.subscription = null;
    this.serviceManager = null;
    this.inparsService = null;
    this.init();
  }

  async init() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await db.init();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
      await this.initializeServices();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      this.initializeUI();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      await this.loadSettings();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.loadDatabaseStats();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      await this.loadSubscriptionInfo();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML –∞–ª–≥–æ—Ä–∏—Ç–º –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
      await this.initializeMLMatcher();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º ML —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      setTimeout(() => this.refreshMLStats(), 1000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
   */
  async initializeServices() {
    try {
      console.log('üöÄ Initializing services in settings...');
      
      // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
      this.serviceManager = await ServiceConfig.initializeServices();
      console.log('‚úÖ ServiceManager initialized in settings');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Inpars
      this.inparsService = this.serviceManager.getService('inpars');
      console.log('üìã InparsService ready in settings:', this.inparsService?.status);
      
    } catch (error) {
      console.error('‚ùå Failed to initialize services in settings:', error);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    }
  }

  initializeUI() {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupEventListeners();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if (document.getElementById('currentDateTime')) {
      this.updateDateTime();
      setInterval(() => this.updateDateTime(), 60000);
    }
  }

  updateDateTime() {
    const now = new Date();
    const options = { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    };
    const dateTimeElement = document.getElementById('currentDateTime');
    if (dateTimeElement) {
      dateTimeElement.textContent = now.toLocaleDateString('ru-RU', options);
    }
  }

  setupEventListeners() {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    document.getElementById('saveSettingsBtn').addEventListener('click', () => {
      this.saveSettings();
    });

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    document.getElementById('exportDataBtn').addEventListener('click', () => {
      this.exportData();
    });

    // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    document.getElementById('importDataBtn').addEventListener('click', () => {
      this.importData();
    });

    document.getElementById('importFileInput').addEventListener('change', (e) => {
      this.handleImportFile(e);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π
    document.getElementById('processDuplicatesBtn').addEventListener('click', () => {
      this.processDuplicates();
    });

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    document.getElementById('clearDataBtn').addEventListener('click', () => {
      this.showClearDataModal();
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏
    document.getElementById('debugMode').addEventListener('change', (e) => {
      this.toggleDebugMode(e.target.checked);
    });

    document.getElementById('confirmClearData').addEventListener('click', () => {
      this.clearAllData();
    });

    document.getElementById('cancelClearData').addEventListener('click', () => {
      this.hideClearDataModal();
    });

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    document.getElementById('syncEnabled').addEventListener('change', (e) => {
      this.toggleSyncSettings(e.target.checked);
    });

    document.getElementById('generateSyncKey').addEventListener('click', () => {
      this.generateSyncKey();
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    document.getElementById('checkSubscriptionBtn').addEventListener('click', () => {
      this.checkSubscription();
    });

    // Inpars –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    document.getElementById('saveInparsToken').addEventListener('click', () => {
      this.saveInparsToken();
    });

    document.getElementById('checkInparsSubscription').addEventListener('click', () => {
      this.checkInparsSubscription();
    });

    document.getElementById('importInparsCategories').addEventListener('click', () => {
      this.importInparsCategories();
    });

    document.getElementById('sourceAvito').addEventListener('change', (e) => {
      this.saveInparsSources();
    });

    document.getElementById('sourceCian').addEventListener('change', (e) => {
      this.saveInparsSources();
    });

    // ML-–º–æ–¥–µ–ª—å
    document.getElementById('refreshMLStats').addEventListener('click', () => {
      this.refreshMLStats();
    });

    document.getElementById('exportMLModel').addEventListener('click', () => {
      this.exportMLModel();
    });

    document.getElementById('copyMLModel').addEventListener('click', () => {
      this.copyMLModel();
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
    window.addEventListener('click', (e) => {
      if (e.target.classList.contains('fixed') && e.target.classList.contains('inset-0')) {
        this.hideClearDataModal();
      }
    });

    // ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        this.hideClearDataModal();
      }
    });
  }

  async loadSettings() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settingsKeys = [
        'parsing_delay_avito',
        'parsing_delay_cian',
        'update_days',
        'auto_process_duplicates',
        'auto_archive_listings',
        'sync_enabled',
        'sync_key',
        'api_key',
        'debug_mode',
        'inpars_api_token',
        'inpars_source_avito',
        'inpars_source_cian'
      ];

      for (const key of settingsKeys) {
        const value = await db.getSetting(key);
        this.settings[key] = value;
      }

      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
      this.populateSettingsForm();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
    }
  }

  populateSettingsForm() {
    // –ó–∞–¥–µ—Ä–∂–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    document.getElementById('avitoDelay').value = this.settings.parsing_delay_avito || 30;
    document.getElementById('cianDelay').value = this.settings.parsing_delay_cian || 30;
    document.getElementById('updateDays').value = this.settings.update_days || 7;

    // –ß–µ–∫–±–æ–∫—Å—ã
    document.getElementById('autoProcessDuplicates').checked = this.settings.auto_process_duplicates || false;
    document.getElementById('autoArchive').checked = this.settings.auto_archive_listings || false;
    document.getElementById('syncEnabled').checked = this.settings.sync_enabled || false;
    document.getElementById('debugMode').checked = this.settings.debug_mode || false;

    // –ö–ª—é—á —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    document.getElementById('syncKey').value = this.settings.sync_key || '';

    // API –∫–ª—é—á
    document.getElementById('apiKey').value = this.settings.api_key || '';

    // Inpars –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    document.getElementById('inparsToken').value = this.settings.inpars_api_token || '';
    document.getElementById('sourceAvito').checked = this.settings.inpars_source_avito !== false; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
    document.getElementById('sourceCian').checked = this.settings.inpars_source_cian !== false; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    this.toggleSyncSettings(this.settings.sync_enabled || false);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ Inpars –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
    if (this.settings.inpars_api_token) {
      this.loadInparsSubscription();
    }
  }

  async saveSettings() {
    try {
      const saveBtn = document.getElementById('saveSettingsBtn');
      const originalText = saveBtn.innerHTML;
      
      saveBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
      saveBtn.disabled = true;

      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
      const formData = new FormData(document.getElementById('settingsForm'));
      
      const newSettings = {
        parsing_delay_avito: parseInt(formData.get('parsing_delay_avito')) || 30,
        parsing_delay_cian: parseInt(formData.get('parsing_delay_cian')) || 30,
        update_days: parseInt(formData.get('update_days')) || 7,
        auto_process_duplicates: document.getElementById('autoProcessDuplicates').checked,
        auto_archive_listings: document.getElementById('autoArchive').checked,
        sync_enabled: document.getElementById('syncEnabled').checked,
        sync_key: document.getElementById('syncKey').value.trim(),
        api_key: document.getElementById('apiKey').value.trim(),
        debug_mode: document.getElementById('debugMode').checked
      };

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (newSettings.parsing_delay_avito < 10 || newSettings.parsing_delay_avito > 300) {
        throw new Error('–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è Avito –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 300 —Å–µ–∫—É–Ω–¥');
      }

      if (newSettings.parsing_delay_cian < 10 || newSettings.parsing_delay_cian > 300) {
        throw new Error('–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è Cian –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 300 —Å–µ–∫—É–Ω–¥');
      }

      if (newSettings.update_days < 1 || newSettings.update_days > 365) {
        throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 365');
      }

      if (newSettings.sync_enabled && !newSettings.sync_key) {
        throw new Error('–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–ª—é—á');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      for (const [key, value] of Object.entries(newSettings)) {
        await db.setSetting(key, value);
        this.settings[key] = value;
      }

      this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      this.showNotification(error.message, 'error');
    } finally {
      const saveBtn = document.getElementById('saveSettingsBtn');
      saveBtn.innerHTML = '<svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
      saveBtn.disabled = false;
    }
  }

  async loadDatabaseStats() {
    try {
      const segments = await db.getAll('segments');
      const listings = await db.getAll('listings');
      const objects = await db.getAll('objects');
      const reports = await db.getAll('reports');

      document.getElementById('statsSegments').textContent = segments.length;
      document.getElementById('statsListings').textContent = listings.length;
      document.getElementById('statsObjects').textContent = objects.length;
      document.getElementById('statsReports').textContent = reports.length;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  async exportData() {
    try {
      const exportBtn = document.getElementById('exportDataBtn');
      const originalText = exportBtn.innerHTML;
      
      exportBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>–≠–∫—Å–ø–æ—Ä—Ç...';
      exportBtn.disabled = true;

      const exportData = await db.exportData();
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const blob = new Blob([exportData], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      const now = new Date();
      const filename = `neocenka-export-${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}.json`;
      
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      this.showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      this.showNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö', 'error');
    } finally {
      const exportBtn = document.getElementById('exportDataBtn');
      exportBtn.innerHTML = '<svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö';
      exportBtn.disabled = false;
    }
  }

  importData() {
    document.getElementById('importFileInput').click();
  }

  async handleImportFile(event) {
    const file = event.target.files[0];
    if (!file) return;

    try {
      const importBtn = document.getElementById('importDataBtn');
      const originalText = importBtn.innerHTML;
      
      importBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>–ò–º–ø–æ—Ä—Ç...';
      importBtn.disabled = true;

      const fileContent = await this.readFileAsText(file);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º JSON
      let importData;
      try {
        importData = JSON.parse(fileContent);
      } catch (error) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (!importData.segments || !Array.isArray(importData.segments)) {
        throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Neocenka');
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
      const confirmImport = confirm(
        `–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:\n` +
        `- –°–µ–≥–º–µ–Ω—Ç–æ–≤: ${importData.segments?.length || 0}\n` +
        `- –û–±—ä—è–≤–ª–µ–Ω–∏–π: ${importData.listings?.length || 0}\n` +
        `- –û–±—ä–µ–∫—Ç–æ–≤: ${importData.objects?.length || 0}\n` +
        `- –û—Ç—á–µ—Ç–æ–≤: ${importData.reports?.length || 0}\n\n` +
        `–≠—Ç–æ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`
      );

      if (!confirmImport) {
        return;
      }

      await db.importData(fileContent);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.loadDatabaseStats();
      
      this.showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
      this.showNotification(error.message, 'error');
    } finally {
      const importBtn = document.getElementById('importDataBtn');
      importBtn.innerHTML = '<svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10"></path></svg>–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö';
      importBtn.disabled = false;
      
      // –û—á–∏—â–∞–µ–º input
      event.target.value = '';
    }
  }

  readFileAsText(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => resolve(e.target.result);
      reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
      reader.readAsText(file);
    });
  }

  async processDuplicates() {
    try {
      const processBtn = document.getElementById('processDuplicatesBtn');
      const originalText = processBtn.innerHTML;
      
      processBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 0 1 4 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>–û–±—Ä–∞–±–æ—Ç–∫–∞...';
      processBtn.disabled = true;

      const segments = await db.getAll('segments');
      let totalProcessed = 0;
      let totalMerged = 0;
      let totalErrors = 0;

      for (const segment of segments) {
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ background script –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π
          const response = await chrome.runtime.sendMessage({
            action: 'processSegmentDuplicates',
            segmentId: segment.id
          });

          if (response.success) {
            totalProcessed += response.result.processed || 0;
            totalMerged += response.result.merged || 0;
            totalErrors += response.result.errors || 0;
          } else {
            totalErrors++;
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ ${segment.name}:`, error);
          totalErrors++;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.loadDatabaseStats();

      const message = `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n` +
                     `- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${totalProcessed}\n` +
                     `- –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –¥—É–±–ª–µ–π: ${totalMerged}\n` +
                     `- –û—à–∏–±–æ–∫: ${totalErrors}`;

      this.showNotification('–î—É–±–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã', 'success');
      alert(message);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π', 'error');
    } finally {
      const processBtn = document.getElementById('processDuplicatesBtn');
      processBtn.innerHTML = '<svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2v0M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"></path></svg>–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—É–±–ª–∏';
      processBtn.disabled = false;
    }
  }

  showClearDataModal() {
    document.getElementById('clearDataModal').classList.remove('hidden');
  }

  hideClearDataModal() {
    document.getElementById('clearDataModal').classList.add('hidden');
  }

  async clearAllData() {
    try {
      const confirmBtn = document.getElementById('confirmClearData');
      const originalText = confirmBtn.innerHTML;
      
      confirmBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 0 1 4 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>–£–¥–∞–ª–µ–Ω–∏–µ...';
      confirmBtn.disabled = true;

      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
      const stores = ['segments', 'listings', 'objects', 'reports'];
      
      for (const storeName of stores) {
        const items = await db.getAll(storeName);
        for (const item of items) {
          await db.delete(storeName, item.id);
        }
      }

      this.hideClearDataModal();
      await this.loadDatabaseStats();
      
      this.showNotification('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã', 'success');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    } finally {
      const confirmBtn = document.getElementById('confirmClearData');
      confirmBtn.innerHTML = '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ';
      confirmBtn.disabled = false;
    }
  }

  toggleSyncSettings(enabled) {
    const syncKeyContainer = document.getElementById('syncKeyContainer');
    if (enabled) {
      syncKeyContainer.classList.remove('hidden');
    } else {
      syncKeyContainer.classList.add('hidden');
    }
  }

  generateSyncKey() {
    const key = this.generateRandomKey(32);
    document.getElementById('syncKey').value = key;
  }

  generateRandomKey(length) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  async loadSubscriptionInfo() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      const subscriptionData = await subscriptionService.loadSubscriptionData();
      
      if (subscriptionData && subscriptionData.subscription) {
        this.subscription = subscriptionData.subscription;
        this.updateSubscriptionUI(subscriptionData);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
  }

  async checkSubscription() {
    try {
      const apiKey = document.getElementById('apiKey').value.trim();
      
      if (!apiKey) {
        this.showNotification('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á', 'error');
        return;
      }

      const checkBtn = document.getElementById('checkSubscriptionBtn');
      const originalText = checkBtn.textContent;
      
      checkBtn.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
      checkBtn.disabled = true;

      const result = await subscriptionService.checkSubscription(apiKey);

      if (result.success) {
        this.subscription = result.subscription;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await db.setSetting('api_key', apiKey);
        this.settings.api_key = apiKey;
        
        this.updateSubscriptionUI(result);
        this.showNotification('–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
      } else {
        this.hideSubscriptionUI();
        this.showNotification(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏', 'error');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏', 'error');
    } finally {
      const checkBtn = document.getElementById('checkSubscriptionBtn');
      checkBtn.textContent = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å';
      checkBtn.disabled = false;
    }
  }

  updateSubscriptionUI(data) {
    const { subscription, user } = data;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
    document.getElementById('subscriptionStatus').classList.remove('hidden');
    document.getElementById('subscriptionFeatures').classList.remove('hidden');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const statusEl = document.getElementById('subscriptionStatusText');
    const planEl = document.getElementById('subscriptionPlan');
    const daysEl = document.getElementById('subscriptionDays');
    const requestsEl = document.getElementById('apiRequestsToday');

    if (subscription.active) {
      statusEl.textContent = '–ê–∫—Ç–∏–≤–Ω–∞';
      statusEl.className = 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800';
    } else {
      statusEl.textContent = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
      statusEl.className = 'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800';
    }

    planEl.textContent = this.formatPlanName(subscription.plan);
    daysEl.textContent = subscription.days_remaining;
    
    if (subscription.usage) {
      requestsEl.textContent = `${subscription.usage.api_requests_today} / ${subscription.usage.api_requests_limit}`;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
    this.updateFeaturesUI(subscription.features);
  }

  updateFeaturesUI(features) {
    const featureElements = document.querySelectorAll('#subscriptionFeatures .flex.items-center');
    
    featureElements.forEach((element, index) => {
      const icon = element.querySelector('svg');
      const span = element.querySelector('span');
      
      let isEnabled = false;
      
      switch (index) {
        case 0: // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
          isEnabled = features.parsing_enabled;
          break;
        case 1: // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
          isEnabled = features.analytics_enabled;
          break;
        case 2: // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
          isEnabled = features.export_enabled;
          break;
        case 3: // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          isEnabled = features.notifications;
          break;
        case 4: // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω
          isEnabled = features.price_tracking;
          break;
        case 5: // –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
          isEnabled = features.segments_limit === -1;
          break;
      }

      if (isEnabled) {
        icon.className = 'h-4 w-4 text-green-500 mr-2';
        span.className = 'text-sm text-gray-700';
      } else {
        icon.className = 'h-4 w-4 text-gray-400 mr-2';
        span.className = 'text-sm text-gray-400';
      }
    });
  }

  hideSubscriptionUI() {
    document.getElementById('subscriptionStatus').classList.add('hidden');
    document.getElementById('subscriptionFeatures').classList.add('hidden');
  }

  formatPlanName(plan) {
    const plans = {
      'free': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π',
      'basic': '–ë–∞–∑–æ–≤—ã–π',
      'premium': '–ü—Ä–µ–º–∏—É–º',
      'enterprise': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π'
    };
    return plans[plan] || plan;
  }

  showNotification(message, type = 'info') {
    const container = document.getElementById('notifications');
    const id = Date.now().toString();
    
    const typeClasses = {
      success: 'bg-green-50 border-green-200 text-green-800',
      error: 'bg-red-50 border-red-200 text-red-800',
      warning: 'bg-yellow-50 border-yellow-200 text-yellow-800',
      info: 'bg-blue-50 border-blue-200 text-blue-800'
    };
    
    const notification = document.createElement('div');
    notification.id = `notification-${id}`;
    notification.className = `border rounded-lg p-4 shadow-sm ${typeClasses[type]} transform transition-all duration-300 ease-in-out`;
    
    notification.innerHTML = `
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <span class="text-sm font-medium">${message}</span>
        </div>
        <button class="notification-close ml-3 text-sm opacity-70 hover:opacity-100">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
          </svg>
        </button>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeButton = notification.querySelector('.notification-close');
    closeButton.addEventListener('click', () => {
      notification.remove();
    });
    
    container.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      const element = document.getElementById(`notification-${id}`);
      if (element) {
        element.style.opacity = '0';
        element.style.transform = 'translateX(100%)';
        setTimeout(() => element.remove(), 300);
      }
    }, 5000);
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
   * @param {boolean} enabled - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É
   */
  async toggleDebugMode(enabled) {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await db.setSetting('debug_mode', enabled);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ chrome.storage –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ content scripts
      if (typeof chrome !== 'undefined' && chrome.storage) {
        chrome.storage.local.set({ 'neocenka_debug_mode': enabled });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞–º—è—Ç–∏
      this.settings.debug_mode = enabled;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
      if (window.debugLogger) {
        window.debugLogger.setDebugMode(enabled);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const message = enabled ? '–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã';
      this.showNotification(message, 'success');
      
      // –ï—Å–ª–∏ –æ—Ç–ª–∞–¥–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞, –≤—ã–≤–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (enabled && window.debugLogger) {
        window.debugLogger.log('–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—Å–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å.');
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
      this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏', 'error');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      document.getElementById('debugMode').checked = !enabled;
    }
  }

  // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° INPARS =====

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ API Inpars
   */
  async saveInparsToken() {
    try {
      const saveBtn = document.getElementById('saveInparsToken');
      const tokenInput = document.getElementById('inparsToken');
      const token = tokenInput.value.trim();

      if (!token) {
        this.showNotification('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω API Inpars', 'error');
        return;
      }

      saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
      saveBtn.disabled = true;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await db.setSetting('inpars_api_token', token);
      this.settings.inpars_api_token = token;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–µ—Ä–≤–∏—Å–µ
      if (this.inparsService) {
        this.inparsService.setToken(token);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      await this.checkInparsSubscription();

      this.showNotification('–¢–æ–∫–µ–Ω API Inpars —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Inpars:', error);
      this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ' + error.message, 'error');
    } finally {
      const saveBtn = document.getElementById('saveInparsToken');
      saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
      saveBtn.disabled = false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Inpars
   */
  async checkInparsSubscription() {
    try {
      if (!this.inparsService) {
        console.log('‚ö†Ô∏è InparsService –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return;
      }
      
      console.log('üîë InparsService token status:', this.inparsService.token ? '***set***' : 'not set');

      const statusIndicator = document.getElementById('inparsStatusIndicator');
      const statusText = document.getElementById('inparsStatusText');
      const subscriptionStatus = document.getElementById('inparsSubscriptionStatus');
      const subscriptionDetails = document.getElementById('inparsSubscriptionDetails');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏
      statusIndicator.querySelector('div').className = 'h-3 w-3 rounded-full bg-yellow-400 animate-pulse';
      statusText.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏...';
      subscriptionStatus.classList.remove('hidden');

      console.log('üîç Checking Inpars subscription...');
      const result = await this.inparsService.checkSubscription();
      console.log('üìã Subscription check result:', result);

      if (result.success) {
        if (result.active) {
          // –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
          statusIndicator.querySelector('div').className = 'h-3 w-3 rounded-full bg-green-500';
          statusText.textContent = '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞';

          // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
          subscriptionDetails.classList.add('hidden');

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          document.getElementById('importInparsCategories').disabled = false;
          document.getElementById('inparsApiStats').classList.remove('hidden');

        } else {
          // –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
          statusIndicator.querySelector('div').className = 'h-3 w-3 rounded-full bg-red-500';
          statusText.textContent = '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞';
          subscriptionDetails.classList.add('hidden');

          // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          document.getElementById('importInparsCategories').disabled = true;
          document.getElementById('inparsApiStats').classList.add('hidden');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API
        this.updateInparsAPIStats();

      } else {
        // –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        statusIndicator.querySelector('div').className = 'h-3 w-3 rounded-full bg-red-500';
        statusText.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        subscriptionDetails.classList.add('hidden');
        document.getElementById('importInparsCategories').disabled = true;
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ Inpars:', error);
      
      const statusIndicator = document.getElementById('inparsStatusIndicator');
      const statusText = document.getElementById('inparsStatusText');
      
      statusIndicator.querySelector('div').className = 'h-3 w-3 rounded-full bg-red-500';
      statusText.textContent = '–û—à–∏–±–∫–∞: ' + error.message;
      
      this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ Inpars: ' + error.message, 'error');
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  async loadInparsSubscription() {
    await this.checkInparsSubscription();
  }

  /**
   * –ò–º–ø–æ—Ä—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ Inpars
   */
  async importInparsCategories() {
    try {
      if (!this.inparsService) {
        throw new Error('InparsService –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      }

      const importBtn = document.getElementById('importInparsCategories');
      const statusDiv = document.getElementById('categoriesImportStatus');

      importBtn.disabled = true;
      importBtn.innerHTML = `
        <svg class="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        –ò–º–ø–æ—Ä—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...
      `;

      statusDiv.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Inpars...';
      statusDiv.classList.remove('hidden');

      const categories = await this.inparsService.loadCategories();

      if (categories && categories.length > 0) {
        statusDiv.textContent = `–ü–æ–ª—É—á–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const importResult = await db.importInparsCategories(categories);
        
        if (importResult.success) {
          statusDiv.textContent = `‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importResult.imported} –Ω–æ–≤—ã—Ö, ${importResult.updated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`;
          this.showNotification(`–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${importResult.imported} –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, ${importResult.updated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`, 'success');
          
          if (importResult.errors > 0) {
            console.warn('–û—à–∏–±–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', importResult.details.errors);
            this.showNotification(`–í–Ω–∏–º–∞–Ω–∏–µ: ${importResult.errors} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å`, 'warning');
          }
        } else {
          throw new Error(importResult.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
        }

      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π Inpars:', error);
      
      const statusDiv = document.getElementById('categoriesImportStatus');
      statusDiv.textContent = '‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + error.message;
      statusDiv.classList.remove('hidden');
      
      this.showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ' + error.message, 'error');
    } finally {
      const importBtn = document.getElementById('importInparsCategories');
      importBtn.disabled = false;
      importBtn.innerHTML = `
        <svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10">
          </path>
        </svg>
        –ò–º–ø–æ—Ä—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ Inpars
      `;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
   */
  async saveInparsSources() {
    try {
      const sourceAvito = document.getElementById('sourceAvito').checked;
      const sourceCian = document.getElementById('sourceCian').checked;

      await db.setSetting('inpars_source_avito', sourceAvito);
      await db.setSetting('inpars_source_cian', sourceCian);

      this.settings.inpars_source_avito = sourceAvito;
      this.settings.inpars_source_cian = sourceCian;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö:', error);
      this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', 'error');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API Inpars
   */
  updateInparsAPIStats() {
    if (this.inparsService) {
      const stats = this.inparsService.getStatus();
      
      document.getElementById('apiRequestCount').textContent = stats.requestCount || 0;
      document.getElementById('apiQueueLength').textContent = stats.queueLength || 0;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –∞–ª–≥–æ—Ä–∏—Ç–º–∞
   */
  async initializeMLMatcher() {
    try {
      if (!window.smartAddressMatcher && typeof SmartAddressMatcher !== 'undefined') {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        if (!window.spatialIndexManager) {
          window.spatialIndexManager = new SpatialIndexManager();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ML –∞–ª–≥–æ—Ä–∏—Ç–º
        window.smartAddressMatcher = new SmartAddressMatcher(window.spatialIndexManager);
        console.log('ü§ñ SmartAddressMatcher initialized in settings');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ localStorage –µ—Å–ª–∏ –µ—Å—Ç—å
        const savedModel = localStorage.getItem('ml_trained_model');
        if (savedModel) {
          try {
            const modelData = JSON.parse(savedModel);
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Å–∞ –∏ –ø–æ—Ä–æ–≥–∏
            Object.assign(window.smartAddressMatcher.model.weights, modelData.weights || {});
            Object.assign(window.smartAddressMatcher.model.thresholds, modelData.thresholds || {});
            window.smartAddressMatcher.model.version = modelData.version || '1.0.0';
            window.smartAddressMatcher.model.lastUpdate = modelData.lastUpdate || new Date().toISOString().split('T')[0];
            console.log('üíæ Restored trained model from localStorage');
          } catch (error) {
            console.warn('Failed to restore model:', error);
          }
        }
      }
    } catch (error) {
      console.warn('ML –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ML –º–æ–¥–µ–ª–∏
   */
  async refreshMLStats() {
    try {
      const refreshBtn = document.getElementById('refreshMLStats');
      const originalText = refreshBtn.innerHTML;
      
      refreshBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
      refreshBtn.disabled = true;

      // –ü–æ–ª—É—á–∞–µ–º ML –º–æ–¥–µ–ª—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      let modelData = null;
      if (window.smartAddressMatcher) {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        modelData = {
          ...window.smartAddressMatcher.model,
          trainingExamples: window.smartAddressMatcher.training.examples.length,
          lastTrainingDate: window.smartAddressMatcher.training.examples.length > 0 ? 
            new Date(Math.max(...window.smartAddressMatcher.training.examples.map(ex => ex.timestamp))).toISOString().split('T')[0] : 
            '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        };
        console.log('üìä Current ML model stats:', modelData);
      } else {
        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ localStorage
        try {
          const savedModel = localStorage.getItem('ml_trained_model');
          const trainingCount = localStorage.getItem('ml_training_count');
          if (savedModel) {
            modelData = JSON.parse(savedModel);
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
            if (trainingCount) {
              modelData.trainingExamples = parseInt(trainingCount);
            }
            console.log('üíæ Loaded trained model from localStorage with', modelData.trainingExamples, 'examples');
          } else {
            // Fallback –∫ pretrained –º–æ–¥–µ–ª–∏
            const response = await fetch(chrome.runtime.getURL('utils/pretrained-model.json'));
            modelData = await response.json();
            console.log('üìÅ Loaded pretrained model from file');
          }
        } catch (error) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å:', error);
        }
      }

      if (modelData) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const versionEl = document.getElementById('mlModelVersion');
        const examplesEl = document.getElementById('mlTrainingExamples');
        const accuracyEl = document.getElementById('mlModelAccuracy');
        const updateEl = document.getElementById('mlLastUpdate');
        
        if (versionEl) versionEl.textContent = modelData.version || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        if (examplesEl) examplesEl.textContent = modelData.trainingExamples || 0;
        if (accuracyEl) accuracyEl.textContent = modelData.accuracy ? `${(modelData.accuracy * 100).toFixed(1)}%` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        if (updateEl) updateEl.textContent = modelData.lastUpdate || modelData.lastTrainingDate || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        this.showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ML –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
      } else {
        this.showNotification('ML –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'warning');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ML:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error');
    } finally {
      const refreshBtn = document.getElementById('refreshMLStats');
      refreshBtn.innerHTML = '<svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É';
      refreshBtn.disabled = false;
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç ML –º–æ–¥–µ–ª–∏ –≤ textarea
   */
  async exportMLModel() {
    try {
      const exportBtn = document.getElementById('exportMLModel');
      const originalText = exportBtn.innerHTML;
      
      exportBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 0 1 4 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>–≠–∫—Å–ø–æ—Ä—Ç...';
      exportBtn.disabled = true;

      let modelData = null;
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
      if (window.smartAddressMatcher) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        modelData = {
          ...window.smartAddressMatcher.model,
          trainingExamples: window.smartAddressMatcher.training.examples.length,
          lastTrainingDate: window.smartAddressMatcher.training.examples.length > 0 ? 
            new Date(Math.max(...window.smartAddressMatcher.training.examples.map(ex => ex.timestamp))).toISOString().split('T')[0] : 
            new Date().toISOString().split('T')[0],
          improvements: [
            "–°–Ω–∏–∂–µ–Ω—ã –ø–æ—Ä–æ–≥–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π",
            "–£–≤–µ–ª–∏—á–µ–Ω –≤–µ—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π", 
            "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö",
            `–û–±—É—á–µ–Ω–∞ –Ω–∞ ${window.smartAddressMatcher.training.examples.length} –ø—Ä–∏–º–µ—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
          ]
        };
        console.log('üéØ Exporting trained model with', modelData.trainingExamples, 'examples');
      } else {
        // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        try {
          const savedModel = localStorage.getItem('ml_trained_model');
          const trainingCount = localStorage.getItem('ml_training_count');
          if (savedModel) {
            modelData = JSON.parse(savedModel);
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
            if (trainingCount) {
              modelData.trainingExamples = parseInt(trainingCount);
            }
            console.log('üíæ Exporting trained model from localStorage with', modelData.trainingExamples, 'examples');
          } else {
            const response = await fetch(chrome.runtime.getURL('utils/pretrained-model.json'));
            modelData = await response.json();
            console.log('üìÅ Exporting pretrained model');
          }
        } catch (error) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ML –º–æ–¥–µ–ª—å');
        }
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const formattedJson = JSON.stringify(modelData, null, 2);
      
      // –í—ã–≤–æ–¥–∏–º –≤ textarea
      const textarea = document.getElementById('mlModelExport');
      if (!textarea) {
        throw new Error('–≠–ª–µ–º–µ–Ω—Ç mlModelExport –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
      }
      textarea.value = formattedJson;
      
      this.showNotification('–ú–æ–¥–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ', 'success');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ ML –º–æ–¥–µ–ª–∏:', error);
      this.showNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–∏: ' + error.message, 'error');
    } finally {
      const exportBtn = document.getElementById('exportMLModel');
      exportBtn.innerHTML = '<svg class="-ml-1 mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>–≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏';
      exportBtn.disabled = false;
    }
  }

  /**
   * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ML –º–æ–¥–µ–ª–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
   */
  async copyMLModel() {
    try {
      const textarea = document.getElementById('mlModelExport');
      
      if (!textarea.value.trim()) {
        this.showNotification('–°–Ω–∞—á–∞–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–æ–¥–µ–ª—å', 'warning');
        return;
      }

      // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
      await navigator.clipboard.writeText(textarea.value);
      
      // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      const copyBtn = document.getElementById('copyMLModel');
      const originalText = copyBtn.innerHTML;
      
      copyBtn.innerHTML = '<svg class="-ml-1 mr-2 h-4 w-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
      copyBtn.classList.add('text-green-600');
      
      setTimeout(() => {
        copyBtn.innerHTML = originalText;
        copyBtn.classList.remove('text-green-600');
      }, 2000);
      
      this.showNotification('–ú–æ–¥–µ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'error');
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  new SettingsPage();
});
      