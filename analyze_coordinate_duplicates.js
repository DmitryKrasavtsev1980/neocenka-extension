/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ —Ä–∞–∑–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
 */

const fs = require('fs');

// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
const listingsData = JSON.parse(fs.readFileSync('./example/example-listings.json', 'utf8'));
const addressesData = JSON.parse(fs.readFileSync('./example/example-addresses.json', 'utf8'));

console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${listingsData.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ ${addressesData.length} –∞–¥—Ä–µ—Å–æ–≤`);

/**
 * –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ Haversine)
 */
function calculateDistance(coord1, coord2) {
    const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const lat1Rad = (parseFloat(coord1.lat) * Math.PI) / 180;
    const lat2Rad = (parseFloat(coord2.lat) * Math.PI) / 180;
    const deltaLatRad = ((parseFloat(coord2.lat) - parseFloat(coord1.lat)) * Math.PI) / 180;
    const deltaLngRad = ((parseFloat(coord2.lng || coord2.lon) - parseFloat(coord1.lng || coord1.lon)) * Math.PI) / 180;

    const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) +
              Math.cos(lat1Rad) * Math.cos(lat2Rad) *
              Math.sin(deltaLngRad / 2) * Math.sin(deltaLngRad / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c;
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –±–ª–∏–∑–∫–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
 */
function groupByCoordinates(listings, radius = 20) {
    const groups = [];
    const processed = new Set();

    listings.forEach((listing, index) => {
        if (processed.has(index) || !listing.coordinates?.lat || !listing.coordinates?.lng) {
            return;
        }

        const group = [listing];
        processed.add(index);

        // –ò—â–µ–º –¥—Ä—É–≥–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ
        listings.forEach((otherListing, otherIndex) => {
            if (processed.has(otherIndex) || 
                !otherListing.coordinates?.lat || 
                !otherListing.coordinates?.lng || 
                otherIndex === index) {
                return;
            }

            const distance = calculateDistance(listing.coordinates, otherListing.coordinates);
            if (distance <= radius) {
                group.push(otherListing);
                processed.add(otherIndex);
            }
        });

        if (group.length > 1) {
            groups.push({
                coordinates: listing.coordinates,
                listings: group,
                count: group.length
            });
        }
    });

    return groups;
}

/**
 * –ê–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞–∑–ª–∏—á–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
 */
function analyzeGroups(groups) {
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –ì–†–£–ü–ü –û–ë–™–Ø–í–õ–ï–ù–ò–ô –° –ë–õ–ò–ó–ö–ò–ú–ò –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò\n');
    
    let problemCases = 0;
    
    groups.forEach((group, index) => {
        const confidences = group.listings.map(l => l.address_match_confidence).filter(c => c);
        const scores = group.listings.map(l => l.address_match_score).filter(s => s !== null && s !== undefined);
        const distances = group.listings.map(l => l.address_distance).filter(d => d !== null && d !== undefined);
        
        // –ò—â–µ–º –≥—Ä—É–ø–ø—ã —Å —Ä–∞–∑–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        const uniqueConfidences = [...new Set(confidences)];
        const hasLowConfidence = confidences.some(c => c === 'low' || c === 'very_low');
        const hasHighConfidence = confidences.some(c => c === 'high' || c === 'medium');
        
        if (uniqueConfidences.length > 1 && hasLowConfidence) {
            problemCases++;
            
            console.log(`\nüéØ –ì–†–£–ü–ü–ê ${index + 1}: ${group.count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ 20–º`);
            console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${group.coordinates.lat}, ${group.coordinates.lng}`);
            console.log(`üéöÔ∏è  –£—Ä–æ–≤–Ω–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏: ${uniqueConfidences.join(', ')}`);
            console.log(`üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –∞–¥—Ä–µ—Å–æ–≤: ${distances.map(d => d.toFixed(1) + '–º').join(', ')}`);
            console.log(`üìä –°–∫–æ—Ä—ã: ${scores.map(s => s.toFixed(3)).join(', ')}`);
            
            console.log('\nüìã –î–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:');
            group.listings.forEach((listing, i) => {
                console.log(`  ${i + 1}. ${listing.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}`);
                console.log(`     üìä –¢–æ—á–Ω–æ—Å—Ç—å: ${listing.address_match_confidence || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'} (—Å–∫–æ—Ä: ${listing.address_match_score || '–Ω/–¥'})`);
                console.log(`     üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${listing.address_distance ? listing.address_distance.toFixed(1) + '–º' : '–Ω/–¥'}`);
                console.log(`     üéØ –ú–µ—Ç–æ–¥: ${listing.address_match_method || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
                console.log(`     üÜî –ê–¥—Ä–µ—Å ID: ${listing.address_id || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
                
                // –ù–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å
                const foundAddress = addressesData.find(addr => addr.id === listing.address_id);
                if (foundAddress) {
                    const distToAddress = calculateDistance(listing.coordinates, foundAddress.coordinates);
                    console.log(`     üè† –ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: "${foundAddress.address}"`);
                    console.log(`     üìê –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∞–¥—Ä–µ—Å–∞: ${distToAddress.toFixed(1)}–º`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ‚â§ 20–º, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
                    if (distToAddress <= 20 && (listing.address_match_confidence === 'low' || listing.address_match_confidence === 'very_low')) {
                        console.log(`     ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ ‚â§20–º, –Ω–æ —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è!`);
                    }
                }
                console.log('');
            });
        }
    });
    
    console.log(`\nüìà –ò–¢–û–ì–û:`);
    console.log(`- –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø —Å –±–ª–∏–∑–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${groups.length}`);
    console.log(`- –ì—Ä—É–ø–ø —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏: ${problemCases}`);
    
    return problemCases;
}

/**
 * –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ "‚â§20–º = 90% —Ç–æ—á–Ω–æ—Å—Ç–∏"
 */
function findProximityRuleViolations() {
    console.log('\nüîç –ü–û–ò–°–ö –ù–ê–†–£–®–ï–ù–ò–ô –ü–†–ê–í–ò–õ–ê –ë–õ–ò–ó–û–°–¢–ò (‚â§20–º = 90% —Ç–æ—á–Ω–æ—Å—Ç—å)\n');
    
    let violations = 0;
    
    listingsData.forEach((listing, index) => {
        if (!listing.address_id || !listing.address_distance || !listing.address_match_confidence) {
            return;
        }
        
        const distance = listing.address_distance;
        const confidence = listing.address_match_confidence;
        const score = listing.address_match_score;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ‚â§ 20–º, —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–π (‚â•90%)
        if (distance <= 20 && (confidence === 'low' || confidence === 'very_low' || (score && score < 0.9))) {
            violations++;
            
            console.log(`‚ö†Ô∏è  –ù–ê–†–£–®–ï–ù–ò–ï ${violations}:`);
            console.log(`   üìç –û–±—ä—è–≤–ª–µ–Ω–∏–µ: "${listing.address || listing.title}"`);
            console.log(`   üìä –¢–æ—á–Ω–æ—Å—Ç—å: ${confidence} (—Å–∫–æ—Ä: ${score ? score.toFixed(3) : '–Ω/–¥'})`);
            console.log(`   üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(1)}–º`);
            console.log(`   üéØ –ú–µ—Ç–æ–¥: ${listing.address_match_method}`);
            console.log(`   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${listing.coordinates.lat}, ${listing.coordinates.lng}`);
            
            // –ù–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å
            const foundAddress = addressesData.find(addr => addr.id === listing.address_id);
            if (foundAddress) {
                console.log(`   üè† –ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: "${foundAddress.address}"`);
                console.log(`   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞: ${foundAddress.coordinates.lat}, ${foundAddress.coordinates.lng}`);
                
                // –ü–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                const recalculatedDistance = calculateDistance(listing.coordinates, foundAddress.coordinates);
                console.log(`   üìê –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${recalculatedDistance.toFixed(1)}–º`);
                
                if (Math.abs(recalculatedDistance - distance) > 1) {
                    console.log(`   ‚ö†Ô∏è  –û–®–ò–ë–ö–ê –í –†–ê–°–ß–ï–¢–ï –†–ê–°–°–¢–û–Ø–ù–ò–Ø! –†–∞–∑–Ω–∏—Ü–∞: ${Math.abs(recalculatedDistance - distance).toFixed(1)}–º`);
                }
            }
            console.log('');
        }
    });
    
    console.log(`üìà –ò–¢–û–ì–û –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª–∞ –±–ª–∏–∑–æ—Å—Ç–∏: ${violations}`);
    return violations;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ê–ù–ê–õ–ò–ó...\n');

// 1. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
const coordinateGroups = groupByCoordinates(listingsData, 20);
analyzeGroups(coordinateGroups);

// 2. –ò—â–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –±–ª–∏–∑–æ—Å—Ç–∏
findProximityRuleViolations();

console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');