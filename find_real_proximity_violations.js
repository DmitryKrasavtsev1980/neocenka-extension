/**
 * –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª–∞ –±–ª–∏–∑–æ—Å—Ç–∏ (‚â§20–º = 90% —Ç–æ—á–Ω–æ—Å—Ç—å)
 */

const fs = require('fs');

// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
const listingsData = JSON.parse(fs.readFileSync('./example/example-listings.json', 'utf8'));
const addressesData = JSON.parse(fs.readFileSync('./example/example-addresses.json', 'utf8'));

/**
 * –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è Haversine
 */
function calculateDistance(coord1, coord2) {
    const R = 6371000;
    const lat1Rad = (coord1.lat * Math.PI) / 180;
    const lat2Rad = (coord2.lat * Math.PI) / 180;
    const deltaLatRad = ((coord2.lat - coord1.lat) * Math.PI) / 180;
    const deltaLngRad = ((coord2.lng - coord1.lng) * Math.PI) / 180;

    const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) +
              Math.cos(lat1Rad) * Math.cos(lat2Rad) *
              Math.sin(deltaLngRad / 2) * Math.sin(deltaLngRad / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c;
}

console.log('üîç –ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–´–• –ù–ê–†–£–®–ï–ù–ò–ô –ü–†–ê–í–ò–õ–ê –ë–õ–ò–ó–û–°–¢–ò\n');

let totalViolations = 0;
let realProximityViolations = 0;

// –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
listingsData.forEach((listing, index) => {
    if (!listing.address_id || !listing.address_match_confidence || !listing.coordinates) {
        return;
    }

    // –ù–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å
    const matchedAddress = addressesData.find(addr => addr.id === listing.address_id);
    if (!matchedAddress || !matchedAddress.coordinates) {
        return;
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    const distance = calculateDistance(
        {
            lat: parseFloat(listing.coordinates.lat),
            lng: parseFloat(listing.coordinates.lng)
        },
        {
            lat: parseFloat(matchedAddress.coordinates.lat),
            lng: parseFloat(matchedAddress.coordinates.lng)
        }
    );

    const confidence = listing.address_match_confidence;
    const score = listing.address_match_score || 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ‚â§ 20–º, —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–π
    if (distance <= 20) {
        totalViolations++;
        
        // –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –±–ª–∏–∑–æ—Å—Ç–∏
        if (confidence !== 'high' && confidence !== 'excellent' && score < 0.9) {
            realProximityViolations++;
            
            console.log(`‚ö†Ô∏è  –ù–ê–†–£–®–ï–ù–ò–ï ${realProximityViolations}:`);
            console.log(`   üìç –û–±—ä—è–≤–ª–µ–Ω–∏–µ: "${listing.address || listing.title}"`);
            console.log(`   üìä –¢–µ–∫—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${confidence} (—Å–∫–æ—Ä: ${score.toFixed(3)})`);
            console.log(`   üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(1)}–º`);
            console.log(`   üéØ –ú–µ—Ç–æ–¥: ${listing.address_match_method}`);
            console.log(`   üè† –ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: "${matchedAddress.address}"`);
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            const latDiff = Math.abs(parseFloat(listing.coordinates.lat) - parseFloat(matchedAddress.coordinates.lat));
            const lngDiff = Math.abs(parseFloat(listing.coordinates.lng) - parseFloat(matchedAddress.coordinates.lng));
            
            console.log(`   üìê –†–∞–∑–Ω–∏—Ü–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: lat=${latDiff.toFixed(8)}, lng=${lngDiff.toFixed(8)}`);
            console.log(`   üéØ –û–ñ–ò–î–ê–ï–¢–°–Ø: —Ç–æ—á–Ω–æ—Å—Ç—å "high" —Å —Å–∫–æ—Ä–æ–º ‚â•0.90`);
            console.log('');
        }
    }
});

console.log(`\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
console.log(`   üìä –û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ ‚â§20–º: ${totalViolations}`);
console.log(`   ‚ö†Ô∏è  –ù–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª–∞ –±–ª–∏–∑–æ—Å—Ç–∏: ${realProximityViolations}`);
console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π: ${totalViolations > 0 ? (realProximityViolations / totalViolations * 100).toFixed(1) : 0}%`);

if (realProximityViolations === 0) {
    console.log('\n‚úÖ –†–µ–∞–ª—å–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    console.log('   –ê–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ ‚â§20–º = 90% —Ç–æ—á–Ω–æ—Å—Ç—å');
} else {
    console.log('\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –†–ï–ê–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´!');
    console.log('   –ü—Ä–∞–≤–∏–ª–æ –±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö');
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    console.log('\nüõ†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –∫–æ–¥–µ smart-address-matcher.js –º–µ—Ç–æ–¥ applyProximityRule()');
    console.log('2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π');
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –≤ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–º —Å–∫–æ—Ä–µ');
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
console.log('\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –° –ò–î–ï–ù–¢–ò–ß–ù–´–ú–ò –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò');

const coordinateGroups = new Map();

listingsData.forEach(listing => {
    if (!listing.coordinates?.lat || !listing.coordinates?.lng) return;
    
    const coordKey = `${listing.coordinates.lat},${listing.coordinates.lng}`;
    if (!coordinateGroups.has(coordKey)) {
        coordinateGroups.set(coordKey, []);
    }
    coordinateGroups.get(coordKey).push(listing);
});

let identicalCoordViolations = 0;

coordinateGroups.forEach((group, coords) => {
    if (group.length > 1) {
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –≤—Å–µ –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
        const confidences = group.map(l => l.address_match_confidence).filter(c => c);
        const scores = group.map(l => l.address_match_score).filter(s => s);
        
        const hasLowConfidence = confidences.some(c => c === 'low' || c === 'very_low');
        const hasHighConfidence = confidences.some(c => c === 'high' || c === 'excellent');
        
        if (hasLowConfidence && hasHighConfidence) {
            identicalCoordViolations++;
            console.log(`\n‚ö†Ô∏è  –ù–ï–°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–¨ ${identicalCoordViolations}:`);
            console.log(`   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${coords}`);
            console.log(`   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${group.length}`);
            console.log(`   üéöÔ∏è  –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏: ${[...new Set(confidences)].join(', ')}`);
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
            group.slice(0, 3).forEach((listing, i) => {
                console.log(`   ${i + 1}. "${listing.address}" - ${listing.address_match_confidence} (${listing.address_match_score?.toFixed(3)})`);
            });
        }
    }
});

if (identicalCoordViolations > 0) {
    console.log(`\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–û ${identicalCoordViolations} –≥—Ä—É–ø–ø —Å –Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç`);
    console.log('   –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞');
}