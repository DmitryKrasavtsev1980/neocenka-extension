#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    extensionName: 'neocenka-extension',
    buildDir: 'dist',
    sourceDir: '.',
    excludeFiles: [
        '.git',
        '.github',
        'node_modules',
        'dist',
        'scripts',
        'tests',
        'example',
        '.gitignore',
        '.claude',
        'test_*.js',
        'debug_*.html',
        'debug-toggle.js'
    ]
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function ensureDir(dirPath) {
    if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
function copyFiles(src, dest, excludeList = []) {
    ensureDir(dest);
    
    const items = fs.readdirSync(src);
    
    items.forEach(item => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if (excludeList.some(exclude => {
            if (exclude.includes('*')) {
                // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ wildcards
                const pattern = exclude.replace(/\*/g, '.*');
                return new RegExp(pattern).test(item);
            }
            return item === exclude;
        })) {
            return;
        }
        
        const srcPath = path.join(src, item);
        const destPath = path.join(dest, item);
        
        const stat = fs.statSync(srcPath);
        
        if (stat.isDirectory()) {
            copyFiles(srcPath, destPath, excludeList);
        } else {
            fs.copyFileSync(srcPath, destPath);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏–∑ package.json
function getVersion() {
    const packagePath = path.join(__dirname, '..', 'package.json');
    if (fs.existsSync(packagePath)) {
        const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
        return packageJson.version;
    }
    return '1.0.0';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ manifest.json
function updateManifestVersion(buildDir, version) {
    const manifestPath = path.join(buildDir, 'manifest.json');
    if (fs.existsSync(manifestPath)) {
        const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
        manifest.version = version;
        fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
        console.log(`‚úì –í–µ—Ä—Å–∏—è –≤ manifest.json –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ ${version}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ZIP –∞—Ä—Ö–∏–≤–∞
function createZipArchive(buildDir, outputName) {
    try {
        const zipPath = path.join(process.cwd(), `${outputName}.zip`);
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Ä—Ö–∏–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (fs.existsSync(zipPath)) {
            fs.unlinkSync(zipPath);
        }
        
        // –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        execSync(`cd ${buildDir} && zip -r ../${outputName}.zip . -x "*.git*" "node_modules/*" "dist/*"`, 
                { stdio: 'inherit' });
        
        console.log(`‚úì ZIP –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: ${outputName}.zip`);
        return zipPath;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ZIP –∞—Ä—Ö–∏–≤–∞:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CRX —Ñ–∞–π–ª–∞ (—Ç—Ä–µ–±—É–µ—Ç Chrome)
function createCrxFile(buildDir, outputName) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Chrome
        const chromePath = process.platform === 'win32' 
            ? 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'
            : '/usr/bin/google-chrome';
            
        if (!fs.existsSync(chromePath)) {
            console.log('‚ö† Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ CRX —Ñ–∞–π–ª–∞');
            return null;
        }
        
        const crxPath = path.join(process.cwd(), `${outputName}.crx`);
        const keyPath = path.join(process.cwd(), 'private-key.pem');
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(keyPath)) {
            console.log('‚ö† –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...');
            execSync(`openssl genrsa -out ${keyPath} 2048`, { stdio: 'inherit' });
        }
        
        // –°–æ–∑–¥–∞–µ–º CRX —Ñ–∞–π–ª
        execSync(`${chromePath} --pack-extension=${buildDir} --pack-extension-key=${keyPath}`, 
                { stdio: 'inherit' });
        
        console.log(`‚úì CRX —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${outputName}.crx`);
        return crxPath;
    } catch (error) {
        console.log('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CRX —Ñ–∞–π–ª:', error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è updates.xml
function createUpdatesXml(version) {
    const updatesXml = `<?xml version="1.0" encoding="UTF-8"?>
<gupdate xmlns="http://www.google.com/update2/response" protocol="2.0">
  <app appid="neocenka-extension">
    <updatecheck codebase="https://github.com/DmitryKrasavtsev1980/neocenka-extension/releases/download/v${version}/neocenka-extension-${version}.zip" version="${version}" />
  </app>
</gupdate>`;
    
    fs.writeFileSync('updates.xml', updatesXml);
    console.log(`‚úì updates.xml –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤–µ—Ä—Å–∏–∏ ${version}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏
async function build() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
        const version = getVersion();
        console.log(`üì¶ –í–µ—Ä—Å–∏—è: ${version}`);
        
        // –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏
        const buildDir = path.join(process.cwd(), CONFIG.buildDir);
        if (fs.existsSync(buildDir)) {
            fs.rmSync(buildDir, { recursive: true, force: true });
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏
        ensureDir(buildDir);
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        console.log('üìÇ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã...');
        copyFiles(CONFIG.sourceDir, buildDir, CONFIG.excludeFiles);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ manifest.json
        updateManifestVersion(buildDir, version);
        
        // –°–æ–±–∏—Ä–∞–µ–º CSS –µ—Å–ª–∏ –µ—Å—Ç—å Tailwind
        try {
            console.log('üé® –°–æ–±–∏—Ä–∞–µ–º CSS...');
            execSync('npm run build', { stdio: 'inherit' });
        } catch (error) {
            console.log('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å CSS:', error.message);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤—ã
        const outputName = `${CONFIG.extensionName}-${version}`;
        
        console.log('üì¶ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤—ã...');
        const zipPath = createZipArchive(buildDir, outputName);
        const crxPath = createCrxFile(buildDir, outputName);
        
        // –°–æ–∑–¥–∞–µ–º updates.xml
        createUpdatesXml(version);
        
        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\n‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏: ${buildDir}`);
        console.log(`üì¶ ZIP –∞—Ä—Ö–∏–≤: ${path.basename(zipPath)}`);
        if (crxPath) {
            console.log(`üì¶ CRX —Ñ–∞–π–ª: ${path.basename(crxPath)}`);
        }
        console.log(`üìÑ updates.xml –æ–±–Ω–æ–≤–ª–µ–Ω`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
if (require.main === module) {
    build();
}

module.exports = { build };