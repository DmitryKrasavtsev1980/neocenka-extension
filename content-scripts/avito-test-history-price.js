// –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
function findPriceHistoryButtonPrecise() {
    // console.log('üéØ === –¢–û–ß–ù–´–ô –ü–û–ò–°–ö –ö–ù–û–ü–ö–ò –ò–°–¢–û–†–ò–ò –¶–ï–ù ===');

    // –ò—â–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º –∏–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
    const selectors = [
        '.price-history-entry-point-iKhax',
        '.K5h5l.price-history-entry-point-iKhax',
        'p[aria-haspopup="true"][aria-expanded="false"]:contains("–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã")',
        'p.T7ujv.Tdsqf.dsi88.cujIu.aStJv',
        '[class*="price-history-entry-point"]',
        'div.K5h5l p[tabindex="0"]'
    ];

    let button = null;

    for (const selector of selectors) {
        try {
            // –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            if (!selector.includes(':contains')) {
                const elements = document.querySelectorAll(selector);
                // console.log(`–°–µ–ª–µ–∫—Ç–æ—Ä "${selector}": –Ω–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

                elements.forEach(el => {
                    const text = el.textContent || '';
                    if (text.includes('–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã')) {
                        button = el;
                        // console.log('‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', el);
                    }
                });
            }
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
    if (!button) {
        const allP = document.querySelectorAll('p');
        allP.forEach(p => {
            if (p.textContent && p.textContent.trim() === '–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã') {
                button = p;
                // console.log('‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Ç–µ–∫—Å—Ç—É:', p);
                // console.log('  –ö–ª–∞—Å—Å—ã:', p.className);
                // console.log('  –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç:', p.parentElement);
            }
        });
    }

    return button;
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è tooltip —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω
function activatePriceHistoryTooltip() {
    // console.log('üöÄ === –ê–ö–¢–ò–í–ê–¶–ò–Ø TOOLTIP –ò–°–¢–û–†–ò–ò –¶–ï–ù ===');

    const button = findPriceHistoryButtonPrecise();

    if (!button) {
        // console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    // console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å tooltip...');

    // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å
    if (button.focus) {
        button.focus();
        // console.log('üìç –§–æ–∫—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const events = [
        new MouseEvent('mouseenter', { bubbles: true, cancelable: true, view: window }),
        new MouseEvent('mouseover', { bubbles: true, cancelable: true, view: window }),
        new PointerEvent('pointerenter', { bubbles: true, cancelable: true }),
        new PointerEvent('pointerover', { bubbles: true, cancelable: true }),
        new MouseEvent('mousemove', {
            bubbles: true,
            cancelable: true,
            view: window,
            clientX: button.getBoundingClientRect().left + 10,
            clientY: button.getBoundingClientRect().top + 10
        })
    ];

    events.forEach((event, index) => {
        setTimeout(() => {
            // console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ ${event.type}`);
            button.dispatchEvent(event);

            // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
            if (button.parentElement) {
                button.parentElement.dispatchEvent(event);
            }
        }, index * 100);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ aria-expanded
    setTimeout(() => {
        const expanded = button.getAttribute('aria-expanded');
        // console.log('aria-expanded –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', expanded);

        if (expanded === 'true') {
            // console.log('‚úÖ Tooltip –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
            findTooltipContent();
        } else {
            // console.log('‚ö†Ô∏è aria-expanded –≤—Å–µ –µ—â–µ false, tooltip –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç—å—Å—è');
        }
    }, 1000);
}

// –ü–æ–∏—Å–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ tooltip
function findTooltipContent() {
    // console.log('üîç === –ü–û–ò–°–ö –°–û–î–ï–†–ñ–ò–ú–û–ì–û TOOLTIP ===');

    // –ò—â–µ–º tooltip –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    const tooltipSelectors = [
        '[role="tooltip"]',
        '[data-popper-placement]',
        '[class*="tooltip"][class*="show"]',
        '[class*="tooltip"][class*="visible"]',
        '[class*="popover"]',
        '[class*="overlay"]',
        '.portal-container > div',
        '#portal-root > div',
        'body > div[style*="position: absolute"]',
        'body > div[style*="z-index"]'
    ];

    let tooltipFound = false;

    tooltipSelectors.forEach(selector => {
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => {
            const text = el.textContent || '';
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö
            if ((text.includes('‚ÇΩ') || text.includes('—Ä—É–±')) &&
                (text.includes('—è–Ω–≤') || text.includes('—Ñ–µ–≤') || text.includes('–º–∞—Ä') ||
                 text.includes('–∞–ø—Ä') || text.includes('–º–∞–π') || text.includes('–∏—é–Ω') ||
                 text.includes('–∏—é–ª') || text.includes('–∞–≤–≥') || text.includes('—Å–µ–Ω') ||
                 text.includes('–æ–∫—Ç') || text.includes('–Ω–æ—è') || text.includes('–¥–µ–∫'))) {

                // console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π tooltip —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω!');
                // console.log('  –°–µ–ª–µ–∫—Ç–æ—Ä:', selector);
                // console.log('  –≠–ª–µ–º–µ–Ω—Ç:', el);
                // console.log('  HTML:', el.innerHTML.substring(0, 500) + '...');

                tooltipFound = true;
                //parsePriceHistoryData(el);
                // console.log('  HTML:', extractPriceHistory(el));
            }
        });
    });

    if (!tooltipFound) {
        // console.log('‚ùå Tooltip —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return tooltipFound;
}

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
function parsePriceHistoryData(tooltipElement) {
    // console.log('üìä === –ü–ê–†–°–ò–ù–ì –î–ê–ù–ù–´–• –ò–°–¢–û–†–ò–ò –¶–ï–ù ===');

    const priceHistory = [];

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const pricePattern = /(\d{1,3}(?:\s?\d{3})*)\s*‚ÇΩ/g;
    const datePattern = /(\d{1,2})\s*(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)(?:\s*(\d{4}))?/gi;

    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    const fullText = tooltipElement.textContent;
    // console.log('–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç tooltip:', fullText);

    // –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–Ω–∞–º–∏
    const lines = fullText.split('\n').map(line => line.trim()).filter(line => line);
    // console.log('–°—Ç—Ä–æ–∫–∏ —Å —Ü–µ–Ω–∞–º–∏:', lines);

    lines.forEach(line => {
        const priceMatch = line.match(pricePattern);
        const dateMatch = line.match(datePattern);

        if (priceMatch && dateMatch) {
            const price = parseInt(priceMatch[0].replace(/\s/g, '').replace('‚ÇΩ', ''));
            const date = dateMatch[0];

            priceHistory.push({
                date: date,
                price: price,
                formatted_price: priceMatch[0],
                raw_text: line
            });

            // console.log(`üìÖ ${date}: ${priceMatch[0]}`);
        }
    });

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const listItems = tooltipElement.querySelectorAll('li, div[class*="item"], div[class*="row"]');
    listItems.forEach(item => {
        const text = item.textContent;
        const priceMatch = text.match(pricePattern);
        const dateMatch = text.match(datePattern);

        if (priceMatch && dateMatch && !priceHistory.some(h => h.date === dateMatch[0])) {
            priceHistory.push({
                date: dateMatch[0],
                price: parseInt(priceMatch[0].replace(/\s/g, '').replace('‚ÇΩ', '')),
                formatted_price: priceMatch[0],
                raw_text: text.trim()
            });
        }
    });

    // console.log('\nüìà –ò—Ç–æ–≥–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω:', priceHistory);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.parsedPriceHistory = priceHistory;

    return priceHistory;
}

// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
function testPriceHistoryComplete() {
    // console.log('üß™ === –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ò–°–¢–û–†–ò–ò –¶–ï–ù ===\n');

    // –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
    const button = findPriceHistoryButtonPrecise();
    if (!button) {
        // console.log('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    // –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ DOM
    // console.log('\nüì° –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM...');

    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            mutation.addedNodes.forEach((node) => {
                if (node.nodeType === 1) {
                    const text = node.textContent || '';
                    if (text.includes('‚ÇΩ') && (text.includes('—è–Ω–≤') || text.includes('—Ñ–µ–≤') || text.includes('–º–∞—Ä'))) {
                        // console.log('\nüéØ –û–ë–ù–ê–†–£–ñ–ï–ù TOOLTIP!');
                        // console.log('–≠–ª–µ–º–µ–Ω—Ç:', node);
                        parsePriceHistoryData(node);
                        observer.disconnect();
                    }
                }
            });
        });
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    // –®–∞–≥ 3: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º tooltip
    setTimeout(() => {
        // console.log('\nüñ±Ô∏è –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º tooltip...');
        activatePriceHistoryTooltip();
    }, 500);

    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    setTimeout(() => {
        if (!window.parsedPriceHistory || window.parsedPriceHistory.length === 0) {
            // console.log('\nüí° –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞:');
            // console.log('1. –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –º—ã—à–∏ –Ω–∞ —Ç–µ–∫—Å—Ç "–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã" –ø–æ–¥ —Ü–µ–Ω–æ–π');
            // console.log('2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ—è–≤–ª–µ–Ω–∏—è tooltip');
            // console.log('3. –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: findTooltipContent()');
        } else {
            // console.log('\n‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞!');
            // console.log('–î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ window.parsedPriceHistory');
        }

        observer.disconnect();
    }, 5000);
}

function extractPriceHistory(element) {
    const priceHistory = [];
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.getMonth() + 1; // –º–µ—Å—è—Ü—ã –≤ JS 0-11

    // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const monthMap = {
        '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
        '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
        '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
    };

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–ª–æ–∫–∏ —Å –∑–∞–ø–∏—Å—è–º–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
    const historyEntries = element.querySelectorAll('div[style*="--module-spacer-column-gap: var(--theme-gap-0)"]');

    let prevYear = currentYear;
    let prevMonth = currentMonth;

    historyEntries.forEach(entry => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
        const dateElement = entry.querySelector('p:first-child');
        const dateText = dateElement ? dateElement.textContent.trim() : null;

        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        let day, month, monthNum, year;
        if (dateText) {
            const dateParts = dateText.split(' ');
            day = parseInt(dateParts[0]);
            month = dateParts[1];
            monthNum = monthMap[month.toLowerCase()] || 0;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–¥
            if (monthNum > prevMonth) {
                // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –≤ –∑–∞–ø–∏—Å–∏ –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
                prevYear--;
            }
            prevMonth = monthNum;

            year = prevYear;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
        const priceElement = entry.querySelector('p.obLSF') ||
                            entry.querySelector('p:last-child');
        const price = priceElement ? priceElement.textContent.trim() : null;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const changeElement = entry.parentElement.querySelector('p[class*="_3rH6"]');
        let change = null;
        let changeType = null;

        if (changeElement) {
            change = changeElement.textContent.trim();
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ)
            changeType = changeElement.classList.contains('FcB0L') ? 'increase' :
                         changeElement.classList.contains('LTb57') ? 'decrease' :
                         null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
        const isPublication = entry.parentElement.querySelector('p[style*="color: rgb(117, 117, 117)"]') !== null;

        if (dateText && price) {
            const formattedDate = `${day.toString().padStart(2, '0')}.${monthNum.toString().padStart(2, '0')}.${year}`;

            priceHistory.push({
                date: dateText,
                fullDate: formattedDate,
                year,
                price,
                change: isPublication ? null : change,
                changeType: isPublication ? null : changeType,
                isPublication,
                timestamp: new Date(year, monthNum - 1, day).getTime()
            });
        }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    priceHistory.sort((a, b) => b.timestamp - a.timestamp);

    return priceHistory;
}



// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testPriceHistoryComplete();