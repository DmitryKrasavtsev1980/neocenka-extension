/**
 * Content script –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü Avito.ru
 */

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∫–ª–∞—Å—Å —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω
if (typeof AvitoParser === 'undefined') {

class AvitoParser {
    constructor() {
        //console.log('AvitoParser constructor called');

        this.isListingPage = this.checkIsListingPage();
        //console.log('isListingPage:', this.isListingPage);

        if (this.isListingPage) {
            this.setupMessageListener();

            // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –ø–∞—Ä—Å–µ—Ä–∞
            window.avitoParserInstance = this;
            window.AvitoParser = AvitoParser; // –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º

            //console.log('‚úÖ AvitoParser –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –∫–∞–∫ window.avitoParserInstance');
        }
        this.setupAPIInterception();
        this.foundPriceHistory = null;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        this.initDebugMode();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–µ
        setTimeout(() => {
            this.initScrollPriceTracking();
        }, 3000); // –î–∞—ë–º –≤—Ä–µ–º—è —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
     */
    async initDebugMode() {
        try {
            // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ chrome.storage
            if (typeof chrome !== 'undefined' && chrome.storage) {
                chrome.storage.local.get(['neocenka_debug_mode'], (result) => {
                    if (result.neocenka_debug_mode === true) {
                        localStorage.setItem('neocenka_debug_mode', 'true');
                    }
                });
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏
        }
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (–µ—Å–ª–∏ –æ—Ç–ª–∞–¥–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞)
     * @param {...any} args - –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è console.log
     */
    debugLog(...args) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        if (window.debugLogger && window.debugLogger.isEnabled()) {
            window.debugLogger.log(...args);
        }
        // Fallback: –µ—Å–ª–∏ –ª–æ–≥–≥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É –≤ localStorage
        else if (localStorage.getItem('neocenka_debug_mode') === 'true') {
            console.log('[DEBUG]', ...args);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    checkIsListingPage() {
        const url = window.location.href;
        // console.log('Checking if listing page, URL:', url);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const isListingPage = url.includes('/kvartiry/') &&
            url.match(/\/kvartiry\/.*_\d+/) &&
            !url.includes('/list/');

        // console.log('Is listing page:', isListingPage);
        return isListingPage;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup
     */
    setupMessageListener() {
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            console.log('üì® Message received:', request);

            if (request.action === 'parseCurrentListing') {
                console.log('üéØ Processing parseCurrentListing');

                if (this.isListingPage) {
                    console.log('‚úÖ Parser instance available');

                    // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º async/await –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Promise
                    this.parseCurrentListing()
                        .then(data => {
                            console.log('üìä Parsed data:', data);

                            if (data) {
                                sendResponse({ success: true, data: data });
                            } else {
                                sendResponse({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' });
                            }
                        })
                        .catch(error => {
                            console.error('‚ùå Error in parseCurrentListing:', error);
                            sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞' });
                        });

                    // –ö–†–ò–¢–ò–ß–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    return true;

                } else {
                    sendResponse({ success: false, error: '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞' });
                }

            } else if (request.action === 'startMassParsing') {
                console.log('üéØ Processing startMassParsing');

                // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                this.startMassParsing(request.settings)
                    .then(result => {
                        sendResponse({ success: true, data: result });
                    })
                    .catch(error => {
                        console.error('‚ùå Error in startMassParsing:', error);
                        sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞' });
                    });

                return true; // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

            } else if (request.action === 'parseMassByFilter') {
                console.log('üéØ Processing parseMassByFilter');

                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
                this.parseMassByFilter(request.areaId)
                    .then(result => {
                        sendResponse({ success: true, parsed: result.parsed, errors: result.errors });
                    })
                    .catch(error => {
                        console.error('‚ùå Error in parseMassByFilter:', error);
                        sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É' });
                    });

                return true; // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

            } else {
                sendResponse({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    handleMessage(request, sender, sendResponse) {
        console.log('üì® AvitoParser handleMessage:', request);

        if (request.action === 'parseCurrentListing') {
            console.log('üéØ Processing parseCurrentListing');

            if (this.isListingPage) {
                console.log('‚úÖ Parser instance available');

                // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º async/await –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Promise
                this.parseCurrentListing()
                    .then(data => {
                        console.log('üìä Parsed data:', data);

                        if (data) {
                            sendResponse({ success: true, data: data });
                        } else {
                            sendResponse({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' });
                        }
                    })
                    .catch(error => {
                        console.error('‚ùå Error in parseCurrentListing:', error);
                        sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞' });
                    });

                // –ö–†–ò–¢–ò–ß–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                return true;

            } else {
                sendResponse({ success: false, error: '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞' });
            }

        } else if (request.action === 'startMassParsing') {
            console.log('üéØ Processing startMassParsing');

            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            this.startMassParsing(request.settings)
                .then(result => {
                    sendResponse({ success: true, data: result });
                })
                .catch(error => {
                    console.error('‚ùå Error in startMassParsing:', error);
                    sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞' });
                });

            return true; // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

        } else {
            sendResponse({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
        }

        return false;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */

    async parseCurrentListing() {
        console.log('üöÄ === –ù–ê–ß–ê–õ–û –ü–ê–†–°–ò–ù–ì–ê –û–ë–™–Ø–í–õ–ï–ù–ò–Ø ===');
        console.log('üìç URL:', window.location.href);
        console.log('‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toLocaleTimeString());

        // –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        let data = {};
        let criticalErrors = 0;
        let optionalWarnings = 0;

        try {
            // ===== 1. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –û–ë–™–Ø–í–õ–ï–ù–ò–Ø =====
            this.debugLog('\nüîç === –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê ===');
            const status = this.checkListingStatus();
            this.debugLog(`üìä –°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${status}`);

            if (status !== 'active') {
                console.log('‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥. –°—Ç–∞—Ç—É—Å:', status);
                return null;
            }
            this.debugLog('‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            data.status = status;

            // ===== 2. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ë–ê–ó–û–í–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò =====
            this.debugLog('\nüìù === –®–ê–ì 2: –ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===');

            try {
                const external_id = this.extractExternalId();
                this.debugLog(`üÜî External ID: "${external_id}"`);
                if (!external_id) {
                    this.debugLog('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: External ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    criticalErrors++;
                }
                data.external_id = external_id;
            } catch (error) {
                this.debugLog('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è External ID:', error.message);
                criticalErrors++;
                data.external_id = null;
            }

            try {
                const title = this.extractTitle();
                //console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${title}"`);
                if (!title) {
                    //console.log('‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    optionalWarnings++;
                }
                data.title = title;
            } catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞:', error.message);
                optionalWarnings++;
                data.title = null;
            }

            try {
                const address = this.extractAddress();
                //console.log(`üìç –ê–¥—Ä–µ—Å: "${address}"`);
                if (!address) {
                    //console.log('‚ö†Ô∏è –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    optionalWarnings++;
                }
                data.address = address;
            } catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error.message);
                optionalWarnings++;
                data.address = null;
            }

            try {
                const price = this.extractPrice();
                //console.log(`üí∞ –¶–µ–Ω–∞: ${price ? this.formatPrice(price) : '–ù–ï –ù–ê–ô–î–ï–ù–ê'}`);
                if (!price) {
                    //console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    criticalErrors++;
                }
                data.price = price;
            } catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã:', error.message);
                criticalErrors++;
                data.price = null;
            }

            // ===== 3. –ö–û–û–†–î–ò–ù–ê–¢–´ –ò –ú–ï–î–ò–ê =====
            //console.log('\nüó∫Ô∏è === –®–ê–ì 3: –ö–û–û–†–î–ò–ù–ê–¢–´ –ò –ú–ï–î–ò–ê ===');

            try {
                const coordinates = this.extractCoordinates();
                //console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat=${coordinates?.lat}, lon=${coordinates?.lon}`);
                data.coordinates = coordinates;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error.message);
                optionalWarnings++;
                data.coordinates = null;
            }

            try {
                const photos = this.extractPhotos();
                //console.log(`üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${photos ? photos.length : 0}`);
                if (photos && photos.length > 0) {
                    //console.log('üì∏ –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ:', photos[0]?.substring(0, 50) + '...');
                }
                data.photos = photos;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error.message);
                optionalWarnings++;
                data.photos = [];
            }

            // ===== 4. –ü–ê–†–°–ò–ù–ì –ü–õ–û–©–ê–î–ï–ô =====
            //console.log('\nüìê === –®–ê–ì 4: –ü–ê–†–°–ò–ù–ì –ü–õ–û–©–ê–î–ï–ô ===');

            try {
                const area_total = this.extractTotalArea();
                //console.log(`üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: ${area_total} –º¬≤`);
                data.area_total = area_total;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏:', error.message);
                optionalWarnings++;
                data.area_total = null;
            }

            try {
                const area_kitchen = this.extractKitchenArea();
                //console.log(`üç≥ –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏: ${area_kitchen} –º¬≤`);
                data.area_kitchen = area_kitchen;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –∫—É—Ö–Ω–∏:', error.message);
                optionalWarnings++;
                data.area_kitchen = null;
            }

            try {
                const area_living = this.extractLivingArea();
                //console.log(`üè† –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å: ${area_living} –º¬≤`);
                data.area_living = area_living;
                //console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–ª–æ—â–∞–¥–∏: –æ–±—â–∞—è, –∫—É—Ö–Ω—è, –∂–∏–ª–∞—è');
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∂–∏–ª–æ–π –ø–ª–æ—â–∞–¥–∏:', error.message);
                optionalWarnings++;
                data.area_living = null;
            }

            // ===== 5. –≠–¢–ê–ñ–ò –ò –ö–û–ú–ù–ê–¢–´ =====
            //console.log('\nüè¢ === –®–ê–ì 5: –≠–¢–ê–ñ–ò –ò –ö–û–ú–ù–ê–¢–´ ===');

            try {
                const floor = this.extractFloor();
                //console.log(`üè¢ –≠—Ç–∞–∂: ${floor}`);
                data.floor = floor;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç—Ç–∞–∂–∞:', error.message);
                optionalWarnings++;
                data.floor = null;
            }

            try {
                const total_floors = this.extractFloorsTotal();
                //console.log(`üèóÔ∏è –≠—Ç–∞–∂–Ω–æ—Å—Ç—å: ${total_floors}`);
                data.total_floors = total_floors;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏:', error.message);
                optionalWarnings++;
                data.total_floors = null;
            }

            try {
                const rooms = this.extractRooms();
                //console.log(`üö™ –ö–æ–º–Ω–∞—Ç: ${rooms}`);
                data.rooms = rooms;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç:', error.message);
                optionalWarnings++;
                data.rooms = null;
            }

            try {
                const property_type = this.extractPropertyType();
                //console.log(`üè† –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: ${property_type}`);
                data.property_type = property_type;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error.message);
                optionalWarnings++;
                data.property_type = null;
            }

            // ===== 6. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò =====
            //console.log('\nüîß === –®–ê–ì 6: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò ===');

            const additionalParams = [
                { key: 'renovation', param: '–†–µ–º–æ–Ω—Ç', emoji: 'üîß' },
                { key: 'house_type', param: '–¢–∏–ø –¥–æ–º–∞', emoji: 'üèóÔ∏è' },
                { key: 'construction_year', param: '–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏', emoji: 'üìÖ' },
                { key: 'bathroom', param: '–°–∞–Ω—É–∑–µ–ª', emoji: 'üöø' },
                { key: 'balcony', param: '–ë–∞–ª–∫–æ–Ω', emoji: 'ü™ü' },
                { key: 'ceiling_height', param: '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤', emoji: 'üìè' }
            ];

            additionalParams.forEach(({ key, param, emoji }) => {
                try {
                    const value = this.findParamValue(param);
                    //console.log(`${emoji} ${param}: ${value || '‚ùå –ù–ï –£–ö–ê–ó–ê–ù'}`);
                    data[key] = value;
                } catch (error) {
                    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ${param}:`, error.message);
                    optionalWarnings++;
                    data[key] = null;
                }
            });

            // ===== 7. –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–î–ê–í–¶–ï =====
            //console.log('\nüë§ === –®–ê–ì 7: –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–î–ê–í–¶–ï ===');

            try {
                const seller_name = this.extractSellerName();
                //console.log(`üë§ –ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞: "${seller_name}"`);
                data.seller_name = seller_name;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞:', error.message);
                optionalWarnings++;
                data.seller_name = null;
            }

            try {
                const seller_type = this.extractSellerType();
                //console.log(`üè¢ –¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞: "${seller_type}"`);
                data.seller_type = seller_type;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞:', error.message);
                optionalWarnings++;
                data.seller_type = null;
            }

            // ===== 8. –î–ê–¢–´ –ò –ú–ï–¢–†–ò–ö–ò =====
            //console.log('\nüìä === –®–ê–ì 8: –î–ê–¢–´ –ò –ú–ï–¢–†–ò–ö–ò ===');

            try {
                const listing_date = this.extractListingDate();
                //console.log(`üìÖ –î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: ${listing_date || '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê'}`);
                data.listing_date = listing_date;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:', error.message);
                optionalWarnings++;
                data.listing_date = null;
            }

            try {
                const last_update_date = this.extractUpdateDate();
                //console.log(`üîÑ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${last_update_date || '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê'}`);
                data.last_update_date = last_update_date;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
                optionalWarnings++;
                data.last_update_date = null;
            }

            try {
                const views_count = this.extractViewsCount();
                //console.log(`üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${views_count}`);
                data.views_count = views_count;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:', error.message);
                optionalWarnings++;
                data.views_count = null;
            }

            try {
                const description = this.extractDescription();
                //console.log(`üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: ${description ? description.substring(0, 100) + '...' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û'}`);
                data.description = description;
            } catch (error) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:', error.message);
                optionalWarnings++;
                data.description = null;
            }

            // ===== 8.5. –ü–ê–†–°–ò–ù–ì –ò–°–¢–û–†–ò–ò –¶–ï–ù =====
            console.log('\nüí∞ === –®–ê–ì 8.5: –ü–ê–†–°–ò–ù–ì –ò–°–¢–û–†–ò–ò –¶–ï–ù ===');

            try {
                const priceHistory = await this.parsePriceHistoryEnhanced();
                if (priceHistory && priceHistory.length > 0) {
                    console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–∞–π–¥–µ–Ω–∞:', priceHistory);
                    data.price_history = priceHistory;
                } else {
                    console.log('‚ùå –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    data.price_history = [];
                }
            } catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error.message);
                optionalWarnings++;
                data.price_history = [];
            }

            // ===== 9. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø =====
            //console.log('\nüõ†Ô∏è === –®–ê–ì 9: –£–°–¢–ê–ù–û–í–ö–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–û–õ–ï–ô ===');

            // –û—á–∏—â–∞–µ–º URL –æ—Ç context –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            data.url = this.cleanUrl(window.location.href);
            //console.log(`üîó –û—á–∏—â–µ–Ω–Ω—ã–π URL: ${data.url}`);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            data.source = 'avito';

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            data.parsed_at = new Date();

            if (data.price_history && data.price_history.length > 0) {
                // –ò—â–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
                let earliestDate = null;

                for (const historyItem of data.price_history) {
                    let itemDate = null;

                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
                    if (historyItem.fullDate) {
                        // –§–æ—Ä–º–∞—Ç DD.MM.YYYY
                        itemDate = this.parseDate(historyItem.fullDate);
                    } else if (historyItem.timestamp) {
                        // Unix timestamp
                        itemDate = new Date(historyItem.timestamp);
                    } else if (historyItem.date) {
                        // –†—É—Å—Å–∫–∞—è –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "19 –∞–ø—Ä–µ–ª—è")
                        itemDate = this.parseRussianDate(historyItem.date);
                    }

                    if (itemDate && (!earliestDate || itemDate < earliestDate)) {
                        earliestDate = itemDate;
                    }
                }

                if (earliestDate) {
                    data.listing_date = earliestDate;
                    // console.log(`üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: ${earliestDate.toLocaleDateString()}`);
                } else {
                    data.listing_date = new Date();
                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É');
                }
            } else {
                // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                data.listing_date = new Date();
                console.log('‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É');
            }

            console.log('‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
            //console.log('‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');

            // ===== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ =====
            //console.log('\nüìä === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–ê–†–°–ò–ù–ì–ê ===');
            //console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleTimeString()}`);
            //console.log(`‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: ${criticalErrors}`);
            //console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${optionalWarnings}`);
            //console.log(`üìä –°—Ç–∞—Ç—É—Å: ${criticalErrors > 0 ? '‚ùå –û–®–ò–ë–ö–ê' : optionalWarnings > 0 ? '‚ö†Ô∏è –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò' : '‚úÖ –£–°–ü–ï–®–ù–û'}`);

            if (criticalErrors > 0) {
                console.log('üö® –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏! –û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
            }

            //console.log('\nüìã === –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ===');
            //console.log('üìä –û–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
            //console.log('üèÅ === –ö–û–ù–ï–¶ –ü–ê–†–°–ò–ù–ì–ê –û–ë–™–Ø–í–õ–ï–ù–ò–Ø ===\n');

            return data;

        } catch (error) {
            console.log('\nüí• === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ===');
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            console.error('üìç Stack trace:', error.stack);
            console.log('‚è∞ –í—Ä–µ–º—è –æ—à–∏–±–∫–∏:', new Date().toLocaleTimeString());
            console.log('üîö === –ö–û–ù–ï–¶ –° –û–®–ò–ë–ö–û–ô ===\n');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
            if (typeof reportParsingError === 'function') {
                reportParsingError({
                    parameter: '–æ–±—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                    error: `${error.name}: ${error.message}`,
                    url: window.location.href,
                    source: 'avito',
                    method: 'parseCurrentListing',
                    context: {
                        stack: error.stack,
                        userAgent: navigator.userAgent
                    }
                });
            }
            
            return null;
        }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
     * @param {string} dateStr - —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã
     * @returns {Date|null} –æ–±—ä–µ–∫—Ç Date –∏–ª–∏ null
     */
    parseDate(dateStr) {
        if (!dateStr || typeof dateStr !== 'string') return null;

        const parts = dateStr.split('.');
        if (parts.length !== 3) return null;

        const day = parseInt(parts[0]);
        const month = parseInt(parts[1]) - 1; // –º–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
        const year = parseInt(parts[2]);

        if (isNaN(day) || isNaN(month) || isNaN(year)) return null;

        return new Date(year, month, day);
    }


    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
     */
    formatPrice(price) {
        if (!price) return 'N/A';
        return new Intl.NumberFormat('ru-RU').format(price) + ' ‚ÇΩ';
    }

    /**
     * –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π
     */
    quickDiagnostic() {
        //console.log('üîç === –ë–´–°–¢–†–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');

        const results = {
            external_id: this.extractExternalId(),
            title: this.extractTitle(),
            price: this.extractPrice(),
            area_total: this.extractTotalArea(),
            area_kitchen: this.extractKitchenArea(),
            area_living: this.extractLivingArea(),
            floor: this.extractFloor(),
            rooms: this.extractRooms()
        };

        console.table(results);
        return results;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫ –ø–∞—Ä—Å–∏–Ω–≥—É
     */
    isPageReady() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const hasTitle = !!document.querySelector('h1[itemprop="name"]');
        const hasPrice = !!document.querySelector('[data-marker="item-view/item-price"]');
        const hasParams = !!document.querySelector('#bx_item-params') || !!document.querySelector('.params-paramsList-_awNW');

        //console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
        //console.log('  üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–π–¥–µ–Ω:', hasTitle);
        //console.log('  üí∞ –¶–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞:', hasPrice);
        //console.log('  üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–π–¥–µ–Ω—ã:', hasParams);

        return hasTitle && hasPrice;
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    async waitForElement(selector, timeout = 5000) {
        return new Promise((resolve, reject) => {
            const element = document.querySelector(selector);
            if (element) {
                resolve(element);
                return;
            }

            const observer = new MutationObserver((mutations, obs) => {
                const element = document.querySelector(selector);
                if (element) {
                    obs.disconnect();
                    resolve(element);
                }
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true
            });

            setTimeout(() => {
                observer.disconnect();
                reject(new Error(`–≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ ${timeout}ms`));
            }, timeout);
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –≤ –∫–ª–∞—Å—Å–µ AvitoParser
    async parsePriceHistoryEnhanced() {
        console.log('üí∞ === –ü–ê–†–°–ò–ù–ì –ò–°–¢–û–†–ò–ò –¶–ï–ù (ENHANCED) ===');

        try {
            // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            const button = this.findPriceHistoryButtonPrecise();
            if (!button) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
                if (typeof reportSelectorError === 'function') {
                    reportSelectorError(
                        '–∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã (–∫–Ω–æ–ø–∫–∞)',
                        [
                            'p.T7ujv.Tdsqf.dsi88.cujIu.aStJv',
                            'div.K5h5l p[tabindex="0"]',
                            'p[aria-haspopup="true"][aria-expanded="false"]'
                        ],
                        window.location.href,
                        'findPriceHistoryButtonPrecise'
                    );
                }
                
                return [];
            }

            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º tooltip...');

            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º tooltip —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
            return new Promise((resolve) => {
                let resolved = false;

                // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
                const observer = new MutationObserver((mutations) => {
                    if (resolved) return;

                    mutations.forEach((mutation) => {
                        mutation.addedNodes.forEach((node) => {
                            if (node.nodeType === 1) {
                                const text = node.textContent || '';
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –∏ –¥–∞—Ç–∞—Ö
                                if (text.includes('‚ÇΩ') &&
                                    (text.includes('—è–Ω–≤') || text.includes('—Ñ–µ–≤') || text.includes('–º–∞—Ä') ||
                                        text.includes('–∞–ø—Ä') || text.includes('–º–∞–π') || text.includes('–∏—é–Ω') ||
                                        text.includes('–∏—é–ª') || text.includes('–∞–≤–≥') || text.includes('—Å–µ–Ω') ||
                                        text.includes('–æ–∫—Ç') || text.includes('–Ω–æ—è') || text.includes('–¥–µ–∫'))) {

                                    console.log('‚úÖ Tooltip —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω!');
                                    resolved = true;
                                    observer.disconnect();

                                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
                                    const history = this.extractPriceHistoryFromTooltip(node);
                                    resolve(history);
                                }
                            }
                        });
                    });
                });

                observer.observe(document.body, {
                    childList: true,
                    subtree: true
                });

                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º tooltip
                this.activatePriceHistoryTooltipImproved(button);

                // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ tooltip –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è
                setTimeout(() => {
                    if (!resolved) {
                        resolved = true;
                        observer.disconnect();
                        console.log('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è tooltip');
                        resolve([]);
                    }
                }, 5000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 5 —Å–µ–∫—É–Ω–¥
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
            return [];
        }
    }

    /**
     * –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    findPriceHistoryButtonPrecise() {
        console.log('üéØ === –¢–û–ß–ù–´–ô –ü–û–ò–°–ö –ö–ù–û–ü–ö–ò –ò–°–¢–û–†–ò–ò –¶–ï–ù ===');

        // –ò—â–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º –∏–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
        const selectors = [
            'p.T7ujv.Tdsqf.dsi88.cujIu.aStJv',
            'div.K5h5l p[tabindex="0"]',
            'p[aria-haspopup="true"][aria-expanded="false"]',
            '.price-history-entry-point-iKhax',
            '.K5h5l.price-history-entry-point-iKhax',
            '[class*="price-history-entry-point"]'
        ];

        let button = null;

        for (const selector of selectors) {
            try {
                const elements = document.querySelectorAll(selector);
                console.log(`–°–µ–ª–µ–∫—Ç–æ—Ä "${selector}": –Ω–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

                elements.forEach(el => {
                    const text = el.textContent || '';
                    if (text.includes('–∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã') || text.includes('–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã')) {
                        button = el;
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', el);
                    }
                });
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
        if (!button) {
            const allP = document.querySelectorAll('p');
            allP.forEach(p => {
                if (p.textContent && (p.textContent.includes('–∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã') || p.textContent.includes('–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã'))) {
                    button = p;
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Ç–µ–∫—Å—Ç—É:', p);
                }
            });
        }

        return button;
    }

    /**
     * –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è tooltip –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    activatePriceHistoryTooltipImproved(button) {
        console.log('üöÄ === –ê–ö–¢–ò–í–ê–¶–ò–Ø TOOLTIP –ò–°–¢–û–†–ò–ò –¶–ï–ù ===');

        // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å
        if (button.focus) {
            button.focus();
            console.log('üìç –§–æ–∫—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        const events = [
            new MouseEvent('mouseenter', { bubbles: true, cancelable: true, view: window }),
            new MouseEvent('mouseover', { bubbles: true, cancelable: true, view: window }),
            new PointerEvent('pointerenter', { bubbles: true, cancelable: true }),
            new PointerEvent('pointerover', { bubbles: true, cancelable: true }),
            new MouseEvent('mousemove', {
                bubbles: true,
                cancelable: true,
                view: window,
                clientX: button.getBoundingClientRect().left + 10,
                clientY: button.getBoundingClientRect().top + 10
            })
        ];

        events.forEach((event, index) => {
            setTimeout(() => {
                console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ ${event.type}`);
                button.dispatchEvent(event);

                // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
                if (button.parentElement) {
                    button.parentElement.dispatchEvent(event);
                }
            }, index * 100);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ aria-expanded —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            const expanded = button.getAttribute('aria-expanded');
            console.log('aria-expanded –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', expanded);

            if (expanded === 'true') {
                console.log('‚úÖ Tooltip –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
            } else {
                console.log('‚ö†Ô∏è aria-expanded –≤—Å–µ –µ—â–µ false, tooltip –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç—å—Å—è');
            }
        }, 1000);
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –∏–∑ tooltip —Å —Ç–æ—á–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
     */
    extractPriceHistoryFromTooltip(element) {
        console.log('üìä === –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –¶–ï–ù –ò–ó TOOLTIP ===');

        const priceHistory = [];
        const now = new Date();
        const currentYear = now.getFullYear();
        const currentMonth = now.getMonth() + 1; // –º–µ—Å—è—Ü—ã –≤ JS 0-11

        // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const monthMap = {
            '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
            '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
            '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
        };

        try {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–ª–æ–∫–∏ —Å –∑–∞–ø–∏—Å—è–º–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
            const historyEntries = element.querySelectorAll('div[style*="--module-spacer-column-gap: var(--theme-gap-0)"]');

            let prevYear = currentYear;
            let prevMonth = currentMonth;

            historyEntries.forEach(entry => {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
                const dateElement = entry.querySelector('p:first-child');
                const dateText = dateElement ? dateElement.textContent.trim() : null;

                // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                let day, month, monthNum, year;
                if (dateText) {
                    const dateParts = dateText.split(' ');
                    day = parseInt(dateParts[0]);
                    month = dateParts[1];
                    monthNum = monthMap[month.toLowerCase()] || 0;

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–¥
                    if (monthNum > prevMonth) {
                        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –≤ –∑–∞–ø–∏—Å–∏ –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
                        prevYear--;
                    }
                    prevMonth = monthNum;

                    year = prevYear;
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                const priceElement = entry.querySelector('p.obLSF') ||
                    entry.querySelector('p:last-child');
                const price = priceElement ? priceElement.textContent.trim() : null;

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
                const changeElement = entry.parentElement.querySelector('p[class*="_3rH6"]');
                let change = null;
                let changeType = null;

                if (changeElement) {
                    change = changeElement.textContent.trim();
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ/—É–º–µ–Ω—å—à–µ–Ω–∏–µ)
                    changeType = changeElement.classList.contains('FcB0L') ? 'increase' :
                        changeElement.classList.contains('LTb57') ? 'decrease' :
                            null;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
                const isPublication = entry.parentElement.querySelector('p[style*="color: rgb(117, 117, 117)"]') !== null;

                if (dateText && price) {
                    const formattedDate = `${day.toString().padStart(2, '0')}.${monthNum.toString().padStart(2, '0')}.${year}`;

                    priceHistory.push({
                        date: dateText,
                        fullDate: formattedDate,
                        year,
                        price,
                        change: isPublication ? null : change,
                        changeType: isPublication ? null : changeType,
                        isPublication,
                        timestamp: new Date(year, monthNum - 1, day).getTime()
                    });
                }
            });

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
            priceHistory.sort((a, b) => b.timestamp - a.timestamp);

            console.log('üìà –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', priceHistory.length);
            priceHistory.forEach(entry => {
                console.log(`  üìÖ ${entry.date}: ${entry.price}${entry.change ? ` (${entry.change})` : ''}`);
            });

            return priceHistory;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
            return [];
        }
    }


    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏
    findPriceHistoryButton() {
        const selectors = [
            '.price-history-entry-point-iKhax',
            '[class*="price-history-entry-point"]',
            'p[aria-haspopup="true"][tabindex="0"]:contains("–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã")'
        ];

        for (const selector of selectors) {
            const elements = document.querySelectorAll(selector);
            for (const el of elements) {
                if (el.textContent && el.textContent.includes('–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã')) {
                    return el;
                }
            }
        }

        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        const allP = document.querySelectorAll('p');
        for (const p of allP) {
            if (p.textContent && p.textContent.trim() === '–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã') {
                return p;
            }
        }

        return null;
    }

    // –ú–µ—Ç–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ tooltip
    activateTooltip(button) {
        // –§–æ–∫—É—Å
        if (button.focus) button.focus();

        // –°–æ–±—ã—Ç–∏—è
        const events = [
            new MouseEvent('mouseenter', { bubbles: true, cancelable: true }),
            new MouseEvent('mouseover', { bubbles: true, cancelable: true }),
            new PointerEvent('pointerenter', { bubbles: true })
        ];

        events.forEach((event, index) => {
            setTimeout(() => {
                button.dispatchEvent(event);
                if (button.parentElement) {
                    button.parentElement.dispatchEvent(event);
                }
            }, index * 100);
        });
    }

    /**
     * –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     * –î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ AvitoParser
     */
    async debugPriceHistory() {
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω...');

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞-—Ç—Ä–∏–≥–≥–µ—Ä–∞
            const priceHistoryElement = document.querySelector('.price-history-entry-point-iKhax');
            console.log('üéØ –≠–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', priceHistoryElement);

            if (!priceHistoryElement) {
                console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç-—Ç—Ä–∏–≥–≥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');

                // –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                const alternatives = [
                    '[class*="price-history"]',
                    '[class*="priceHistory"]',
                    '[data-marker*="price"]',
                    '.item-price-history',
                    '.price-changes'
                ];

                for (const selector of alternatives) {
                    const alt = document.querySelector(selector);
                    if (alt) {
                        console.log(`üîç –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: ${selector}`, alt);
                    }
                }
                return [];
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º React Fiber
            const fiberKeys = Object.keys(priceHistoryElement).filter(key =>
                key.startsWith('__reactFiber') || key.startsWith('__reactInternalInstance')
            );

            console.log('üîó React Fiber –∫–ª—é—á–∏:', fiberKeys);

            if (fiberKeys.length === 0) {
                console.log('‚ùå React Fiber –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return [];
            }

            // –ò—Å—Å–ª–µ–¥—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Fiber
            for (const fiberKey of fiberKeys) {
                const fiber = priceHistoryElement[fiberKey];
                console.log(`üß¨ –ò—Å—Å–ª–µ–¥—É–µ–º ${fiberKey}:`, fiber);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
                const paths = [
                    'child?.sibling?.memoizedState?.memoizedState',
                    'memoizedProps?.children?.props?.priceHistory',
                    'stateNode?.state?.priceHistory',
                    'return?.memoizedState?.priceHistory'
                ];

                for (const path of paths) {
                    try {
                        const pathParts = path.split('.');
                        let current = fiber;

                        for (const part of pathParts) {
                            if (part.includes('?')) {
                                const cleanPart = part.replace('?', '');
                                current = current?.[cleanPart];
                            } else {
                                current = current[part];
                            }
                        }

                        if (current && current.priceHistory) {
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—É—Ç–∏ ${path}:`, current.priceHistory);
                            return current.priceHistory;
                        }
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –ø—É—Ç–µ–π
                    }
                }
            }

            console.log('‚ùå –î–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø—É—Ç–∏');
            return [];

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
            return [];
        }
    }


    /**
 * –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –∏–∑ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
 * –ó–∞–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ extractPriceHistory() –≤ avito-parser.js
 */
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò
     * –ó–∞–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ extractPriceHistory() –≤ avito-parser.js
     */
    async extractPriceHistory() {  // ‚Üê –î–û–ë–ê–í–ò–¢–¨ async!
        console.log('üí∞ –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω...');

        try {
            // –ú–ï–¢–û–î 1: –ü–û–ò–°–ö –í –ü–û–†–¢–ê–õ–¨–ù–û–ú –ö–û–ù–¢–ï–ô–ù–ï–†–ï (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω)
            console.log('üîç –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –≤ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...');
            const portalHistory = this.extractFromPortalContainer();
            if (portalHistory && portalHistory.length > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${portalHistory.length} –∑–∞–ø–∏—Å–µ–π –≤ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ`);
                return portalHistory;
            }

            // –ú–ï–¢–û–î 2: –°–ò–ú–£–õ–Ø–¶–ò–Ø –ù–ê–í–ï–î–ï–ù–ò–Ø –ù–ê –ö–ù–û–ü–ö–£ + –ü–ê–†–°–ò–ù–ì –ü–û–†–¢–ê–õ–ê
            console.log('üîç –ú–µ—Ç–æ–¥ 2: –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥...');
            const hoverHistory = await this.triggerHoverAndParse();
            if (hoverHistory && hoverHistory.length > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${hoverHistory.length} –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ hover`);
                return hoverHistory;
            }

            // –ú–ï–¢–û–î 3: –†–ï–ó–ï–†–í–ù–´–ô –ü–û–ò–°–ö –í DOM
            console.log('üîç –ú–µ—Ç–æ–¥ 3: –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ DOM...');
            const domHistory = this.extractFromDOMSearch();
            if (domHistory && domHistory.length > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${domHistory.length} –∑–∞–ø–∏—Å–µ–π –≤ DOM`);
                return domHistory;
            }

            console.log('‚ùå –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º');
            return [];

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
            return [];
        }
    }

    /**
     * –ú–ï–¢–û–î 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     */
    extractFromPortalContainer() {
        console.log('üîç –ü–æ–∏—Å–∫ –≤ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...');

        try {
            // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—Ä—Ç–∞–ª–∞
            const portalContainer = document.querySelector('[data-marker="portals-container"]');
            if (!portalContainer) {
                console.log('‚ùå –ü–æ—Ä—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return null;
            }

            console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Ä—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');

            // –ò—â–µ–º tooltip —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω
            const tooltip = portalContainer.querySelector('[role="tooltip"]');
            if (!tooltip) {
                console.log('‚ùå Tooltip –≤ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return null;
            }

            console.log('‚úÖ –ù–∞–π–¥–µ–Ω tooltip —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω');

            // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ tooltip
            return this.parseHistoryFromTooltip(tooltip);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:', error);
            return null;
        }
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –≤ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
     */
    async searchInPortalContainer() {
        console.log('üîç –ü–æ–∏—Å–∫ –≤ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...');

        try {
            const portalContainer = document.querySelector('[data-marker="portals-container"]');
            if (!portalContainer) {
                console.log('‚ùå –ü–æ—Ä—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return null;
            }

            console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Ä—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');

            // –ò—â–µ–º tooltip —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω
            const tooltip = portalContainer.querySelector('[role="tooltip"]');
            if (!tooltip) {
                console.log('‚ùå Tooltip –≤ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return null;
            }

            console.log('‚úÖ –ù–∞–π–¥–µ–Ω tooltip —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω');

            // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ tooltip
            return this.parseHistoryFromTooltip(tooltip);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:', error);
            return null;
        }
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –∏–∑ tooltip
     */
    parseHistoryFromTooltip(tooltip) {
        console.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ tooltip...');

        try {
            const historyEntries = [];

            // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –¥–∞—Ç–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç –º–µ—Å—è—Ü—ã)
            const dateElements = Array.from(tooltip.querySelectorAll('p')).filter(p => {
                const text = p.textContent.trim();
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –º–µ—Å—è—Ü
                return /\b(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\b/.test(text);
            });

            console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${dateElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –¥–∞—Ç–∞–º–∏`);

            for (let i = 0; i < dateElements.length; i++) {
                const dateElement = dateElements[i];
                const dateText = dateElement.textContent.trim();

                console.log(`üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É ${i + 1}: "${dateText}"`);

                // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ü–µ–Ω–æ–π
                const priceElement = this.findNearestPriceElement(dateElement);

                if (priceElement) {
                    const priceText = priceElement.textContent.trim();
                    console.log(`üí∞ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: "${priceText}"`);

                    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ —Ü–µ–Ω—É
                    const date = this.parseRussianDate(dateText);
                    const price = this.extractPriceFromText(priceText);

                    if (date && price > 1000) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        const changeInfo = this.findChangeInfo(dateElement);

                        const entry = {
                            date: date,
                            price: price,
                            type: changeInfo.type,
                            change: changeInfo.change,
                            original_date: dateText,
                            original_price: priceText
                        };

                        historyEntries.push(entry);
                        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏:`, entry);
                    } else {
                        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å: –¥–∞—Ç–∞=${date}, —Ü–µ–Ω–∞=${price}`);
                    }
                } else {
                    console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è –¥–∞—Ç—ã: "${dateText}"`);
                }
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            historyEntries.sort((a, b) => b.date.getTime() - a.date.getTime());

            console.log(`üìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${historyEntries.length} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏`);
            return historyEntries;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ tooltip:', error);
            return [];
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ü–µ–Ω–æ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –¥–∞—Ç–æ–π
     */
    findNearestPriceElement(dateElement) {
        // –ò—â–µ–º –≤ —Ç–æ–º –∂–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        const parent = dateElement.closest('.d1zrJ.ZiGJm.Ib0ZQ.vKB2A[style*="--module-spacer-column-gap: var(--theme-gap-16)"]');

        if (parent) {
            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å —Ü–µ–Ω–æ–π –≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            const priceElements = parent.querySelectorAll('p');
            for (const p of priceElements) {
                const text = p.textContent.trim();
                if (/\d[\d\s]*‚ÇΩ/.test(text)) {
                    return p;
                }
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, –∏—â–µ–º –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        let sibling = dateElement.nextElementSibling;
        while (sibling) {
            if (sibling.tagName === 'P' && /\d[\d\s]*‚ÇΩ/.test(sibling.textContent)) {
                return sibling;
            }
            // –ò—â–µ–º –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            const priceInSibling = sibling.querySelector('p');
            if (priceInSibling && /\d[\d\s]*‚ÇΩ/.test(priceInSibling.textContent)) {
                return priceInSibling;
            }
            sibling = sibling.nextElementSibling;
        }

        // –ò—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        let currentParent = dateElement.parentElement;
        while (currentParent && currentParent !== document.body) {
            const priceElements = currentParent.querySelectorAll('p');
            for (const p of priceElements) {
                if (p !== dateElement && /\d[\d\s]*‚ÇΩ/.test(p.textContent)) {
                    return p;
                }
            }
            currentParent = currentParent.parentElement;
        }

        return null;
    }

    /**
     * –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã (–ø–æ–≤—ã—à–µ–Ω–∏–µ/–ø–æ–Ω–∏–∂–µ–Ω–∏–µ/–ø—É–±–ª–∏–∫–∞—Ü–∏—è)
     */
    findChangeInfo(dateElement) {
        const result = {
            type: 'unknown',
            change: null
        };

        // –ò—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        const parent = dateElement.closest('.d1zrJ.ZiGJm.Ib0ZQ.WgkzZ.vKB2A[style*="--module-spacer-row-gap: var(--theme-gap-0)"]');

        if (parent) {
            const texts = Array.from(parent.querySelectorAll('p')).map(p => p.textContent.trim());

            for (const text of texts) {
                if (text.includes('–ü—É–±–ª–∏–∫–∞—Ü–∏—è')) {
                    result.type = 'publication';
                    break;
                } else if (/\d+\s*‚ÇΩ/.test(text) && text.includes('‚ÇΩ') && !text.includes(' ')) {
                    // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    const changeMatch = text.match(/([0-9\s]+)\s*‚ÇΩ/);
                    if (changeMatch) {
                        const changeAmount = parseInt(changeMatch[1].replace(/\s/g, ''));
                        if (changeAmount > 0) {
                            result.type = 'price_change';
                            result.change = changeAmount;
                        }
                    }
                }
            }
        }

        return result;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
     */
    extractPriceFromText(text) {
        if (!text) return 0;

        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤, –∑–∞—Ç–µ–º —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        const cleanText = text.replace(/[^\d\s]/g, '').replace(/\s/g, '');
        const price = parseInt(cleanText);

        return isNaN(price) ? 0 : price;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    async parsePriceHistory() {
        console.log('üí∞ === –ü–ê–†–°–ò–ù–ì –ò–°–¢–û–†–ò–ò –¶–ï–ù (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô) ===');

        try {
            // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
            const button = this.findPriceHistoryButton();
            if (!button) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return [];
            }

            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', button);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ tooltip
            let tooltip = document.querySelector('[role="tooltip"]');
            if (tooltip && tooltip.textContent.includes('‚ÇΩ')) {
                console.log('‚úÖ Tooltip —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ');
                return this.parseTooltipData(tooltip);
            }

            // –ï—Å–ª–∏ tooltip –∑–∞–∫—Ä—ã—Ç, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            console.log('üñ±Ô∏è –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º tooltip...');

            return new Promise((resolve) => {
                let resolved = false;

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º observer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è tooltip
                const observer = new MutationObserver((mutations) => {
                    if (resolved) return;

                    mutations.forEach((mutation) => {
                        mutation.addedNodes.forEach((node) => {
                            if (node.nodeType === 1 && node.getAttribute &&
                                node.getAttribute('role') === 'tooltip') {
                                const text = node.textContent || '';
                                if (text.includes('‚ÇΩ') && (text.includes('—è–Ω–≤') || text.includes('—Ñ–µ–≤') ||
                                    text.includes('–º–∞—Ä') || text.includes('–∞–ø—Ä') || text.includes('–º–∞–π') ||
                                    text.includes('–∏—é–Ω') || text.includes('–∏—é–ª') || text.includes('–∞–≤–≥') ||
                                    text.includes('—Å–µ–Ω') || text.includes('–æ–∫—Ç') || text.includes('–Ω–æ—è') ||
                                    text.includes('–¥–µ–∫'))) {
                                    console.log('‚úÖ Tooltip —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω!');
                                    resolved = true;
                                    observer.disconnect();

                                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                                    setTimeout(() => {
                                        const history = this.parseTooltipData(node);
                                        resolve(history);
                                    }, 100);
                                }
                            }
                        });
                    });
                });

                observer.observe(document.body, {
                    childList: true,
                    subtree: true
                });

                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º tooltip
                this.activatePriceHistoryTooltip(button);

                // –¢–∞–π–º–∞—É—Ç
                setTimeout(() => {
                    if (!resolved) {
                        resolved = true;
                        observer.disconnect();
                        console.log('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è tooltip');
                        resolve([]);
                    }
                }, 3000);
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
            return [];
        }
    }


    findPriceHistoryButton() {
        console.log('üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω...');

        // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏
        const selectors = [
            '.price-history-entry-point-iKhax',
            '.K5h5l.price-history-entry-point-iKhax',
            '[class*="price-history-entry-point"]',
            'p[aria-haspopup="true"][tabindex="0"]',
            'div.K5h5l p[tabindex="0"]'
        ];

        for (const selector of selectors) {
            const elements = document.querySelectorAll(selector);
            for (const el of elements) {
                const text = el.textContent || '';
                if (text.includes('–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã') || text.includes('–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω')) {
                    console.log(`‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`);
                    return el;
                }
            }
        }

        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        const allP = document.querySelectorAll('p');
        for (const p of allP) {
            if (p.textContent && (p.textContent.trim() === '–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã' ||
                p.textContent.trim() === '–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω')) {
                console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É');
                return p;
            }
        }

        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º');
        return null;
    }

    activatePriceHistoryTooltip(button) {
        console.log('üñ±Ô∏è –ê–∫—Ç–∏–≤–∞—Ü–∏—è tooltip...');

        // –°–Ω–∞—á–∞–ª–∞ —Ñ–æ–∫—É—Å
        if (button.focus) {
            button.focus();
            console.log('üìç –§–æ–∫—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π –∫–∞–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ
        const events = [
            new MouseEvent('mouseenter', { bubbles: true, cancelable: true, view: window }),
            new MouseEvent('mouseover', { bubbles: true, cancelable: true, view: window }),
            new PointerEvent('pointerenter', { bubbles: true, cancelable: true }),
            new PointerEvent('pointerover', { bubbles: true, cancelable: true })
        ];

        events.forEach((event, index) => {
            setTimeout(() => {
                console.log(`  –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è: ${event.type}`);
                button.dispatchEvent(event);

                // –¢–∞–∫–∂–µ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
                if (button.parentElement) {
                    button.parentElement.dispatchEvent(event);
                }
            }, index * 50);
        });
    }


    parseTooltipData(tooltipElement) {
        console.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ tooltip...');

        const priceHistory = [];
        const currentYear = new Date().getFullYear();

        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã
        const datePattern = /(\d{1,2})\s*(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)/gi;
        const pricePattern = /(\d{1,3}(?:\s?\d{3})*)\s*‚ÇΩ/g;

        // –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Å—è—Ü–µ–≤
        const monthMap = {
            '—è–Ω–≤–∞—Ä—è': 0, '—Ñ–µ–≤—Ä–∞–ª—è': 1, '–º–∞—Ä—Ç–∞': 2, '–∞–ø—Ä–µ–ª—è': 3,
            '–º–∞—è': 4, '–∏—é–Ω—è': 5, '–∏—é–ª—è': 6, '–∞–≤–≥—É—Å—Ç–∞': 7,
            '—Å–µ–Ω—Ç—è–±—Ä—è': 8, '–æ–∫—Ç—è–±—Ä—è': 9, '–Ω–æ—è–±—Ä—è': 10, '–¥–µ–∫–∞–±—Ä—è': 11
        };

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        const fullText = tooltipElement.textContent;
        console.log('–¢–µ–∫—Å—Ç tooltip:', fullText);

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏
        const lines = fullText.split(/(?=\d{1,2}\s*(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è))/gi);

        lines.forEach(line => {
            const dateMatch = line.match(datePattern);
            const priceMatches = [...line.matchAll(pricePattern)];

            if (dateMatch && priceMatches.length > 0) {
                const day = parseInt(dateMatch[1]);
                const monthName = dateMatch[2].toLowerCase();
                const month = monthMap[monthName];

                // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É
                let date = new Date(currentYear, month, day);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –±—É–¥—É—â–µ–º –ª–∏ –¥–∞—Ç–∞
                if (date > new Date()) {
                    date.setFullYear(currentYear - 1);
                }

                // –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞ - –ø–µ—Ä–≤–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è
                const mainPrice = parseInt(priceMatches[0][1].replace(/\s/g, ''));

                // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–∞—è —Ü–µ–Ω–∞)
                let priceChange = null;
                if (priceMatches.length > 1) {
                    priceChange = parseInt(priceMatches[1][1].replace(/\s/g, ''));
                }

                const entry = {
                    date: date.toISOString().split('T')[0],
                    date_formatted: `${day} ${dateMatch[2]}`,
                    price: mainPrice,
                    price_formatted: priceMatches[0][0]
                };

                if (priceChange) {
                    entry.price_change = priceChange;
                    entry.price_change_formatted = `${priceChange.toLocaleString('ru-RU')} ‚ÇΩ`;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ª–∏ —ç—Ç–æ
                if (line.toLowerCase().includes('–ø—É–±–ª–∏–∫–∞—Ü–∏—è')) {
                    entry.is_publication = true;
                }

                priceHistory.push(entry);
                console.log('  –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å:', entry);
            }
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
        priceHistory.sort((a, b) => new Date(b.date) - new Date(a.date));

        console.log(`‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${priceHistory.length}`);
        return priceHistory;
    }

    /**
     * –ú–ï–¢–û–î 3: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è tooltip
     */
    async extractFromTooltipAdvanced() {
        try {
            const button = document.querySelector('.price-history-entry-point-iKhax');
            if (!button) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return [];
            }

            console.log('üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º tooltip...');

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ä—Ç–∞–ª–∞ –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
            const portal = document.querySelector('[data-marker="portals-container"]');
            if (!portal) {
                console.log('‚ùå –ü–æ—Ä—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return [];
            }

            let tooltipFound = false;
            const history = [];

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    mutation.addedNodes.forEach((node) => {
                        if (node.nodeType === Node.ELEMENT_NODE &&
                            node.getAttribute && node.getAttribute('role') === 'tooltip') {
                            console.log('üéØ Tooltip –ø–æ—è–≤–∏–ª—Å—è:', node);

                            const tooltipText = node.textContent;
                            const parsedHistory = this.parseTooltipHistory(tooltipText);

                            if (parsedHistory.length > 0) {
                                history.push(...parsedHistory);
                                tooltipFound = true;
                            }
                        }
                    });
                });
            });

            observer.observe(portal, { childList: true, subtree: true });

            // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            const activationSequence = [
                () => button.focus(),
                () => {
                    const rect = button.getBoundingClientRect();
                    button.dispatchEvent(new MouseEvent('mouseenter', {
                        view: window,
                        bubbles: true,
                        cancelable: true,
                        clientX: rect.left + rect.width / 2,
                        clientY: rect.top + rect.height / 2
                    }));
                },
                () => {
                    const rect = button.getBoundingClientRect();
                    button.dispatchEvent(new MouseEvent('mouseover', {
                        view: window,
                        bubbles: true,
                        cancelable: true,
                        clientX: rect.left + rect.width / 2,
                        clientY: rect.top + rect.height / 2
                    }));
                },
                () => button.click()
            ];

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            for (const action of activationSequence) {
                action();
                await this.wait(300);

                if (tooltipFound) break;
            }

            // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–¥–µ—Ä–∂–∫–∏
            await this.wait(1000);

            observer.disconnect();

            return history;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ tooltip:', error);
            return [];
        }
    }

    /**
     * üéØ –ú–ï–¢–û–î 4: API –ø–µ—Ä–µ—Ö–≤–∞—Ç XHR/Fetch –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    setupAPIInterception() {
        // console.log('üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞...');

        try {
            const originalFetch = window.fetch;
            const originalXHROpen = XMLHttpRequest.prototype.open;

            // –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch
            window.fetch = function (...args) {
                return originalFetch.apply(this, args).then(response => {
                    if (args[0].includes('price') || args[0].includes('history')) {
                        console.log('üîç API –∑–∞–ø—Ä–æ—Å —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω:', args[0]);
                        return response.clone().json().then(data => {
                            if (data.priceHistory) {
                                // console.log('üí∞ –ù–∞–π–¥–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –≤ API:', data.priceHistory);
                                window.foundPriceHistory = data.priceHistory;
                            }
                            return response;
                        }).catch(() => response); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π response
                    }
                    return response;
                });
            };

            // –ü–µ—Ä–µ—Ö–≤–∞—Ç XHR
            XMLHttpRequest.prototype.open = function (method, url, ...args) {
                this.addEventListener('load', function () {
                    if (url.includes('price') || url.includes('history')) {
                        try {
                            const data = JSON.parse(this.responseText);
                            if (data.priceHistory) {
                                // console.log('üí∞ XHR –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω:', data.priceHistory);
                                window.foundPriceHistory = data.priceHistory;
                            }
                        } catch (e) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                        }
                    }
                });

                return originalXHROpen.call(this, method, url, ...args);
            };

            // console.log('‚úÖ API –ø–µ—Ä–µ—Ö–≤–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞:', error);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–∫—Ä—É–≥ ID –≤ —Ç–µ–∫—Å—Ç–µ
     */
    findHistoryAroundId(text, currentId) {
        const positions = [];
        let pos = 0;

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ ID
        while ((pos = text.indexOf(currentId, pos)) !== -1) {
            positions.push(pos);
            pos += currentId.length;
        }

        // –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        for (const position of positions.slice(0, 5)) {
            const start = Math.max(0, position - 1000);
            const end = Math.min(text.length, position + 1000);
            const context = text.substring(start, end);

            if (context.includes('priceHistory') || context.includes('price_history')) {
                console.log('üéØ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤–æ–∫—Ä—É–≥ ID');

                // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON
                const jsonMatch = context.match(/"priceHistory"\s*:\s*(\[.*?\])/);
                if (jsonMatch) {
                    try {
                        const historyArray = JSON.parse(jsonMatch[1]);
                        return this.formatPriceHistory(historyArray);
                    } catch (e) {
                        continue;
                    }
                }
            }
        }

        return [];
    }


    /**
     * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ–≥–æ tooltip
     */
    checkForVisibleTooltip() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            const portalContainer = document.querySelector('[data-marker="portals-container"]');
            if (portalContainer) {
                const tooltip = portalContainer.querySelector('[role="tooltip"]');
                if (tooltip) {
                    const rect = tooltip.getBoundingClientRect();
                    if (rect.width > 0 && rect.height > 0) {
                        return tooltip;
                    }
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ tooltip –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const tooltips = document.querySelectorAll('[role="tooltip"]');
            for (const tooltip of tooltips) {
                const rect = tooltip.getBoundingClientRect();
                if (rect.width > 0 && rect.height > 0 &&
                    (tooltip.textContent.includes('‚ÇΩ') || tooltip.textContent.includes('—Ä—É–±'))) {
                    return tooltip;
                }
            }

            return null;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ tooltip:', error);
            return null;
        }
    }

    /**
     * üìä –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ tooltip
     */
    parseTooltipHistory(text) {
        const history = [];

        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç –∏ —Ü–µ–Ω
        const patterns = [
            /(\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è))\s+([0-9\s]+)\s*‚ÇΩ/g,
            /(\d{1,2}\.\d{1,2})\s+([0-9\s]+)\s*‚ÇΩ/g
        ];

        for (const pattern of patterns) {
            let match;
            while ((match = pattern.exec(text)) !== null) {
                const dateStr = match[1];
                const priceStr = match[2].replace(/\s/g, '');
                const price = parseInt(priceStr);

                if (price > 1000) {
                    history.push({
                        date: this.parseRussianDate(dateStr),
                        price: price,
                        type: 'price_change'
                    });
                }
            }
        }

        return history;
    }

    /**
     * üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
     */
    formatPriceHistory(rawHistory) {
        if (!Array.isArray(rawHistory)) return [];

        return rawHistory.map(item => {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
            if (typeof item === 'object' && item !== null) {
                return {
                    date: item.date || item.timestamp || new Date().toISOString().split('T')[0],
                    price: item.price || item.amount || 0,
                    type: item.type || 'price_change'
                };
            }

            return item;
        }).filter(item => item.price > 0)
            .sort((a, b) => new Date(b.date) - new Date(a.date));
    }

    /**
     * ‚è±Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–∂–∏–¥–∞–Ω–∏—è
     */
    wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    async debugPriceHistoryExtraction() {
        console.log('\nüîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò –¶–ï–ù ===');

        const currentId = this.extractExternalId();
        console.log('üéØ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', currentId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º dataLayer
        const dataLayerResult = this.extractFromDataLayer(currentId);
        console.log('üìä DataLayer:', dataLayerResult.length > 0 ? '‚úÖ –ù–∞–π–¥–µ–Ω–æ' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º script —Ç–µ–≥–∏
        const scriptResult = this.extractFromScriptTags();
        console.log('üìú Script —Ç–µ–≥–∏:', scriptResult.length > 0 ? '‚úÖ –ù–∞–π–¥–µ–Ω–æ' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º React Fiber
        const fiberResult = this.extractFromReactFiber();
        console.log('‚öõÔ∏è React Fiber:', fiberResult.length > 0 ? '‚úÖ –ù–∞–π–¥–µ–Ω–æ' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É tooltip
        const button = document.querySelector('.price-history-entry-point-iKhax');
        console.log('üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ tooltip:', button ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞');

        const finalResult = await this.parsePriceHistory();
        console.log('üèÅ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', finalResult);

        return finalResult;
    }


    /**
     * –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –º—ã—à–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    async simulateHoverAndParse() {
        console.log('üñ±Ô∏è –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω...');

        const button = this.findPriceHistoryButton();
        if (!button) {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return null;
        }

        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω');

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º tooltip
        this.activatePriceHistoryTooltip(button);

        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è tooltip
        return new Promise((resolve) => {
            let checkCount = 0;
            const checkInterval = setInterval(() => {
                const tooltip = document.querySelector('[role="tooltip"]');

                if (tooltip && tooltip.textContent.includes('‚ÇΩ')) {
                    clearInterval(checkInterval);
                    console.log('‚úÖ Tooltip –ø–æ—è–≤–∏–ª—Å—è');

                    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
                    const history = this.parseTooltipData(tooltip);
                    resolve(history);
                } else if (checkCount > 30) { // 3 —Å–µ–∫—É–Ω–¥—ã
                    clearInterval(checkInterval);
                    console.log('‚ùå Timeout: tooltip –Ω–µ –ø–æ—è–≤–∏–ª—Å—è');
                    resolve(null);
                }

                checkCount++;
            }, 100);
        });
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è tooltip
     */
    async waitForTooltip() {
        const maxAttempts = 30;
        const delay = 100;

        for (let i = 0; i < maxAttempts; i++) {
            const tooltip = await this.searchInPortalContainer();
            if (tooltip && tooltip.length > 0) {
                console.log(`‚úÖ Tooltip –ø–æ—è–≤–∏–ª—Å—è –ø–æ—Å–ª–µ ${i * delay}–º—Å`);
                return true;
            }
            await new Promise(resolve => setTimeout(resolve, delay));
        }

        console.log('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è tooltip –∏—Å—Ç–µ–∫–ª–æ');
        return false;
    }

    /**
     * –ú–ï–¢–û–î 2: –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—è–≤–∏–≤—à–µ–≥–æ—Å—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
     */
    async triggerHoverAndParse() {
        console.log('üñ±Ô∏è –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω...');

        try {
            // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            const historyButton = document.querySelector('.price-history-entry-point-iKhax');
            if (!historyButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return null;
            }

            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω');

            // –°–∏–º—É–ª–∏—Ä—É–µ–º mouseenter
            const mouseEnterEvent = new MouseEvent('mouseenter', {
                view: window,
                bubbles: true,
                cancelable: true
            });

            historyButton.dispatchEvent(mouseEnterEvent);
            console.log('üñ±Ô∏è –°–æ–±—ã—Ç–∏–µ mouseenter –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è tooltip
            const maxWaitTime = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã
            const checkInterval = 100; // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
            let waitTime = 0;

            while (waitTime < maxWaitTime) {
                const portalHistory = this.extractFromPortalContainer();
                if (portalHistory && portalHistory.length > 0) {
                    console.log('‚úÖ Tooltip –ø–æ—è–≤–∏–ª—Å—è, –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã');
                    return portalHistory;
                }

                await new Promise(resolve => setTimeout(resolve, checkInterval));
                waitTime += checkInterval;
            }

            console.log('‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è tooltip –∏—Å—Ç–µ–∫–ª–æ');
            return null;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ hover:', error);
            return null;
        }
    }


    /**
     * –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ DOM
     */
    async fallbackDOMSearch() {
        console.log('üîç –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ DOM...');

        try {
            const historyEntries = [];

            // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω
            const containerSelectors = [
                '[data-marker="portals-container"]',
                '.price-history-container',
                '.tooltip-container',
                '[role="tooltip"]',
                '.popover-content'
            ];

            for (const selector of containerSelectors) {
                const containers = document.querySelectorAll(selector);

                for (const container of containers) {
                    if (container.textContent.includes('‚ÇΩ') &&
                        /\b(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\b/.test(container.textContent)) {

                        console.log(`üì¶ –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏—Å—Ç–æ—Ä–∏–µ–π: ${selector}`);
                        const data = this.parseHistoryFromTooltip(container);

                        if (data && data.length > 0) {
                            historyEntries.push(...data);
                        }
                    }
                }
            }

            return historyEntries;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
            return [];
        }
    }

    /**
     * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã tooltip
     */
    debugTooltipStructure(tooltip) {
        console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã tooltip...');

        console.log('üìã –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ tooltip:');
        console.log(tooltip.textContent);

        console.log('üìã HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ tooltip:');
        console.log(tooltip.innerHTML.substring(0, 1000));

        console.log('üìã –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã p –≤ tooltip:');
        const pElements = tooltip.querySelectorAll('p');
        pElements.forEach((p, index) => {
            console.log(`P[${index}]: "${p.textContent.trim()}" - classes: ${p.className}`);
        });

        console.log('üìã –≠–ª–µ–º–µ–Ω—Ç—ã —Å –¥–∞—Ç–∞–º–∏:');
        const dateElements = Array.from(pElements).filter(p => {
            const text = p.textContent.trim();
            return /\b(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\b/.test(text);
        });
        dateElements.forEach((p, index) => {
            console.log(`–î–∞—Ç–∞[${index}]: "${p.textContent.trim()}"`);
        });

        console.log('üìã –≠–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–∞–º–∏:');
        const priceElements = Array.from(pElements).filter(p => {
            const text = p.textContent.trim();
            return /\d[\d\s]*‚ÇΩ/.test(text);
        });
        priceElements.forEach((p, index) => {
            console.log(`–¶–µ–Ω–∞[${index}]: "${p.textContent.trim()}"`);
        });
    }


    /**
     * –ú–ï–¢–û–î 3: –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ DOM
     */
    extractFromDOMSearch() {
        console.log('üîç –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ DOM...');

        try {
            const historyEntries = [];

            // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –º–µ—Å—è—Ü—ã –∏ —Ü–µ–Ω—ã
            const monthNames = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];

            const allElements = document.querySelectorAll('*');

            for (const element of allElements) {
                const text = element.textContent;
                if (!text) continue;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –º–µ—Å—è—Ü –∏ —Ü–µ–Ω—É
                const hasMonth = monthNames.some(month => text.includes(month));
                const hasPrice = text.includes('‚ÇΩ') && /\d+/.test(text);

                if (hasMonth && hasPrice && text.length < 100) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
                    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç: "${text}"`);

                    // –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏ —Ü–µ–Ω—É
                    const patterns = [
                        /(\d{1,2}\s+\w+)\s+([0-9\s]+)\s*‚ÇΩ/,
                        /(\d{1,2}\.\d{1,2})\s+([0-9\s]+)\s*‚ÇΩ/
                    ];

                    for (const pattern of patterns) {
                        const match = text.match(pattern);
                        if (match) {
                            const dateText = match[1].trim();
                            const priceText = match[2].trim();

                            const parsedDate = this.parseRussianDate(dateText);
                            const parsedPrice = this.parsePrice(priceText);

                            if (parsedDate && parsedPrice > 0) {
                                const entry = {
                                    date: parsedDate,
                                    price: parsedPrice,
                                    formatted_date: parsedDate.toLocaleDateString('ru-RU'),
                                    formatted_price: new Intl.NumberFormat('ru-RU').format(parsedPrice) + ' ‚ÇΩ',
                                    original_text: text.trim()
                                };

                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                                const isDuplicate = historyEntries.some(existing =>
                                    existing.date.getTime() === entry.date.getTime() &&
                                    existing.price === entry.price
                                );

                                if (!isDuplicate) {
                                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ DOM:`, entry);
                                    historyEntries.push(entry);
                                }
                            }
                            break;
                        }
                    }
                }
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            historyEntries.sort((a, b) => b.date.getTime() - a.date.getTime());

            return historyEntries.length > 0 ? historyEntries : null;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
            return null;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –¥–∞—Ç
     */
    parseRussianDate(dateStr) {
        if (!dateStr) return null;

        const monthMap = {
            '—è–Ω–≤–∞—Ä—è': 0, '—Ñ–µ–≤—Ä–∞–ª—è': 1, '–º–∞—Ä—Ç–∞': 2, '–∞–ø—Ä–µ–ª—è': 3,
            '–º–∞—è': 4, '–∏—é–Ω—è': 5, '–∏—é–ª—è': 6, '–∞–≤–≥—É—Å—Ç–∞': 7,
            '—Å–µ–Ω—Ç—è–±—Ä—è': 8, '–æ–∫—Ç—è–±—Ä—è': 9, '–Ω–æ—è–±—Ä—è': 10, '–¥–µ–∫–∞–±—Ä—è': 11
        };

        // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "DD –º–µ—Å—è—Ü" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "19 –∞–ø—Ä–µ–ª—è")
        const match = dateStr.match(/(\d{1,2})\s+(\w+)/);
        if (!match) return null;

        const day = parseInt(match[1]);
        const monthName = match[2].toLowerCase();
        const monthNum = monthMap[monthName];

        if (isNaN(day) || monthNum === undefined) return null;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–¥ (—Ç–µ–∫—É—â–∏–π –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
        const now = new Date();
        const currentYear = now.getFullYear();
        const currentMonth = now.getMonth();

        // –ï—Å–ª–∏ –º–µ—Å—è—Ü –≤ –±—É–¥—É—â–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ, —Ç–æ —ç—Ç–æ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
        let year = currentYear;
        if (monthNum > currentMonth || (monthNum === currentMonth && day > now.getDate())) {
            year = currentYear - 1;
        }

        return new Date(year, monthNum, day);
    }


    /**
     * üîç –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    async runFullPriceHistoryDiagnostic() {
        console.log('\nüîç === –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–°–¢–û–†–ò–ò –¶–ï–ù ===');
        console.log(`‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toLocaleTimeString()}`);

        const methods = [
            {
                name: 'HTML –ø–∞—Ä—Å–∏–Ω–≥',
                method: () => this.extractPriceHistoryFromHTML(),
                description: '–ü–æ–∏—Å–∫ priceHistory –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ HTML'
            },
            {
                name: 'Script —Ç–µ–≥–∏',
                method: () => this.extractFromScriptTags(),
                description: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ JavaScript –∫–æ–¥–∞ –≤ —Ç–µ–≥–∞—Ö <script>'
            },
            {
                name: 'React Fiber',
                method: () => this.extractFromReactFiber(),
                description: '–û–±—Ö–æ–¥ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Fiber'
            },
            {
                name: '–°–∏–º—É–ª—è—Ü–∏—è hover',
                method: () => this.advancedTooltipActivation(),
                description: '–ê–∫—Ç–∏–≤–∞—Ü–∏—è tooltip —á–µ—Ä–µ–∑ –∏–º–∏—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            },
            {
                name: 'API –ø–µ—Ä–µ—Ö–≤–∞—Ç',
                method: () => window.foundPriceHistory || null,
                description: '–î–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –∏–∑ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤'
            }
        ];

        const results = {};

        for (const { name, method, description } of methods) {
            console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${name}`);
            console.log(`üìù ${description}`);

            try {
                const startTime = performance.now();
                const result = await method();
                const endTime = performance.now();
                const duration = Math.round(endTime - startTime);

                results[name] = {
                    success: result && result.length > 0,
                    count: result?.length || 0,
                    duration: duration,
                    data: result?.slice(0, 2) || null
                };

                if (result && result.length > 0) {
                    console.log(`‚úÖ ${name}: –ù–∞–π–¥–µ–Ω–æ ${result.length} –∑–∞–ø–∏—Å–µ–π –∑–∞ ${duration}–º—Å`);
                    console.log(`üìä –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:`, result.slice(0, 2));
                } else {
                    console.log(`‚ùå ${name}: –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (${duration}–º—Å)`);
                }

            } catch (error) {
                console.log(`üí• ${name}: –û—à–∏–±–∫–∞ - ${error.message}`);
                results[name] = {
                    success: false,
                    error: error.message,
                    duration: 0
                };
            }
        }

        // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        console.log('\nüìä === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===');
        const successful = Object.values(results).filter(r => r.success).length;
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: ${successful}/${methods.length}`);

        if (successful > 0) {
            const bestMethod = Object.entries(results)
                .filter(([_, r]) => r.success)
                .sort(([_, a], [__, b]) => b.count - a.count)[0];

            console.log(`üèÜ –õ—É—á—à–∏–π –º–µ—Ç–æ–¥: ${bestMethod[0]} (${bestMethod[1].count} –∑–∞–ø–∏—Å–µ–π)`);
        }

        console.log('üîö === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===\n');
        return results;
    }

    /**
     * üß™ –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ tooltip
     */
    async tryDifferentActivationMethods() {
        console.log('\nüß™ === –¢–ï–°–¢ –ê–ö–¢–ò–í–ê–¶–ò–ò TOOLTIP ===');

        const priceButton = document.querySelector('.price-history-entry-point-iKhax');
        if (!priceButton) {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return false;
        }

        const methods = [
            {
                name: 'MouseEnter',
                action: () => priceButton.dispatchEvent(new MouseEvent('mouseenter'))
            },
            {
                name: 'MouseOver',
                action: () => priceButton.dispatchEvent(new MouseEvent('mouseover'))
            },
            {
                name: 'Focus',
                action: () => priceButton.focus()
            },
            {
                name: 'Click',
                action: () => priceButton.click()
            },
            {
                name: 'PointerEnter',
                action: () => priceButton.dispatchEvent(new PointerEvent('pointerenter'))
            }
        ];

        for (const { name, action } of methods) {
            console.log(`üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${name}`);

            try {
                action();
                await this.wait(300);

                const tooltip = this.checkForVisibleTooltip();
                if (tooltip) {
                    console.log(`‚úÖ ${name}: Tooltip –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!`);
                    return true;
                } else {
                    console.log(`‚ùå ${name}: Tooltip –Ω–µ –ø–æ—è–≤–∏–ª—Å—è`);
                }

            } catch (error) {
                console.log(`üí• ${name}: –û—à–∏–±–∫–∞ - ${error.message}`);
            }
        }

        console.log('üîö === –ö–û–ù–ï–¶ –¢–ï–°–¢–ê –ê–ö–¢–ò–í–ê–¶–ò–ò ===\n');
        return false;
    }


    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
     */
    parsePrice(priceText) {
        if (!priceText) return 0;

        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        const cleanPrice = priceText.replace(/[^\d]/g, '');
        const price = parseInt(cleanPrice);

        return isNaN(price) ? 0 : price;
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–π —Ñ–æ—Ä–º—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã
     * @returns {Promise<Array>} –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã
     */
    async parsePriceHistoryData() {
        console.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–π —Ñ–æ—Ä–º—ã...');

        const historyEntries = [];

        try {
            // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω—ã
            const portalsContainer = document.querySelector('[data-marker="portals-container"]');
            if (!portalsContainer) {
                console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—Ä—Ç–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return [];
            }

            // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            const historyContainer = this.findHistoryContentInPortals(portalsContainer);
            if (!historyContainer) {
                console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return [];
            }

            console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã:', historyContainer);

            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            const parsedData = await this.tryMultipleParseMethods(historyContainer);

            if (parsedData.length > 0) {
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ ${parsedData.length} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏`);
                return parsedData;
            } else {
                console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ');
                return [];
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏:', error);
            return [];
        }
    }

    /**
 * –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Ü–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
 */
    parseAllPricesInContainer(container, priceHistory) {
        const text = container.textContent;
        console.log('üì¶ –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:', text.substring(0, 200));

        // –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ü–µ–Ω —Å –¥–∞—Ç–∞–º–∏
        const pricePatterns = [
            /(\d{1,2}\s+\w+)\s+([0-9\s]+)\s*‚ÇΩ/g,
            /(\d{1,2}\.\d{1,2})\s+([0-9\s]+)/g
        ];

        pricePatterns.forEach(pattern => {
            let match;
            while ((match = pattern.exec(text)) !== null) {
                const item = this.parsePriceHistoryItem(match[0]);
                if (item) {
                    priceHistory.push(item);
                }
            }
        });
    }

    /**
     * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    globalSearchPriceHistory(priceHistory) {
        const pageText = document.body.textContent;

        // –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ —Å —Ü–µ–Ω–∞–º–∏
        const monthPricePattern = /(\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è))\s+([0-9\s]+)\s*‚ÇΩ/g;

        let match;
        while ((match = monthPricePattern.exec(pageText)) !== null) {
            const item = this.parsePriceHistoryItem(match[0]);
            if (item) {
                priceHistory.push(item);
            }
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ä—É—Å—Å–∫–æ–π –¥–∞—Ç—ã
     */
    parseRussianDate(dateStr) {
        const monthMap = {
            '—è–Ω–≤–∞—Ä—è': 0, '—Ñ–µ–≤—Ä–∞–ª—è': 1, '–º–∞—Ä—Ç–∞': 2, '–∞–ø—Ä–µ–ª—è': 3,
            '–º–∞—è': 4, '–∏—é–Ω—è': 5, '–∏—é–ª—è': 6, '–∞–≤–≥—É—Å—Ç–∞': 7,
            '—Å–µ–Ω—Ç—è–±—Ä—è': 8, '–æ–∫—Ç—è–±—Ä—è': 9, '–Ω–æ—è–±—Ä—è': 10, '–¥–µ–∫–∞–±—Ä—è': 11
        };

        // "13 –∏—é–Ω—è"
        const monthDayMatch = dateStr.match(/(\d{1,2})\s+(\w+)/);
        if (monthDayMatch) {
            const day = parseInt(monthDayMatch[1]);
            const monthName = monthDayMatch[2];
            const month = monthMap[monthName];

            if (month !== undefined) {
                const currentYear = new Date().getFullYear();
                return new Date(currentYear, month, day);
            }
        }

        // "13.06"
        const dotMatch = dateStr.match(/(\d{1,2})\.(\d{1,2})/);
        if (dotMatch) {
            const day = parseInt(dotMatch[1]);
            const month = parseInt(dotMatch[2]) - 1; // –ú–µ—Å—è—Ü—ã —Å 0
            const currentYear = new Date().getFullYear();
            return new Date(currentYear, month, day);
        }

        return new Date(); // Fallback –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
     * @param {string} priceText —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω–æ–π
     * @returns {number|null} —Ü–µ–Ω–∞ –∏–ª–∏ null
     */
    parsePrice(priceText) {
        if (!priceText) return null;

        const cleanPrice = priceText.replace(/[^\d]/g, '');
        const price = parseInt(cleanPrice);

        return price > 0 ? price : null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    checkListingStatus() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω—è—Ç–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
        const closedWarning = document.querySelector('[data-marker="item-view/closed-warning"]');
        if (closedWarning && closedWarning.textContent.includes('—Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')) {
            return 'archived';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª–∞—Å—Å –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const closedBlock = document.querySelector('.closed-warning-block-_5cSD');
        if (closedBlock) {
            return 'archived';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—Ä—É–≥–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–Ω—è—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const errorSelectors = [
            '.item-view-warning',
            '.item-expired',
            '[data-marker="item-view/item-removed"]',
            '.style-closed-HV2__'
        ];

        for (const selector of errorSelectors) {
            if (document.querySelector(selector)) {
                return 'archived';
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (!document.querySelector('h1')) {
            return 'archived';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 404 –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø–æ URL
        if (window.location.href.includes('/404') || window.location.href.includes('/error')) {
            return 'archived';
        }

        return 'active';
    }

    /**
     * –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ URL
     */
    extractExternalId() {
        console.log('üÜî –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–π ID...');

        const url = window.location.href;
        console.log(`URL: ${url}`);

        // ‚úÖ –†–∞–±–æ—á–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ID = 7348952051
        const patterns = [
            /\/kvartiry\/.*_(\d+)(?:\?|#|$)/,  // ‚úÖ –†–ê–ë–û–¢–ê–ï–¢
            /_(\d+)(?:\?|#|$)/,                // ‚úÖ –†–ê–ë–û–¢–ê–ï–¢
            /\/(\d{8,})(?:\?|#|$)/             // –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö ID
        ];

        for (const pattern of patterns) {
            const match = url.match(pattern);
            if (match && match[1]) {
                const id = String(match[1]); // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
                console.log(`‚úÖ ID –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω "${pattern}": ${id} (—Ç–∏–ø: ${typeof id})`);
                return id;
            }
        }

        console.log('‚ùå –í–Ω–µ—à–Ω–∏–π ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return '';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
     */
    extractTitle() {
        console.log('üìù –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫...');

        const titleSelectors = [
            // ‚úÖ –†–ê–ë–û–ß–ò–ï —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            'h1[itemprop="name"]',              // ‚úÖ –†–ê–ë–û–¢–ê–ï–¢
            'h1',                               // ‚úÖ –†–ê–ë–û–¢–ê–ï–¢
            '[data-marker="item-view/title-info"]', // ‚úÖ –ù–ê–ô–î–ï–ù

            // –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            '.EEPdn.T7ujv.hQ3Iv.zjI_7.cujIu.uxSuu', // –ò–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            'h1.EEPdn.T7ujv.hQ3Iv.zjI_7.cujIu.uxSuu'
        ];

        for (const selector of titleSelectors) {
            try {
                const element = document.querySelector(selector);
                if (element && element.textContent.trim()) {
                    const title = element.textContent.trim();
                    console.log(`‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ "${selector}": "${title}"`);
                    return title;
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}":`, error.message);
            }
        }

        console.log('‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return '';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
     */
    extractAddress() {
        console.log('üìç –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å...');

        const addressSelectors = [
            // ‚úÖ –†–ê–ë–û–ß–ò–ô —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            '[itemprop="address"]', // ‚úÖ –†–ê–ë–û–¢–ê–ï–¢: "–ú–æ—Å–∫–≤–∞, –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –±-—Ä, 30–∫1..."

            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            '[data-marker*="location"]',
            '.item-address'
        ];

        for (const selector of addressSelectors) {
            try {
                const element = document.querySelector(selector);
                if (element && element.textContent.trim()) {
                    let address = element.textContent.trim();

                    // –û—á–∏—â–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç—Ä–æ (–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏)
                    const metroMatch = address.match(/^([^–ê-–Ø]*[–ê-–Ø][^–ê-–Ø]*?(?:—É–ª\.|–ø—Ä\.|–±-—Ä|–±—É–ª—å–≤–∞—Ä|–ø—Ä–æ—Å–ø–µ–∫—Ç|—É–ª–∏—Ü–∞)[^–ê-–Ø]*?\d+[^\d]*?)([–ê-–Ø])/);
                    if (metroMatch) {
                        address = metroMatch[1].trim();
                    }

                    if (address.length > 5) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∞–¥—Ä–µ—Å–∞
                        console.log(`‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ "${selector}": "${address}"`);
                        return address;
                    }
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º –∞–¥—Ä–µ—Å–∞ "${selector}":`, error.message);
            }
        }

        console.log('‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return '';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –∫–∞—Ä—Ç—ã
     */
    extractCoordinates() {
        const mapSelectors = [
            '[data-map-lat][data-map-lon]',
            '.leaflet-container [data-lat][data-lng]'
        ];

        for (const selector of mapSelectors) {
            const mapContainer = document.querySelector(selector);
            if (mapContainer) {
                const lat = mapContainer.getAttribute('data-map-lat') || mapContainer.getAttribute('data-lat');
                const lon = mapContainer.getAttribute('data-map-lon') || mapContainer.getAttribute('data-lng');

                if (lat && lon) {
                    return {
                        lat: parseFloat(lat),
                        lon: parseFloat(lon)
                    };
                }
            }
        }

        return { lat: null, lon: null };
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
     */
    extractPrice() {
        console.log('üí∞ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É...');

        const priceSelectors = [
            // ‚úÖ –†–ê–ë–û–ß–ò–ï —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            '[data-marker="item-view/item-price"]',  // ‚úÖ –†–ê–ë–û–¢–ê–ï–¢: "16 500 000 ‚ÇΩ"
            '[itemprop="price"]',                    // ‚úÖ –†–ê–ë–û–¢–ê–ï–¢: "16 500 000 ‚ÇΩ"
            '[data-marker="item-view/item-price-container"]'
        ];

        for (const selector of priceSelectors) {
            try {
                const element = document.querySelector(selector);
                if (element) {
                    const priceText = element.textContent.trim();
                    console.log(`üîç –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Ü–µ–Ω—ã "${selector}": "${priceText}"`);

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    const priceMatch = priceText.match(/(\d[\d\s]*\d|\d+)/);
                    if (priceMatch) {
                        const price = parseInt(priceMatch[1].replace(/\s/g, ''));
                        if (price > 1000) { // –†–∞–∑—É–º–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                            console.log(`‚úÖ –¶–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: ${price}`);
                            return price;
                        }
                    }
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º —Ü–µ–Ω—ã "${selector}":`, error.message);
            }
        }

        console.log('‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
     */
    extractDescription() {
        const descSelectors = [
            '[data-marker="item-view/item-description"]',
            '.item-description-text',
            '.item-description-html'
        ];

        for (const selector of descSelectors) {
            const descEl = document.querySelector(selector);
            if (descEl) {
                return descEl.textContent.trim();
            }
        }

        return '';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    extractPhotos() {
        const photos = [];
        const photoSelectors = [
            '[data-marker="image-preview/item"] img',
            '.gallery-img-wrapper img',
            '.image-frame img'
        ];

        photoSelectors.forEach(selector => {
            const photoElements = document.querySelectorAll(selector);
            photoElements.forEach(img => {
                const src = img.src || img.getAttribute('data-src');
                if (src && !photos.includes(src)) {
                    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ–ª—å—à–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
                    const largeSrc = src.replace(/\/\d+x\d+\//, '/1200x900/');
                    photos.push(largeSrc);
                }
            });
        });

        return photos;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
     */
    extractListingDate() {
        const dateSelectors = [
            '[data-marker="item-view/item-date"]',
            '.title-info-metadata-item time'
        ];

        for (const selector of dateSelectors) {
            const dateEl = document.querySelector(selector);
            if (dateEl) {
                const dateText = dateEl.textContent.trim();
                return this.parseAvitoDate(dateText);
            }
        }

        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    extractUpdateDate() {
        return this.extractListingDate();
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
     */
    extractViewsCount() {
        const viewsSelectors = [
            '[data-marker="item-view/total-views"]',
            '.title-info-metadata-item .style-title-info-metadata-item-redesign__item-text'
        ];

        for (const selector of viewsSelectors) {
            const viewsEl = document.querySelector(selector);
            if (viewsEl && viewsEl.textContent.includes('–ø—Ä–æ—Å–º–æ—Ç—Ä')) {
                const viewsText = viewsEl.textContent.replace(/[^\d]/g, '');
                const views = parseInt(viewsText);
                if (views > 0) {
                    return views;
                }
            }
        }

        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
     */
    extractSellerName() {
        const sellerSelectors = [
            '[data-marker="seller-info/name"] a',
            '[data-marker="seller-info/name"] span',
            '.seller-info-name a',
            '.seller-info-name span'
        ];

        for (const selector of sellerSelectors) {
            const sellerEl = document.querySelector(selector);
            if (sellerEl) {
                return sellerEl.textContent.trim();
            }
        }

        return '';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
     */
    extractSellerType() {
        const labelSelectors = [
            '[data-marker="seller-info/label"]',
            '.seller-info-label'
        ];

        for (const selector of labelSelectors) {
            const labelEl = document.querySelector(selector);
            if (labelEl) {
                return labelEl.textContent.trim();
            }
        }

        return '';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    extractPropertyType() {
        const title = this.extractTitle();
        if (title.includes('–°—Ç—É–¥–∏—è')) return 'studio';
        if (title.includes('1-–∫')) return '1k';
        if (title.includes('2-–∫')) return '2k';
        if (title.includes('3-–∫')) return '3k';
        if (title.includes('4-–∫') || title.includes('5-–∫') || title.includes('6-–∫')) return '4k+';
        return '';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏
     */
    extractTotalArea() {
        console.log('üìê –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å...');

        // –ú–µ—Ç–æ–¥ 1: –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        const title = this.extractTitle();
        if (title) {
            // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "39,9 –º¬≤" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            const areaMatch = title.match(/(\d+(?:[.,]\d+)?)\s*–º¬≤/);
            if (areaMatch) {
                const area = parseFloat(areaMatch[1].replace(',', '.'));
                console.log(`‚úÖ –ü–ª–æ—â–∞–¥—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: ${area} –º¬≤`);
                return area;
            }
        }

        // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        const paramResult = this.findParamValue('–æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å');
        if (paramResult) {
            const areaMatch = paramResult.match(/(\d+(?:[.,]\d+)?)/);
            if (areaMatch) {
                const area = parseFloat(areaMatch[1].replace(',', '.'));
                console.log(`‚úÖ –ü–ª–æ—â–∞–¥—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: ${area} –º¬≤`);
                return area;
            }
        }

        console.log('‚ùå –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –∫—É—Ö–Ω–∏
     */
    extractKitchenArea() {
        console.log('üç≥ –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏...');

        // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–æ—Å–Ω–æ–≤–Ω–æ–π)
        const areaParam = this.findParamValue('–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏');
        if (areaParam) {
            console.log('–ù–∞–π–¥–µ–Ω–∞ –ø–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö:', areaParam);
            const match = areaParam.match(/(\d+(?:[.,]\d+)?)/);
            if (match) {
                const area = parseFloat(match[1].replace(',', '.'));
                console.log(`‚úÖ –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${area} –º¬≤`);
                return area;
            }
        }

        // –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const paramsContainer = document.querySelector('#bx_item-params');
        if (paramsContainer) {
            console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–ª–æ—â–∞–¥–∏ –∫—É—Ö–Ω–∏');
            const html = paramsContainer.innerHTML;

            // –ò—â–µ–º "–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏" –≤ HTML
            const kitchenMatch = html.match(/–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏[^>]*>([^<]*)/i);
            if (kitchenMatch) {
                const areaText = kitchenMatch[1];
                console.log('–ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –ø–ª–æ—â–∞–¥–∏ –∫—É—Ö–Ω–∏ –≤ HTML:', areaText);

                const numberMatch = areaText.match(/(\d+(?:[.,]\d+)?)/);
                if (numberMatch) {
                    const area = parseFloat(numberMatch[1].replace(',', '.'));
                    console.log(`‚úÖ –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ –∏–∑ HTML: ${area} –º¬≤`);
                    return area;
                }
            }
        }

        // –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        const alternativeSelectors = [
            '.params-paramsList-_awNW li',
            '#bx_item-params li',
            '[data-marker="item-view/item-params"] li',
            '.params-paramsList__item'
        ];

        for (const selector of alternativeSelectors) {
            const paramItems = document.querySelectorAll(selector);
            console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä ${selector} –¥–ª—è –ø–ª–æ—â–∞–¥–∏ –∫—É—Ö–Ω–∏, –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:`, paramItems.length);

            for (const item of paramItems) {
                const text = item.textContent;

                if (text.toLowerCase().includes('–ø–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏') ||
                    (text.toLowerCase().includes('–∫—É—Ö–Ω—è') && text.toLowerCase().includes('–º¬≤'))) {

                    console.log('–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å –ø–ª–æ—â–∞–¥—å—é –∫—É—Ö–Ω–∏:', text);
                    const match = text.match(/(\d+(?:[.,]\d+)?)\s*–º¬≤?/);
                    if (match) {
                        const area = parseFloat(match[1].replace(',', '.'));
                        console.log(`‚úÖ –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: ${area} –º¬≤`);
                        return area;
                    }
                }
            }
        }

        console.log('‚ùå –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∂–∏–ª–æ–π –ø–ª–æ—â–∞–¥–∏
     */
    extractLivingArea() {
        console.log('üè† –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–∏–ª—É—é –ø–ª–æ—â–∞–¥—å...');

        // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–æ—Å–Ω–æ–≤–Ω–æ–π)
        const areaParam = this.findParamValue('–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å');
        if (areaParam) {
            console.log('–ù–∞–π–¥–µ–Ω–∞ –∂–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö:', areaParam);
            const match = areaParam.match(/(\d+(?:[.,]\d+)?)/);
            if (match) {
                const area = parseFloat(match[1].replace(',', '.'));
                console.log(`‚úÖ –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${area} –º¬≤`);
                return area;
            }
        }

        // –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const paramsContainer = document.querySelector('#bx_item-params');
        if (paramsContainer) {
            console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∂–∏–ª–æ–π –ø–ª–æ—â–∞–¥–∏');
            const html = paramsContainer.innerHTML;

            // –ò—â–µ–º "–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å" –≤ HTML
            const livingMatch = html.match(/–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å[^>]*>([^<]*)/i);
            if (livingMatch) {
                const areaText = livingMatch[1];
                console.log('–ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –∂–∏–ª–æ–π –ø–ª–æ—â–∞–¥–∏ –≤ HTML:', areaText);

                const numberMatch = areaText.match(/(\d+(?:[.,]\d+)?)/);
                if (numberMatch) {
                    const area = parseFloat(numberMatch[1].replace(',', '.'));
                    console.log(`‚úÖ –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å –∏–∑ HTML: ${area} –º¬≤`);
                    return area;
                }
            }
        }

        // –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        const alternativeSelectors = [
            '.params-paramsList-_awNW li',
            '#bx_item-params li',
            '[data-marker="item-view/item-params"] li',
            '.params-paramsList__item'
        ];

        for (const selector of alternativeSelectors) {
            const paramItems = document.querySelectorAll(selector);
            console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä ${selector} –¥–ª—è –∂–∏–ª–æ–π –ø–ª–æ—â–∞–¥–∏, –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:`, paramItems.length);

            for (const item of paramItems) {
                const text = item.textContent;

                if (text.toLowerCase().includes('–∂–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å') ||
                    (text.toLowerCase().includes('–∂–∏–ª–∞—è') && text.toLowerCase().includes('–º¬≤'))) {

                    console.log('–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å –∂–∏–ª–æ–π –ø–ª–æ—â–∞–¥—å—é:', text);
                    const match = text.match(/(\d+(?:[.,]\d+)?)\s*–º¬≤?/);
                    if (match) {
                        const area = parseFloat(match[1].replace(',', '.'));
                        console.log(`‚úÖ –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: ${area} –º¬≤`);
                        return area;
                    }
                }
            }
        }

        console.log('‚ùå –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return null;
    }

    /**
     * –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –ø–ª–æ—â–∞–¥–µ–π - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
     */
    debugAllAreasParsing() {
        console.log('=== üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê –í–°–ï–• –ü–õ–û–©–ê–î–ï–ô ===');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const title = this.extractTitle();
        console.log('üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫:', title);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const paramsContainer = document.querySelector('#bx_item-params');
        if (paramsContainer) {
            console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω');
            console.log('üìÑ HTML –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):',
                paramsContainer.innerHTML.substring(0, 1000));

            // –ò—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–µ–π –≤ HTML
            const html = paramsContainer.innerHTML;
            const areaMatches = {
                '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å': html.match(/–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å[^>]*>([^<]*)/i),
                '–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏': html.match(/–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏[^>]*>([^<]*)/i),
                '–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å': html.match(/–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å[^>]*>([^<]*)/i)
            };

            console.log('üîç –ü–æ–∏—Å–∫ –ø–ª–æ—â–∞–¥–µ–π –≤ HTML:');
            Object.entries(areaMatches).forEach(([type, match]) => {
                if (match) {
                    console.log(`  ‚úÖ ${type}: "${match[1]}"`);
                } else {
                    console.log(`  ‚ùå ${type}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                }
            });
        } else {
            console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ù–ï –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const paramItems = document.querySelectorAll('.params-paramsList-_awNW .params-paramsList__item-_2Y2O');
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${paramItems.length}`);

        paramItems.forEach((item, index) => {
            const text = item.textContent.trim();
            if (text.toLowerCase().includes('–ø–ª–æ—â–∞–¥—å')) {
                console.log(`  üìê –ü–∞—Ä–∞–º–µ—Ç—Ä ${index + 1}: "${text}"`);
            }
        });

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–µ–π
        console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í:');

        const totalArea = this.extractTotalArea();
        console.log(`üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: ${totalArea || '–ù–ï –ù–ê–ô–î–ï–ù–ê'} –º¬≤`);

        const kitchenArea = this.extractKitchenArea();
        console.log(`üç≥ –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏: ${kitchenArea || '–ù–ï –ù–ê–ô–î–ï–ù–ê'} –º¬≤`);

        const livingArea = this.extractLivingArea();
        console.log(`üè† –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å: ${livingArea || '–ù–ï –ù–ê–ô–î–ï–ù–ê'} –º¬≤`);

        console.log('=== üèÅ –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–õ–û–©–ê–î–ï–ô ===');

        return {
            total: totalArea,
            kitchen: kitchenArea,
            living: livingArea
        };
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç—Ç–∞–∂–∞
     */
    extractFloor() {
        console.log('üè¢ –ò–∑–≤–ª–µ–∫–∞–µ–º —ç—Ç–∞–∂...');

        // –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const title = this.extractTitle();
        if (title) {
            // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "12/25 —ç—Ç."
            const floorMatch = title.match(/(\d+)\/\d+\s*—ç—Ç\./);
            if (floorMatch) {
                const floor = parseInt(floorMatch[1]);
                console.log(`‚úÖ –≠—Ç–∞–∂ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: ${floor}`);
                return floor;
            }
        }

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        const paramResult = this.findParamValue('—ç—Ç–∞–∂');
        if (paramResult) {
            const floorMatch = paramResult.match(/(\d+)/);
            if (floorMatch) {
                const floor = parseInt(floorMatch[1]);
                console.log(`‚úÖ –≠—Ç–∞–∂ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: ${floor}`);
                return floor;
            }
        }

        console.log('‚ùå –≠—Ç–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏ –¥–æ–º–∞
     */
    extractFloorsTotal() {
        console.log('üèóÔ∏è –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π...');

        // –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const title = this.extractTitle();
        if (title) {
            // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "12/25 —ç—Ç."
            const floorsMatch = title.match(/\d+\/(\d+)\s*—ç—Ç\./);
            if (floorsMatch) {
                const floors = parseInt(floorsMatch[1]);
                console.log(`‚úÖ –≠—Ç–∞–∂–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: ${floors}`);
                return floors;
            }
        }

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        const paramResult = this.findParamValue('—ç—Ç–∞–∂–Ω–æ—Å—Ç—å') || this.findParamValue('—ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ');
        if (paramResult) {
            const floorsMatch = paramResult.match(/(\d+)/);
            if (floorsMatch) {
                const floors = parseInt(floorsMatch[1]);
                console.log(`‚úÖ –≠—Ç–∞–∂–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: ${floors}`);
                return floors;
            }
        }

        console.log('‚ùå –≠—Ç–∞–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
     */
    extractRooms() {
        console.log('üö™ –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç...');

        // –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const title = this.extractTitle();
        if (title) {
            // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "1-–∫. –∫–≤–∞—Ä—Ç–∏—Ä–∞"
            const roomsMatch = title.match(/(\d+)-–∫\.\s*–∫–≤–∞—Ä—Ç–∏—Ä–∞/i);
            if (roomsMatch) {
                const rooms = parseInt(roomsMatch[1]);
                console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: ${rooms}`);
                return rooms;
            }
        }

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        const paramResult = this.findParamValue('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç') || this.findParamValue('–∫–æ–º–Ω–∞—Ç');
        if (paramResult) {
            const roomsMatch = paramResult.match(/(\d+)/);
            if (roomsMatch) {
                const rooms = parseInt(roomsMatch[1]);
                console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: ${rooms}`);
                return rooms;
            }
        }

        console.log('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞
     */
    extractCondition() {
        const conditionParam = this.findParamValue('–†–µ–º–æ–Ω—Ç');
        return conditionParam || '';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–º–∞
     */
    extractHouseType() {
        const houseTypeParam = this.findParamValue('–¢–∏–ø –¥–æ–º–∞');
        return houseTypeParam || '';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
     */
    extractYearBuilt() {
        const yearParam = this.findParamValue('–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏');
        if (yearParam) {
            const match = yearParam.match(/(\d{4})/);
            return match ? parseInt(match[1]) : null;
        }
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∞–Ω—É–∑–ª–∞
     */
    extractBathroomType() {
        const bathroomParam = this.findParamValue('–°–∞–Ω—É–∑–µ–ª');
        return bathroomParam || '';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –±–∞–ª–∫–æ–Ω–∞
     */
    extractBalcony() {
        const balconyParam = this.findParamValue('–ë–∞–ª–∫–æ–Ω');
        if (balconyParam) {
            return !balconyParam.toLowerCase().includes('–Ω–µ—Ç');
        }
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø–æ—Ç–æ–ª–∫–æ–≤
     */
    extractCeilingHeight() {
        const ceilingParam = this.findParamValue('–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤');
        if (ceilingParam) {
            const match = ceilingParam.match(/(\d+(?:\.\d+)?)/);
            return match ? parseFloat(match[1]) : null;
        }
        return null;
    }

    /**
     * –ü–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
     */
    findParamValue(paramName) {
        console.log('–ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä:', paramName);

        // –û–ë–ù–û–í–õ–ï–ù–ù–´–ï —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ê–≤–∏—Ç–æ
        const paramSelectors = [
            // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ 2024
            '.params-paramsList-_awNW .params-paramsList__item-_2Y2O',
            '#bx_item-params .params-paramsList__item-_2Y2O',

            // –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
            '.params-paramsList__item',
            '[data-marker="item-view/item-params"] .params-paramsList__item',
            '.item-params .params-list .params-list-item',
            '[data-marker="item-params"] .params-item',
            '.item-view-params .item-view-params-item',
            '.item-params-list .item-params-list-item',
            '.params-list-wrapper .params-item'
        ];

        for (const selector of paramSelectors) {
            const paramItems = document.querySelectorAll(selector);
            console.log(`–°–µ–ª–µ–∫—Ç–æ—Ä ${selector}: –Ω–∞–π–¥–µ–Ω–æ ${paramItems.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

            for (const item of paramItems) {
                const text = item.textContent;
                console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:', text);

                if (text.toLowerCase().includes(paramName.toLowerCase())) {
                    console.log('–ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä:', text);

                    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                    const colonSplit = text.split(':');
                    if (colonSplit.length > 1) {
                        const value = colonSplit[1].trim();
                        console.log('–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è:', value);
                        return value;
                    }

                    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                    return text.trim();
                }
            }
        }

        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', paramName);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
        if (typeof reportSelectorError === 'function') {
            reportSelectorError(
                paramName,
                paramSelectors,
                window.location.href,
                'findParamValue'
            );
        }
        
        return null;
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Avito
     */
    parseAvitoDate(dateText) {
        try {
            const now = new Date();

            if (dateText.includes('—Å–µ–≥–æ–¥–Ω—è')) {
                return now;
            } else if (dateText.includes('–≤—á–µ—Ä–∞')) {
                const yesterday = new Date(now);
                yesterday.setDate(now.getDate() - 1);
                return yesterday;
            } else if (dateText.includes('–¥–Ω—è') || dateText.includes('–¥–Ω–µ–π')) {
                const daysMatch = dateText.match(/(\d+)\s*–¥–Ω—è|–¥–Ω–µ–π/);
                if (daysMatch) {
                    const daysAgo = parseInt(daysMatch[1]);
                    const date = new Date(now);
                    date.setDate(now.getDate() - daysAgo);
                    return date;
                }
            } else {
                // –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                const dateMatch = dateText.match(/(\d{1,2})\s*(\w+)\s*(\d{4})?/);
                if (dateMatch) {
                    const day = parseInt(dateMatch[1]);
                    const monthName = dateMatch[2];
                    const year = dateMatch[3] ? parseInt(dateMatch[3]) : now.getFullYear();

                    const monthMap = {
                        '—è–Ω–≤–∞—Ä—è': 0, '—Ñ–µ–≤—Ä–∞–ª—è': 1, '–º–∞—Ä—Ç–∞': 2, '–∞–ø—Ä–µ–ª—è': 3,
                        '–º–∞—è': 4, '–∏—é–Ω—è': 5, '–∏—é–ª—è': 6, '–∞–≤–≥—É—Å—Ç–∞': 7,
                        '—Å–µ–Ω—Ç—è–±—Ä—è': 8, '–æ–∫—Ç—è–±—Ä—è': 9, '–Ω–æ—è–±—Ä—è': 10, '–¥–µ–∫–∞–±—Ä—è': 11
                    };

                    const month = monthMap[monthName];
                    if (month !== undefined) {
                        return new Date(year, month, day);
                    }
                }
            }
        } catch (error) {
            console.error('Error parsing date:', dateText, error);
        }

        return null;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    generateName(data) {
        const parts = [];

        // –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if (data.property_type) {
            const typeMap = {
                'studio': '–°—Ç—É–¥–∏—è',
                '1k': '1–∫',
                '2k': '2–∫',
                '3k': '3–∫',
                '4k+': '4–∫+'
            };
            parts.push(typeMap[data.property_type] || data.property_type);
        }

        // –ü–ª–æ—â–∞–¥—å
        if (data.area_total) {
            parts.push(`${data.area_total}–º¬≤`);
        }

        // –≠—Ç–∞–∂
        if (data.floor) {
            if (data.floors_total) {
                parts.push(`${data.floor}/${data.floors_total}—ç—Ç`);
            } else {
                parts.push(`${data.floor}—ç—Ç`);
            }
        }

        // –ê–¥—Ä–µ—Å (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)
        if (data.address) {
            const addressParts = data.address.split(',');
            if (addressParts.length > 1) {
                parts.push(addressParts[1].trim());
            }
        }

        return parts.join(', ') || '–ö–≤–∞—Ä—Ç–∏—Ä–∞';
    }

    debugAreaParsing() {
        console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê –ü–õ–û–©–ê–î–ò ===');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const title = this.extractTitle();
        console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫:', title);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
        const selectors = [
            '#bx_item-params',
            '[data-marker="item-view/item-params"]',
            '.params-paramsList-_awNW',
            '.item-params',
            '[data-marker="item-params"]',
            '.item-view-params'
        ];

        selectors.forEach(selector => {
            const container = document.querySelector(selector);
            if (container) {
                console.log(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${selector} –Ω–∞–π–¥–µ–Ω:`, container);
                console.log('HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', container.innerHTML.substring(0, 1000));

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏
                const items = container.querySelectorAll('li, .params-paramsList__item-_2Y2O, .params-item');
                console.log(`–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏: ${items.length}`);

                items.forEach((item, index) => {
                    if (index < 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        console.log(`  –ü–∞—Ä–∞–º–µ—Ç—Ä ${index + 1}:`, item.textContent);
                    }
                });
            } else {
                console.log(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${selector} –ù–ï –Ω–∞–π–¥–µ–Ω`);
            }
        });

        // –ò—â–µ–º –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–ª–æ–≤–æ–º "–ø–ª–æ—â–∞–¥—å"
        const allElements = document.querySelectorAll('*');
        let areaElements = [];
        allElements.forEach(el => {
            if (el.textContent && el.textContent.toLowerCase().includes('–ø–ª–æ—â–∞–¥—å')) {
                areaElements.push({
                    tagName: el.tagName,
                    className: el.className,
                    textContent: el.textContent.trim(),
                    selector: this.getElementSelector(el)
                });
            }
        });

        console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–ª–æ–≤–æ–º "–ø–ª–æ—â–∞–¥—å":', areaElements.slice(0, 10)); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        console.log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
    }


    getElementSelector(element) {
        if (element.id) {
            return `#${element.id}`;
        }

        if (element.className) {
            return `.${element.className.split(' ')[0]}`;
        }

        const dataMarker = element.getAttribute('data-marker');
        if (dataMarker) {
            return `[data-marker="${dataMarker}"]`;
        }

        return element.tagName.toLowerCase();
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    cleanUrl(url) {
        try {
            const urlObj = new URL(url);

            // –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            const paramsToRemove = [
                'context',
                'utm_source',
                'utm_medium',
                'utm_campaign',
                'utm_content',
                'utm_term',
                '_gl',
                'fbclid',
                'gclid',
                'yclid',
                'ref',
                'source',
                'from'
            ];

            // –£–¥–∞–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            paramsToRemove.forEach(param => {
                urlObj.searchParams.delete(param);
            });

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π URL
            const cleanedUrl = urlObj.toString();
            console.log('URL –æ—á–∏—â–µ–Ω:', url, '‚Üí', cleanedUrl);
            return cleanedUrl;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ URL:', error);
            return url; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å
        }
    }

    /**
     * –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ :contains)
     * @param {string} text –∏—Å–∫–æ–º—ã–π —Ç–µ–∫—Å—Ç
     * @returns {Element[]} –º–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    getElementsByText(text) {
        const elements = [];
        const walker = document.createTreeWalker(
            document.body,
            NodeFilter.SHOW_ELEMENT,
            {
                acceptNode: function (node) {
                    return node.textContent.includes(text) ?
                        NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
                }
            }
        );

        let node;
        while (node = walker.nextNode()) {
            if (node.textContent.trim() === text) {
                elements.push(node);
            }
        }

        return elements;
    }

    /**
     * –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è mouseenter –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
     * @param {Element} triggerElement —ç–ª–µ–º–µ–Ω—Ç-—Ç—Ä–∏–≥–≥–µ—Ä
     * @returns {Promise<void>}
     */
    async triggerPriceHistoryOpen(triggerElement) {
        console.log('üñ±Ô∏è –ò–º–∏—Ç–∏—Ä—É–µ–º mouseenter –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã...');

        try {
            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ mouseenter
            const mouseEnterEvent = new MouseEvent('mouseenter', {
                bubbles: true,
                cancelable: true,
                view: window
            });

            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ mouseover (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è)
            const mouseOverEvent = new MouseEvent('mouseover', {
                bubbles: true,
                cancelable: true,
                view: window
            });

            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ (–µ—Å–ª–∏ –æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç focus)
            if (triggerElement.focus) {
                triggerElement.focus();
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
            triggerElement.dispatchEvent(mouseOverEvent);
            triggerElement.dispatchEvent(mouseEnterEvent);

            // –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å tabindex –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ focus
            if (triggerElement.hasAttribute('tabindex')) {
                const focusEvent = new FocusEvent('focus', {
                    bubbles: true,
                    cancelable: true
                });
                triggerElement.dispatchEvent(focusEvent);
            }

            // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
            await this.delay(100);

            console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –∂–¥–µ–º —Ä–µ–∞–∫—Ü–∏–∏...');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏–π:', error);
            throw error;
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω—ã
     * @param {number} maxWaitTime –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º—Å
     * @returns {Promise<Element|null>} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–ª–∏ null
     */
    async waitForPriceHistoryContainer(maxWaitTime = 3000) {
        console.log('‚è≥ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω—ã...');

        const startTime = Date.now();
        const checkInterval = 100; // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å

        return new Promise((resolve) => {
            const checkForContainer = () => {
                // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—Ä—Ç–∞–ª–∞
                const portalsContainer = document.querySelector('[data-marker="portals-container"]');

                if (portalsContainer) {
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω portals-container:', portalsContainer);

                    // –ò—â–µ–º –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–ª–æ–∫–∏ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω—ã
                    const historyContainer = this.findHistoryContentInPortals(portalsContainer);

                    if (historyContainer) {
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã!');
                        resolve(historyContainer);
                        return;
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                if (Date.now() - startTime > maxWaitTime) {
                    console.log('‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã');
                    resolve(null);
                    return;
                }

                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                setTimeout(checkForContainer, checkInterval);
            };

            checkForContainer();
        });
    }

    /**
     * –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø–æ—Ä—Ç–∞–ª–æ–≤
     * @param {Element} portalsContainer –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—Ä—Ç–∞–ª–æ–≤
     * @returns {Element|null} —ç–ª–µ–º–µ–Ω—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω—ã –∏–ª–∏ null
     */
    findHistoryContentInPortals(portalsContainer) {
        console.log('üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤ portals-container...');

        // –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å theme –∫–ª–∞—Å—Å–∞–º–∏
        const themeElements = portalsContainer.querySelectorAll('[class*="theme"]');

        for (const element of themeElements) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω
            if (this.containsPriceHistoryContent(element)) {
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã:', element);
                return element;
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        const allChildren = portalsContainer.querySelectorAll('*');
        for (const child of allChildren) {
            if (child.textContent && (
                child.textContent.includes('–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã') ||
                child.textContent.includes('‚ÇΩ') ||
                child.textContent.includes('—Ä—É–±')
            )) {
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É:', child);
                return child.closest('[class*="theme"]') || child;
            }
        }

        console.log('‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ portals-container');
        return null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω—ã
     * @param {Element} element –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
     * @returns {boolean} true –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏
     */
    containsPriceHistoryContent(element) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ (–∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∑–∞–º–µ—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
        const rect = element.getBoundingClientRect();
        if (rect.width < 100 || rect.height < 50) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏ –∏–ª–∏ –¥–∞—Ç–∞–º–∏
        const text = element.textContent || '';
        const hasPrice = /\d+[\s,]?\d*\s*‚ÇΩ/.test(text) || /\d+[\s,]?\d*\s*—Ä—É–±/.test(text);
        const hasDate = /\d{1,2}\.\d{1,2}\.\d{4}/.test(text) || /\d{1,2}\s+\w+/.test(text);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
        const hasChartElements = element.querySelector('svg') ||
            element.querySelector('[class*="chart"]') ||
            element.querySelector('[class*="history"]') ||
            element.querySelector('[class*="price"]');

        return (hasPrice && hasDate) || hasChartElements;
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
     * @param {number} ms –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @returns {Promise<void>}
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    testParserMethods() {
        console.log('üß™ === –¢–ï–°–¢ –ú–ï–¢–û–î–û–í –ü–ê–†–°–ï–†–ê ===');

        const methods = [
            'extractExternalId',
            'extractTitle',
            'extractPrice',
            'extractAddress',
            'extractTotalArea',
            'extractFloor',
            'extractFloorsTotal',
            'extractRooms'
        ];

        const results = {};

        methods.forEach(methodName => {
            try {
                const result = this[methodName]();
                results[methodName] = result;
                console.log(`‚úÖ ${methodName}: ${JSON.stringify(result)}`);
            } catch (error) {
                results[methodName] = `–û–®–ò–ë–ö–ê: ${error.message}`;
                console.log(`‚ùå ${methodName}: ${error.message}`);
            }
        });

        console.log('üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', results);
        return results;
    }

    /**
     * –ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Avito
     */
    async startMassParsing(settings) {
        console.log('üöÄ === –ù–ê–ß–ê–õ–û –ú–ê–°–°–û–í–û–ì–û –ü–ê–†–°–ò–ù–ì–ê ===');
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', settings);

        try {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            this.createMonitoringPanel();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            if (!this.isListingsPage()) {
                throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
            }

            this.parsingState = {
                isRunning: true,
                isPaused: false,
                currentPhase: 'collecting', // 'collecting' | 'parsing' | 'completed'
                totalLinks: 0,
                collectedLinks: 0,
                totalProcessed: 0,
                successfullyParsed: 0,
                errors: 0,
                skipped: 0, // –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
                errorLinks: [],
                listings: []
            };

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
            this.updateMonitoringPanel();

            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            console.log('üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
            let allListingLinks = await this.collectListingLinks(settings);
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${allListingLinks.length}`);

            if (allListingLinks.length === 0) {
                this.parsingState.currentPhase = 'completed';
                this.updateMonitoringPanel();
                throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ)
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
            const newListingLinks = await this.filterNewListings(allListingLinks);
            const skippedCount = allListingLinks.length - newListingLinks.length;
            this.parsingState.skipped = skippedCount;
            console.log(`üìä –ò–∑ ${allListingLinks.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${newListingLinks.length} –Ω–æ–≤—ã—Ö, ${skippedCount} –ø—Ä–æ–ø—É—â–µ–Ω–æ`);

            if (newListingLinks.length === 0) {
                console.log('‚ÑπÔ∏è –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                this.parsingState.currentPhase = 'completed';
                this.updateMonitoringPanel();
                return this.parsingState;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.parsingState.currentPhase = 'parsing';
            this.parsingState.totalLinks = newListingLinks.length;
            this.parsingState.collectedLinks = newListingLinks.length;
            this.updateMonitoringPanel();

            // –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            for (let i = 0; i < newListingLinks.length; i++) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
                if (!this.parsingState.isRunning) {
                    console.log('‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
                    break;
                }
                
                // –û–∂–∏–¥–∞–µ–º, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞ –ø–∞—É–∑–µ
                while (this.parsingState.isPaused && this.parsingState.isRunning) {
                    await this.delay(1000);
                }
                
                const link = newListingLinks[i];
                console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${i + 1}/${newListingLinks.length}: ${link} (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ)`);

                try {
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                    const listingData = await this.parseSingleListingFromLink(link);
                    
                    if (listingData) {
                        this.parsingState.successfullyParsed++;
                        this.parsingState.listings.push(listingData);
                        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: ${listingData.title}`);
                    } else {
                        this.parsingState.errors++;
                        this.parsingState.errorLinks.push(link);
                        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ`);
                    }

                } catch (error) {
                    this.parsingState.errors++;
                    this.parsingState.errorLinks.push(link);
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${link}:`, error);
                }

                this.parsingState.totalProcessed++;
                this.updateMonitoringPanel();

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if (i < allListingLinks.length - 1 && this.parsingState.isRunning) {
                    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${settings.delay}–º—Å...`);
                    await this.delay(settings.delay);
                }
            }

            this.parsingState.currentPhase = 'completed';
            this.parsingState.isRunning = false;
            this.updateMonitoringPanel();

            console.log('üéâ === –ú–ê–°–°–û–í–´–ô –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–Å–ù ===');
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', this.parsingState);

            return {
                totalProcessed: this.parsingState.totalProcessed,
                successfullyParsed: this.parsingState.successfullyParsed,
                errors: this.parsingState.errors,
                listings: this.parsingState.listings
            };

        } catch (error) {
            if (this.parsingState) {
                this.parsingState.currentPhase = 'completed';
                this.parsingState.isRunning = false;
                this.updateMonitoringPanel();
            }
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    isListingsPage() {
        const url = window.location.href;
        return (url.includes('/kvartiry/') || url.includes('/komnaty/')) && 
               !url.match(/\/kvartiry\/.*_\d+/) && // –ù–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
               (document.querySelector('.styles-container-rnTvX') || 
                document.querySelector('[data-marker="catalog-serp"]'));
    }

    /**
     * –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    async collectListingLinks(settings) {
        const allLinks = new Set();
        let scrollAttempts = 0;
        const maxScrolls = settings.maxPages || 50; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        let previousCount = 0;
        let stableCount = 0;

        console.log('üìú –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Å—Å—ã–ª–æ–∫ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π...');
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Ç–µ–∫—É—â–∏—Ö —Å—Å—ã–ª–æ–∫
        const collectCurrentLinks = () => {
            console.log('üîç –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
            
            // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            let listings = document.querySelectorAll('.styles-snippet-ZgKUd');
            
            if (listings.length === 0) {
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                const selectors = [
                    '[data-marker="item"]',
                    '.item-snippet',
                    '.snippet-horizontal',
                    '[data-item-id]',
                    '.iva-item-root',
                    '[class*="snippet"]'
                ];
                
                for (const selector of selectors) {
                    listings = document.querySelectorAll(selector);
                    if (listings.length > 0) {
                        console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector}, –Ω–∞–π–¥–µ–Ω–æ: ${listings.length}`);
                        break;
                    }
                }
            } else {
                console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä: .styles-snippet-ZgKUd, –Ω–∞–π–¥–µ–Ω–æ: ${listings.length}`);
            }
            
            let newLinksCount = 0;
            Array.from(listings).forEach((listing, index) => {
                const link = listing.querySelector('a[href*="/kvartiry/"], a[href*="/komnaty/"]');
                
                if (link && link.href && link.href.match(/_\d+/)) {
                    const fullUrl = link.href.includes('http') ? link.href : `https://www.avito.ru${link.href}`;
                    if (!allLinks.has(fullUrl)) {
                        allLinks.add(fullUrl);
                        newLinksCount++;
                        console.log(`üîó –°—Å—ã–ª–∫–∞ ${allLinks.size}: ${fullUrl}`);
                    }
                }
            });
            
            return newLinksCount;
        };

        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä —Å—Å—ã–ª–æ–∫
        let newLinks = collectCurrentLinks();
        console.log(`üìÑ –ù–∞—á–∞–ª—å–Ω—ã–π —Å–±–æ—Ä: ${allLinks.size} —Å—Å—ã–ª–æ–∫`);

        // –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        while (scrollAttempts < maxScrolls) {
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ ${scrollAttempts + 1}/${maxScrolls} (—Ç–µ–∫—É—â–∏—Ö —Å—Å—ã–ª–æ–∫: ${allLinks.size})`);
            
            // –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: –∏—â–µ–º –≤–∏–¥–∏–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            let mainContainer = null;
            
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ –≤–∏–¥–∏–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const containers = [
                '.styles-container-rnTvX.styles-realty-ab__container-YQJua.styles-container_redesign-Xd3mW[tabindex="0"]',
                '.styles-container-rnTvX.styles-realty-ab__container-YQJua',
                '.styles-container-rnTvX',
                '[data-marker="catalog-serp"]',
                '.catalog-serp',
                '.styles-root-IbSNJ',
                '.side-block-wrapper-RLPes'
            ];
            
            for (const selector of containers) {
                const candidate = document.querySelector(selector);
                if (candidate) {
                    const rect = candidate.getBoundingClientRect();
                    const isVisible = rect.top >= -100 && rect.top <= window.innerHeight + 100; // –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏
                    const hasAds = candidate.querySelectorAll('.styles-snippet-ZgKUd').length > 0;
                    
                    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${selector}:`);
                    console.log(`   - –ü–æ–∑–∏—Ü–∏—è: top=${rect.top}, visible=${isVisible}`);
                    console.log(`   - –û–±—ä—è–≤–ª–µ–Ω–∏—è: ${hasAds ? candidate.querySelectorAll('.styles-snippet-ZgKUd').length : 0}`);
                    
                    if (isVisible && hasAds) {
                        mainContainer = candidate;
                        console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –≤–∏–¥–∏–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏: ${selector}`);
                        break;
                    } else if (!mainContainer && candidate) {
                        mainContainer = candidate; // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                        console.log(`‚ö†Ô∏è –ó–∞–ø–∞—Å–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${selector}`);
                    }
                }
            }
            
            if (mainContainer) {
                console.log(`üéØ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${mainContainer.className}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–∏–º –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                const rect = mainContainer.getBoundingClientRect();
                const isVisible = rect.top >= -100 && rect.top <= window.innerHeight + 100;
                
                if (!isVisible) {
                    console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –≤–∏–¥–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                    
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –Ω–µ–≤–∏–¥–∏–º—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                    await this.handleInvisibleContainer();
                    
                } else {
                    console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–∏–º, —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é');
                
                try {
                    // –®–∞–≥ 1: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
                    
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º scrollIntoView
                    mainContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    await this.delay(1500);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                    let rect = mainContainer.getBoundingClientRect();
                    console.log(`üìê –ü–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ scrollIntoView: top=${rect.top}, left=${rect.left}, width=${rect.width}, height=${rect.height}`);
                    
                    // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—Å–µ –µ—â–µ –Ω–µ –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                    if (rect.top < 0 || rect.top > window.innerHeight) {
                        console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥');
                        
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º offsetTop –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                        const containerOffsetTop = mainContainer.offsetTop || 0;
                        const targetScrollPosition = Math.max(0, containerOffsetTop - 100); // –û—Å—Ç–∞–≤–ª—è–µ–º 100px —Å–≤–µ—Ä—Ö—É
                        
                        console.log(`üìç –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫ –ø–æ–∑–∏—Ü–∏–∏: ${targetScrollPosition} (offsetTop –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${containerOffsetTop})`);
                        window.scrollTo({ top: targetScrollPosition, behavior: 'smooth' });
                        await this.delay(1500);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                        rect = mainContainer.getBoundingClientRect();
                        console.log(`üìê –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: top=${rect.top}, –≤–∏–¥–∏–º–æ—Å—Ç—å: ${rect.top >= 0 && rect.top <= window.innerHeight}`);
                    } else {
                        console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏');
                    }
                    
                    // –®–∞–≥ 2: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    mainContainer.focus();
                    mainContainer.setAttribute('tabindex', '0');
                    
                    // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫—Ä–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–∫ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª + 1px)
                    const clickX = rect.left + 1;
                    const clickY = rect.top + 1;
                    
                    console.log(`üëÜ –ö–ª–∏–∫–∞–µ–º –ø–æ –∫—Ä–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª + 1px): x=${clickX}, y=${clickY}`);
                    
                    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    const clickEvent = new MouseEvent('click', {
                        clientX: clickX,
                        clientY: clickY,
                        bubbles: true,
                        cancelable: true
                    });
                    mainContainer.dispatchEvent(clickEvent);
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π focus –∏ mousedown –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    const mouseDownEvent = new MouseEvent('mousedown', {
                        clientX: clickX,
                        clientY: clickY,
                        bubbles: true,
                        cancelable: true
                    });
                    mainContainer.dispatchEvent(mouseDownEvent);
                    
                    await this.delay(500);
                    
                    // –®–∞–≥ 3: –ò—â–µ–º –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä 
                    let scrollableContainer = mainContainer;
                    
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    if (mainContainer.scrollHeight > mainContainer.clientHeight) {
                        console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π: scrollHeight=${mainContainer.scrollHeight}, clientHeight=${mainContainer.clientHeight}`);
                        scrollableContainer = mainContainer;
                    } else {
                        // –ò—â–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –¥–æ—á–µ—Ä–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
                        const possibleScrollContainers = mainContainer.querySelectorAll('div');
                        let bestContainer = null;
                        let bestSize = 0;
                        
                        for (const container of possibleScrollContainers) {
                            if (container.scrollHeight > container.clientHeight) {
                                const containerSize = container.scrollHeight * container.clientHeight;
                                console.log(`üîç –ù–∞–π–¥–µ–Ω –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${container.className || '–±–µ–∑ –∫–ª–∞—Å—Å–∞'}, —Ä–∞–∑–º–µ—Ä: ${containerSize}px¬≤`);
                                
                                // –ë–µ—Ä–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø–ª–æ—â–∞–¥—å—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                                if (containerSize > bestSize && containerSize > 10000) { // –ú–∏–Ω–∏–º—É–º 10000px¬≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –º–µ–ª–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                                    bestContainer = container;
                                    bestSize = containerSize;
                                }
                            }
                        }
                        
                        if (bestContainer) {
                            console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${bestContainer.className || '–±–µ–∑ –∫–ª–∞—Å—Å–∞'}`);
                            scrollableContainer = bestContainer;
                        } else {
                            console.log(`‚ö†Ô∏è –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π`);
                        }
                    }
                    
                    const initialScrollTop = scrollableContainer.scrollTop;
                    const initialScrollHeight = scrollableContainer.scrollHeight;
                    const initialClientHeight = scrollableContainer.clientHeight;
                    console.log(`üìê –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: scrollTop=${initialScrollTop}, scrollHeight=${initialScrollHeight}, clientHeight=${initialClientHeight}`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –≤–æ–æ–±—â–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
                    if (initialScrollHeight <= initialClientHeight) {
                        console.log('üìè –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ (–≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∏–¥–∏–º), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏—à–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
                        
                        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ scrollTop —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                        console.log('üìè –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ, –æ–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏...');
                        await this.delay(3000);
                        
                    } else {
                        // –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                        console.log('üìè –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏');
                        
                        // –®–∞–≥ 4: –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                        const scrollAmount = Math.max(1000, initialClientHeight * 0.8); // –ú–∏–Ω–∏–º—É–º 1000px –∏–ª–∏ 80% –≤—ã—Å–æ—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                        const targetScroll = Math.min(initialScrollTop + scrollAmount, initialScrollHeight - initialClientHeight);
                        
                        console.log(`üîÑ –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –Ω–∞ ${scrollAmount}px (–¥–æ –ø–æ–∑–∏—Ü–∏–∏ ${targetScroll})`);
                        
                        // –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –†–ê–ë–û–¢–ê–Æ–©–ò–ô –ú–ï–¢–û–î: –ü—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ scrollTop
                        scrollableContainer.scrollTop = targetScroll;
                        console.log(`üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ scrollTop=${targetScroll}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç=${scrollableContainer.scrollTop}`);
                        
                        await this.delay(2000);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        const finalScrollTop = scrollableContainer.scrollTop;
                        const scrollDistance = finalScrollTop - initialScrollTop;
                        console.log(`üìè –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –Ω–∞—á–∞–ª—å–Ω–∞—è=${initialScrollTop}, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è=${finalScrollTop}, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è=${scrollDistance}px`);
                        
                        console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');
                        await this.delay(2000);
                    }
                    
                    // –®–∞–≥ 5: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                    console.log('‚è≥ –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...');
                    await this.delay(4000);
                    
                    console.log(`‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
                    
                } catch (e) {
                    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', e);
                }
                }
            } else {
                console.log('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
                
                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                window.scrollTo({
                    top: document.body.scrollHeight,
                    behavior: 'smooth'
                });
                
                await this.delay(2000);
            }
            
            // –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            newLinks = collectCurrentLinks();
            console.log(`üìÑ –ü–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ ${scrollAttempts + 1}: ${allLinks.size} —Å—Å—ã–ª–æ–∫ (+${newLinks})`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if (this.parsingState) {
                this.parsingState.collectedLinks = allLinks.size;
                this.updateMonitoringPanel();
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
            if (allLinks.size === previousCount) {
                stableCount++;
                console.log(`‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: ${allLinks.size} (–ø–æ–ø—ã—Ç–∫–∞ ${stableCount}/5)`);
                if (stableCount >= 5) {
                    console.log('üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä');
                    break;
                }
            } else {
                stableCount = 0;
                console.log(`‚úÖ –ù–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞–π–¥–µ–Ω—ã: +${allLinks.size - previousCount} (–≤—Å–µ–≥–æ: ${allLinks.size})`);
            }
            
            previousCount = allLinks.size;
            scrollAttempts++;
        }

        // –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        console.log(`üîç –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫...`);
        const allPageLinks = document.querySelectorAll('a[href*="/kvartiry/"], a[href*="/komnaty/"]');
        
        let additionalCount = 0;
        allPageLinks.forEach(link => {
            if (link.href && link.href.match(/_\d+/)) {
                const fullUrl = link.href.includes('http') ? link.href : `https://www.avito.ru${link.href}`;
                if (!allLinks.has(fullUrl)) {
                    allLinks.add(fullUrl);
                    additionalCount++;
                }
            }
        });
        
        if (additionalCount > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${additionalCount} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫`);
        }

        console.log(`üéØ –ò—Ç–æ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: ${allLinks.size}`);
        console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–±–æ—Ä–∞: –Ω–∞–π–¥–µ–Ω–æ ${allLinks.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞`);
        return Array.from(allLinks);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    createMonitoringPanel() {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–Ω–µ–ª—å
        const existingPanel = document.getElementById('neocenka-monitoring-panel');
        if (existingPanel) {
            existingPanel.remove();
        }

        const panel = document.createElement('div');
        panel.id = 'neocenka-monitoring-panel';
        panel.innerHTML = `
            <div class="neocenka-panel-header">
                <h3>üöÄ –ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥</h3>
                <button id="neocenka-close-panel">√ó</button>
            </div>
            <div class="neocenka-panel-content">
                <div class="neocenka-phase" id="neocenka-phase">
                    <span class="neocenka-phase-icon">üîç</span>
                    <span class="neocenka-phase-text">–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...</span>
                </div>
                
                <div class="neocenka-progress-section" id="neocenka-collecting-section">
                    <div class="neocenka-progress-label">–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <span id="neocenka-collected-count">0</span></div>
                    <div class="neocenka-progress-bar">
                        <div class="neocenka-progress-fill neocenka-collecting-bar" id="neocenka-collecting-progress" style="width: 0%"></div>
                    </div>
                </div>
                
                <div class="neocenka-progress-section" id="neocenka-parsing-section" style="display: none;">
                    <div class="neocenka-progress-label">–ü–∞—Ä—Å–∏–Ω–≥: <span id="neocenka-parsed-count">0</span> / <span id="neocenka-total-count">0</span></div>
                    <div class="neocenka-progress-bar">
                        <div class="neocenka-progress-fill" id="neocenka-parsing-progress" style="width: 0%"></div>
                    </div>
                    <div class="neocenka-stats">
                        <span class="neocenka-stat neocenka-success">‚úÖ <span id="neocenka-success-count">0</span></span>
                        <span class="neocenka-stat neocenka-error">‚ùå <span id="neocenka-error-count">0</span></span>
                    </div>
                </div>
                
                <div class="neocenka-controls" id="neocenka-controls">
                    <button id="neocenka-pause-btn" class="neocenka-btn neocenka-btn-warning">‚è∏Ô∏è –ü–∞—É–∑–∞</button>
                    <button id="neocenka-stop-btn" class="neocenka-btn neocenka-btn-danger">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                </div>
                
                <div class="neocenka-retry-section" id="neocenka-retry-section" style="display: none;">
                    <div class="neocenka-retry-message">
                        –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: <span id="neocenka-retry-count">0</span> –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                    </div>
                    <button id="neocenka-retry-btn" class="neocenka-btn neocenka-btn-primary">üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥</button>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        const style = document.createElement('style');
        style.textContent = `
            #neocenka-monitoring-panel {
                position: fixed;
                bottom: 20px;
                right: 20px;
                width: 320px;
                background: #fff;
                border-radius: 12px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.12);
                border: 1px solid #e5e7eb;
                z-index: 10000;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                font-size: 14px;
            }
            
            .neocenka-panel-header {
                padding: 16px 20px;
                border-bottom: 1px solid #e5e7eb;
                display: flex;
                justify-content: space-between;
                align-items: center;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border-radius: 12px 12px 0 0;
            }
            
            .neocenka-panel-header h3 {
                margin: 0;
                font-size: 16px;
                font-weight: 600;
            }
            
            #neocenka-close-panel {
                background: none;
                border: none;
                color: white;
                font-size: 20px;
                cursor: pointer;
                padding: 0;
                width: 24px;
                height: 24px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 4px;
                transition: background-color 0.2s;
            }
            
            #neocenka-close-panel:hover {
                background-color: rgba(255,255,255,0.2);
            }
            
            .neocenka-panel-content {
                padding: 20px;
            }
            
            .neocenka-phase {
                display: flex;
                align-items: center;
                gap: 8px;
                margin-bottom: 16px;
                padding: 12px;
                background: #f8fafc;
                border-radius: 8px;
                font-weight: 500;
            }
            
            .neocenka-phase-icon {
                font-size: 16px;
            }
            
            .neocenka-progress-section {
                margin-bottom: 16px;
            }
            
            .neocenka-progress-label {
                margin-bottom: 8px;
                font-weight: 500;
                color: #374151;
            }
            
            .neocenka-progress-bar {
                width: 100%;
                height: 8px;
                background: #e5e7eb;
                border-radius: 4px;
                overflow: hidden;
            }
            
            .neocenka-progress-fill {
                height: 100%;
                transition: width 0.3s ease;
                border-radius: 4px;
                position: relative;
                overflow: hidden;
            }
            
            .neocenka-collecting-bar {
                background: linear-gradient(90deg, #3b82f6, #1d4ed8);
                animation: neocenka-collecting-pulse 2s ease-in-out infinite;
            }
            
            .neocenka-progress-fill:not(.neocenka-collecting-bar) {
                background: linear-gradient(90deg, #10b981, #059669);
            }
            
            @keyframes neocenka-collecting-pulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.7; }
            }
            
            .neocenka-progress-fill::after {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
                animation: neocenka-progress-shine 1.5s ease-in-out infinite;
            }
            
            @keyframes neocenka-progress-shine {
                0% { left: -100%; }
                100% { left: 100%; }
            }
            
            .neocenka-stats {
                display: flex;
                gap: 16px;
                margin-top: 8px;
            }
            
            .neocenka-stat {
                font-weight: 500;
            }
            
            .neocenka-success {
                color: #059669;
            }
            
            .neocenka-error {
                color: #dc2626;
            }
            
            .neocenka-controls {
                display: flex;
                gap: 8px;
                margin-bottom: 16px;
            }
            
            .neocenka-btn {
                flex: 1;
                padding: 8px 12px;
                border: none;
                border-radius: 6px;
                font-size: 13px;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.2s;
            }
            
            .neocenka-btn-primary {
                background: #3b82f6;
                color: white;
            }
            
            .neocenka-btn-primary:hover {
                background: #2563eb;
            }
            
            .neocenka-btn-warning {
                background: #f59e0b;
                color: white;
            }
            
            .neocenka-btn-warning:hover {
                background: #d97706;
            }
            
            .neocenka-btn-danger {
                background: #ef4444;
                color: white;
            }
            
            .neocenka-btn-danger:hover {
                background: #dc2626;
            }
            
            .neocenka-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }
            
            .neocenka-retry-section {
                background: #fef3c7;
                padding: 12px;
                border-radius: 8px;
                border: 1px solid #f59e0b;
            }
            
            .neocenka-retry-message {
                margin-bottom: 8px;
                color: #92400e;
                font-weight: 500;
                font-size: 13px;
            }
        `;
        
        document.head.appendChild(style);
        document.body.appendChild(panel);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.getElementById('neocenka-close-panel').addEventListener('click', () => {
            panel.remove();
        });

        document.getElementById('neocenka-pause-btn').addEventListener('click', () => {
            this.toggleParsing();
        });

        document.getElementById('neocenka-stop-btn').addEventListener('click', () => {
            this.stopParsing();
        });

        document.getElementById('neocenka-retry-btn').addEventListener('click', () => {
            this.retryFailedParsing();
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    updateMonitoringPanel() {
        if (!this.parsingState) return;

        const phase = document.getElementById('neocenka-phase');
        const collectingSection = document.getElementById('neocenka-collecting-section');
        const parsingSection = document.getElementById('neocenka-parsing-section');
        const retrySection = document.getElementById('neocenka-retry-section');
        const controls = document.getElementById('neocenka-controls');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∑—É
        if (this.parsingState.currentPhase === 'collecting') {
            phase.querySelector('.neocenka-phase-icon').textContent = 'üîç';
            phase.querySelector('.neocenka-phase-text').textContent = '–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...';
            collectingSection.style.display = 'block';
            parsingSection.style.display = 'none';
        } else if (this.parsingState.currentPhase === 'parsing') {
            phase.querySelector('.neocenka-phase-icon').textContent = 'üöÄ';
            phase.querySelector('.neocenka-phase-text').textContent = this.parsingState.isPaused ? '–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞ –ø–∞—É–∑–µ' : '–ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...';
            collectingSection.style.display = 'none';
            parsingSection.style.display = 'block';
        } else if (this.parsingState.currentPhase === 'completed') {
            phase.querySelector('.neocenka-phase-icon').textContent = '‚úÖ';
            phase.querySelector('.neocenka-phase-text').textContent = '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω';
            controls.style.display = 'none';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±–æ—Ä–∞
        document.getElementById('neocenka-collected-count').textContent = this.parsingState.collectedLinks;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å–±–æ—Ä–∞ (–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞)
        if (this.parsingState.currentPhase === 'collecting') {
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            const estimatedProgress = Math.min((this.parsingState.collectedLinks / 20) * 100, 90); // –ú–∞–∫—Å–∏–º—É–º 90% –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            document.getElementById('neocenka-collecting-progress').style.width = estimatedProgress + '%';
        } else if (this.parsingState.collectedLinks > 0) {
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞ 100% –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–∞—Ä—Å–∏–Ω–≥—É
            document.getElementById('neocenka-collecting-progress').style.width = '100%';
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
        if (this.parsingState.totalLinks > 0) {
            const progressPercent = (this.parsingState.totalProcessed / this.parsingState.totalLinks) * 100;
            document.getElementById('neocenka-parsing-progress').style.width = progressPercent + '%';
            document.getElementById('neocenka-parsed-count').textContent = this.parsingState.totalProcessed;
            document.getElementById('neocenka-total-count').textContent = this.parsingState.totalLinks;
            document.getElementById('neocenka-success-count').textContent = this.parsingState.successfullyParsed;
            document.getElementById('neocenka-error-count').textContent = this.parsingState.errors;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ –±–∞–∑–µ)
        if (this.parsingState.skipped > 0) {
            const skippedElement = document.getElementById('neocenka-skipped-count');
            if (skippedElement) {
                skippedElement.textContent = this.parsingState.skipped;
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–∫—Ä—ã—Ç
                const skippedSection = skippedElement.closest('.neocenka-stat-item');
                if (skippedSection) {
                    skippedSection.style.display = 'block';
                }
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã
        const pauseBtn = document.getElementById('neocenka-pause-btn');
        if (pauseBtn) {
            if (this.parsingState.isPaused) {
                pauseBtn.innerHTML = '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
                pauseBtn.className = 'neocenka-btn neocenka-btn-primary';
            } else {
                pauseBtn.innerHTML = '‚è∏Ô∏è –ü–∞—É–∑–∞';
                pauseBtn.className = 'neocenka-btn neocenka-btn-warning';
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
        if (this.parsingState.currentPhase === 'completed' && this.parsingState.errors > 0) {
            document.getElementById('neocenka-retry-count').textContent = this.parsingState.errors;
            retrySection.style.display = 'block';
        } else {
            retrySection.style.display = 'none';
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    toggleParsing() {
        if (this.parsingState) {
            this.parsingState.isPaused = !this.parsingState.isPaused;
            this.updateMonitoringPanel();
            console.log(this.parsingState.isPaused ? '‚è∏Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É' : '‚ñ∂Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω');
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    stopParsing() {
        if (this.parsingState) {
            this.parsingState.isRunning = false;
            this.parsingState.isPaused = false;
            this.parsingState.currentPhase = 'completed';
            this.updateMonitoringPanel();
            console.log('‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        }
    }

    /**
     * –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–æ—á–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async retryFailedParsing() {
        if (!this.parsingState || this.parsingState.errorLinks.length === 0) return;

        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ ${this.parsingState.errorLinks.length} –æ—à–∏–±–æ—á–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);

        const errorLinks = [...this.parsingState.errorLinks];
        this.parsingState.errorLinks = [];
        this.parsingState.errors = 0;
        this.parsingState.currentPhase = 'parsing';
        this.parsingState.isRunning = true;
        this.parsingState.isPaused = false;
        this.parsingState.totalLinks = errorLinks.length;
        this.parsingState.totalProcessed = 0;
        this.updateMonitoringPanel();

        // –ü–∞—Ä—Å–∏–º –æ—à–∏–±–æ—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        for (let i = 0; i < errorLinks.length; i++) {
            if (!this.parsingState.isRunning) break;
            
            while (this.parsingState.isPaused && this.parsingState.isRunning) {
                await this.delay(1000);
            }
            
            const link = errorLinks[i];
            console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä ${i + 1}/${errorLinks.length}: ${link}`);

            try {
                const listingData = await this.parseSingleListingFromLink(link);
                
                if (listingData) {
                    this.parsingState.successfullyParsed++;
                    this.parsingState.listings.push(listingData);
                    console.log(`‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${listingData.title}`);
                } else {
                    this.parsingState.errors++;
                    this.parsingState.errorLinks.push(link);
                }
            } catch (error) {
                this.parsingState.errors++;
                this.parsingState.errorLinks.push(link);
                console.error(`‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ ${link}:`, error);
            }

            this.parsingState.totalProcessed++;
            this.updateMonitoringPanel();

            if (i < errorLinks.length - 1 && this.parsingState.isRunning) {
                await this.delay(2000); // –ú–µ–Ω—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–æ–≤
            }
        }

        this.parsingState.currentPhase = 'completed';
        this.parsingState.isRunning = false;
        this.updateMonitoringPanel();
        
        console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∏–¥–∏–º—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ - –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async handleInvisibleContainer() {
        console.log('üåê –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ document –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        document.body.focus();
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑
        window.scrollBy({ top: 800, behavior: 'smooth' });
        await this.delay(1000);
        
        // –°–µ—Ä–∏—è –Ω–∞–∂–∞—Ç–∏–π Page Down –∏ —Å—Ç—Ä–µ–ª–æ–∫ –≤–Ω–∏–∑ –Ω–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for (let i = 0; i < 5; i++) {
            // Page Down
            const pageDownEvent = new KeyboardEvent('keydown', {
                key: 'PageDown',
                code: 'PageDown',
                bubbles: true,
                cancelable: true
            });
            document.dispatchEvent(pageDownEvent);
            await this.delay(200);
            
            // –ù–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç–∏–π —Å—Ç—Ä–µ–ª–∫–∏ –≤–Ω–∏–∑
            for (let j = 0; j < 10; j++) {
                const arrowDownEvent = new KeyboardEvent('keydown', {
                    key: 'ArrowDown',
                    code: 'ArrowDown',
                    bubbles: true,
                    cancelable: true
                });
                document.dispatchEvent(arrowDownEvent);
                await this.delay(50);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            const currentCount = document.querySelectorAll('.styles-snippet-ZgKUd').length;
            console.log(`üåê –ü–æ—Å–ª–µ —Ü–∏–∫–ª–∞ ${i + 1}: –Ω–∞–π–¥–µ–Ω–æ ${currentCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            
            if (currentCount > 10) {
                console.log(`‚úÖ –ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã!`);
                break;
            }
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ
     */
    async parseSingleListingFromLink(url) {
        return new Promise((resolve) => {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ background script –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            chrome.runtime.sendMessage({
                action: 'openTabAndParse',
                url: url
                // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º segmentId - –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            }, (response) => {
                if (chrome.runtime.lastError) {
                    console.error('–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å background script:', chrome.runtime.lastError);
                    resolve(null);
                    return;
                }

                if (response && response.success) {
                    resolve(response.data);
                } else {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ:', response?.error);
                    resolve(null);
                }
            });
        });
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
     */
    async filterNewListings(listingLinks) {
        const newLinks = [];
        
        console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é ${listingLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...`);
        
        for (let i = 0; i < listingLinks.length; i++) {
            const link = listingLinks[i];
            try {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
                const patterns = [
                    /\/kvartiry\/.*_(\d+)(?:\?|#|$)/,  // –ü–æ–ª–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
                    /_(\d+)(?:\?|#|$)/,                // ID –ø–µ—Ä–µ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    /\/(\d{8,})(?:\?|#|$)/             // –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö ID
                ];
                
                let externalId = null;
                for (const pattern of patterns) {
                    const match = link.match(pattern);
                    if (match && match[1]) {
                        externalId = match[1];
                        break;
                    }
                }
                
                if (!externalId) {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Å—Å—ã–ª–∫–∏: ${link}`);
                    continue;
                }
                console.log(`üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${i + 1}/${listingLinks.length}: ID ${externalId} (—Ç–∏–ø: ${typeof externalId}), –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${link}`);
                
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ ID - —Å—Ç—Ä–æ–∫–∞
                externalId = String(externalId);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ
                const existingListing = await this.checkListingExists('avito', externalId);
                console.log(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è ID ${externalId}: exists=${existingListing}`);
                
                if (!existingListing) {
                    newLinks.push(link);
                    console.log(`‚úÖ –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${externalId}`);
                } else {
                    console.log(`‚è≠Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${externalId}`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${link}:`, error);
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                newLinks.push(link);
                console.log(`‚ö†Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${link}`);
            }
        }
        
        console.log(`üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${newLinks.length} –Ω–æ–≤—ã—Ö –∏–∑ ${listingLinks.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö`);
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö external_id –≤ –±–∞–∑–µ
        try {
            const allListings = await this.getAllListingsForDebug();
            console.log(`üóÑÔ∏è –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ: ${allListings.length}`);
            const avitoListings = allListings.filter(l => l.source === 'avito');
            console.log(`üü° Avito –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ: ${avitoListings.length}`);
            
            if (avitoListings.length > 0) {
                console.log(`üìã –ü–µ—Ä–≤—ã–µ 5 Avito external_id –≤ –±–∞–∑–µ:`, avitoListings.slice(0, 5).map(l => `"${l.external_id}" (${typeof l.external_id})`));
            }
        } catch (error) {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ:`, error);
        }
        
        return newLinks;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    async getAllListingsForDebug() {
        try {
            const response = await chrome.runtime.sendMessage({
                action: 'getAllListings'
            });
            
            if (response && response.success) {
                return response.listings || [];
            } else {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
                return [];
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:', error);
            return [];
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async checkListingExists(source, externalId) {
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ background script –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const response = await chrome.runtime.sendMessage({
                action: 'checkListingExists',
                source: source,
                externalId: externalId
            });
            
            const exists = response && response.success && response.exists;
            return exists;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
            return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã–º
        }
    }

    /**
     * –ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
     */
    async parseMassByFilter(areaId) {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É –¥–ª—è –æ–±–ª–∞—Å—Ç–∏:', areaId);
        
        try {
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ñ–∏–ª—å—Ç—Ä–∞ (—Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
            const isCatalogPage = window.location.href.includes('/kvartiry/') && 
                                  !window.location.href.match(/\/kvartiry\/.*_\d+/);
            
            if (!isCatalogPage) {
                throw new Error('–ù–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
            const listingData = await this.extractListingLinksWithPriceCheck();
            const { allLinks, priorityLinks } = listingData;
            
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${allLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞`);
            console.log(`üí± –ò–∑ –Ω–∏—Ö ${priorityLinks.length} —Å –∏–∑–º–µ–Ω–∏–≤—à–∏–º–∏—Å—è —Ü–µ–Ω–∞–º–∏`);
            
            if (allLinks.length === 0) {
                return { parsed: 0, errors: 1 };
            }

            // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–∏–≤—à–∏–º–∏—Å—è —Ü–µ–Ω–∞–º–∏
            const linksToProcess = [
                ...priorityLinks, // –°–Ω–∞—á–∞–ª–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–∏–≤—à–∏–º–∏—Å—è —Ü–µ–Ω–∞–º–∏
                ...allLinks.filter(link => !priorityLinks.includes(link)) // –ó–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            ];

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
            const maxListings = Math.min(linksToProcess.length, 10);
            const finalLinksToProcess = linksToProcess.slice(0, maxListings);
            
            let parsed = 0;
            let errors = 0;

            // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            for (const [index, link] of finalLinksToProcess.entries()) {
                const isPriority = priorityLinks.includes(link);
                const statusPrefix = isPriority ? 'üí± [–¶–ï–ù–ê –ò–ó–ú–ï–ù–ï–ù–ê]' : 'üìÑ';
                try {
                    console.log(`${statusPrefix} –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${index + 1}/${finalLinksToProcess.length}: ${link}`);
                    
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ —á–µ—Ä–µ–∑ background script
                    const result = await chrome.runtime.sendMessage({
                        action: 'openTabAndParse',
                        url: link
                    });

                    if (result && result.success) {
                        parsed++;
                        console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–ø–∞—Ä—Å–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
                    } else {
                        errors++;
                        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${result?.error}`);
                    }
                    
                    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ ${link}:`, error);
                    errors++;
                }
            }

            console.log(`üìä –ú–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ: ${parsed}, –æ—à–∏–±–æ–∫: ${errors}`);
            return { parsed, errors };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            return { parsed: 0, errors: 1 };
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞
     */
    extractListingLinks() {
        const links = [];
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ Avito
        const selectors = [
            'a[href*="/kvartiry/"][href*="_"]',
            '[data-marker="item"] a[href*="/kvartiry/"]',
            '.iva-item-titleStep-pdebR a',
            '.iva-item-title a'
        ];

        for (const selector of selectors) {
            const elements = document.querySelectorAll(selector);
            
            for (const element of elements) {
                const href = element.href;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
                if (href && 
                    href.includes('/kvartiry/') && 
                    href.match(/\/kvartiry\/.*_\d+/) &&
                    !links.includes(href)) {
                    
                    links.push(href);
                }
            }
        }

        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        return [...new Set(links)];
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    extractPriceFromListingElement(listingElement) {
        try {
            // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ HTML)
            const priceSelectors = [
                '[data-marker="item-price"] meta[itemprop="price"]', // –ú–µ—Ç–∞—Ç–µ–≥ —Å —Ü–µ–Ω–æ–π
                '[data-marker="item-price"] [itemprop="price"]',    // –≠–ª–µ–º–µ–Ω—Ç —Å itemprop="price"
                '[data-marker="item-price"]',                       // –ü—Ä—è–º–æ–π –º–∞—Ä–∫–µ—Ä —Ü–µ–Ω—ã
                '.price-root-tm5ut .price-price-ZMrtW',             // –ò–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML
                '.price-priceContent-I4I3p strong span',           // –¢–µ–∫—Å—Ç —Ü–µ–Ω—ã
                '[class*="price"] strong',                          // –û–±—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ü–µ–Ω—ã
                '[class*="Price"] strong'                           // –í–∞—Ä–∏–∞–Ω—Ç —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
            ];

            for (const selector of priceSelectors) {
                const priceElement = listingElement.querySelector(selector);
                if (priceElement) {
                    let priceText = '';
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –º–µ—Ç–∞—Ç–µ–≥, –±–µ—Ä–µ–º content
                    if (priceElement.tagName === 'META') {
                        priceText = priceElement.getAttribute('content');
                    } else {
                        priceText = priceElement.textContent || priceElement.innerText || '';
                    }
                    
                    // –û—á–∏—â–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ü–µ–Ω—É
                    const cleanPrice = priceText.replace(/[^\d]/g, '');
                    if (cleanPrice) {
                        const price = parseInt(cleanPrice);
                        if (price > 0) {
                            this.debugLog(`üí∞ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ: ${price} (—Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector})`);
                            return price;
                        }
                    }
                }
            }

            this.debugLog('‚ö†Ô∏è –¶–µ–Ω–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return null;

        } catch (error) {
            this.debugLog('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞:', error);
            return null;
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ external_id –∏–∑ —Å—Å—ã–ª–∫–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞
     */
    extractExternalIdFromLink(listingElement) {
        try {
            const linkElement = listingElement.querySelector('a[href*="/kvartiry/"][href*="_"]');
            if (!linkElement) {
                this.debugLog('‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞');
                return null;
            }

            const href = linkElement.href;
            const patterns = [
                /\/kvartiry\/.*_(\d+)(?:\?|#|$)/,  // –ü–æ–ª–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
                /_(\d+)(?:\?|#|$)/,                // ID –ø–µ—Ä–µ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                /\/(\d{8,})(?:\?|#|$)/             // –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö ID
            ];

            for (const pattern of patterns) {
                const match = href.match(pattern);
                if (match && match[1]) {
                    const externalId = String(match[1]);
                    this.debugLog(`üÜî –ù–∞–π–¥–µ–Ω external_id –≤ —Å—Å—ã–ª–∫–µ: ${externalId}`);
                    return externalId;
                }
            }

            this.debugLog('‚ö†Ô∏è External ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Å—ã–ª–∫–µ');
            return null;

        } catch (error) {
            this.debugLog('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è external_id –∏–∑ —Å—Å—ã–ª–∫–∏:', error);
            return null;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
     */
    async checkPriceChangeInListing(listingElement) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º external_id –∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            const externalId = this.extractExternalIdFromLink(listingElement);
            const currentPrice = this.extractPriceFromListingElement(listingElement);

            if (!externalId || !currentPrice) {
                this.debugLog('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–ª–∏ —Ü–µ–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const result = await chrome.runtime.sendMessage({
                action: 'checkListingExists',
                source: 'avito',
                externalId: externalId
            });

            if (result && result.success && result.exists) {
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                const allListingsResult = await chrome.runtime.sendMessage({
                    action: 'getAllListings'
                });

                if (allListingsResult && allListingsResult.success) {
                    const existingListing = allListingsResult.listings.find(
                        l => l.source === 'avito' && l.external_id === externalId
                    );

                    if (existingListing && existingListing.price !== currentPrice) {
                        this.debugLog(`üí± –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è ID ${externalId}: ${existingListing.price} ‚Üí ${currentPrice}`);
                        return true; // –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏—Ç—å
                    } else {
                        this.debugLog(`‚úÖ –¶–µ–Ω–∞ –¥–ª—è ID ${externalId} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: ${currentPrice}`);
                        return false; // –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                    }
                } else {
                    this.debugLog('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω');
                    return false;
                }
            } else {
                this.debugLog(`üÜï –û–±—ä—è–≤–ª–µ–Ω–∏–µ ID ${externalId} –Ω–æ–≤–æ–µ, –±—É–¥–µ—Ç —Å–ø–∞—Ä—Å–µ–Ω–æ`);
                return false; // –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω—ã
            }

        } catch (error) {
            this.debugLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
            return false;
        }
    }

    /**
     * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
     */
    async extractListingLinksWithPriceCheck() {
        const links = [];
        const linksNeedingUpdate = []; // –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–∏–≤—à–∏–º–∏—Å—è —Ü–µ–Ω–∞–º–∏
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –∞ –Ω–µ —Å—Å—ã–ª–∫–∏)
        const listingSelectors = [
            '[data-marker="item"]',                     // –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä–∫–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
            '.styles-snippet-ZgKUd',                    // –ò–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ HTML
            '.iva-item-root',                           // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            '[class*="snippet"]',
            '[class*="item-root"]'
        ];

        for (const selector of listingSelectors) {
            const listingElements = document.querySelectorAll(selector);
            this.debugLog(`üìã –ù–∞–π–¥–µ–Ω–æ ${listingElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`);
            
            for (const listingElement of listingElements) {
                try {
                    // –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
                    const linkElement = listingElement.querySelector('a[href*="/kvartiry/"][href*="_"]');
                    if (!linkElement) continue;

                    const href = linkElement.href;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                    if (href && 
                        href.includes('/kvartiry/') && 
                        href.match(/\/kvartiry\/.*_\d+/) &&
                        !links.includes(href)) {
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                        const priceChanged = await this.checkPriceChangeInListing(listingElement);
                        
                        if (priceChanged) {
                            this.debugLog(`üí± –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–∏–∑–º–µ–Ω–µ–Ω–∞ —Ü–µ–Ω–∞): ${href}`);
                            linksNeedingUpdate.push(href);
                        }
                        
                        links.push(href);
                    }
                } catch (error) {
                    this.debugLog('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
                }
            }
            
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —ç—Ç–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É, –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –¥—Ä—É–≥–∏–º
            if (listingElements.length > 0) {
                break;
            }
        }

        this.debugLog(`üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${links.length}, —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ü–µ–Ω: ${linksNeedingUpdate.length}`);
        
        return {
            allLinks: [...new Set(links)],
            priorityLinks: [...new Set(linksNeedingUpdate)]
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–µ
     */
    initScrollPriceTracking() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–∞–ª–æ–≥–∞
            const isCatalogPage = window.location.href.includes('/kvartiry/') && 
                                  !window.location.href.match(/\/kvartiry\/.*_\d+/);
            
            if (!isCatalogPage) {
                this.debugLog('üìç –ù–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–∞–ª–æ–≥–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω –æ—Ç–∫–ª—é—á–µ–Ω–æ');
                return;
            }

            this.debugLog('üëÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–µ');

            // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    mutation.addedNodes.forEach((node) => {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                            const newListings = node.querySelectorAll ? 
                                node.querySelectorAll('[data-marker="item"], .styles-snippet-ZgKUd, [class*="snippet"]') : 
                                [];
                            
                            if (newListings.length > 0) {
                                this.debugLog(`üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–µ: ${newListings.length}`);
                                this.checkNewListingsForPriceChanges(newListings);
                            }
                        }
                    });
                });
            });

            // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            const listingContainer = document.querySelector('[data-marker="catalog-serp"]') || 
                                   document.querySelector('.items-items') || 
                                   document.querySelector('.catalog-serp') ||
                                   document.body;

            if (listingContainer) {
                observer.observe(listingContainer, {
                    childList: true,
                    subtree: true
                });
                this.debugLog('‚úÖ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            } else {
                this.debugLog('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            setTimeout(() => {
                this.checkExistingListingsForPriceChanges();
            }, 2000);

        } catch (error) {
            this.debugLog('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
     */
    async checkNewListingsForPriceChanges(listingElements) {
        try {
            this.debugLog(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${listingElements.length} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω`);
            
            for (const listingElement of listingElements) {
                const priceChanged = await this.checkPriceChangeInListing(listingElement);
                
                if (priceChanged) {
                    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                    const linkElement = listingElement.querySelector('a[href*="/kvartiry/"][href*="_"]');
                    if (linkElement) {
                        const href = linkElement.href;
                        this.debugLog(`üí± –ù–ê–ô–î–ï–ù–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´! –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥: ${href}`);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –º–µ—Ç–∫—É
                        this.markListingAsChanged(listingElement);
                        
                        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥
                        this.queueListingForReparse(href);
                    }
                }
            }
        } catch (error) {
            this.debugLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
     */
    async checkExistingListingsForPriceChanges() {
        try {
            const existingListings = document.querySelectorAll('[data-marker="item"], .styles-snippet-ZgKUd, [class*="snippet"]');
            if (existingListings.length > 0) {
                this.debugLog(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${existingListings.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω`);
                await this.checkNewListingsForPriceChanges(existingListings);
            }
        } catch (error) {
            this.debugLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –í–∏–∑—É–∞–ª—å–Ω–∞—è –º–µ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–∏–≤—à–µ–π—Å—è —Ü–µ–Ω–æ–π
     */
    markListingAsChanged(listingElement) {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º —è—Ä–∫—É—é —Ä–∞–º–∫—É –∏ –∏–∫–æ–Ω–∫—É
            listingElement.style.border = '3px solid #ff6b35';
            listingElement.style.boxShadow = '0 0 10px rgba(255, 107, 53, 0.5)';
            listingElement.style.position = 'relative';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            const badge = document.createElement('div');
            badge.innerHTML = 'üí± –¶–ï–ù–ê –ò–ó–ú–ï–ù–ï–ù–ê';
            badge.style.cssText = `
                position: absolute;
                top: 10px;
                right: 10px;
                background: #ff6b35;
                color: white;
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: bold;
                z-index: 1000;
                box-shadow: 0 2px 4px rgba(0,0,0,0.3);
            `;
            
            listingElement.appendChild(badge);
            
            this.debugLog('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–∞—è –º–µ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã');
        } catch (error) {
            this.debugLog('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –º–µ—Ç–∫–∏:', error);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥
     */
    queueListingForReparse(href) {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!window.priceChangeQueue) {
                window.priceChangeQueue = [];
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
            if (!window.priceChangeQueue.includes(href)) {
                window.priceChangeQueue.push(href);
                this.debugLog(`üìã –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–∞—Ä—Å–∏–Ω–≥–∞: ${href}`);
                this.debugLog(`üìä –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: ${window.priceChangeQueue.length}`);
            }
        } catch (error) {
            this.debugLog('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å:', error);
        }
    }

}


/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø AVITO PARSER
 * –ó–∞–º–µ–Ω–∏—Ç—å –∫–æ–¥ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ avito-parser.js
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞
function initializeAvitoParser() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é AvitoParser...');
    console.log('Current URL:', window.location.href);
    console.log('Current hostname:', window.location.hostname);

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–∞–π—Ç–µ
        if (!window.location.hostname.includes('avito.ru')) {
            console.log('‚ùå –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∞–π—Ç, –ø–∞—Ä—Å–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä
        if (window.avitoParserInstance) {
            console.log('‚úÖ AvitoParser —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return true;
        }

        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
        const parser = new AvitoParser();
        console.log('‚úÖ AvitoParser —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log('‚úÖ isListingPage:', parser.isListingPage);

        // –î–µ–ª–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
        window.avitoParser = parser;
        window.avitoParserInstance = parser;
        window.AvitoParser = AvitoParser;

        console.log('‚úÖ AvitoParser –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AvitoParser:', error);
        return false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (window.location.hostname.includes('avito.ru')) {
    // –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É
    if (!initializeAvitoParser()) {
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            initializeAvitoParser();
        }, 500);
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
if (typeof window !== 'undefined' && window.location.href.includes('avito.ru')) {
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞
    window.AvitoParser = AvitoParser;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if (window.location.href.includes('/kvartiry/') || window.location.href.includes('/komnaty/')) {
        console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏');

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        setTimeout(() => {
            if (!window.avitoParserInstance) {
                console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
                initializeAvitoParser();
            }
        }, 1000);

        // –ï—â–µ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            if (!window.avitoParserInstance) {
                console.log('üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
                initializeAvitoParser();
            }
        }, 3000);
    }
}

} // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É typeof AvitoParser

// –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log('üì® GLOBAL: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', request);
    
    if (request.action === 'ping') {
        console.log('üèì AvitoParser: –ü–æ–ª—É—á–µ–Ω ping, –æ—Ç–≤–µ—á–∞–µ–º pong');
        sendResponse({ success: true, message: 'pong' });
        return;
    }
    
    if (request.action === 'parseCurrentListing') {
        console.log('üéØ GLOBAL: Processing parseCurrentListing');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const url = window.location.href;
        const isListingPage = url.includes('/kvartiry/') && 
                            url.match(/\/kvartiry\/.*_\d+/) && 
                            !url.includes('/list/');
        
        if (!isListingPage) {
            console.log('‚ùå GLOBAL: –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
            sendResponse({ success: false, error: '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞' });
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        try {
            const parser = new AvitoParser();
            console.log('‚úÖ GLOBAL: –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω');
            
            parser.parseCurrentListing()
                .then(data => {
                    console.log('üìä GLOBAL: Parsed data:', data);
                    if (data) {
                        sendResponse({ success: true, data: data });
                    } else {
                        sendResponse({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' });
                    }
                })
                .catch(error => {
                    console.error('‚ùå GLOBAL: Error in parseCurrentListing:', error);
                    sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞' });
                });
                
            return true; // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            
        } catch (error) {
            console.error('‚ùå GLOBAL: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞:', error);
            sendResponse({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: ' + error.message });
            return;
        }
    } else if (request.action === 'parseMassByFilter') {
        console.log('üéØ GLOBAL: Processing parseMassByFilter');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        const url = window.location.href;
        const isFilterPage = url.includes('/kvartiry') && 
                            (url.includes('?') || url.includes('#')) && 
                            !url.match(/\/kvartiry\/.*_\d+/); // –ù–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
        if (!isFilterPage) {
            console.log('‚ùå GLOBAL: –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞');
            sendResponse({ success: false, error: '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞' });
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–ª–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        try {
            const parser = new AvitoParser();
            console.log('‚úÖ GLOBAL: –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ startMassParsing —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            const settings = {
                areaId: request.areaId,
                areaName: request.areaName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å',
                maxPages: 10,
                delay: 2000,
                listingsContainer: '.styles-container-rnTvX',
                listingSelector: '.styles-snippet-ZgKUd',
                linkSelector: 'a[href*="/kvartiry/"]'
            };
            
            parser.startMassParsing(settings)
                .then(result => {
                    console.log('üìä GLOBAL: Mass parsing result:', result);
                    sendResponse({ success: true, parsed: result.parsed || result.successfullyParsed, errors: result.errors });
                })
                .catch(error => {
                    console.error('‚ùå GLOBAL: Error in startMassParsing:', error);
                    sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞' });
                });
                
            return true; // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            
        } catch (error) {
            console.error('‚ùå GLOBAL: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            sendResponse({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: ' + error.message });
            return;
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    sendResponse({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ' + request.action });
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.testAvitoParser = function () {
    console.log('üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AVITO PARSER ===');

    if (!window.avitoParserInstance) {
        console.log('‚ùå –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞...');
        try {
            window.avitoParserInstance = new AvitoParser();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞:', error);
            return null;
        }
    }

    return window.avitoParserInstance.quickDiagnostic();
};

window.parseAvitoListing = async function () {
    // console.log('üéØ === –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì –û–ë–™–Ø–í–õ–ï–ù–ò–Ø ===');

    if (!window.avitoParserInstance) {
        try {
            window.avitoParserInstance = new AvitoParser();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞:', error);
            return null;
        }
    }

    try {
        const data = await window.avitoParserInstance.parseCurrentListing();
        console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:', data);
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
        return null;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.checkPageReady = function () {
    if (!window.avitoParserInstance) {
        window.avitoParserInstance = new AvitoParser();
    }
    return window.avitoParserInstance.isPageReady();
};

// console.log('‚úÖ AvitoParser –∑–∞–≥—Ä—É–∂–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª–∏:');
// console.log('  - testAvitoParser() // –¢–µ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤');
// console.log('  - parseAvitoListing() // –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (async)');
// console.log('  - checkPageReady() // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');

// console.log('‚úÖ Parser initialization complete');