/**
 * Content script –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü Cian.ru
 * –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ AvitoParser
 */

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∫–ª–∞—Å—Å —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω
if (typeof CianParser === 'undefined') {

class CianParser {
    constructor() {
        // console.log('CianParser constructor called');

        this.isListingPage = this.checkIsListingPage();
        // console.log('isListingPage:', this.isListingPage);

        if (this.isListingPage) {
            this.setupMessageListener();

            // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –ø–∞—Ä—Å–µ—Ä–∞
            window.cianParserInstance = this;
            window.CianParser = CianParser; // –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º

            // console.log('‚úÖ CianParser –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –∫–∞–∫ window.cianParserInstance');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        this.initDebugMode();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
     */
    async initDebugMode() {
        try {
            // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ chrome.storage
            if (typeof chrome !== 'undefined' && chrome.storage) {
                chrome.storage.local.get(['neocenka_debug_mode'], (result) => {
                    if (result.neocenka_debug_mode === true) {
                        localStorage.setItem('neocenka_debug_mode', 'true');
                    }
                });
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏
        }
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å (–µ—Å–ª–∏ –æ—Ç–ª–∞–¥–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞)
     */
    debugLog(...args) {
        // –ù–ï –≤—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ production –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        // –°–∞–π—Ç –º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å // console.log –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
        
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if (window.debugLogger && window.debugLogger.isEnabled()) {
            window.debugLogger.log(...args);
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
        // else if (localStorage.getItem('neocenka_debug_mode') === 'true') {
        //     // console.log('[DEBUG]', ...args);
        // }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    checkIsListingPage() {
        const url = window.location.href;
        // console.log('Checking if listing page, URL:', url);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const isListingPage = url.includes('/sale/flat/') &&
            url.match(/\/sale\/flat\/\d+/) &&
            !url.includes('/list/');

        // console.log('Is listing page:', isListingPage);
        return isListingPage;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup
     */
    setupMessageListener() {
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            // console.log('üì® CianParser Message received:', request);

            if (request.action === 'parseCurrentListing') {
                // console.log('üéØ CianParser: Processing parseCurrentListing');

                if (this.isListingPage) {
                    // console.log('‚úÖ CianParser: Parser instance available');

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º async/await –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Promise
                    this.parseCurrentListing()
                        .then(data => {
                            // console.log('üìä CianParser: Parsed data:', data);

                            if (data) {
                                sendResponse({ success: true, data: data });
                            } else {
                                sendResponse({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' });
                            }
                        })
                        .catch(error => {
                            // console.error('‚ùå CianParser: Error in parseCurrentListing:', error);
                            sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞' });
                        });

                    // –ö–†–ò–¢–ò–ß–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    return true;

                } else {
                    sendResponse({ success: false, error: '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞' });
                }

            } else if (request.action === 'ping') {
                // console.log('üèì CianParser: –ü–æ–ª—É—á–µ–Ω ping, –æ—Ç–≤–µ—á–∞–µ–º pong');
                sendResponse({ success: true, message: 'pong' });
                return;

            } else {
                sendResponse({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    handleMessage(request, sender, sendResponse) {
        // console.log('üì® CianParser handleMessage:', request);

        if (request.action === 'parseCurrentListing') {
            // console.log('üéØ CianParser: Processing parseCurrentListing');

            if (this.isListingPage) {
                // console.log('‚úÖ CianParser: Parser instance available');

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º async/await –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Promise
                this.parseCurrentListing()
                    .then(data => {
                        // console.log('üìä CianParser: Parsed data:', data);

                        if (data) {
                            sendResponse({ success: true, data: data });
                        } else {
                            sendResponse({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' });
                        }
                    })
                    .catch(error => {
                        // console.error('‚ùå CianParser: Error in parseCurrentListing:', error);
                        sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞' });
                    });

                // –ö–†–ò–¢–ò–ß–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                return true;

            } else {
                sendResponse({ success: false, error: '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞' });
            }

        } else {
            sendResponse({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
        }

        return false;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async parseCurrentListing() {
        // console.log('üöÄ === CianParser: –ù–ê–ß–ê–õ–û –ü–ê–†–°–ò–ù–ì–ê –û–ë–™–Ø–í–õ–ï–ù–ò–Ø ===');
        // console.log('üìç URL:', window.location.href);
        // console.log('‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toLocaleTimeString());

        let data = {};
        let criticalErrors = 0;
        let optionalWarnings = 0;

        try {
            // ===== 1. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –û–ë–™–Ø–í–õ–ï–ù–ò–Ø =====
            this.debugLog('\nüîç === –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê ===');
            const status = this.checkListingStatus();
            this.debugLog(`üìä –°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${status}`);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–∂–µ –¥–ª—è archived)
            data.status = status;
            
            if (status === 'needs_processing') {
                // console.log('‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥. –°—Ç–∞—Ç—É—Å:', status);
                return null;
            }
            
            this.debugLog(`‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: ${status}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥`);

            // ===== 2. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ë–ê–ó–û–í–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò =====
            this.debugLog('\nüìù === –®–ê–ì 2: –ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===');

            try {
                const external_id = this.extractExternalId();
                this.debugLog(`üÜî External ID: "${external_id}"`);
                if (!external_id) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
                }
                data.external_id = external_id;
            } catch (error) {
                // console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
                criticalErrors++;
                return null;
            }

            // –ò—Å—Ç–æ—á–Ω–∏–∫ –∏ URL
            data.source = 'cian';
            data.url = this.cleanUrl(window.location.href);
            this.debugLog(`üîó –û—á–∏—â–µ–Ω–Ω—ã–π URL: "${data.url}"`);

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            try {
                data.title = this.extractTitle();
                this.debugLog(`üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${data.title}"`);
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫:', error);
                data.title = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                optionalWarnings++;
            }

            // –¶–µ–Ω–∞
            try {
                data.price = this.extractPrice();
                this.debugLog(`üí∞ –¶–µ–Ω–∞: ${data.price} —Ä—É–±.`);
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É:', error);
                data.price = 0;
                optionalWarnings++;
            }

            // –û–ø–∏—Å–∞–Ω–∏–µ
            try {
                data.description = this.extractDescription();
                this.debugLog(`üìÑ –û–ø–∏—Å–∞–Ω–∏–µ (–¥–ª–∏–Ω–∞): ${data.description ? data.description.length : 0} —Å–∏–º–≤–æ–ª–æ–≤`);
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ–ø–∏—Å–∞–Ω–∏–µ:', error);
                data.description = '';
                optionalWarnings++;
            }

            // –ê–¥—Ä–µ—Å
            try {
                data.address = this.extractAddress();
                this.debugLog(`üìç –ê–¥—Ä–µ—Å: "${data.address}"`);
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å:', error);
                data.address = '';
                optionalWarnings++;
            }

            // ===== 3. –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ö–í–ê–†–¢–ò–†–´ =====
            this.debugLog('\nüè† === –®–ê–ì 3: –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ö–í–ê–†–¢–ò–†–´ ===');

            try {
                data.room_count = this.extractRoomCount();
                this.debugLog(`üö™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: ${data.room_count}`);
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:', error);
                data.room_count = null;
                optionalWarnings++;
            }

            try {
                data.total_area = this.extractTotalArea();
                this.debugLog(`üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: ${data.total_area} –º¬≤`);
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å:', error);
                data.total_area = null;
                optionalWarnings++;
            }

            try {
                data.floor = this.extractFloor();
                data.total_floors = this.extractTotalFloors();
                this.debugLog(`üè¢ –≠—Ç–∞–∂: ${data.floor} –∏–∑ ${data.total_floors}`);
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —ç—Ç–∞–∂:', error);
                data.floor = null;
                data.total_floors = null;
                optionalWarnings++;
            }

            // ===== 4. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò =====
            this.debugLog('\nüîß === –®–ê–ì 4: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò ===');

            try {
                data.year_built = this.extractYearBuilt();
                this.debugLog(`üèóÔ∏è –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: ${data.year_built}`);
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:', error);
                data.year_built = null;
                optionalWarnings++;
            }

            try {
                data.bathroom_type = this.extractBathroomType();
                this.debugLog(`üöø –¢–∏–ø —Å–∞–Ω—É–∑–ª–∞: "${data.bathroom_type}"`);
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–∏–ø —Å–∞–Ω—É–∑–ª–∞:', error);
                data.bathroom_type = '';
                optionalWarnings++;
            }

            try {
                data.balcony = this.extractBalcony();
                this.debugLog(`ü™ü –ë–∞–ª–∫–æ–Ω: ${data.balcony ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∫–æ–Ω–µ:', error);
                data.balcony = false;
                optionalWarnings++;
            }

            try {
                data.ceiling_height = this.extractCeilingHeight();
                this.debugLog(`üìè –í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤: ${data.ceiling_height} –º`);
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—ã—Å–æ—Ç—É –ø–æ—Ç–æ–ª–∫–æ–≤:', error);
                data.ceiling_height = null;
                optionalWarnings++;
            }

            // ===== 5. –ò–°–¢–û–†–ò–Ø –¶–ï–ù =====
            this.debugLog('\nüí∞ === –®–ê–ì 5: –ò–°–¢–û–†–ò–Ø –¶–ï–ù ===');
            
            try {
                data.price_history = await this.extractPriceHistory();
                this.debugLog(`üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω: ${data.price_history ? data.price_history.length : 0} –∑–∞–ø–∏—Å–µ–π`);
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω:', error);
                data.price_history = [];
                optionalWarnings++;
            }

            // ===== 6. –î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø =====
            try {
                data.updated_date = this.extractUpdatedDate();
            } catch (error) {
                // console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
                data.updated_date = null;
                optionalWarnings++;
            }

            // ===== 7. –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø =====
            data.parsed_at = new Date();
            
            // console.log(`‚úÖ === CianParser: –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù ===`);
            // console.log(`üìä –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: ${criticalErrors}`);
            // console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${optionalWarnings}`);
            // console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleTimeString()}`);
            
            return data;

        } catch (error) {
            // console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            return null;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    checkListingStatus() {
        this.debugLog('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        const removedMessages = [
            '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
            '–æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
            '–°–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
            '—Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
            '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ',
            '–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ'
        ];
        
        // –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ –ª—é–±—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        const allElements = document.querySelectorAll('*');
        for (const element of allElements) {
            const text = element.textContent || '';
            for (const message of removedMessages) {
                if (text.includes(message)) {
                    this.debugLog(`üìç –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏: "${message}"`);
                    return 'archived';
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–Ω—è—Ç—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        const removedSelectors = [
            '.offer-expired',
            '.offer-removed', 
            '[data-testid="offer-expired"]',
            '.a10a3f92e9--removed--',
            '.offer-status-removed',
            '.offer-inactive',
            '.listing-removed'
        ];

        for (const selector of removedSelectors) {
            const element = document.querySelector(selector);
            if (element) {
                this.debugLog(`üìç –ù–∞–π–¥–µ–Ω CSS —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–Ω—è—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${selector}`);
                return 'archived';
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageTitle = document.title || '';
        if (pageTitle.includes('—Å–Ω—è—Ç–æ') || pageTitle.includes('–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ') || pageTitle.includes('—É–¥–∞–ª–µ–Ω')) {
            this.debugLog('üìç –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–Ω—è—Ç–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
            return 'archived';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const titleElement = document.querySelector('[data-testid="offer-title"], h1');
        
        if (!titleElement) {
            this.debugLog('‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å—Ç–∞—Ç—É—Å needs_processing');
            return 'needs_processing';
        }

        // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        const priceElement = document.querySelector('[data-testid="price-amount"], [data-testid="offer-price"]');
        if (!priceElement) {
            this.debugLog('‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω–æ–µ');
        }

        this.debugLog('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
        return 'active';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ URL
     */
    extractExternalId() {
        const url = window.location.href;
        const match = url.match(/\/sale\/flat\/(\d+)/);
        return match ? match[1] : null;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    cleanUrl(url) {
        try {
            const urlObj = new URL(url);
            return urlObj.origin + urlObj.pathname;
        } catch (error) {
            return url;
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    extractTitle() {
        const selectors = [
            '[data-testid="offer-title"]',
            'h1[data-testid="offer-title"]',
            '.a10a3f92e9--title--vlZwT',
            'h1'
        ];
        
        for (const selector of selectors) {
            const element = document.querySelector(selector);
            if (element && element.textContent.trim()) {
                return element.textContent.trim();
            }
        }
        
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
     */
    extractPrice() {
        const selectors = [
            '[data-testid="price-amount"]',
            '[data-testid="offer-price"]',
            '.a10a3f92e9--price--vlBHe',
            '.a10a3f92e9--amount--Wt4mg'
        ];
        
        for (const selector of selectors) {
            const element = document.querySelector(selector);
            if (element) {
                const priceText = element.textContent.replace(/[^\d]/g, '');
                const price = parseInt(priceText);
                if (price && price > 0) {
                    return price;
                }
            }
        }
        
        // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        this.debugLog('‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –∞—Ä—Ö–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        return 0;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
     */
    extractDescription() {
        const selectors = [
            '[data-testid="offer-description-text"]',
            '.a10a3f92e9--description--ByeBu',
            '.offer-description-text'
        ];
        
        for (const selector of selectors) {
            const element = document.querySelector(selector);
            if (element && element.textContent.trim()) {
                return element.textContent.trim();
            }
        }
        
        return ''; // –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
     */
    extractAddress() {
        const selectors = [
            '[data-testid="address-text"]',
            '.a10a3f92e9--address--u2a3U',
            '.offer-address-text'
        ];
        
        for (const selector of selectors) {
            const element = document.querySelector(selector);
            if (element && element.textContent.trim()) {
                return element.textContent.trim();
            }
        }
        
        return ''; // –ê–¥—Ä–µ—Å –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
     */
    extractRoomCount() {
        const titleElement = document.querySelector('[data-testid="offer-title"], h1');
        if (titleElement) {
            const title = titleElement.textContent;
            const match = title.match(/(\d+)-–∫–æ–º–Ω/);
            if (match) {
                return parseInt(match[1]);
            }
        }
        
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏
     */
    extractTotalArea() {
        const area = this.findCharacteristicValue('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å');
        if (area) {
            const match = area.match(/(\d+(?:[,\.]\d+)?)/);
            if (match) {
                return parseFloat(match[1].replace(',', '.'));
            }
        }
        
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç—Ç–∞–∂–∞
     */
    extractFloor() {
        const floor = this.findCharacteristicValue('–≠—Ç–∞–∂');
        if (floor) {
            const match = floor.match(/(\d+)/);
            if (match) {
                return parseInt(match[1]);
            }
        }
        
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç—Ç–∞–∂–µ–π
     */
    extractTotalFloors() {
        const floor = this.findCharacteristicValue('–≠—Ç–∞–∂');
        if (floor) {
            const match = floor.match(/–∏–∑ (\d+)/);
            if (match) {
                return parseInt(match[1]);
            }
        }
        
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
     */
    extractYearBuilt() {
        const yearInfo = this.findCharacteristicValue('–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏');
        if (yearInfo) {
            const match = yearInfo.match(/(\d{4})/);
            if (match) {
                return parseInt(match[1]);
            }
        }
        
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∞–Ω—É–∑–ª–∞
     */
    extractBathroomType() {
        const bathroomInfo = this.findCharacteristicValue('–°–∞–Ω—É–∑–µ–ª');
        return bathroomInfo ? bathroomInfo.trim() : '';
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∫–æ–Ω–µ
     */
    extractBalcony() {
        const balconyInfo = this.findCharacteristicValue('–ë–∞–ª–∫–æ–Ω');
        if (balconyInfo) {
            const balcony = balconyInfo.toLowerCase();
            return !balcony.includes('–Ω–µ—Ç') && !balcony.includes('–±–µ–∑');
        }
        
        return false;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø–æ—Ç–æ–ª–∫–æ–≤
     */
    extractCeilingHeight() {
        const ceilingInfo = this.findCharacteristicValue('–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤');
        if (ceilingInfo) {
            const match = ceilingInfo.match(/(\d+(?:[.,]\d+)?)/);
            if (match) {
                return parseFloat(match[1].replace(',', '.'));
            }
        }
        
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    extractUpdatedDate() {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É
        const metadataElement = document.querySelector('[data-testid="metadata-updated-date"]');
        
        if (metadataElement) {
            const text = metadataElement.textContent || '';
            return text.trim(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        const metadataContainer = document.querySelector('[data-name="OfferMetaData"]');
        
        if (metadataContainer) {
            const text = metadataContainer.textContent || '';
            
            // –ò—â–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É —Å "–û–±–Ω–æ–≤–ª–µ–Ω–æ" –≤ —Ç–µ–∫—Å—Ç–µ
            const match = text.match(/–û–±–Ω–æ–≤–ª–µ–Ω–æ:[^0-9]*\d{1,2}\s+\w+[,\s]*\d{2}:\d{2}/i);
            if (match) {
                return match[0].trim(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É
            }
        }
        
        return null;
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ä—É—Å—Å–∫–æ–π –¥–∞—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
     */
    parseRussianDateWithTime(dateString) {
        const months = {
            '—è–Ω–≤': 0, '—è–Ω–≤–∞—Ä—è': 0,
            '—Ñ–µ–≤': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 1,
            '–º–∞—Ä': 2, '–º–∞—Ä—Ç–∞': 2,
            '–∞–ø—Ä': 3, '–∞–ø—Ä–µ–ª—è': 3,
            '–º–∞—è': 4, '–º–∞–π': 4,
            '–∏—é–Ω': 5, '–∏—é–Ω—è': 5,
            '–∏—é–ª': 6, '–∏—é–ª—è': 6,
            '–∞–≤–≥': 7, '–∞–≤–≥—É—Å—Ç–∞': 7,
            '—Å–µ–Ω': 8, '—Å–µ–Ω—Ç—è–±—Ä—è': 8,
            '–æ–∫—Ç': 9, '–æ–∫—Ç—è–±—Ä—è': 9,
            '–Ω–æ—è': 10, '–Ω–æ—è–±—Ä—è': 10,
            '–¥–µ–∫': 11, '–¥–µ–∫–∞–±—Ä—è': 11
        };
        
        try {
            // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            const cleaned = dateString.trim().replace(',', '');
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            // –§–æ—Ä–º–∞—Ç: "31 –∏—é–ª, 09:01" –∏–ª–∏ "31 –∏—é–ª 09:01"
            let match = cleaned.match(/(\d{1,2})\s+(\w+)\s+(\d{1,2}):(\d{2})/);
            if (match) {
                const day = parseInt(match[1]);
                const monthName = match[2].toLowerCase();
                const hour = parseInt(match[3]);
                const minute = parseInt(match[4]);
                
                const month = months[monthName];
                if (month !== undefined) {
                    // –ì–æ–¥ –±–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–±—ã—á–Ω–æ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –Ω–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –≥–æ–¥
                    const year = new Date().getFullYear();
                    return new Date(year, month, day, hour, minute);
                }
            }
            
            // –§–æ—Ä–º–∞—Ç: "31 –∏—é–ª"
            match = cleaned.match(/(\d{1,2})\s+(\w+)/);
            if (match) {
                const day = parseInt(match[1]);
                const monthName = match[2].toLowerCase();
                
                const month = months[monthName];
                if (month !== undefined) {
                    const year = new Date().getFullYear();
                    return new Date(year, month, day);
                }
            }
            
            return null;
        } catch (error) {
            // console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º:', error);
            return null;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     */
    findCharacteristicValue(characteristicName) {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        const selectors = [
            '[data-testid="object-summary-description-item"]',
            '.a10a3f92e9--item--KxHEQ',
            '.offer-summary-item'
        ];
        
        for (const selector of selectors) {
            const items = document.querySelectorAll(selector);
            for (const item of items) {
                const text = item.textContent;
                if (text.includes(characteristicName)) {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –∏–ª–∏ —Ç–∏—Ä–µ
                    const match = text.match(new RegExp(characteristicName + '[:\\-]?\\s*(.+)', 'i'));
                    if (match) {
                        return match[1].trim();
                    }
                }
            }
        }
        
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    async extractPriceHistory() {
        this.debugLog('üí∞ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω...');
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —É–∂–µ –≤–∏–¥–∏–º—É—é –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –≤ DOM
            let priceHistory = this.findVisiblePriceHistory();
            if (priceHistory.length > 0) {
                this.debugLog(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∏–¥–∏–º–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω: ${priceHistory.length} –∑–∞–ø–∏—Å–µ–π`);
                return priceHistory;
            }
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            const priceHistoryButton = document.querySelector('[data-name="PriceHistoryButton"]');
            if (!priceHistoryButton) {
                this.debugLog('‚ùå –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω [data-name="PriceHistoryButton"] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return [];
            }
            
            this.debugLog('üìç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω');
            
            // –ù–∞–≤–æ–¥–∏–º –º—ã—à—å –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è popup
            try {
                this.debugLog('üñ±Ô∏è –ù–∞–≤–æ–¥–∏–º –º—ã—à—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω...');
                
                // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ popup
                const events = [
                    new MouseEvent('mouseenter', { view: window, bubbles: true, cancelable: true }),
                    new MouseEvent('mouseover', { view: window, bubbles: true, cancelable: true }),
                    new MouseEvent('mousedown', { view: window, bubbles: true, cancelable: true }),
                    new MouseEvent('mouseup', { view: window, bubbles: true, cancelable: true })
                ];
                
                for (const event of events) {
                    priceHistoryButton.dispatchEvent(event);
                    await this.sleep(100);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ popup –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                let priceHistoryWidget = null;
                for (let attempt = 1; attempt <= 5; attempt++) {
                    this.debugLog(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/5 –Ω–∞–π—Ç–∏ popup...`);
                    
                    await this.sleep(300);
                    priceHistoryWidget = document.querySelector('[data-testid="price-history-widget"]');
                    
                    if (priceHistoryWidget) {
                        this.debugLog(`‚úÖ Popup –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}`);
                        break;
                    }
                    
                    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º hover
                    const hoverEvent = new MouseEvent('mouseover', {
                        view: window,
                        bubbles: true,
                        cancelable: true
                    });
                    priceHistoryButton.dispatchEvent(hoverEvent);
                }
                
                if (!priceHistoryWidget) {
                    this.debugLog('‚ùå Popup —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
                    
                    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ popup –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö DOM
                    const allPopups = document.querySelectorAll('.a10a3f92e9--popup--fimrB, .popup, .tooltip');
                    this.debugLog(`üîç –ù–∞–π–¥–µ–Ω–æ ${allPopups.length} –¥—Ä—É–≥–∏—Ö popup —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                    
                    for (const popup of allPopups) {
                        if (popup.textContent.includes('–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã')) {
                            this.debugLog('‚úÖ –ù–∞–π–¥–µ–Ω popup —Å —Ç–µ–∫—Å—Ç–æ–º "–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã"');
                            const widget = popup.querySelector('[data-testid="price-history-widget"]');
                            if (widget) {
                                priceHistoryWidget = widget;
                                break;
                            }
                        }
                    }
                }
                
                if (!priceHistoryWidget) {
                    this.debugLog('‚ùå Popup —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ');
                    return [];
                }
                
                this.debugLog('‚úÖ –ù–∞–π–¥–µ–Ω popup —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥');
                
                // –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π
                priceHistory = this.parsePriceHistoryTable(priceHistoryWidget);
                
                // –£–±–∏—Ä–∞–µ–º –º—ã—à—å —Å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è popup
                const mouseLeaveEvent = new MouseEvent('mouseleave', {
                    view: window,
                    bubbles: true,
                    cancelable: true
                });
                priceHistoryButton.dispatchEvent(mouseLeaveEvent);
                
                this.debugLog(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${priceHistory.length} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω`);
                return priceHistory;
                
            } catch (hoverError) {
                this.debugLog('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –º—ã—à–∏:', hoverError.message);
                return [];
            }
            
        } catch (error) {
            this.debugLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error.message);
            return [];
        }
    }
    
    /**
     * –ü–æ–∏—Å–∫ –≤–∏–¥–∏–º–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –≤ DOM
     */
    findVisiblePriceHistory() {
        const priceHistory = [];
        
        try {
            this.debugLog('üîç –ò—â–µ–º —É–∂–µ –≤–∏–¥–∏–º—É—é –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –≤ DOM...');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ popup –≤ DOM
            const existingWidget = document.querySelector('[data-testid="price-history-widget"]');
            if (existingWidget) {
                this.debugLog('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π popup —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω');
                return this.parsePriceHistoryTable(existingWidget);
            }
            
            // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
            const historySelectors = [
                '.a10a3f92e9--history-event--xUQ_P', // –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏
                '.price-history-item',
                '.history-item',
                '.price-change-item',
                '[data-testid*="price-history"]',
                '[data-testid*="history"]'
            ];
            
            for (const selector of historySelectors) {
                const items = document.querySelectorAll(selector);
                this.debugLog(`üîç –ù–∞–π–¥–µ–Ω–æ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: ${selector}`);
                
                for (const item of items) {
                    const historyItem = this.parsePriceHistoryItem(item.textContent);
                    if (historyItem) {
                        priceHistory.push(historyItem);
                    }
                }
            }
            
            this.debugLog(`üìä –ù–∞–π–¥–µ–Ω–æ ${priceHistory.length} –∑–∞–ø–∏—Å–µ–π –≤ –≤–∏–¥–∏–º–æ–π –∏—Å—Ç–æ—Ä–∏–∏`);
            
        } catch (error) {
            this.debugLog('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–∏–º–æ–π –∏—Å—Ç–æ—Ä–∏–∏:', error.message);
        }
        
        return priceHistory;
    }
    
    /**
     * –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
     */
    findModalPriceHistory() {
        const priceHistory = [];
        
        try {
            // –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            const modalSelectors = [
                '[data-testid="price-history-modal"]',
                '.modal',
                '.popup',
                '.tooltip',
                '.price-history-modal',
                '.overlay'
            ];
            
            for (const selector of modalSelectors) {
                const elements = document.querySelectorAll(selector);
                for (const element of elements) {
                    if (element.textContent.includes('–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã') || 
                        element.textContent.includes('–∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã')) {
                        
                        // –ü–∞—Ä—Å–∏–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                        const rows = element.querySelectorAll('tr, .history-item, .price-item, div');
                        
                        for (const row of rows) {
                            const historyItem = this.parsePriceHistoryItem(row.textContent);
                            if (historyItem) {
                                priceHistory.push(historyItem);
                            }
                        }
                        
                        if (priceHistory.length > 0) {
                            this.debugLog(`üìç –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏—Å—Ç–æ—Ä–∏–µ–π: ${selector}`);
                            return priceHistory;
                        }
                    }
                }
            }
            
        } catch (error) {
            this.debugLog('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏:', error.message);
        }
        
        return priceHistory;
    }
    
    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
     */
    parsePriceHistoryItem(text) {
        try {
            const trimmedText = text.trim();
            
            // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: –¥–∞—Ç–∞ + —Ü–µ–Ω–∞
            const dateMatch = trimmedText.match(/(\d{1,2}\s+\w+\s+\d{4})/);
            const priceMatch = trimmedText.match(/(\d[\d\s]*)\s*[‚ÇΩ—Ä]/);
            
            if (dateMatch && priceMatch) {
                const date = this.parseRussianDate(dateMatch[1]);
                const price = parseInt(priceMatch[1].replace(/\s/g, ''));
                
                if (date && price && price > 0) {
                    this.debugLog(`üìÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏: ${dateMatch[1]} - ${price} ‚ÇΩ`);
                    return {
                        date: date,
                        price: price
                    };
                }
            }
            
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        }
        
        return null;
    }
    
    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –∏–∑ popup
     */
    parsePriceHistoryTable(widget) {
        const priceHistory = [];
        
        try {
            // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤ widget
            const historyTable = widget.querySelector('.a10a3f92e9--history--JRbxR');
            if (!historyTable) {
                this.debugLog('‚ùå –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return [];
            }
            
            // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            const rows = historyTable.querySelectorAll('.a10a3f92e9--history-event--xUQ_P');
            this.debugLog(`üìä –ù–∞–π–¥–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏—Å—Ç–æ—Ä–∏–∏`);
            
            for (const row of rows) {
                try {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
                    const dateCell = row.querySelector('.a10a3f92e9--event-date--BvijC');
                    if (!dateCell) continue;
                    
                    const dateText = dateCell.textContent.trim();
                    this.debugLog(`üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É: "${dateText}"`);
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
                    const priceCell = row.querySelector('.a10a3f92e9--event-price--xNv2v');
                    if (!priceCell) continue;
                    
                    const priceText = priceCell.textContent.trim();
                    this.debugLog(`üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É: "${priceText}"`);
                    
                    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç: "29 –∏—é–ª 2025")
                    const date = this.parseRussianDateWithYear(dateText);
                    if (!date) {
                        this.debugLog(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: "${dateText}"`);
                        continue;
                    }
                    
                    // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É (—Ñ–æ—Ä–º–∞—Ç: "5 300 000 ‚ÇΩ")
                    const priceMatch = priceText.match(/(\d[\d\s]*)/);
                    if (!priceMatch) {
                        this.debugLog(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É: "${priceText}"`);
                        continue;
                    }
                    
                    const price = parseInt(priceMatch[1].replace(/\s/g, ''));
                    if (!price || price <= 0) {
                        this.debugLog(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: ${price}`);
                        continue;
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                    priceHistory.push({
                        date: date,
                        price: price
                    });
                    
                    this.debugLog(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: ${dateText} - ${price} ‚ÇΩ`);
                    
                } catch (rowError) {
                    this.debugLog(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: ${rowError.message}`);
                    continue;
                }
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            priceHistory.sort((a, b) => a.date - b.date);
            
            this.debugLog(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ ${priceHistory.length} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω`);
            return priceHistory;
            
        } catch (error) {
            this.debugLog(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏: ${error.message}`);
            return [];
        }
    }
    
    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ä—É—Å—Å–∫–æ–π –¥–∞—Ç—ã —Å –≥–æ–¥–æ–º (—Ñ–æ—Ä–º–∞—Ç: "29 –∏—é–ª 2025")
     */
    parseRussianDateWithYear(dateString) {
        const months = {
            '—è–Ω–≤': 0, '—è–Ω–≤–∞—Ä—è': 0,
            '—Ñ–µ–≤': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 1,
            '–º–∞—Ä': 2, '–º–∞—Ä—Ç–∞': 2,
            '–∞–ø—Ä': 3, '–∞–ø—Ä–µ–ª—è': 3,
            '–º–∞—è': 4, '–º–∞–π': 4,
            '–∏—é–Ω': 5, '–∏—é–Ω—è': 5,
            '–∏—é–ª': 6, '–∏—é–ª—è': 6,
            '–∞–≤–≥': 7, '–∞–≤–≥—É—Å—Ç–∞': 7,
            '—Å–µ–Ω': 8, '—Å–µ–Ω—Ç—è–±—Ä—è': 8,
            '–æ–∫—Ç': 9, '–æ–∫—Ç—è–±—Ä—è': 9,
            '–Ω–æ—è': 10, '–Ω–æ—è–±—Ä—è': 10,
            '–¥–µ–∫': 11, '–¥–µ–∫–∞–±—Ä—è': 11
        };
        
        try {
            const parts = dateString.trim().split(/\s+/);
            if (parts.length !== 3) {
                this.debugLog(`‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: "${dateString}", –æ–∂–∏–¥–∞–µ—Ç—Å—è 3 —á–∞—Å—Ç–∏`);
                return null;
            }
            
            const day = parseInt(parts[0]);
            const monthName = parts[1].toLowerCase();
            const year = parseInt(parts[2]);
            
            const month = months[monthName];
            if (month === undefined) {
                this.debugLog(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü: "${monthName}"`);
                return null;
            }
            
            const date = new Date(year, month, day);
            this.debugLog(`‚úÖ –î–∞—Ç–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: ${date.toISOString().split('T')[0]}`);
            return date;
            
        } catch (error) {
            this.debugLog(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã —Å –≥–æ–¥–æ–º: ${error.message}`);
            return null;
        }
    }
    
    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ä—É—Å—Å–∫–æ–π –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç Date
     */
    parseRussianDate(dateString) {
        const months = {
            '—è–Ω–≤': 0, '—è–Ω–≤–∞—Ä—è': 0,
            '—Ñ–µ–≤': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 1,
            '–º–∞—Ä': 2, '–º–∞—Ä—Ç–∞': 2,
            '–∞–ø—Ä': 3, '–∞–ø—Ä–µ–ª—è': 3,
            '–º–∞—è': 4, '–º–∞–π': 4,
            '–∏—é–Ω': 5, '–∏—é–Ω—è': 5,
            '–∏—é–ª': 6, '–∏—é–ª—è': 6,
            '–∞–≤–≥': 7, '–∞–≤–≥—É—Å—Ç–∞': 7,
            '—Å–µ–Ω': 8, '—Å–µ–Ω—Ç—è–±—Ä—è': 8,
            '–æ–∫—Ç': 9, '–æ–∫—Ç—è–±—Ä—è': 9,
            '–Ω–æ—è': 10, '–Ω–æ—è–±—Ä—è': 10,
            '–¥–µ–∫': 11, '–¥–µ–∫–∞–±—Ä—è': 11
        };
        
        try {
            const parts = dateString.trim().split(/\s+/);
            if (parts.length !== 3) return null;
            
            const day = parseInt(parts[0]);
            const monthName = parts[1].toLowerCase();
            const year = parseInt(parts[2]);
            
            const month = months[monthName];
            if (month === undefined) return null;
            
            return new Date(year, month, day);
        } catch (error) {
            // console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã:', error);
            return null;
        }
    }
    
    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω—É–∂–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
if (window.location.hostname.includes('cian.ru')) {
  // console.log('üöÄ Cian parser script loaded!');
  // console.log('Current URL:', window.location.href);
  // console.log('Current hostname:', window.location.hostname);

  try {
    // console.log('‚úÖ Hostname matches, creating Cian parser...');
    const parser = new CianParser();
    // console.log('‚úÖ CianParser created successfully');
    // console.log('‚úÖ isListingPage:', parser.isListingPage);

    // –î–µ–ª–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.cianParser = parser;

  } catch (error) {
    // console.error('‚ùå Error creating CianParser:', error);
  }
} else {
  // console.log('‚ùå Wrong hostname, Cian parser not initialized');
}

// console.log('‚úÖ Cian parser initialization complete');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    // console.log('üì® GLOBAL CianParser: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', request);
    
    if (request.action === 'ping') {
        // console.log('üèì GLOBAL CianParser: –ü–æ–ª—É—á–µ–Ω ping, –æ—Ç–≤–µ—á–∞–µ–º pong');
        sendResponse({ success: true, message: 'pong' });
        return;
    }
    
    if (request.action === 'parseCurrentListing') {
        // console.log('üéØ GLOBAL CianParser: Processing parseCurrentListing');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const url = window.location.href;
        const isListingPage = /\.?cian\.ru\/sale\/flat\/\d+/.test(url);
        
        if (!isListingPage) {
            // console.log('‚ùå GLOBAL CianParser: –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
            sendResponse({ success: false, error: '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞' });
            return;
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        let parserInstance = window.cianParserInstance || window.cianParser;
        
        if (!parserInstance) {
            // console.log('üîß GLOBAL CianParser: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞');
            try {
                parserInstance = new CianParser();
                window.cianParserInstance = parserInstance;
                // console.log('‚úÖ GLOBAL CianParser: –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            } catch (error) {
                // console.error('‚ùå GLOBAL CianParser: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞:', error);
                sendResponse({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Å–µ—Ä' });
                return;
            }
        }
        
        if (parserInstance && parserInstance.parseCurrentListing) {
            // console.log('‚úÖ GLOBAL CianParser: –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞');
            
            parserInstance.parseCurrentListing()
                .then(data => {
                    // console.log('üìä GLOBAL CianParser: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
                    if (data) {
                        sendResponse({ success: true, data: data });
                    } else {
                        sendResponse({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' });
                    }
                })
                .catch(error => {
                    // console.error('‚ùå GLOBAL CianParser: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
                    sendResponse({ success: false, error: error.message || '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞' });
                });
                
            return true; // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        } else {
            // console.error('‚ùå GLOBAL CianParser: –ü–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            sendResponse({ success: false, error: '–ü–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
        }
    }
});

} // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É typeof CianParser