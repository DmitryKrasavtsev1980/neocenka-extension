/**
 * Content script –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ Cian.ru
 * –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ Avito:
 * 1. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –ø–ª–æ—â–∞–¥–µ–π
 * 2. –û—á–∏—Å—Ç–∫–∞ URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 * 3. –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è 2025 –≥–æ–¥–∞
 * 4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
 * 5. –ú–µ—Ç–æ–¥—ã –æ—Ç–ª–∞–¥–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */

class CianParser {
  constructor() {
    this.isListingPage = this.checkIfListingPage();
    this.isListPage = this.checkIfListPage();
    this.init();
  }

  init() {
    // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç popup –∏ background
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
      this.handleMessage(request, sender, sendResponse);
      return true; // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
    });
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
   */
  extractYearBuilt() {
    const yearInfo = this.findCharacteristicValue('–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏');
    if (yearInfo) {
      const match = yearInfo.match(/(\d{4})/);
      return match ? parseInt(match[1]) : null;
    }
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∞–Ω—É–∑–ª–∞
   */
  extractBathroomType() {
    const bathroomInfo = this.findCharacteristicValue('–°–∞–Ω—É–∑–µ–ª');
    return bathroomInfo ? bathroomInfo.trim() : '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∫–æ–Ω–µ
   */
  extractBalcony() {
    const balconyInfo = this.findCharacteristicValue('–ë–∞–ª–∫–æ–Ω');
    if (balconyInfo) {
      const balcony = balconyInfo.toLowerCase();
      return !balcony.includes('–Ω–µ—Ç') && !balcony.includes('–±–µ–∑');
    }
    return false;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø–æ—Ç–æ–ª–∫–æ–≤
   */
  extractCeilingHeight() {
    const ceilingInfo = this.findCharacteristicValue('–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤');
    if (ceilingInfo) {
      const match = ceilingInfo.match(/(\d+(?:[\.,]\d+)?)/);
      return match ? parseFloat(match[1].replace(',', '.')) : null;
    }
    return null;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–ø–∏—Å–∫–∞
   */
  async parseAllListingsOnPage(segmentId, delay) {
    const result = { new: 0, updated: 0, errors: 0 };

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      const listingLinks = this.extractListingLinks();

      console.log(`Cian: –ù–∞–π–¥–µ–Ω–æ ${listingLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞`);

      for (let i = 0; i < listingLinks.length; i++) {
        try {
          const link = listingLinks[i];
          console.log(`Cian: –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${i + 1}/${listingLinks.length}: ${link}`);

          // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
          await this.openListingInNewTab(link);

          // –ñ–¥–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          if (i > 0) {
            await this.sleep(delay * 1000);
          }

        } catch (error) {
          console.error(`Cian: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${i + 1}:`, error);
          result.errors++;
        }
      }

    } catch (error) {
      console.error('Cian: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–ø–∏—Å–∫–∞:', error);
      result.errors++;
    }

    return result;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞
   */
  extractListingLinks() {
    const links = [];
    const selectors = [
      '[data-name="LinkWrapper"] a',
      '[data-name="CardComponent"] a',
      '.a10a3f92e9--link--39dQH'
    ];

    selectors.forEach(selector => {
      const elements = document.querySelectorAll(selector);
      elements.forEach(el => {
        const href = el.href;
        if (href && href.includes('/sale/flat/') && href.match(/\/\d+\/$/)) {
          const fullUrl = new URL(href, window.location.origin).href;
          if (!links.includes(fullUrl)) {
            links.push(fullUrl);
          }
        }
      });
    });

    return links;
  }

  /**
   * –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
   */
  async openListingInNewTab(url) {
    return new Promise((resolve) => {
      chrome.runtime.sendMessage({
        action: 'openTab',
        url: url
      }, resolve);
    });
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω—É–∂–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
if (window.location.hostname.includes('cian.ru')) {
  console.log('üöÄ Cian parser script loaded!');
  console.log('Current URL:', window.location.href);
  console.log('Current hostname:', window.location.hostname);

  try {
    console.log('‚úÖ Hostname matches, creating Cian parser...');
    const parser = new CianParser();
    console.log('‚úÖ CianParser created successfully');
    console.log('‚úÖ isListingPage:', parser.isListingPage);

    // –î–µ–ª–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.cianParser = parser;

  } catch (error) {
    console.error('‚ùå Error creating CianParser:', error);
  }
} else {
  console.log('‚ùå Wrong hostname, Cian parser not initialized');
}

console.log('‚úÖ Cian parser initialization complete'); –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
   */
  checkIfListingPage() {
    const url = window.location.href;
    return /cian\.ru\/sale\/flat\/\d+/.test(url);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
   */
  checkIfListPage() {
    const url = window.location.href;
    return /cian\.ru\/sale\/flat/.test(url) && !this.isListingPage;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async handleMessage(request, sender, sendResponse) {
    try {
      switch (request.action) {
        case 'parseListing':
          if (this.isListingPage) {
            const listingData = await this.parseCurrentListing();
            if (listingData) {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ background script
              const response = await chrome.runtime.sendMessage({
                action: 'parseListing',
                listingData: listingData,
                segmentId: request.segmentId
              });
              sendResponse(response);
            } else {
              sendResponse({ success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' });
            }
          } else {
            sendResponse({ success: false, error: '–≠—Ç–æ –Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' });
          }
          break;

        case 'parseAllListings':
          if (this.isListPage) {
            const result = await this.parseAllListingsOnPage(request.segmentId, request.delay);
            sendResponse(result);
          } else {
            sendResponse({ success: false, error: '–≠—Ç–æ –Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π' });
          }
          break;

        case 'checkStatus':
          const status = this.checkListingStatus();
          sendResponse({ status: status });
          break;

        case 'diagnoseArea':
          this.diagnoseTotalAreaElements();
          sendResponse({ success: true, message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å' });
          break;

        default:
          sendResponse({ success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ CianParser:', error);
      sendResponse({ success: false, error: error.message });
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
   */
  async parseCurrentListing() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      const status = this.checkListingStatus();
      if (status !== 'active') {
        return null;
      }

      const data = {
        source: 'cian',
        external_id: this.extractExternalId(),
        url: this.cleanUrl(window.location.href), // ‚úÖ –û–ß–ò–©–ê–ï–ú URL
        title: this.extractTitle(),
        address: this.extractAddress(),
        coordinates: this.extractCoordinates(),
        price: this.extractPrice(),
        description: this.extractDescription(),
        photos: this.extractPhotos(),
        listing_date: this.extractListingDate(),
        last_update_date: this.extractUpdateDate(),
        views_count: this.extractViewsCount(),
        seller_name: this.extractSellerName(),
        seller_type: this.extractSellerType(),

        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
        property_type: this.extractPropertyType(),
        area_total: this.extractTotalArea(),
        area_kitchen: this.extractKitchenArea(),
        area_living: this.extractLivingArea(),
        floor: this.extractFloor(),
        floors_total: this.extractFloorsTotal(),
        rooms: this.extractRooms(),
        condition: this.extractCondition(),
        house_type: this.extractHouseType(),
        year_built: this.extractYearBuilt(),
        bathroom_type: this.extractBathroomType(),
        has_balcony: this.extractBalcony(),
        ceiling_height: this.extractCeilingHeight(),

        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
        status: 'active',
        created_at: new Date(),
        updated_at: new Date(),
        last_seen: new Date()
      };

      console.log('Cian: Parsed listing data:', data);
      return data;

    } catch (error) {
      console.error('Cian: Error parsing listing:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
   */
  checkListingStatus() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    const archiveIndicators = [
      '.text--color_gray_60',
      '[data-name="ArchivedOfferLabel"]',
      '.a10a3f92e9--removed--3HKV7'
    ];

    for (const selector of archiveIndicators) {
      const indicator = document.querySelector(selector);
      if (indicator && indicator.textContent.includes('–∞—Ä—Ö–∏–≤')) {
        return 'archived';
      }
    }

    return 'active';
  }

  /**
   * ‚úÖ –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   */
  cleanUrl(url) {
    try {
      const urlObj = new URL(url);

      // –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      const paramsToRemove = [
        'context',
        'utm_source',
        'utm_medium',
        'utm_campaign',
        'utm_content',
        'utm_term',
        '_gl',
        'fbclid',
        'gclid',
        'yclid',
        'ref',
        'source',
        'from',
        'deal_type',
        'engine_version',
        'in_favorites_list'
      ];

      // –£–¥–∞–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      paramsToRemove.forEach(param => {
        urlObj.searchParams.delete(param);
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π URL
      const cleanedUrl = urlObj.toString();
      console.log('Cian: URL –æ—á–∏—â–µ–Ω:', url, '‚Üí', cleanedUrl);
      return cleanedUrl;

    } catch (error) {
      console.error('Cian: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ URL:', error);
      return url; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ external_id –∏–∑ URL
   */
  extractExternalId() {
    const url = window.location.href;
    const patterns = [
      /\/flat\/(\d+)\//,        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /flat/123456/
      /\/flat\/(\d+)$/,         // –í –∫–æ–Ω—Ü–µ URL: /flat/123456
      /\/flat\/(\d+)#/,         // –ü–µ—Ä–µ–¥ —è–∫–æ—Ä–µ–º: /flat/123456#section
      /\/flat\/(\d+)\?/,        // –ü–µ—Ä–µ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: /flat/123456?param=...
    ];

    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match && match[1]) {
        console.log(`Cian: External ID extracted using pattern ${pattern.source}: ${match[1]}`);
        return match[1];
      }
    }

    console.warn('Cian: No external ID found in URL:', url);
    return '';
  }

  /**
   * ‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï: –ü–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–º–µ–Ω–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
   */
  findCharacteristicValue(paramName) {
    console.log('Cian: –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É:', paramName);

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Cian 2025
    const paramSelectors = [
      // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ 2025
      '[data-testid="object-summary-description-info"] div',
      '[data-name="ObjectSummaryDescription"] div',
      '[data-name="BtiInfo"] div',
      '.a10a3f92e9--info--3GNWS div',

      // –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      '[data-name="GeneralInfo"] div',
      '.object-summary-description-info div',
      '.a10a3f92e9--item--28HrH',
      '.object-item div',
      '.summary-description div'
    ];

    for (const selector of paramSelectors) {
      const paramItems = document.querySelectorAll(selector);
      console.log(`Cian: –°–µ–ª–µ–∫—Ç–æ—Ä ${selector}: –Ω–∞–π–¥–µ–Ω–æ ${paramItems.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

      for (const item of paramItems) {
        const text = item.textContent;
        if (text.toLowerCase().includes(paramName.toLowerCase())) {
          console.log('Cian: –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:', text);

          // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
          const colonSplit = text.split(':');
          if (colonSplit.length > 1) {
            const value = colonSplit[1].trim();
            console.log('Cian: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è:', value);
            return value;
          }

          // –ï—Å–ª–∏ –Ω–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
          return text.trim();
        }
      }
    }

    console.log('Cian: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', paramName);
    return null;
  }

  /**
   * ‚úÖ –ö–†–ò–¢–ò–ß–ù–û –£–õ–£–ß–®–ï–ù–ù–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
   */
  extractTotalArea() {
    console.log('Cian: –ü–∞—Ä—Å–∏–Ω–≥ –ø–ª–æ—â–∞–¥–∏: –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫');

    // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö (–æ—Å–Ω–æ–≤–Ω–æ–π)
    const areaParam = this.findCharacteristicValue('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å');
    if (areaParam) {
      console.log('Cian: –ù–∞–π–¥–µ–Ω–∞ –ø–ª–æ—â–∞–¥—å –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö:', areaParam);
      const match = areaParam.match(/(\d+(?:[.,]\d+)?)/);
      if (match) {
        const area = parseFloat(match[1].replace(',', '.'));
        console.log('Cian: –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:', area);
        return area;
      }
    }

    // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    const title = this.extractTitle();
    console.log('Cian: –ò—â–µ–º –ø–ª–æ—â–∞–¥—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ:', title);
    if (title) {
      const titlePatterns = [
        /(\d+(?:[.,]\d+)?)\s*–º¬≤/i,
        /(\d+(?:[.,]\d+)?)\s*–∫–≤\.?\s*–º/i,
        /(\d+(?:[.,]\d+)?)\s*–º\s*2/i,
        /–ø–ª–æ—â–∞–¥—å\s*(\d+(?:[.,]\d+)?)/i
      ];

      for (const pattern of titlePatterns) {
        const match = title.match(pattern);
        if (match) {
          const area = parseFloat(match[1].replace(',', '.'));
          console.log('Cian: –ü–ª–æ—â–∞–¥—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ:', area);
          return area;
        }
      }
    }

    // –ú–µ—Ç–æ–¥ 3: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ "–º¬≤" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const areaElements = document.querySelectorAll('*');
    for (const el of areaElements) {
      const text = el.textContent;
      if (text && text.includes('–º¬≤') && text.length < 50) {
        const match = text.match(/(\d+(?:[.,]\d+)?)\s*–º¬≤/);
        if (match) {
          const area = parseFloat(match[1].replace(',', '.'));
          if (area > 10 && area < 1000) { // –†–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–ª–æ—â–∞–¥–∏
            console.log('Cian: –ü–ª–æ—â–∞–¥—å –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä—è–º—ã–º –ø–æ–∏—Å–∫–æ–º:', area, '–≤ —Ç–µ–∫—Å—Ç–µ:', text);
            return area;
          }
        }
      }
    }

    // –ú–µ—Ç–æ–¥ 4: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    const alternativeSelectors = [
      '[data-testid="object-summary-description-info"]',
      '[data-name="GeneralInfo"]',
      '.a10a3f92e9--info--3GNWS'
    ];

    for (const selector of alternativeSelectors) {
      const container = document.querySelector(selector);
      if (container) {
        const text = container.textContent;
        const areaMatch = text.match(/–æ–±—â–∞—è[^:]*:?\s*(\d+(?:[.,]\d+)?)/i);
        if (areaMatch) {
          const area = parseFloat(areaMatch[1].replace(',', '.'));
          console.log('Cian: –ü–ª–æ—â–∞–¥—å –Ω–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:', area);
          return area;
        }
      }
    }

    console.log('Cian: –ü–ª–æ—â–∞–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º');
    return null;
  }

  /**
   * ‚úÖ –ù–û–í–û–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–æ—â–∞–¥–∏
   */
  diagnoseTotalAreaElements() {
    console.log('=== CIAN: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≠–õ–ï–ú–ï–ù–¢–û–í –ü–õ–û–©–ê–î–ò ===');

    const areaKeywords = ['–ø–ª–æ—â–∞–¥', '–º¬≤', '–∫–≤', '–æ–±—â–∞—è'];
    const areaElements = [];

    document.querySelectorAll('*').forEach(el => {
      if (el.children.length === 0) { // –¢–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const text = el.textContent.toLowerCase();
        for (const keyword of areaKeywords) {
          if (text.includes(keyword) && text.length < 100) {
            areaElements.push({
              text: text.trim(),
              selector: this.getElementSelector(el)
            });
            break;
          }
        }
      }
    });

    console.log('Cian: –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –ø–ª–æ—â–∞–¥–∏:', areaElements.slice(0, 15));
    console.log('=== CIAN: –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  getElementSelector(element) {
    if (element.id) {
      return `#${element.id}`;
    }

    if (element.className) {
      return `.${element.className.split(' ')[0]}`;
    }

    const dataName = element.getAttribute('data-name');
    if (dataName) {
      return `[data-name="${dataName}"]`;
    }

    const dataTestId = element.getAttribute('data-testid');
    if (dataTestId) {
      return `[data-testid="${dataTestId}"]`;
    }

    return element.tagName.toLowerCase();
  }

  /**
   * ‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –Ω–æ–≤—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
   */
  extractTitle() {
    const titleSelectors = [
      '[data-name="CardHeaderTitle"] h1',
      '[data-name="ObjectCardHeaderTitle"] h1',
      'h1[data-testid="object-card-title"]',
      '.a10a3f92e9--container--39vnl h1',
      'h1', // –ü—Ä–æ—Å—Ç–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä h1
      'h1[data-name*="title"]' // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    ];

    for (const selector of titleSelectors) {
      const titleEl = document.querySelector(selector);
      if (titleEl && titleEl.textContent.trim()) {
        console.log(`Cian: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${selector}:`, titleEl.textContent.trim());
        return titleEl.textContent.trim();
      }
    }

    console.log('Cian: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º');
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
   */
  extractAddress() {
    const selectors = [
      '[data-name="AddressContainer"] span',
      '[data-name="GeolocationContainer"] span',
      '[data-testid="address-link"]',
      '.a10a3f92e9--address--1SJ4d'
    ];

    for (const selector of selectors) {
      const addressEl = document.querySelector(selector);
      if (addressEl) {
        return addressEl.textContent.trim();
      }
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
   */
  extractCoordinates() {
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∫–∞—Ä—Ç—ã
    const mapEl = document.querySelector('[data-latitude][data-longitude]');
    if (mapEl) {
      return {
        lat: parseFloat(mapEl.getAttribute('data-latitude')),
        lon: parseFloat(mapEl.getAttribute('data-longitude'))
      };
    }

    // –ò–ª–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (window.cianConfig && window.cianConfig.geo) {
      const geo = window.cianConfig.geo;
      return {
        lat: geo.latitude,
        lon: geo.longitude
      };
    }

    return { lat: null, lon: null };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
   */
  extractPrice() {
    const selectors = [
      '[data-testid="price-amount"]',
      '[data-name="PriceContainer"] span',
      '.a10a3f92e9--price_value--3F7Vi',
      '.a10a3f92e9--amount--3bJyV'
    ];

    for (const selector of selectors) {
      const priceEl = document.querySelector(selector);
      if (priceEl) {
        const priceText = priceEl.textContent.replace(/[^\d]/g, '');
        const price = parseInt(priceText);
        if (price > 0) return price;
      }
    }
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
   */
  extractDescription() {
    const selectors = [
      '[data-name="Description"]',
      '[data-name="ObjectDescriptionContainer"]',
      '.a10a3f92e9--container--2_ccs'
    ];

    for (const selector of selectors) {
      const descEl = document.querySelector(selector);
      if (descEl) {
        return descEl.textContent.trim();
      }
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
   */
  extractPhotos() {
    const photos = [];
    const selectors = [
      '[data-name="GallerySlider"] img',
      '[data-name="PhotoGallery"] img',
      '.a10a3f92e9--slider--2XBGL img'
    ];

    selectors.forEach(selector => {
      const photoElements = document.querySelectorAll(selector);
      photoElements.forEach(img => {
        const src = img.src || img.getAttribute('data-src') || img.getAttribute('data-original');
        if (src && !photos.includes(src) && !src.includes('placeholder')) {
          photos.push(src);
        }
      });
    });

    return photos;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
   */
  extractListingDate() {
    const selectors = [
      '[data-name="PublishedLabel"]',
      '[data-name="DateContainer"]',
      '.a10a3f92e9--date--2GFXc'
    ];

    for (const selector of selectors) {
      const dateEl = document.querySelector(selector);
      if (dateEl) {
        const dateText = dateEl.textContent.trim();
        return this.parseCianDate(dateText);
      }
    }
    return new Date();
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  extractUpdateDate() {
    return this.extractListingDate(); // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Cian
   */
  parseCianDate(dateText) {
    const now = new Date();

    if (dateText.includes('—Å–µ–≥–æ–¥–Ω—è')) {
      return now;
    }

    if (dateText.includes('–≤—á–µ—Ä–∞')) {
      const yesterday = new Date(now);
      yesterday.setDate(now.getDate() - 1);
      return yesterday;
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã –≤–∏–¥–∞ "—Ä–∞–∑–º–µ—â–µ–Ω–æ 15 –º–∞—è"
    const dateRegex = /(\d{1,2})\s+(\w+)/;
    const match = dateText.match(dateRegex);

    if (match) {
      const day = parseInt(match[1]);
      const monthName = match[2];

      const months = {
        '—è–Ω–≤–∞—Ä—è': 0, '—Ñ–µ–≤—Ä–∞–ª—è': 1, '–º–∞—Ä—Ç–∞': 2, '–∞–ø—Ä–µ–ª—è': 3, '–º–∞—è': 4, '–∏—é–Ω—è': 5,
        '–∏—é–ª—è': 6, '–∞–≤–≥—É—Å—Ç–∞': 7, '—Å–µ–Ω—Ç—è–±—Ä—è': 8, '–æ–∫—Ç—è–±—Ä—è': 9, '–Ω–æ—è–±—Ä—è': 10, '–¥–µ–∫–∞–±—Ä—è': 11
      };

      const month = months[monthName];
      if (month !== undefined) {
        const date = new Date(now.getFullYear(), month, day);

        // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
        if (date > now) {
          date.setFullYear(now.getFullYear() - 1);
        }

        return date;
      }
    }

    return now;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
   */
  extractViewsCount() {
    const selectors = [
      '[data-name="ViewsCounter"]',
      '.a10a3f92e9--views--3yqbd'
    ];

    for (const selector of selectors) {
      const viewsEl = document.querySelector(selector);
      if (viewsEl) {
        const viewsText = viewsEl.textContent.replace(/[^\d]/g, '');
        return parseInt(viewsText) || null;
      }
    }
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
   */
  extractSellerName() {
    const selectors = [
      '[data-name="AuthorAsideInfo"] a',
      '[data-name="OfferAuthor"] a',
      '.a10a3f92e9--link--39dQH'
    ];

    for (const selector of selectors) {
      const sellerEl = document.querySelector(selector);
      if (sellerEl) {
        return sellerEl.textContent.trim();
      }
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
   */
  extractSellerType() {
    const selectors = [
      '[data-name="OfferAuthor"] span',
      '.a10a3f92e9--agentName--3K4UO'
    ];

    for (const selector of selectors) {
      const typeEl = document.querySelector(selector);
      if (typeEl && typeEl.textContent.includes('–∞–≥–µ–Ω—Ç')) {
        return '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ';
      }
    }
    return '–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
   */
  extractPropertyType() {
    const title = this.extractTitle();
    if (title.includes('–°—Ç—É–¥–∏—è')) return 'studio';
    if (title.includes('1-–∫–æ–º–Ω')) return '1k';
    if (title.includes('2-–∫–æ–º–Ω')) return '2k';
    if (title.includes('3-–∫–æ–º–Ω')) return '3k';
    if (title.includes('4-–∫–æ–º–Ω') || title.includes('5-–∫–æ–º–Ω') || title.includes('6-–∫–æ–º–Ω')) return '4k+';

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    const rooms = this.extractRooms();
    if (rooms === 0) return 'studio';
    if (rooms === 1) return '1k';
    if (rooms === 2) return '2k';
    if (rooms === 3) return '3k';
    if (rooms >= 4) return '4k+';

    return '';
  }

  /**
   * ‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –∫—É—Ö–Ω–∏
   */
  extractKitchenArea() {
    const areaInfo = this.findCharacteristicValue('–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏');
    if (areaInfo) {
      const match = areaInfo.match(/(\d+(?:[\.,]\d+)?)/);
      return match ? parseFloat(match[1].replace(',', '.')) : null;
    }
    return null;
  }

  /**
   * ‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∂–∏–ª–æ–π –ø–ª–æ—â–∞–¥–∏
   */
  extractLivingArea() {
    const areaInfo = this.findCharacteristicValue('–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å');
    if (areaInfo) {
      const match = areaInfo.match(/(\d+(?:[\.,]\d+)?)/);
      return match ? parseFloat(match[1].replace(',', '.')) : null;
    }
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç—Ç–∞–∂–∞
   */
  extractFloor() {
    const floorInfo = this.findCharacteristicValue('–≠—Ç–∞–∂');
    if (floorInfo) {
      const match = floorInfo.match(/(\d+)/);
      return match ? parseInt(match[1]) : null;
    }
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç—Ç–∞–∂–µ–π
   */
  extractFloorsTotal() {
    const floorInfo = this.findCharacteristicValue('–≠—Ç–∞–∂');
    if (floorInfo) {
      const match = floorInfo.match(/–∏–∑\s+(\d+)/);
      return match ? parseInt(match[1]) : null;
    }
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
   */
  extractRooms() {
    const roomsInfo = this.findCharacteristicValue('–ö–æ–º–Ω–∞—Ç');
    if (roomsInfo) {
      const match = roomsInfo.match(/(\d+)/);
      return match ? parseInt(match[1]) : null;
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const title = this.extractTitle();
    if (title.includes('–°—Ç—É–¥–∏—è')) return 0;
    const roomMatch = title.match(/(\d+)-–∫–æ–º–Ω/);
    return roomMatch ? parseInt(roomMatch[1]) : null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞
   */
  extractCondition() {
    const repairInfo = this.findCharacteristicValue('–†–µ–º–æ–Ω—Ç');
    if (repairInfo) {
      const repair = repairInfo.toLowerCase();
      if (repair.includes('–¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π')) return '–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π';
      if (repair.includes('–µ–≤—Ä–æ')) return '–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç';
      if (repair.includes('–∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π')) return '–≠–∫–æ–Ω–æ–º';
      if (repair.includes('—Ö–æ—Ä–æ—à–µ–µ')) return '–ñ–∏–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ';
      if (repair.includes('–±–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞')) return '–ë–µ—Ç–æ–Ω';
      if (repair.includes('—Ç—Ä–µ–±—É–µ—Ç')) return '–ù–µ –∂–∏–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ';
    }
    return '';
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–º–∞
   */
  extractHouseType() {
    const houseInfo = this.findCharacteristicValue('–¢–∏–ø –¥–æ–º–∞');
    return houseInfo ? houseInfo.trim() : '';
  }

  /**
   *