/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è
 * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ area.html –∏–ª–∏ settings.html
 */

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –û–ë–£–ß–ï–ù–ò–Ø');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
console.log('\nüíæ –ü–†–û–í–ï–†–ö–ê LOCALSTORAGE:');
const savedCount = localStorage.getItem('ml_training_count');
const savedExamples = localStorage.getItem('ml_training_examples');

console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫:', savedCount);
console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:', savedExamples ? '–µ—Å—Ç—å' : '–ù–ï–¢');

if (savedExamples) {
    try {
        const examples = JSON.parse(savedExamples);
        console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:', examples.length);
        console.log('–ü–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä:', examples[0]);
    } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏–º–µ—Ä–æ–≤:', e);
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º SmartAddressMatcher
console.log('\nüß† –ü–†–û–í–ï–†–ö–ê SMARTADDRESSMATCHER:');
if (window.smartAddressMatcher) {
    const matcher = window.smartAddressMatcher;
    console.log('SmartAddressMatcher –∑–∞–≥—Ä—É–∂–µ–Ω:', '–î–ê');
    console.log('–ü—Ä–∏–º–µ—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏:', matcher.training.examples.length);
    console.log('–û–±—É—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ:', matcher.training.enabled);
    
    if (matcher.training.examples.length > 0) {
        const positive = matcher.training.examples.filter(ex => ex.isCorrect).length;
        const negative = matcher.training.examples.filter(ex => !ex.isCorrect).length;
        console.log('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:', positive);
        console.log('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:', negative);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å
        if (positive >= 5 && negative >= 5 && matcher.training.examples.length >= 20) {
            console.log('‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è');
            console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ...');
            
            const oldVersion = matcher.model.version;
            const oldWeights = {...matcher.model.weights};
            
            matcher.retrain();
            
            console.log('–í–µ—Ä—Å–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å?', oldVersion, '‚Üí', matcher.model.version);
            console.log('–í–µ—Å–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å?');
            for (const [key, newValue] of Object.entries(matcher.model.weights)) {
                const oldValue = oldWeights[key];
                const changed = Math.abs(newValue - oldValue) > 0.001;
                console.log(`  ${key}: ${changed ? '–î–ê' : '–ù–ï–¢'} (${oldValue.toFixed(3)} ‚Üí ${newValue.toFixed(3)})`);
            }
        } else {
            console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è');
            console.log('–ù—É–∂–Ω–æ: ‚â•5 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö, ‚â•5 –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö, ‚â•20 –æ–±—â–∏—Ö');
        }
    } else {
        console.log('‚ùå –í –ø–∞–º—è—Ç–∏ –Ω–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è');
    }
} else {
    console.log('SmartAddressMatcher –∑–∞–≥—Ä—É–∂–µ–Ω:', '–ù–ï–¢');
    console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∞—Ç—å "üß† –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å–∞ (—É–º–Ω—ã–π ML)" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ area.html');
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
if (!savedExamples && savedCount) {
    console.log('1. –£ –≤–∞—Å –µ—Å—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—Ä–æ–≤, –Ω–æ —Å–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã');
    console.log('2. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∑–∞–Ω–æ–≤–æ —Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å –Ω—É–ª—è');
    console.log('3. –î–ª—è –≤–∏–¥–∏–º–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π');
}

if (window.smartAddressMatcher && window.smartAddressMatcher.training.examples.length < 20) {
    console.log('4. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è');
}