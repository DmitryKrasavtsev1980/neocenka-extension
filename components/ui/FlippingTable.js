/**
 * FlippingTable - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–ª–∏–ø–ø–∏–Ω–≥
 * –ö–æ–ø–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å –∑–∞–º–µ–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ "–§–∏–ª—å—Ç—Ä" –Ω–∞ "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
 * –°–ª–µ–¥—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ v0.1
 */
class FlippingTable {
    constructor(tableElementId, errorHandlingService, configService) {
        this.tableElementId = tableElementId;
        this.errorHandlingService = errorHandlingService;
        this.configService = configService;
        
        this.tableElement = document.getElementById(tableElementId);
        this.dataTable = null;
        this.objects = [];
        this.addresses = []; // –ö—ç—à –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è helper –º–µ—Ç–æ–¥–æ–≤
        
        this.debugEnabled = false;
        this.loadDebugSettings();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
     */
    async loadDebugSettings() {
        try {
            const debugConfig = await this.configService.get('debug.enabled');
            this.debugEnabled = debugConfig === true;
        } catch (error) {
            this.debugEnabled = false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è helper –º–µ—Ç–æ–¥–æ–≤
     */
    async loadAddresses() {
        try {
            this.addresses = await window.db.getAll('addresses');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è FlippingTable:', error);
            this.addresses = [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ ID
     */
    getAddressNameById(addressId) {
        if (!addressId || !this.addresses.length) return null;
        const address = this.addresses.find(addr => addr.id === addressId);
        return address ? address.address_string : null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
     */
    async initialize() {
        try {
            if (!this.tableElement) {
                throw new Error(`–≠–ª–µ–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã —Å ID "${this.tableElementId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞
            await this.loadAddresses();

            this.initializeDataTable();

            if (this.debugEnabled) {
                console.log('üè† FlippingTable: –¢–∞–±–ª–∏—Ü–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            }
        } catch (error) {
            console.error('‚ùå FlippingTable: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataTable
     */
    initializeDataTable() {
        if (this.dataTable) {
            this.dataTable.destroy();
        }

        // –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ DuplicatesManager
        this.dataTable = $(this.tableElement).DataTable({
            language: {
                url: '../libs/datatables/ru.json'
            },
            pageLength: 10,
            ordering: true,
            searching: true,
            order: [[4, 'desc']], // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–æ–ª–æ–Ω–∫–∞ 5)
            columnDefs: [
                {
                    targets: 0, // –ö–æ–ª–æ–Ω–∫–∞ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
                    orderable: false,
                    searchable: false,
                    className: 'dt-body-center text-xs',
                    width: '40px',
                    render: function (data, type, row) {
                        return `<input type="checkbox" class="flipping-checkbox focus:ring-indigo-500 h-3 w-3 text-indigo-600 border-gray-300 rounded" data-id="${row.id}">`;
                    }
                },
                {
                    targets: 1, // –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–∑–∞–º–µ–Ω—è–µ—Ç "–§–∏–ª—å—Ç—Ä")
                    orderable: true,
                    searchable: false,
                    className: 'dt-body-center text-xs',
                    width: '80px'
                },
                {
                    targets: [3, 4], // –î–∞—Ç—ã
                    className: 'text-xs'
                },
                {
                    targets: [5, 6, 7, 8], // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∞–¥—Ä–µ—Å, —Ü–µ–Ω–∞, –∫–æ–Ω—Ç–∞–∫—Ç  
                    className: 'text-xs'
                }
            ],
            columns: [
                // 0. –ß–µ–∫–±–æ–∫—Å (–∫–æ–ø–∏—è –∏–∑ DuplicatesManager)
                { 
                    data: null, 
                    title: '<input type="checkbox" id="selectAllFlippingObjects" class="focus:ring-indigo-500 h-3 w-3 text-indigo-600 border-gray-300 rounded">' 
                },
                // 1. –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–∑–∞–º–µ–Ω—è–µ—Ç "–§–∏–ª—å—Ç—Ä")
                { 
                    data: null, 
                    title: '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
                    render: (data, type, row) => {
                        // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                        return `<div class="text-xs text-center">
                            <span class="text-gray-400">‚Äî</span>
                        </div>`;
                    }
                },
                // 2. –°—Ç–∞—Ç—É—Å (–∫–æ–ø–∏—è –∏–∑ DuplicatesManager –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤)
                { 
                    data: null, 
                    title: '–°—Ç–∞—Ç—É—Å',
                    render: (data, type, row) => {
                        const statusBadges = {
                            'active': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">–ê–∫—Ç–∏–≤–Ω—ã–π</span>',
                            'archived': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>',
                            'archive': '<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">–ê—Ä—Ö–∏–≤–Ω—ã–π</span>'
                        };
                        
                        let html = statusBadges[row.status] || `<span class="text-xs text-gray-500">${row.status || '–ê–∫—Ç–∏–≤–Ω—ã–π'}</span>`;
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
                        const listingsCount = row.listings_count || 0;
                        const activeCount = row.active_listings_count || 0;
                        if (listingsCount > 0) {
                            html += `<br><span class="text-xs text-nowrap text-gray-600 cursor-pointer hover:text-blue-600 expand-object-listings" data-object-id="${row.id}" title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π">
                                <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                </svg>
                                –û–±—ä—è–≤–ª–µ–Ω–∏—è: ${listingsCount} (${activeCount} –∞–∫—Ç.)
                            </span>`;
                        } else {
                            html += `<br><span class="text-xs text-nowrap text-gray-600">–û–±—ä—è–≤–ª–µ–Ω–∏—è: ${listingsCount} (${activeCount} –∞–∫—Ç.)</span>`;
                        }
                        
                        return html;
                    }
                },
                // 3. –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (–∫–æ–ø–∏—è –∏–∑ DuplicatesManager)
                { 
                    data: 'created_at', 
                    title: '–°–æ–∑–¥–∞–Ω–æ',
                    render: (data, type, row) => {
                        const dateValue = data || row.created_at;
                        if (!dateValue) return '‚Äî';
                        const createdDate = new Date(dateValue);
                        
                        // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp
                        if (type === 'sort' || type === 'type') {
                            return createdDate.getTime();
                        }
                        
                        const dateStr = createdDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' });
                        
                        // –í—ã—á–∏—Å–ª—è–µ–º —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞
                        const updatedValue = row.updated_at;
                        const endDate = updatedValue ? new Date(updatedValue) : new Date();
                        const diffTime = Math.abs(endDate - createdDate);
                        const exposureDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                        
                        return `<div class="text-xs">
                            ${dateStr}<br>
                            <span class="text-gray-500" style="font-size: 10px;">—ç–∫—Å–ø. ${exposureDays} –¥–Ω.</span>
                        </div>`;
                    }
                },
                // 4. –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–æ–ø–∏—è –∏–∑ DuplicatesManager)
                { 
                    data: 'updated_at', 
                    title: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
                    render: (data, type, row) => {
                        const dateValue = data || row.updated_at;
                        if (!dateValue) return '‚Äî';
                        const date = new Date(dateValue);
                        
                        // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp
                        if (type === 'sort' || type === 'type') {
                            return date.getTime();
                        }
                        
                        const now = new Date();
                        const diffTime = Math.abs(now - date);
                        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                        
                        const dateStr = date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: '2-digit' });
                        const daysAgo = diffDays === 1 ? '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥' : `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
                        const color = diffDays > 7 ? 'text-red-600' : 'text-green-600';
                        
                        return `<div class="text-xs">
                            ${dateStr}<br>
                            <span class="${color}" style="font-size: 10px;">${daysAgo}</span>
                        </div>`;
                    }
                },
                // 5. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–∫–æ–ø–∏—è –∏–∑ DuplicatesManager –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤)
                { 
                    data: null, 
                    title: '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
                    render: (data, type, row) => {
                        const parts = [];
                        
                        // –¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã
                        if (row.rooms !== null && row.rooms !== undefined) {
                            if (row.rooms === 0) {
                                parts.push('–°—Ç—É–¥–∏—è');
                            } else {
                                parts.push(`${row.rooms}-–∫`);
                            }
                            parts.push('–∫–≤–∞—Ä—Ç–∏—Ä–∞');
                        }
                        
                        // –ü–ª–æ—â–∞–¥–∏
                        const areas = [];
                        if (row.area) areas.push(row.area);
                        if (row.area_living) areas.push(row.area_living);
                        if (row.area_kitchen) areas.push(row.area_kitchen);
                        if (areas.length > 0) parts.push(`${areas.join('/')}–º¬≤`);
                        
                        // –≠—Ç–∞–∂/—ç—Ç–∞–∂–Ω–æ—Å—Ç—å
                        if (row.floor && row.total_floors) {
                            parts.push(`${row.floor}/${row.total_floors} —ç—Ç.`);
                        }
                        
                        const characteristicsText = parts.length > 0 ? parts.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
                        
                        return `<div class="text-xs text-gray-900 max-w-xs" title="${characteristicsText}">${characteristicsText}</div>`;
                    }
                },
                // 6. –ê–¥—Ä–µ—Å (–∫–æ–ø–∏—è –∏–∑ DuplicatesManager –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤)
                { 
                    data: null, 
                    title: '–ê–¥—Ä–µ—Å',
                    render: (data, type, row) => {
                        const addressFromDb = this.getAddressNameById(row.address_id);
                        const addressText = addressFromDb || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
                        const addressClass = addressText === '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω' ? 'text-red-500' : 'text-blue-600 hover:text-blue-800 cursor-pointer';
                        
                        return `<div class="text-xs max-w-xs">
                            <div class="${addressClass} truncate clickable-object-address" data-object-id="${row.id}">${addressText}</div>
                        </div>`;
                    }
                },
                // 7. –¶–µ–Ω–∞ (–∫–æ–ø–∏—è –∏–∑ DuplicatesManager –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤)
                { 
                    data: null, 
                    title: '–¶–µ–Ω–∞',
                    render: (data, type, row) => {
                        const priceValue = row.current_price || row.price;
                        
                        if (!priceValue) return '<div class="text-xs">‚Äî</div>';
                        
                        const price = priceValue.toLocaleString();
                        let pricePerMeter = '';
                        
                        if (row.price_per_meter) {
                            pricePerMeter = row.price_per_meter.toLocaleString();
                        } else if (priceValue && row.area) {
                            const calculated = Math.round(priceValue / row.area);
                            pricePerMeter = calculated.toLocaleString();
                        }
                        
                        return `<div class="text-xs">
                            <div class="text-green-600 font-medium">${price}</div>
                            ${pricePerMeter ? `<div class="text-gray-500">${pricePerMeter}</div>` : ''}
                        </div>`;
                    }
                },
                // 8. –ö–æ–Ω—Ç–∞–∫—Ç (–∫–æ–ø–∏—è –∏–∑ DuplicatesManager –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤)
                { 
                    data: null, 
                    title: '–ö–æ–Ω—Ç–∞–∫—Ç',
                    render: (data, type, row) => {
                        // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
                        const ownerStatus = row.owner_status || '—Ç–æ–ª—å–∫–æ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤';
                        const statusColor = ownerStatus === '–µ—Å—Ç—å –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞' ? 'text-green-600' :
                                           ownerStatus === '–±—ã–ª–æ –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞' ? 'text-yellow-600' :
                                           'text-gray-600';
                        
                        return `<div class="text-xs max-w-xs">
                            <div class="${statusColor} font-medium">${ownerStatus}</div>
                        </div>`;
                    }
                }
            ],
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            drawCallback: () => this.onTableDraw(),
            initComplete: () => this.onTableInit()
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
     */
    async updateData(objects, profitabilityParameters = {}) {
        try {
            this.objects = objects || [];
            this.profitabilityParameters = profitabilityParameters;

            if (!this.dataTable) {
                await this.initialize();
            }

            // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.dataTable.clear();
            
            if (this.objects.length > 0) {
                this.dataTable.rows.add(this.objects);
            }
            
            this.dataTable.draw();
            
        } catch (error) {
            console.error('‚ùå FlippingTable: –û—à–∏–±–∫–∞ –≤ updateData:', error);
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
     */
    onTableDraw() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.setupRowEventHandlers();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
     */
    onTableInit() {
        if (this.debugEnabled) {
            console.log('üè† FlippingTable: DataTable –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
     */
    setupRowEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
        const selectAllCheckbox = document.getElementById('selectAllFlippingObjects');
        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', (e) => {
                const checkboxes = this.tableElement.querySelectorAll('.flipping-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = e.target.checked;
                });
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
        const checkboxes = this.tableElement.querySelectorAll('.flipping-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                const allCheckboxes = this.tableElement.querySelectorAll('.flipping-checkbox');
                const checkedCount = this.tableElement.querySelectorAll('.flipping-checkbox:checked').length;
                
                if (selectAllCheckbox) {
                    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < allCheckboxes.length;
                    selectAllCheckbox.checked = checkedCount === allCheckboxes.length;
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ DuplicatesManager)
        $(document).off('click', '.expand-object-listings');
        $(document).on('click', '.expand-object-listings', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const objectId = $(e.currentTarget).data('object-id');
            if (!objectId) return;
            
            this.toggleObjectListings(objectId, e.currentTarget);
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
     */
    getSelectedObjects() {
        const selectedIds = [];
        const checkboxes = this.tableElement.querySelectorAll('.flipping-checkbox:checked');
        
        checkboxes.forEach(checkbox => {
            selectedIds.push(parseInt(checkbox.dataset.id));
        });
        
        return this.objects.filter(obj => selectedIds.includes(obj.id));
    }

    /**
     * –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ DuplicatesManager)
     */
    async toggleObjectListings(objectId, clickedElement) {
        try {
            const row = this.dataTable.row($(clickedElement).closest('tr'));
            const rowData = row.data();
            
            if (!rowData) return;
            
            if (row.child.isShown()) {
                // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
                row.child.hide();
                $(clickedElement).find('svg').removeClass('transform rotate-180');
                
                if (this.debugEnabled) {
                    console.log('üè† FlippingTable: –°–≤–µ—Ä–Ω—É–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', objectId);
                }
            } else {
                // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º - –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                const listings = await window.db.getByIndex('listings', 'object_id', objectId);
                
                if (!listings || listings.length === 0) {
                    this.showNoListingsMessage(row);
                    return;
                }
                
                const childContent = this.createListingsChildRow(listings, rowData);
                row.child(childContent, 'child-row').show();
                $(clickedElement).find('svg').addClass('transform rotate-180');
                
                if (this.debugEnabled) {
                    console.log('üè† FlippingTable: –†–∞–∑–≤–µ—Ä–Ω—É–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞:', objectId, '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', listings.length);
                }
            }
        } catch (error) {
            console.error('‚ùå FlippingTable: –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ (–∫–æ–ø–∏—è –∏–∑ DuplicatesManager)
     */
    createListingsChildRow(listings, parentObject) {
        const listingsHtml = listings.map(listing => {
            const status = listing.status || 'unknown';
            const statusBadge = this.createListingStatusBadge(status);
            const price = listing.price ? new Intl.NumberFormat('ru-RU').format(listing.price) + ' ‚ÇΩ' : '‚Äî';
            const publishDate = listing.publish_date ? new Date(listing.publish_date).toLocaleDateString('ru-RU') : '‚Äî';
            const updateDate = listing.last_check ? new Date(listing.last_check).toLocaleDateString('ru-RU') : '‚Äî';
            
            return `
                <tr class="listing-row text-xs">
                    <td class="pl-12 py-2">
                        <div class="flex items-center space-x-2">
                            ${statusBadge}
                            <span class="text-blue-600 hover:underline">
                                <a href="${listing.url}" target="_blank" class="flex items-center space-x-1">
                                    <span>${listing.source || '–ò—Å—Ç–æ—á–Ω–∏–∫'}</span>
                                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                                    </svg>
                                </a>
                            </span>
                        </div>
                    </td>
                    <td class="py-2">${publishDate}</td>
                    <td class="py-2">${updateDate}</td>
                    <td class="py-2">‚Äî</td>
                    <td class="py-2">${listing.address || parentObject.address?.address_string || '‚Äî'}</td>
                    <td class="py-2 font-medium text-green-600">${price}</td>
                    <td class="py-2">${listing.seller_name || '‚Äî'}</td>
                </tr>
            `;
        }).join('');
        
        return `
            <div class="p-2 bg-gray-50">
                <div class="text-sm font-medium text-gray-700 mb-2">
                    –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ (${listings.length} —à—Ç.)
                </div>
                <table class="w-full text-xs">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="px-2 py-1 text-left">–°—Ç–∞—Ç—É—Å / –ò—Å—Ç–æ—á–Ω–∏–∫</th>
                            <th class="px-2 py-1 text-left">–°–æ–∑–¥–∞–Ω–æ</th>
                            <th class="px-2 py-1 text-left">–û–±–Ω–æ–≤–ª–µ–Ω–æ</th>
                            <th class="px-2 py-1 text-left">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</th>
                            <th class="px-2 py-1 text-left">–ê–¥—Ä–µ—Å</th>
                            <th class="px-2 py-1 text-left">–¶–µ–Ω–∞</th>
                            <th class="px-2 py-1 text-left">–ö–æ–Ω—Ç–∞–∫—Ç</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${listingsHtml}
                    </tbody>
                </table>
            </div>
        `;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–π–¥–∂–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    createListingStatusBadge(status) {
        const statusConfig = {
            'active': { text: '–ê–∫—Ç–∏–≤–Ω–æ–µ', class: 'bg-green-100 text-green-800' },
            'archive': { text: '–ê—Ä—Ö–∏–≤–Ω–æ–µ', class: 'bg-gray-100 text-gray-800' },
            'archived': { text: '–ê—Ä—Ö–∏–≤–Ω–æ–µ', class: 'bg-gray-100 text-gray-800' },
            'sold': { text: '–ü—Ä–æ–¥–∞–Ω–æ', class: 'bg-blue-100 text-blue-800' },
            'unknown': { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', class: 'bg-gray-100 text-gray-800' }
        };
        
        const config = statusConfig[status] || statusConfig['unknown'];
        return `<span class="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium ${config.class}">${config.text}</span>`;
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    showNoListingsMessage(row) {
        const noListingsContent = `
            <div class="p-4 bg-gray-50 text-center text-gray-500 text-sm">
                –û–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </div>
        `;
        
        row.child(noListingsContent, 'child-row').show();
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
     */
    destroy() {
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        $(document).off('click', '.expand-object-listings');
        
        if (this.dataTable) {
            this.dataTable.destroy();
            this.dataTable = null;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FlippingTable;
}