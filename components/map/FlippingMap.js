/**
 * FlippingMap - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–ª–∏–ø–ø–∏–Ω–≥
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
 * –°–ª–µ–¥—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ v0.1
 */
class FlippingMap {
    constructor(mapElementId, errorHandlingService, configService) {
        this.mapElementId = mapElementId;
        this.errorHandlingService = errorHandlingService;
        this.configService = configService;
        
        this.mapElement = document.getElementById(mapElementId);
        this.map = null;
        this.markers = [];
        this.objects = [];
        
        this.debugEnabled = false;
        this.loadDebugSettings();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
     */
    async loadDebugSettings() {
        try {
            const debugConfig = await this.configService.get('debug.enabled');
            this.debugEnabled = debugConfig === true;
        } catch (error) {
            this.debugEnabled = false;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
     */
    async initialize() {
        try {
            if (!this.mapElement) {
                throw new Error(`–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã —Å ID "${this.mapElementId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ MapManager
            this.map = L.map(this.mapElementId).setView([55.7558, 37.6176], 10);

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∫–∞—Ä—Ç—ã —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ MapManager
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors',
                maxZoom: 18,
                opacity: 1.0
            }).addTo(this.map);

            this.markers = [];

            if (this.debugEnabled) {
                console.log('üè† FlippingMap: –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            }
        } catch (error) {
            console.error('‚ùå FlippingMap: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
     */
    async updateObjects(objects, profitabilityParameters = {}) {
        try {
            this.objects = objects || [];

            if (!this.map) {
                await this.initialize();
            }

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            this.clearMarkers();

            if (this.objects.length === 0) {
                if (this.debugEnabled) {
                    console.log('üè† FlippingMap: –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                }
                return;
            }

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º
            const addressGroups = this.groupObjectsByAddress(this.objects);
            
            // –°–æ–∑–¥–∞—ë–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∞–¥—Ä–µ—Å–æ–≤
            const markersToAdd = [];

            Object.entries(addressGroups).forEach(([addressKey, objectsGroup]) => {
                const marker = this.createMarkerForAddress(addressKey, objectsGroup);
                if (marker) {
                    markersToAdd.push(marker);
                    this.markers.push(marker);
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç—É
            markersToAdd.forEach(marker => marker.addTo(this.map));

            // –ü–æ–¥–≥–æ–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–¥ –º–∞—Ä–∫–µ—Ä—ã
            if (this.markers.length > 0) {
                this.fitMapToMarkers();
            }
            
        } catch (error) {
            console.error('‚ùå FlippingMap: –û—à–∏–±–∫–∞ –≤ updateObjects:', error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É
     */
    createMarkerForAddress(addressKey, objectsGroup) {
        try {
            const objectCount = objectsGroup.length;
            const address = objectsGroup[0].address; // –ê–¥—Ä–µ—Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≥—Ä—É–ø–ø—ã

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä–µ–∫—Ç–æ–≤
            let markerColor = '#D97706'; // –∂—ë–ª—Ç—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (< 10 –æ–±—ä–µ–∫—Ç–æ–≤)
            
            if (objectCount >= 10) {
                markerColor = '#059669'; // –∑–µ–ª—ë–Ω—ã–π –¥–ª—è >= 10 –æ–±—ä–µ–∫—Ç–æ–≤
            }

            // –°–æ–∑–¥–∞—ë–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É
            const customIcon = L.divIcon({
                className: 'custom-flipping-marker',
                html: `
                    <div style="
                        background-color: ${markerColor};
                        width: 32px;
                        height: 32px;
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        border: 3px solid white;
                        box-shadow: 0 2px 6px rgba(0,0,0,0.3);
                        font-size: 14px;
                        color: white;
                        font-weight: bold;
                    ">
                        ${objectCount}
                    </div>
                `,
                iconSize: [32, 32],
                iconAnchor: [16, 16],
                popupAnchor: [0, -16]
            });

            // –°–æ–∑–¥–∞—ë–º –º–∞—Ä–∫–µ—Ä
            const marker = L.marker(
                [address.latitude, address.longitude],
                { icon: customIcon }
            );

            // –°–æ–∑–¥–∞—ë–º popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ –æ–±—ä–µ–∫—Ç–æ–≤
            const popupContent = this.createAddressPopupContent(address, objectsGroup);
            marker.bindPopup(popupContent, {
                maxWidth: 350,
                className: 'flipping-popup'
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            marker.on('click', () => {
                this.onAddressMarkerClick(addressKey, objectsGroup);
            });

            return marker;

        } catch (error) {
            if (this.debugEnabled) {
                console.error('üè† FlippingMap: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:', addressKey, error);
            }
            return null;
        }
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∞–¥—Ä–µ—Å–∞–º
     */
    groupObjectsByAddress(objects) {
        const groups = {};
        
        objects.forEach(obj => {
            if (obj.address && obj.address.latitude && obj.address.longitude) {
                // –°–æ–∑–¥–∞—ë–º –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–¥—Ä–µ—Å–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                const addressKey = `${obj.address.address_string}_${obj.address.latitude}_${obj.address.longitude}`;
                
                if (!groups[addressKey]) {
                    groups[addressKey] = [];
                }
                groups[addressKey].push(obj);
            }
        });
        
        return groups;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ popup –¥–ª—è –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É
     */
    createAddressPopupContent(address, objectsGroup) {
        const objectCount = objectsGroup.length;
        const addressText = address.address_string || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω';
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
        const roomsDistribution = {};
        let totalPrice = 0;
        let priceCount = 0;
        let totalArea = 0;
        let areaCount = 0;

        objectsGroup.forEach(obj => {
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
            const rooms = obj.rooms === 0 || obj.rooms === 'studio' ? '–°—Ç—É–¥–∏—è' : `${obj.rooms}-–∫`;
            roomsDistribution[rooms] = (roomsDistribution[rooms] || 0) + 1;
            
            // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
            if (obj.price) {
                totalPrice += obj.price;
                priceCount++;
            }
            
            // –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å
            if (obj.area) {
                totalArea += obj.area;
                areaCount++;
            }
        });

        const avgPrice = priceCount > 0 ? Math.round(totalPrice / priceCount) : 0;
        const avgArea = areaCount > 0 ? Math.round(totalArea / areaCount) : 0;
        
        const roomsText = Object.entries(roomsDistribution)
            .map(([rooms, count]) => `${rooms}: ${count}`)
            .join(', ');

        const colorClass = objectCount >= 10 ? 'text-green-600' : 'text-yellow-600';

        return `
            <div class="p-3">
                <div class="font-semibold text-sm mb-2 text-gray-900">
                    ${addressText}
                </div>
                
                <div class="space-y-2">
                    <div class="flex items-center justify-between">
                        <span class="text-xs font-medium text-gray-700">–û–±—ä–µ–∫—Ç–æ–≤:</span>
                        <span class="text-sm font-bold ${colorClass}">
                            ${objectCount} —à—Ç.
                        </span>
                    </div>
                    
                    <div class="text-xs text-gray-600">
                        <div><span class="font-medium">–¢–∏–ø—ã:</span> ${roomsText}</div>
                        ${avgPrice > 0 ? `<div><span class="font-medium">–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</span> ${new Intl.NumberFormat('ru-RU').format(avgPrice)} ‚ÇΩ</div>` : ''}
                        ${avgArea > 0 ? `<div><span class="font-medium">–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å:</span> ${avgArea} –º¬≤</div>` : ''}
                    </div>
                </div>
                
                <div class="mt-3 pt-2 border-t border-gray-200">
                    <button class="w-full px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors" 
                            onclick="window.flippingController.showAddressDetails('${addressText}', ${objectsGroup.length})">
                        –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ popup –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
     */
    createPopupContent(obj, profitability) {
        const annualReturn = profitability.annualReturn || 0;
        const totalProfit = profitability.totalProfit || 0;
        const renovationCosts = profitability.renovationCosts || 0;
        
        // –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        let profitabilityColor = '#6B7280';
        if (annualReturn > 20) profitabilityColor = '#059669';
        else if (annualReturn > 0) profitabilityColor = '#D97706';
        else profitabilityColor = '#DC2626';

        const roomsText = obj.rooms === 0 || obj.rooms === 'studio' ? '–°—Ç—É–¥–∏—è' : `${obj.rooms}-–∫`;
        const areaText = obj.area ? `${obj.area} –º¬≤` : '‚Äî';
        const floorText = obj.floor && obj.total_floors ? `${obj.floor}/${obj.total_floors} —ç—Ç.` : '‚Äî';
        const priceText = obj.price ? new Intl.NumberFormat('ru-RU').format(obj.price) + ' ‚ÇΩ' : '‚Äî';
        const profitText = totalProfit ? new Intl.NumberFormat('ru-RU').format(Math.round(totalProfit)) + ' ‚ÇΩ' : '‚Äî';
        const renovationText = renovationCosts ? new Intl.NumberFormat('ru-RU').format(Math.round(renovationCosts)) + ' ‚ÇΩ' : '‚Äî';

        return `
            <div class="p-3">
                <div class="font-semibold text-sm mb-2 text-gray-900">
                    ${obj.address.address_string || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}
                </div>
                
                <div class="space-y-1 text-xs text-gray-600">
                    <div><span class="font-medium">–¢–∏–ø:</span> ${roomsText} ‚Ä¢ ${areaText} ‚Ä¢ ${floorText}</div>
                    <div><span class="font-medium">–¶–µ–Ω–∞:</span> ${priceText}</div>
                    <div><span class="font-medium">–†–µ–º–æ–Ω—Ç:</span> ${renovationText}</div>
                </div>
                
                <div class="mt-2 pt-2 border-t border-gray-200">
                    <div class="flex items-center justify-between">
                        <span class="text-xs font-medium text-gray-700">–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</span>
                        <span class="text-sm font-bold" style="color: ${profitabilityColor}">
                            ${annualReturn.toFixed(1)}% –≥–æ–¥–æ–≤—ã—Ö
                        </span>
                    </div>
                    <div class="flex items-center justify-between mt-1">
                        <span class="text-xs text-gray-500">–ü—Ä–∏–±—ã–ª—å:</span>
                        <span class="text-xs font-medium" style="color: ${profitabilityColor}">
                            ${profitText}
                        </span>
                    </div>
                </div>
                
                <div class="mt-2">
                    <button class="w-full px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors" 
                            onclick="window.flippingController.showObjectDetails(${obj.id})">
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É –∞–¥—Ä–µ—Å–∞
     */
    onAddressMarkerClick(addressKey, objectsGroup) {
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        if (window.applicationController) {
            const flippingController = window.applicationController.getController('FlippingController');
            if (flippingController) {
                flippingController.emit('address:selected', { 
                    addressKey, 
                    objects: objectsGroup,
                    address: objectsGroup[0].address
                });
            }
        }

        if (this.debugEnabled) {
            console.log('üè† FlippingMap: –í—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å:', addressKey, '–æ–±—ä–µ–∫—Ç–æ–≤:', objectsGroup.length);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É (legacy)
     */
    onMarkerClick(obj) {
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        if (window.applicationController) {
            const flippingController = window.applicationController.getController('FlippingController');
            if (flippingController) {
                flippingController.emit('object:selected', { object: obj });
            }
        }

        if (this.debugEnabled) {
            console.log('üè† FlippingMap: –í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç:', obj.id);
        }
    }

    /**
     * –ü–æ–¥–≥–æ–Ω–∫–∞ –∫–∞—Ä—Ç—ã –ø–æ–¥ –º–∞—Ä–∫–µ—Ä—ã
     */
    fitMapToMarkers() {
        if (this.markers.length === 0) return;

        try {
            if (this.markers.length === 1) {
                // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–∞—Ä–∫–µ—Ä, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –Ω—ë–º
                const marker = this.markers[0];
                this.map.setView(marker.getLatLng(), 15);
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ä–æ–≤, –ø–æ–¥–≥–æ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                const group = new L.featureGroup(this.markers);
                this.map.fitBounds(group.getBounds(), { 
                    padding: [20, 20],
                    maxZoom: 16
                });
            }
        } catch (error) {
            if (this.debugEnabled) {
                console.error('üè† FlippingMap: –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ–Ω–∫–∏ –∫–∞—Ä—Ç—ã:', error);
            }
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
     */
    clearMarkers() {
        if (this.markers && this.markers.length > 0) {
            this.markers.forEach(marker => {
                if (this.map && marker) {
                    this.map.removeLayer(marker);
                }
            });
            this.markers = [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
     */
    getMarkersStatistics() {
        const visible = this.markers.length;
        const total = this.objects.length;
        const hidden = total - visible;

        const profitabilityStats = {
            high: 0,    // > 20%
            medium: 0,  // 0-20%
            low: 0,     // < 0%
            total: total
        };

        this.objects.forEach(obj => {
            const annualReturn = obj.profitability?.annualReturn || 0;
            if (annualReturn > 20) profitabilityStats.high++;
            else if (annualReturn > 0) profitabilityStats.medium++;
            else profitabilityStats.low++;
        });

        return {
            markers: { visible, hidden, total },
            profitability: profitabilityStats
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
     */
    destroy() {
        this.clearMarkers();
        
        if (this.map) {
            this.map.remove();
            this.map = null;
        }

        if (this.debugEnabled) {
            console.log('üè† FlippingMap: –ö–∞—Ä—Ç–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FlippingMap;
}