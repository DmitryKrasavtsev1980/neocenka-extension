/**
 * FlippingMap - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–ª–∏–ø–ø–∏–Ω–≥
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
 * –°–ª–µ–¥—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ v0.1
 */
class FlippingMap {
    constructor(mapElementId, errorHandlingService, configService) {
        this.mapElementId = mapElementId;
        this.errorHandlingService = errorHandlingService;
        this.configService = configService;
        
        this.mapElement = document.getElementById(mapElementId);
        this.map = null;
        this.markers = [];
        this.objects = [];
        
        this.debugEnabled = false;
        this.loadDebugSettings();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
     */
    async loadDebugSettings() {
        try {
            const debugConfig = await this.configService.get('debug.enabled');
            this.debugEnabled = debugConfig === true;
        } catch (error) {
            this.debugEnabled = false;
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∫–∞—Ä—Ç—ã –≤–∏–¥–∏–º–æ–π
     */
    ensureMapPanelVisible() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–Ω–µ–ª–∏ –∫–∞—Ä—Ç—ã
            const mapPanelContainer = document.getElementById('mapPanelContainer');
            const mapPanelContent = document.getElementById('mapPanelContent');
            const mapPanelCheckbox = document.getElementById('mapPanel');
            
            console.log('üó∫Ô∏è FlippingMap: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ –∫–∞—Ä—Ç—ã:', {
                container: !!mapPanelContainer,
                content: !!mapPanelContent,
                checkbox: !!mapPanelCheckbox,
                containerHidden: mapPanelContainer?.classList.contains('hidden'),
                contentHidden: mapPanelContent?.classList.contains('hidden'),
                checkboxChecked: mapPanelCheckbox?.checked
            });

            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å hidden —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–∞–Ω–µ–ª–∏
            if (mapPanelContainer && mapPanelContainer.classList.contains('hidden')) {
                mapPanelContainer.classList.remove('hidden');
                console.log('üó∫Ô∏è FlippingMap: –£–±—Ä–∞–ª–∏ hidden —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–∞–Ω–µ–ª–∏ –∫–∞—Ä—Ç—ã');
            }

            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å hidden —Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–Ω–µ–ª–∏
            if (mapPanelContent && mapPanelContent.classList.contains('hidden')) {
                mapPanelContent.classList.remove('hidden');
                console.log('üó∫Ô∏è FlippingMap: –£–±—Ä–∞–ª–∏ hidden —Å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–Ω–µ–ª–∏ –∫–∞—Ä—Ç—ã');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å
                if (mapPanelCheckbox && !mapPanelCheckbox.checked) {
                    mapPanelCheckbox.checked = true;
                }

                // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É (chevron)
                const mapPanelChevron = document.getElementById('mapPanelChevron');
                if (mapPanelChevron) {
                    mapPanelChevron.style.transform = 'rotate(0deg)';
                }
            }

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—Ç—ã
            if (this.mapElement) {
                this.mapElement.style.height = '500px';
                this.mapElement.style.width = '100%';
                this.mapElement.style.minHeight = '500px';
                this.mapElement.style.display = 'block';
                
                // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                let parent = this.mapElement.parentElement;
                while (parent && parent.id !== 'body') {
                    // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –∏–º–µ–µ—Ç –∫–ª–∞—Å—Å h-80 (320px), —É–±–∏—Ä–∞–µ–º –µ–≥–æ
                    if (parent.classList.contains('h-80')) {
                        parent.classList.remove('h-80');
                        parent.style.height = '500px';
                        console.log('üó∫Ô∏è FlippingMap: –£–±—Ä–∞–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã h-80 —Å —Ä–æ–¥–∏—Ç–µ–ª—è');
                    }
                    
                    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤—ã—Å–æ—Ç—ã
                    if (parent.style.maxHeight && parent.style.maxHeight !== 'none') {
                        parent.style.maxHeight = 'none';
                    }
                    
                    parent = parent.parentElement;
                }
                
                // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–∞–Ω–µ–ª–∏ –∫–∞—Ä—Ç—ã
                if (mapPanelContent) {
                    mapPanelContent.style.height = 'auto';
                    mapPanelContent.style.minHeight = '500px';
                }
                
                console.log('üó∫Ô∏è FlippingMap: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã');
            }

        } catch (error) {
            console.error('‚ùå FlippingMap: –û—à–∏–±–∫–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
     */
    async initialize() {
        try {
            if (!this.mapElement) {
                throw new Error(`–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã —Å ID "${this.mapElementId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∫–∞—Ä—Ç—ã
            this.ensureMapPanelVisible();

            console.log('üó∫Ô∏è FlippingMap: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã, —ç–ª–µ–º–µ–Ω—Ç:', {
                id: this.mapElementId,
                element: this.mapElement,
                width: this.mapElement.offsetWidth,
                height: this.mapElement.offsetHeight,
                parentWidth: this.mapElement.parentElement?.offsetWidth,
                parentHeight: this.mapElement.parentElement?.offsetHeight
            });

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π Leaflet
            if (this.mapElement.offsetWidth === 0 || this.mapElement.offsetHeight === 0) {
                console.warn('üó∫Ô∏è FlippingMap: –†–∞–∑–º–µ—Ä—ã –∫–∞—Ä—Ç—ã –≤—Å—ë –µ—â—ë 0x0, –ø—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã');
                this.mapElement.style.height = '500px !important';
                this.mapElement.style.width = '100% !important';
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ DOM
                this.mapElement.offsetHeight; // Trigger reflow
            }

            // –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ MapManager
            this.map = L.map(this.mapElementId).setView([55.7558, 37.6176], 10);

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –∫–∞—Ä—Ç—ã —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ MapManager
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors',
                maxZoom: 18,
                opacity: 1.0
            }).addTo(this.map);

            this.markers = [];

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã - –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫
            setTimeout(() => {
                this.map.invalidateSize();
                console.log('üó∫Ô∏è FlippingMap: –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω (–ø–æ–ø—ã—Ç–∫–∞ 1)', {
                    width: this.mapElement.offsetWidth,
                    height: this.mapElement.offsetHeight
                });
            }, 100);

            setTimeout(() => {
                this.map.invalidateSize();
                console.log('üó∫Ô∏è FlippingMap: –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω (–ø–æ–ø—ã—Ç–∫–∞ 2)', {
                    width: this.mapElement.offsetWidth,
                    height: this.mapElement.offsetHeight
                });
            }, 300);

            setTimeout(() => {
                this.map.invalidateSize();
                console.log('üó∫Ô∏è FlippingMap: –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω (–ø–æ–ø—ã—Ç–∫–∞ 3)', {
                    width: this.mapElement.offsetWidth,
                    height: this.mapElement.offsetHeight
                });
            }, 1000);

            console.log('üè† FlippingMap: –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.error('‚ùå FlippingMap: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –∞–¥—Ä–µ—Å–∞–º–∏ –±–µ–∑ —Ä–∞—Å—á—ë—Ç–æ–≤
     */
    async updateAddresses(addresses, profitabilityParameters = {}, objects = []) {
        try {
            this.addresses = addresses || [];

            if (!this.map) {
                await this.initialize();
            }

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
            this.clearMarkers();

            if (this.addresses.length === 0) {
                console.log('üè† FlippingMap: –ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                return;
            }

            console.log(`üó∫Ô∏è FlippingMap: –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${this.addresses.length} –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ`);
            
            // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            for (let index = 0; index < this.addresses.length; index++) {
                const address = this.addresses[index];
                const marker = this.createSimpleAddressMarker(address);
                if (marker) {
                    this.markers.push(marker);
                    marker.addTo(this.map);
                    
                    console.log(`‚úÖ –ú–∞—Ä–∫–µ—Ä ${index + 1} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É. –ê–¥—Ä–µ—Å:`, address.address_string || address.address);
                } else {
                    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ä –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${index + 1}:`, address.id);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã
            console.log(`üó∫Ô∏è –ò—Ç–æ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ: ${this.markers.length}`);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                if (this.map) {
                    this.map.invalidateSize(true);
                    console.log('üó∫Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
                }
            }, 500);
            
            // –ü–æ–¥–≥–æ–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–¥ –º–∞—Ä–∫–µ—Ä—ã
            if (this.markers.length > 0) {
                this.fitMapToMarkers();
            } else {
                console.warn('‚ö†Ô∏è FlippingMap: –ù–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏ –∫–∞—Ä—Ç—ã');
            }
            
        } catch (error) {
            console.error('‚ùå FlippingMap: –û—à–∏–±–∫–∞ –≤ updateAddresses:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ (legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
     */
    async updateObjects(objects, profitabilityParameters = {}) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤
        const addressMap = new Map();
        
        for (const obj of objects || []) {
            if (obj.address && obj.address_id) {
                addressMap.set(obj.address_id, obj.address);
            }
        }
        
        const addresses = Array.from(addressMap.values());
        console.log(`üîÑ FlippingMap: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ${objects?.length || 0} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ ${addresses.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤`);
        
        // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        return this.updateAddresses(addresses, profitabilityParameters, objects);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –∞–¥—Ä–µ—Å–∞ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ FlippingProfitabilityManager)
     */
    async createAddressMarker(address) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if (!window.db || !window.db.db) {
            console.warn('üîç FlippingMap: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞');
            return this.createSimpleAddressMarker(address);
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É –º–∞—Ä–∫–µ—Ä–∞ –ø–æ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
        const floorCount = address.floors_count || 0;
        let markerHeight;
        if (floorCount >= 1 && floorCount <= 5) {
            markerHeight = 10;
        } else if (floorCount > 5 && floorCount <= 10) {
            markerHeight = 15;
        } else if (floorCount > 10 && floorCount <= 20) {
            markerHeight = 20;
        } else if (floorCount > 20) {
            markerHeight = 25;
        } else {
            markerHeight = 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ä–µ - –≤ —Ä–µ–∂–∏–º–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        let labelText = '';
        const activeMapFilter = 'profitability'; // –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è FlippingMap
        
        if (activeMapFilter === 'profitability') {
            try {
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                const profitabilityService = window.flippingProfitabilityService || 
                                            (window.flippingController?.profitabilityService) ||
                                            (window.areaPage?.reportsManager?.flippingProfitabilityManager?.profitabilityService);
                console.log(`üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:`, {
                    window_flippingProfitabilityService: !!window.flippingProfitabilityService,
                    flippingController_service: !!(window.flippingController?.profitabilityService),
                    manager_service: !!(window.areaPage?.reportsManager?.flippingProfitabilityManager?.profitabilityService),
                    final_service: !!profitabilityService
                });
                
                // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                // –¢–∞–∫ –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ updateAddresses —á–µ—Ä–µ–∑ FlippingController
                // –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
                if (this.cachedObjects && this.cachedObjects.length > 0) {
                    const objectsAtAddress = this.cachedObjects.filter(obj => obj.address_id === address.id);
                    console.log(`üîç –û–±—ä–µ–∫—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${address.id}:`, objectsAtAddress.length, objectsAtAddress.map(o => o.id));
                    
                    if (objectsAtAddress.length > 0) {
                        let maxProfitability = -Infinity;
                        
                        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É
                        for (const obj of objectsAtAddress) {
                            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                            const profitabilityService = window.flippingProfitabilityService || 
                                                        (window.flippingController?.profitabilityService) ||
                                                        (window.areaPage?.reportsManager?.flippingProfitabilityManager?.profitabilityService);
                            
                            console.log(`üîç –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${obj.id}:`, {
                                hasService: !!profitabilityService,
                                objData: {
                                    id: obj.id,
                                    price: obj.current_price || obj.price,
                                    area: obj.area_total || obj.area,
                                    property_type: obj.property_type
                                },
                                filters: this.currentFilters
                            });
                            
                            if (profitabilityService) {
                                try {
                                    const profitabilityResult = profitabilityService.calculateFlippingProfitability(obj, this.currentFilters);
                                    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${obj.id}:`, profitabilityResult);
                                    
                                    if (profitabilityResult && profitabilityResult.annualROI) {
                                        maxProfitability = Math.max(maxProfitability, profitabilityResult.annualROI);
                                        console.log(`‚úÖ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${obj.id}: ${profitabilityResult.annualROI.toFixed(1)}%`);
                                    } else {
                                        console.warn(`‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞ –ø—É—Å—Ç–æ–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${obj.id}`);
                                    }
                                } catch (error) {
                                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${obj.id}:`, error);
                                }
                            } else {
                                console.warn('‚ö†Ô∏è FlippingProfitabilityService –Ω–µ –Ω–∞–π–¥–µ–Ω');
                            }
                        }
                        
                        if (maxProfitability !== -Infinity) {
                            labelText = `${maxProfitability.toFixed(1)}%`;
                            console.log(`‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${address.id}: ${labelText}`);
                        } else {
                            labelText = '';
                            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${address.id}`);
                        }
                    } else {
                        console.log(`‚ÑπÔ∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${address.id}`);
                    }
                } else {
                    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –ë–î –∫–∞–∫ fallback
                    if (window.db && window.db.getObjectsByAddress) {
                        const objects = await window.db.getObjectsByAddress(address.id);
                        if (objects && objects.length > 0) {
                            let maxProfitability = -Infinity;
                            
                            for (const obj of objects) {
                                const profitabilityService = window.flippingProfitabilityService || 
                                                            (window.flippingController?.profitabilityService) ||
                                                            (window.areaPage?.reportsManager?.flippingProfitabilityManager?.profitabilityService);
                                
                                if (profitabilityService) {
                                    try {
                                        const profitabilityResult = profitabilityService.calculateFlippingProfitability(obj, this.currentFilters);
                                        if (profitabilityResult && profitabilityResult.annualROI) {
                                            maxProfitability = Math.max(maxProfitability, profitabilityResult.annualROI);
                                        }
                                    } catch (error) {
                                        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (fallback) –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ${obj.id}:`, error);
                                    }
                                }
                            }
                            
                            if (maxProfitability !== -Infinity) {
                                labelText = `${maxProfitability.toFixed(1)}%`;
                            }
                        }
                    }
                }
            } catch (error) {
                console.warn('FlippingMap: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –∞–¥—Ä–µ—Å–∞:', address.id, error);
            }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞
        let markerColor = '#3b82f6'; // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        let labelTextColor = '#374151';  // –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let labelBackground = 'rgba(255,255,255,0.9)'; // –ë–µ–ª—ã–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if (activeMapFilter === 'profitability') {
            // –î–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞
            if (labelText && labelText.includes('%')) {
                const profitabilityValue = parseFloat(labelText.replace('%', ''));
                const profitabilityPercent = this.currentFilters?.profitabilityPercent || 60; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60%
                
                if (profitabilityValue >= profitabilityPercent) {
                    // –ó–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω —Å –±–µ–ª—ã–º —à—Ä–∏—Ñ—Ç–æ–º, –µ—Å–ª–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å >= –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞
                    labelTextColor = 'white';
                    labelBackground = '#10B981'; // –ó–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω
                }
            }
            // –î–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞
            markerColor = '#3b82f6';
        }
        
        // –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–¥—Ä–µ—Å–∞
        console.log('üîç FlippingMap: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–¥—Ä–µ—Å–∞:', {
            id: address.id,
            address_string: address.address_string,
            address: address.address,
            coordinates: address.coordinates,
            allFields: Object.keys(address),
            fullAddress: address
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ –∏ FlippingProfitabilityManager)
        let lat = address.coordinates?.lat;
        let lng = address.coordinates?.lng;
        
        console.log('üîç FlippingMap: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞:', { lat, lng, coordinates: address.coordinates });
        
        if (!lat || !lng || isNaN(lat) || isNaN(lng)) {
            console.error('‚ùå FlippingMap: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞:', {
                addressId: address.id,
                addressString: address.address_string || address.address,
                lat: lat,
                lng: lng,
                coordinates: address.coordinates,
                allFields: Object.keys(address)
            });
            return null;
        }
        
        console.log('üîç FlippingMap: –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
            lat, lng, markerHeight, markerColor, labelText, labelTextColor, labelBackground
        });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º circleMarker - –æ–Ω –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã–π –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∫–æ–Ω–æ–∫
        const marker = L.circleMarker([lat, lng], {
            radius: 8,
            fillColor: markerColor,
            color: 'white',
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8,
        });
        
        console.log('‚úÖ FlippingMap: –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä —Å–æ–∑–¥–∞–Ω (–∫–æ–ø–∏—è –∏–∑ FlippingProfitabilityManager) —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', [lat, lng]);
        

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ –º–∞—Ä–∫–µ—Ä–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        marker.addressData = address;

        // –ü—Ä–æ—Å—Ç–æ–π popup —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const popupContent = `
            <div class="p-3">
                <div class="font-semibold text-sm mb-2">
                    ${address.address || address.address_string || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}
                </div>
                ${labelText ? `
                <div class="text-sm font-bold text-green-600">
                    –ú–∞–∫—Å. –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${labelText}
                </div>
                ` : ''}
                <div class="text-xs text-gray-600">
                    –≠—Ç–∞–∂–µ–π: ${address.floors_count || '?'}
                </div>
            </div>
        `;
        
        marker.bindPopup(popupContent, {
            maxWidth: 250,
            className: 'simple-address-popup'
        });

        return marker;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –∞–¥—Ä–µ—Å–∞ (fallback)
     */
    createSimpleAddressMarker(address) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ –∏ FlippingProfitabilityManager)
        let lat = address.coordinates?.lat;
        let lng = address.coordinates?.lng;
        
        if (!lat || !lng || isNaN(lat) || isNaN(lng)) {
            console.error('‚ùå FlippingMap: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞:', address.id);
            return null;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º circleMarker –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ (–∏–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏)
        const marker = L.circleMarker([lat, lng], {
            radius: 8,
            fillColor: '#3b82f6',
            color: 'white',
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8,
        });
        
        // –ü—Ä–æ—Å—Ç–æ–π popup
        const popupContent = `
            <div class="p-3">
                <div class="font-semibold text-sm mb-2">
                    ${address.address_string || address.address || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}
                </div>
                <div class="text-xs text-gray-600">
                    ID: ${address.id}
                </div>
            </div>
        `;
        
        marker.bindPopup(popupContent, {
            maxWidth: 250,
            className: 'simple-address-popup'
        });
        
        marker.addressData = address;
        return marker;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ popup –¥–ª—è –∞–¥—Ä–µ—Å–∞
     */
    async createAddressPopupContent(address) {
        const addressText = address.address_string || address.address || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω';
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É
        let objectsGroup = [];
        try {
            if (window.db && window.db.getObjectsByAddress) {
                objectsGroup = await window.db.getObjectsByAddress(address.id) || [];
            }
        } catch (error) {
            console.warn('FlippingMap: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –¥–ª—è popup –∞–¥—Ä–µ—Å–∞:', address.id, error);
        }
        
        const objectCount = objectsGroup.length;
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π popup
        if (objectCount === 0) {
            return `
                <div class="p-3">
                    <div class="font-semibold text-sm mb-2 text-gray-900">
                        ${addressText}
                    </div>
                    <div class="text-xs text-gray-600">
                        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É
                    </div>
                </div>
            `;
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
        const roomsDistribution = {};
        let totalPrice = 0;
        let priceCount = 0;
        let totalArea = 0;
        let areaCount = 0;
        let maxProfitability = -Infinity;
        let minProfitability = Infinity;
        let avgProfitability = 0;
        let profitabilityCount = 0;

        objectsGroup.forEach(obj => {
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
            const rooms = obj.rooms === 0 || obj.rooms === 'studio' ? '–°—Ç—É–¥–∏—è' : `${obj.rooms}-–∫`;
            roomsDistribution[rooms] = (roomsDistribution[rooms] || 0) + 1;
            
            // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
            if (obj.price) {
                totalPrice += obj.price;
                priceCount++;
            }
            
            // –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å
            if (obj.area) {
                totalArea += obj.area;
                areaCount++;
            }
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            if (obj.profitability && (obj.profitability.annualROI || obj.profitability.annualReturn)) {
                const profitability = obj.profitability.annualROI || obj.profitability.annualReturn;
                maxProfitability = Math.max(maxProfitability, profitability);
                minProfitability = Math.min(minProfitability, profitability);
                avgProfitability += profitability;
                profitabilityCount++;
            }
        });

        const avgPrice = priceCount > 0 ? Math.round(totalPrice / priceCount) : 0;
        const avgArea = areaCount > 0 ? Math.round(totalArea / areaCount) : 0;
        avgProfitability = profitabilityCount > 0 ? avgProfitability / profitabilityCount : 0;
        
        const roomsText = Object.entries(roomsDistribution)
            .map(([rooms, count]) => `${rooms}: ${count}`)
            .join(', ');

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        let colorClass = 'text-gray-600';
        if (maxProfitability !== -Infinity) {
            if (maxProfitability >= 25) colorClass = 'text-green-600';
            else if (maxProfitability >= 15) colorClass = 'text-green-500';
            else if (maxProfitability >= 5) colorClass = 'text-yellow-600';
            else if (maxProfitability >= 0) colorClass = 'text-orange-500';
            else colorClass = 'text-red-600';
        }

        return `
            <div class="p-3">
                <div class="font-semibold text-sm mb-2 text-gray-900">
                    ${addressText}
                </div>
                
                <div class="space-y-2">
                    <div class="flex items-center justify-between">
                        <span class="text-xs font-medium text-gray-700">–û–±—ä–µ–∫—Ç–æ–≤:</span>
                        <span class="text-sm font-bold ${colorClass}">
                            ${objectCount} —à—Ç.
                        </span>
                    </div>
                    
                    ${profitabilityCount > 0 ? `
                        <div class="flex items-center justify-between">
                            <span class="text-xs font-medium text-gray-700">–ú–∞–∫—Å. –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</span>
                            <span class="text-sm font-bold ${colorClass}">
                                ${maxProfitability.toFixed(1)}% –≥–æ–¥–æ–≤—ã—Ö
                            </span>
                        </div>
                        ${profitabilityCount > 1 ? `
                            <div class="text-xs text-gray-600">
                                <div><span class="font-medium">–î–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:</span> ${minProfitability.toFixed(1)}% ‚Äî ${maxProfitability.toFixed(1)}%</div>
                                <div><span class="font-medium">–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</span> ${avgProfitability.toFixed(1)}%</div>
                            </div>
                        ` : ''}
                    ` : ''}
                    
                    <div class="text-xs text-gray-600">
                        <div><span class="font-medium">–¢–∏–ø—ã:</span> ${roomsText}</div>
                        ${avgPrice > 0 ? `<div><span class="font-medium">–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</span> ${new Intl.NumberFormat('ru-RU').format(avgPrice)} ‚ÇΩ</div>` : ''}
                        ${avgArea > 0 ? `<div><span class="font-medium">–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å:</span> ${avgArea} –º¬≤</div>` : ''}
                    </div>
                </div>
                
                <div class="mt-3 pt-2 border-t border-gray-200">
                    <button class="w-full px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors" 
                            onclick="window.flippingController.showAddressDetails('${addressText}', ${objectCount})">
                        –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã (${objectCount})
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ popup –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
     */
    createPopupContent(obj, profitability) {
        const annualReturn = profitability.annualROI || profitability.annualReturn || 0;
        const totalProfit = profitability.totalProfit || 0;
        const renovationCosts = profitability.renovationCosts || 0;
        
        // –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        let profitabilityColor = '#6B7280';
        if (annualReturn > 20) profitabilityColor = '#059669';
        else if (annualReturn > 0) profitabilityColor = '#D97706';
        else profitabilityColor = '#DC2626';

        const roomsText = obj.rooms === 0 || obj.rooms === 'studio' ? '–°—Ç—É–¥–∏—è' : `${obj.rooms}-–∫`;
        const areaText = obj.area ? `${obj.area} –º¬≤` : '‚Äî';
        const floorText = obj.floor && obj.total_floors ? `${obj.floor}/${obj.total_floors} —ç—Ç.` : '‚Äî';
        const priceText = obj.price ? new Intl.NumberFormat('ru-RU').format(obj.price) + ' ‚ÇΩ' : '‚Äî';
        const profitText = totalProfit ? new Intl.NumberFormat('ru-RU').format(Math.round(totalProfit)) + ' ‚ÇΩ' : '‚Äî';
        const renovationText = renovationCosts ? new Intl.NumberFormat('ru-RU').format(Math.round(renovationCosts)) + ' ‚ÇΩ' : '‚Äî';

        return `
            <div class="p-3">
                <div class="font-semibold text-sm mb-2 text-gray-900">
                    ${obj.address.address_string || obj.address.address || '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}
                </div>
                
                <div class="space-y-1 text-xs text-gray-600">
                    <div><span class="font-medium">–¢–∏–ø:</span> ${roomsText} ‚Ä¢ ${areaText} ‚Ä¢ ${floorText}</div>
                    <div><span class="font-medium">–¶–µ–Ω–∞:</span> ${priceText}</div>
                    <div><span class="font-medium">–†–µ–º–æ–Ω—Ç:</span> ${renovationText}</div>
                </div>
                
                <div class="mt-2 pt-2 border-t border-gray-200">
                    <div class="flex items-center justify-between">
                        <span class="text-xs font-medium text-gray-700">–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</span>
                        <span class="text-sm font-bold" style="color: ${profitabilityColor}">
                            ${annualReturn.toFixed(1)}% –≥–æ–¥–æ–≤—ã—Ö
                        </span>
                    </div>
                    <div class="flex items-center justify-between mt-1">
                        <span class="text-xs text-gray-500">–ü—Ä–∏–±—ã–ª—å:</span>
                        <span class="text-xs font-medium" style="color: ${profitabilityColor}">
                            ${profitText}
                        </span>
                    </div>
                </div>
                
                <div class="mt-2">
                    <button class="w-full px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors" 
                            onclick="window.flippingController.showObjectDetails(${obj.id})">
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É –∞–¥—Ä–µ—Å–∞
     */
    onAddressMarkerClick(addressKey, objectsGroup) {
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        if (window.applicationController) {
            const flippingController = window.applicationController.getController('FlippingController');
            if (flippingController) {
                flippingController.emit('address:selected', { 
                    addressKey, 
                    objects: objectsGroup,
                    address: objectsGroup[0].address
                });
            }
        }

        if (this.debugEnabled) {
            console.log('üè† FlippingMap: –í—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å:', addressKey, '–æ–±—ä–µ–∫—Ç–æ–≤:', objectsGroup.length);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É (legacy)
     */
    onMarkerClick(obj) {
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        if (window.applicationController) {
            const flippingController = window.applicationController.getController('FlippingController');
            if (flippingController) {
                flippingController.emit('object:selected', { object: obj });
            }
        }

        if (this.debugEnabled) {
            console.log('üè† FlippingMap: –í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç:', obj.id);
        }
    }

    /**
     * –ü–æ–¥–≥–æ–Ω–∫–∞ –∫–∞—Ä—Ç—ã –ø–æ–¥ –º–∞—Ä–∫–µ—Ä—ã
     */
    fitMapToMarkers() {
        if (this.markers.length === 0) return;

        try {
            if (this.markers.length === 1) {
                // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–∞—Ä–∫–µ—Ä, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –Ω—ë–º
                const marker = this.markers[0];
                this.map.setView(marker.getLatLng(), 15);
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ä–æ–≤, –ø–æ–¥–≥–æ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                const group = new L.featureGroup(this.markers);
                this.map.fitBounds(group.getBounds(), { 
                    padding: [20, 20],
                    maxZoom: 16
                });
            }
        } catch (error) {
            if (this.debugEnabled) {
                console.error('üè† FlippingMap: –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ–Ω–∫–∏ –∫–∞—Ä—Ç—ã:', error);
            }
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
     */
    clearMarkers() {
        if (this.markers && this.markers.length > 0) {
            this.markers.forEach(marker => {
                if (this.map && marker) {
                    this.map.removeLayer(marker);
                }
            });
            this.markers = [];
        } else {
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
     */
    getMarkersStatistics() {
        const visible = this.markers.length;
        const total = this.objects.length;
        const hidden = total - visible;

        const profitabilityStats = {
            high: 0,    // > 20%
            medium: 0,  // 0-20%
            low: 0,     // < 0%
            total: total
        };

        this.objects.forEach(obj => {
            const annualReturn = obj.profitability?.annualROI || obj.profitability?.annualReturn || 0;
            if (annualReturn > 20) profitabilityStats.high++;
            else if (annualReturn > 0) profitabilityStats.medium++;
            else profitabilityStats.low++;
        });

        return {
            markers: { visible, hidden, total },
            profitability: profitabilityStats
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
     */
    destroy() {
        this.clearMarkers();
        
        if (this.map) {
            this.map.remove();
            this.map = null;
        }

        if (this.debugEnabled) {
            console.log('üè† FlippingMap: –ö–∞—Ä—Ç–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FlippingMap;
}