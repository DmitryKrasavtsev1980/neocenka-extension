/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ ML-–∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
 */

class MLAddressAnalyzer {
    constructor(db, smartAddressMatcher) {
        this.db = db;
        this.smartMatcher = smartAddressMatcher;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        this.config = {
            // –†–∞–¥–∏—É—Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–≤ –º–µ—Ç—Ä–∞—Ö)
            groupingRadius: 50,
            
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
            minListingsForAddress: 2,
            
            // –ü–æ—Ä–æ–≥–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–π
            titleSimilarity: {
                high: 0.8,      // –í—ã—Å–æ–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å
                medium: 0.6,    // –°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å
                low: 0.4        // –ù–∏–∑–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å
            },
            
            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –≤ –≥—Ä—É–ø–ø–µ
            maxDistanceInGroup: 100,
            
            // –í–µ—Å —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ
            weights: {
                coordinates: 0.4,    // –ë–ª–∏–∑–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                titleSimilarity: 0.3, // –°—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π
                characteristics: 0.2, // –°—Ö–æ–∂–µ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                priceRange: 0.1      // –°—Ö–æ–∂–µ—Å—Ç—å —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            }
        };
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        this.stats = {
            processedListings: 0,
            foundGroups: 0,
            createdAddresses: 0,
            averageGroupSize: 0
        };
    }

    /**
     * –ù–∞–π—Ç–∏ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
     */
    async findUnresolvedListings() {
        console.log('üîç –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏...');
        
        try {
            const allListings = await this.db.getAllListings();
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            const unresolvedListings = allListings.filter(listing => {
                // –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º, –µ—Å–ª–∏:
                // 1. address_id = null (–Ω–µ—Ç —Å–≤—è–∑–∏ —Å –∞–¥—Ä–µ—Å–æ–º)
                // 2. processing_status = 'address_needed'
                // 3. –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                return (
                    !listing.address_id && 
                    listing.processing_status === 'address_needed' &&
                    listing.coordinates &&
                    listing.coordinates.lat &&
                    listing.coordinates.lng &&
                    listing.status === 'active'
                );
            });
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${unresolvedListings.length} –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ ${allListings.length} –æ–±—â–∏—Ö`);
            
            this.stats.processedListings = unresolvedListings.length;
            
            return unresolvedListings;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
            throw error;
        }
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     */
    async groupSimilarListings(unresolvedListings) {
        console.log('üß© –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏...');
        
        if (!unresolvedListings || unresolvedListings.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏');
            return [];
        }
        
        const groups = [];
        const processed = new Set();
        
        for (let i = 0; i < unresolvedListings.length; i++) {
            if (processed.has(unresolvedListings[i].id)) continue;
            
            const currentListing = unresolvedListings[i];
            const group = [currentListing];
            processed.add(currentListing.id);
            
            // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            for (let j = i + 1; j < unresolvedListings.length; j++) {
                if (processed.has(unresolvedListings[j].id)) continue;
                
                const candidateListing = unresolvedListings[j];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
                const similarity = this.calculateListingSimilarity(currentListing, candidateListing);
                
                if (similarity.overall >= this.config.titleSimilarity.medium) {
                    group.push(candidateListing);
                    processed.add(candidateListing.id);
                    
                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É: "${candidateListing.title}" (—Å—Ö–æ–∂–µ—Å—Ç—å: ${similarity.overall.toFixed(3)})`);
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–µ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            if (group.length >= this.config.minListingsForAddress) {
                groups.push({
                    listings: group,
                    centroid: this.calculateGroupCentroid(group),
                    avgSimilarity: this.calculateAverageGroupSimilarity(group),
                    characteristics: this.extractGroupCharacteristics(group)
                });
                
                console.log(`üè† –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∏–∑ ${group.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            }
        }
        
        console.log(`üìã –°–æ–∑–¥–∞–Ω–æ ${groups.length} –≥—Ä—É–ø–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
        this.stats.foundGroups = groups.length;
        
        return groups;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
     */
    calculateListingSimilarity(listing1, listing2) {
        // 1. –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å
        const distance = this.calculateDistance(listing1.coordinates, listing2.coordinates);
        const coordScore = Math.max(0, 1 - (distance / this.config.maxDistanceInGroup));
        
        // 2. –°—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π
        const titleScore = this.calculateTitleSimilarity(listing1.title || '', listing2.title || '');
        
        // 3. –°—Ö–æ–∂–µ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        const charScore = this.calculateCharacteristicsSimilarity(listing1, listing2);
        
        // 4. –°—Ö–æ–∂–µ—Å—Ç—å —Ü–µ–Ω
        const priceScore = this.calculatePriceSimilarity(listing1.price, listing2.price);
        
        // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏
        const overall = 
            (coordScore * this.config.weights.coordinates) +
            (titleScore * this.config.weights.titleSimilarity) +
            (charScore * this.config.weights.characteristics) +
            (priceScore * this.config.weights.priceRange);
        
        return {
            overall,
            coordinates: coordScore,
            title: titleScore,
            characteristics: charScore,
            price: priceScore,
            distance
        };
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π
     */
    calculateTitleSimilarity(title1, title2) {
        if (!title1 || !title2) return 0;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
        const normalized1 = this.normalizeTitle(title1);
        const normalized2 = this.normalizeTitle(title2);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
        const levenshtein = this.normalizedLevenshtein(normalized1, normalized2);
        const jaccard = this.jaccardSimilarity(
            normalized1.split(/\s+/),
            normalized2.split(/\s+/)
        );
        const ngram = this.ngramSimilarity(normalized1, normalized2, 2);
        
        // –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
        return (levenshtein * 0.4) + (jaccard * 0.4) + (ngram * 0.2);
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    normalizeTitle(title) {
        return title
            .toLowerCase()
            .replace(/\d+[–∫–∫]?\s*–∫–≤–∞—Ä—Ç–∏—Ä–∞/gi, '–∫–≤–∞—Ä—Ç–∏—Ä–∞')  // –£–±–∏—Ä–∞–µ–º —Ç–∏–ø—ã –∫–≤–∞—Ä—Ç–∏—Ä
            .replace(/\d+\s*–º¬≤?/gi, '')                     // –£–±–∏—Ä–∞–µ–º –ø–ª–æ—â–∞–¥–∏
            .replace(/\d+\/\d+\s*—ç—Ç/gi, '')                 // –£–±–∏—Ä–∞–µ–º —ç—Ç–∞–∂–∏
            .replace(/\d+\s*‚ÇΩ/gi, '')                       // –£–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã
            .replace(/[^\w–∞-—è—ë\s]/gi, ' ')                  // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            .replace(/\s+/g, ' ')                           // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
            .trim();
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
     */
    calculateCharacteristicsSimilarity(listing1, listing2) {
        let score = 0;
        let count = 0;
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if (listing1.property_type && listing2.property_type) {
            score += listing1.property_type === listing2.property_type ? 1 : 0;
            count++;
        }
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–ª–æ—â–∞–¥–∏ (—Å –¥–æ–ø—É—Å–∫–æ–º 20%)
        if (listing1.area_total && listing2.area_total) {
            const areaDiff = Math.abs(listing1.area_total - listing2.area_total);
            const avgArea = (listing1.area_total + listing2.area_total) / 2;
            const areaScore = Math.max(0, 1 - (areaDiff / (avgArea * 0.2)));
            score += areaScore;
            count++;
        }
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —ç—Ç–∞–∂–Ω–æ—Å—Ç—å
        if (listing1.floors_total && listing2.floors_total) {
            score += listing1.floors_total === listing2.floors_total ? 1 : 0;
            count++;
        }
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
        if (listing1.rooms && listing2.rooms) {
            score += listing1.rooms === listing2.rooms ? 1 : 0;
            count++;
        }
        
        return count > 0 ? score / count : 0;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å —Ü–µ–Ω
     */
    calculatePriceSimilarity(price1, price2) {
        if (!price1 || !price2) return 0;
        
        const priceDiff = Math.abs(price1 - price2);
        const avgPrice = (price1 + price2) / 2;
        
        // –î–æ–ø—É—Å–∫ 30% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
        return Math.max(0, 1 - (priceDiff / (avgPrice * 0.3)));
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—Ç—Ä–æ–∏–¥ –≥—Ä—É–ø–ø—ã (—Å—Ä–µ–¥–Ω—é—é —Ç–æ—á–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
     */
    calculateGroupCentroid(group) {
        if (!group || group.length === 0) return null;
        
        let totalLat = 0;
        let totalLng = 0;
        let validCount = 0;
        
        for (const listing of group) {
            if (listing.coordinates && listing.coordinates.lat && listing.coordinates.lng) {
                totalLat += parseFloat(listing.coordinates.lat);
                totalLng += parseFloat(listing.coordinates.lng);
                validCount++;
            }
        }
        
        if (validCount === 0) return null;
        
        return {
            lat: totalLat / validCount,
            lng: totalLng / validCount
        };
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Å—Ö–æ–∂–µ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã
     */
    calculateAverageGroupSimilarity(group) {
        if (group.length < 2) return 1.0;
        
        let totalSimilarity = 0;
        let pairCount = 0;
        
        for (let i = 0; i < group.length; i++) {
            for (let j = i + 1; j < group.length; j++) {
                const similarity = this.calculateListingSimilarity(group[i], group[j]);
                totalSimilarity += similarity.overall;
                pairCount++;
            }
        }
        
        return pairCount > 0 ? totalSimilarity / pairCount : 0;
    }

    /**
     * –ò–∑–≤–ª–µ—á—å –æ–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã
     */
    extractGroupCharacteristics(group) {
        const characteristics = {
            commonTitle: this.extractCommonTitle(group),
            floorCounts: this.getMostFrequentValue(group, 'floors_total'),
            propertyType: this.getMostFrequentValue(group, 'property_type'),
            avgPrice: this.calculateAveragePrice(group),
            totalListings: group.length
        };
        
        return characteristics;
    }

    /**
     * –ò–∑–≤–ª–µ—á—å –æ–±—â–∏–µ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–π
     */
    extractCommonTitle(group) {
        if (!group || group.length === 0) return '';
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –±–∞–∑—É
        const baseTitleWords = this.normalizeTitle(group[0].title || '').split(/\s+/);
        
        // –ò—â–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π
        const commonWords = [];
        
        for (const word of baseTitleWords) {
            if (word.length < 3) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
            
            let count = 0;
            for (const listing of group) {
                const normalizedTitle = this.normalizeTitle(listing.title || '');
                if (normalizedTitle.includes(word)) {
                    count++;
                }
            }
            
            // –ï—Å–ª–∏ —Å–ª–æ–≤–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –±–æ–ª–µ–µ —á–µ–º 50% –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            if (count / group.length > 0.5) {
                commonWords.push(word);
            }
        }
        
        return commonWords.join(' ').trim();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
     */
    getMostFrequentValue(group, fieldName) {
        const valueCount = new Map();
        
        for (const listing of group) {
            const value = listing[fieldName];
            if (value !== null && value !== undefined) {
                valueCount.set(value, (valueCount.get(value) || 0) + 1);
            }
        }
        
        if (valueCount.size === 0) return null;
        
        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        let maxCount = 0;
        let mostFrequent = null;
        
        for (const [value, count] of valueCount.entries()) {
            if (count > maxCount) {
                maxCount = count;
                mostFrequent = value;
            }
        }
        
        return mostFrequent;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –≥—Ä—É–ø–ø—ã
     */
    calculateAveragePrice(group) {
        const prices = group
            .map(listing => listing.price)
            .filter(price => price && price > 0);
        
        if (prices.length === 0) return null;
        
        return prices.reduce((sum, price) => sum + price, 0) / prices.length;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∞–¥—Ä–µ—Å–∞ –∏–∑ –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async createAddressesFromGroups(groups) {
        console.log('üèóÔ∏è –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π...');
        
        const createdAddresses = [];
        
        for (const group of groups) {
            try {
                const newAddress = await this.createAddressFromGroup(group);
                if (newAddress) {
                    createdAddresses.push(newAddress);
                    
                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–º—É –∞–¥—Ä–µ—Å—É
                    await this.linkListingsToAddress(group.listings, newAddress.id);
                    
                    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥—Ä–µ—Å: "${newAddress.address}" –¥–ª—è ${group.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –∏–∑ –≥—Ä—É–ø–ø—ã:', error);
            }
        }
        
        this.stats.createdAddresses = createdAddresses.length;
        this.stats.averageGroupSize = groups.length > 0 ? 
            groups.reduce((sum, g) => sum + g.listings.length, 0) / groups.length : 0;
        
        console.log(`üéâ –°–æ–∑–¥–∞–Ω–æ ${createdAddresses.length} –Ω–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤`);
        
        return createdAddresses;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∞–¥—Ä–µ—Å –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async createAddressFromGroup(group) {
        const characteristics = group.characteristics;
        const centroid = group.centroid;
        
        if (!centroid) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø—ã');
            return null;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        let addressName = characteristics.commonTitle || '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (characteristics.floorCounts) {
            addressName += `, ${characteristics.floorCounts} —ç—Ç.`;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
        const newAddress = {
            address: addressName,
            coordinates: {
                lat: centroid.lat,
                lng: centroid.lng
            },
            type: '–¥–æ–º', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            floors_count: characteristics.floorCounts,
            created_at: new Date(),
            updated_at: new Date(),
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏
            source: 'ml_group_analysis',
            confidence: group.avgSimilarity,
            listings_count: characteristics.totalListings
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        const savedAddress = await this.db.addAddress(newAddress);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        console.log(`üèóÔ∏è –°–æ–∑–¥–∞–Ω –∞–¥—Ä–µ—Å: "${savedAddress.address}" (ID: ${savedAddress.id})`);
        console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${centroid.lat.toFixed(6)}, ${centroid.lng.toFixed(6)}`);
        console.log(`üìä –û–±—ä—è–≤–ª–µ–Ω–∏–π: ${characteristics.totalListings}`);
        if (characteristics.floorCounts) {
            console.log(`üè¢ –≠—Ç–∞–∂–Ω–æ—Å—Ç—å: ${characteristics.floorCounts}`);
        }
        
        return savedAddress;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫ –∞–¥—Ä–µ—Å—É
     */
    async linkListingsToAddress(listings, addressId) {
        for (const listing of listings) {
            try {
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                const updatedListing = {
                    ...listing,
                    address_id: addressId,
                    processing_status: 'duplicate_check_needed', // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
                    address_match_confidence: 'medium',
                    address_match_method: 'ml_group_analysis',
                    address_match_score: 0.7, // –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è ML –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                    updated_at: new Date()
                };
                
                await this.db.updateListing(updatedListing);
                
                console.log(`üîó –û–±—ä—è–≤–ª–µ–Ω–∏–µ "${listing.title}" –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –∞–¥—Ä–µ—Å—É ID ${addressId}`);
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id} –∫ –∞–¥—Ä–µ—Å—É ${addressId}:`, error);
            }
        }
        
        console.log(`‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∫ –∞–¥—Ä–µ—Å—É ID ${addressId}`);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
     */
    async analyzeUnresolvedAddresses() {
        console.log('ü§ñ –ó–∞–ø—É—Å–∫ ML-–∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤...');
        
        try {
            // 1. –ù–∞—Ö–æ–¥–∏–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const unresolvedListings = await this.findUnresolvedListings();
            
            if (unresolvedListings.length === 0) {
                console.log('‚úÖ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞');
                return {
                    success: true,
                    message: '–ù–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
                    stats: this.stats
                };
            }
            
            // 2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏
            const groups = await this.groupSimilarListings(unresolvedListings);
            
            if (groups.length === 0) {
                console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤');
                return {
                    success: true,
                    message: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥—Ä—É–ø–ø –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤',
                    stats: this.stats
                };
            }
            
            // 3. –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –≥—Ä—É–ø–ø
            const createdAddresses = await this.createAddressesFromGroups(groups);
            
            return {
                success: true,
                message: `–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–∑–¥–∞–Ω–æ ${createdAddresses.length} –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ ${groups.length} –≥—Ä—É–ø–ø`,
                createdAddresses,
                groups,
                stats: this.stats
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤:', error);
            return {
                success: false,
                error: error.message,
                stats: this.stats
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞
     */
    getAnalysisStats() {
        return {
            ...this.stats,
            efficiency: this.stats.processedListings > 0 ? 
                (this.stats.createdAddresses / this.stats.foundGroups) * 100 : 0
        };
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ SmartAddressMatcher)
    calculateDistance(coord1, coord2) {
        const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        const lat1Rad = (coord1.lat * Math.PI) / 180;
        const lat2Rad = (coord2.lat * Math.PI) / 180;
        const deltaLatRad = ((coord2.lat - coord1.lat) * Math.PI) / 180;
        const deltaLngRad = ((coord2.lng - coord1.lng) * Math.PI) / 180;

        const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) +
                  Math.cos(lat1Rad) * Math.cos(lat2Rad) *
                  Math.sin(deltaLngRad / 2) * Math.sin(deltaLngRad / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return R * c;
    }

    normalizedLevenshtein(str1, str2) {
        const distance = this.levenshteinDistance(str1, str2);
        return 1 - (distance / Math.max(str1.length, str2.length));
    }

    levenshteinDistance(str1, str2) {
        const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));
        
        for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;
        for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;
        
        for (let j = 1; j <= str2.length; j++) {
            for (let i = 1; i <= str1.length; i++) {
                const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
                matrix[j][i] = Math.min(
                    matrix[j][i - 1] + 1,
                    matrix[j - 1][i] + 1,
                    matrix[j - 1][i - 1] + indicator
                );
            }
        }
        
        return matrix[str2.length][str1.length];
    }

    jaccardSimilarity(arr1, arr2) {
        const set1 = new Set(arr1);
        const set2 = new Set(arr2);
        const intersection = new Set([...set1].filter(x => set2.has(x)));
        const union = new Set([...set1, ...set2]);
        return union.size === 0 ? 0 : intersection.size / union.size;
    }

    ngramSimilarity(str1, str2, n) {
        const ngrams1 = this.getNgrams(str1, n);
        const ngrams2 = this.getNgrams(str2, n);
        return this.jaccardSimilarity(Array.from(ngrams1), Array.from(ngrams2));
    }

    getNgrams(str, n) {
        const ngrams = new Set();
        for (let i = 0; i <= str.length - n; i++) {
            ngrams.add(str.substr(i, n));
        }
        return ngrams;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MLAddressAnalyzer;
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
window.MLAddressAnalyzer = MLAddressAnalyzer;