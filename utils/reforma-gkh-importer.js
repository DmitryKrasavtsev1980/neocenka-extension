/**
 * –ò–º–ø–æ—Ä—Ç –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ GeoJSON —Ñ–∞–π–ª–æ–≤ "–†–µ—Ñ–æ—Ä–º–∞ –ñ–ö–•"
 */
class ReformaGKHImporter {
  constructor(databaseManager) {
    this.db = databaseManager;
    this.referenceResolver = new ReformaGKHReferenceResolver(databaseManager);
    this.options = {
      batchSize: 150,
      skipDuplicates: true,
      updateExisting: false,
      createReferences: true
    };
    this.stats = {
      total: 0,
      processed: 0,
      added: 0,
      updated: 0,
      skipped: 0,
      errors: 0,
      referencesCreated: 0,
      referencesFound: 0
    };
    this.errors = [];
    this.isRunning = false;
    this.isCancelled = false;
  }
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–π –∏–º–ø–æ—Ä—Ç–∞
   */
  setOptions(options) {
    this.options = { ...this.options, ...options };
  }
  
  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–º–ø–æ—Ä—Ç–∞
   */
  async importFromFile(file, progressCallback = null) {
    this.isRunning = true;
    this.isCancelled = false;
    this.resetStats();
    
    const debugEnabled = await this.getDebugSetting();
    
    try {
      if (debugEnabled) {
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º resolver
      await this.referenceResolver.initialize();
      
      // –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ñ–∞–π–ª
      const geoJsonData = await this.readFile(file);
      this.validateGeoJSON(geoJsonData);
      
      const features = geoJsonData.features;
      this.stats.total = features.length;
      
      if (progressCallback) {
        progressCallback({
          stage: 'processing',
          progress: 0,
          stats: { ...this.stats },
          message: `–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${features.length} –∑–∞–ø–∏—Å–µ–π...`
        });
      }
      
      // –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      await this.processBatches(features, progressCallback);
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const resolverStats = this.referenceResolver.getStats();
      this.stats.referencesCreated = Object.values(resolverStats)
        .reduce((sum, stat) => sum + stat.created, 0);
      this.stats.referencesFound = Object.values(resolverStats)
        .reduce((sum, stat) => sum + stat.found, 0);
      
      if (debugEnabled) {
        console.group('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
        
        // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const successRate = ((this.stats.added / this.stats.total) * 100).toFixed(1);
        const duplicateRate = ((this.stats.skipped / this.stats.total) * 100).toFixed(1);
        const errorRate = ((this.stats.errors / this.stats.total) * 100).toFixed(1);
        
        
        if (this.stats.skipped > 0) {
        }
        
        console.groupEnd();
      }
      
      if (progressCallback) {
        progressCallback({
          stage: 'completed',
          progress: 100,
          stats: { ...this.stats },
          message: '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ'
        });
      }
      
      return {
        success: true,
        stats: this.stats,
        errors: this.errors
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
      
      if (progressCallback) {
        progressCallback({
          stage: 'error',
          progress: 0,
          stats: { ...this.stats },
          message: `–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`
        });
      }
      
      return {
        success: false,
        error: error.message,
        stats: this.stats,
        errors: this.errors
      };
      
    } finally {
      this.isRunning = false;
    }
  }
  
  /**
   * –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
   */
  async readFile(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = (event) => {
        try {
          const data = JSON.parse(event.target.result);
          resolve(data);
        } catch (error) {
          reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error.message}`));
        }
      };
      
      reader.onerror = () => {
        reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
      };
      
      reader.readAsText(file, 'UTF-8');
    });
  }
  
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è GeoJSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   */
  validateGeoJSON(data) {
    if (!data || typeof data !== 'object') {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
    }
    
    if (data.type !== 'FeatureCollection') {
      throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å FeatureCollection');
    }
    
    if (!Array.isArray(data.features)) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ features');
    }
    
    if (data.features.length === 0) {
      throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö');
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞–º–∏
   */
  async processBatches(features, progressCallback) {
    const batchCount = Math.ceil(features.length / this.options.batchSize);
    
    for (let i = 0; i < batchCount && !this.isCancelled; i++) {
      const startIndex = i * this.options.batchSize;
      const batch = features.slice(startIndex, startIndex + this.options.batchSize);
      
      await this.processBatch(batch, i + 1, batchCount);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (progressCallback) {
        const progress = Math.round((this.stats.processed / features.length) * 100);
        progressCallback({
          stage: 'processing',
          progress: progress,
          stats: { ...this.stats },
          message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: ${i + 1} –∏–∑ ${batchCount}`
        });
      }
      
      // –ü–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      await this.sleep(10);
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
   */
  async processBatch(features, batchNumber, totalBatches) {
    const debugEnabled = await this.getDebugSetting();
    
    if (debugEnabled) {
    }
    
    for (const feature of features) {
      if (this.isCancelled) break;
      
      try {
        await this.processFeature(feature);
      } catch (error) {
        this.stats.errors++;
        this.errors.push({
          address: feature.properties?.ADDRESS || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å',
          error: error.message,
          timestamp: new Date()
        });
        
        if (debugEnabled) {
          console.group('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏');
          console.warn('üìç –ê–¥—Ä–µ—Å:', feature.properties?.ADDRESS || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å');
          console.warn('‚ùå –ü—Ä–∏—á–∏–Ω–∞:', error.message);
          console.warn('üìÑ –û–±—ä–µ–∫—Ç –∑–∞–ø–∏—Å–∏:', feature);
          console.warn('üè† –°–≤–æ–π—Å—Ç–≤–∞:', feature.properties);
          console.groupEnd();
        }
      }
      
      this.stats.processed++;
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
   */
  async processFeature(feature) {
    const debugEnabled = await this.getDebugSetting();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
    const validationErrors = this.validateFeature(feature);
    if (validationErrors.length > 0) {
      throw new Error(`–í–∞–ª–∏–¥–∞—Ü–∏—è: ${validationErrors.join(', ')}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –∞–¥—Ä–µ—Å–∞
    const addressModel = await AddressModel.fromReformaGKH(
      feature, 
      this.options.createReferences ? this.referenceResolver : null
    );
    
    // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–≥–∏–µ –¥—É–±–ª–∏ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ò –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
    const duplicate = await this.findDuplicate(addressModel);
    if (duplicate) {
      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Å—Ç—Ä–æ–≥–∏–π –¥—É–±–ª—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
      this.stats.skipped++;
      
      // –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –¥—É–±–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏)
      console.group(`‚è≠Ô∏è –î—É–±–ª—å #${this.stats.skipped}: –ü—Ä–æ–ø—É—â–µ–Ω —Å—Ç—Ä–æ–≥–∏–π –¥—É–±–ª–∏–∫–∞—Ç`);
      console.log('–î—É–±–ª–∏—Ä—É–µ–º—ã–π –∞–¥—Ä–µ—Å:', {
        id: duplicate.id,
        address: duplicate.address,
        coordinates: duplicate.coordinates,
        created_at: duplicate.created_at,
        source: duplicate.source || 'unknown'
      });
      console.log('–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å (–ø—Ä–æ–ø—É—â–µ–Ω):', {
        address: addressModel.address,
        coordinates: addressModel.coordinates,
        properties: feature.properties,
        geometry: feature.geometry
      });
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const distance = this.calculateDistance(
        addressModel.coordinates.lat,
        addressModel.coordinates.lng,
        duplicate.coordinates.lat,
        duplicate.coordinates.lng
      );
      console.groupEnd();
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å (ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)
    addressModel.id = null; // –ü–æ–∑–≤–æ–ª—è–µ–º –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–º–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ID
    await this.db.add('addresses', addressModel);
    this.stats.added++;
    
    if (debugEnabled) {
      console.group('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å');
      console.groupEnd();
    }
  }
  
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
   */
  validateFeature(feature) {
    const errors = [];
    const props = feature.properties;
    
    if (!props.ADDRESS?.trim()) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–¥—Ä–µ—Å');
    }
    
    if (!props.LAT || !props.LON) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    const lat = parseFloat(props.LAT);
    const lon = parseFloat(props.LON);
    
    if (isNaN(lat) || isNaN(lon)) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
    } else if (lat < 40 || lat > 70 || lon < 20 || lon > 180) {
      errors.push('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –†–æ—Å—Å–∏–∏');
    }
    
    return errors;
  }
  
  /**
   * –ü–æ–∏—Å–∫ –¥—É–±–ª–µ–π –ø–æ –°–¢–†–û–ì–û–ú–£ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∞–¥—Ä–µ—Å–∞ –ò –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
   */
  async findDuplicate(addressModel) {
    const debugEnabled = await this.getDebugSetting();
    
    if (!addressModel.address || !addressModel.coordinates?.lat || !addressModel.coordinates?.lng) {
      if (debugEnabled) {
      }
      return null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ —Å —Ç–∞–∫–∏–º –∂–µ –∞–¥—Ä–µ—Å–æ–º
    const addressMatches = await this.db.getByIndex('addresses', 'address', addressModel.address);
    
    if (addressMatches.length === 0) {
      if (debugEnabled) {
      }
      return null;
    }
    
    // –°—Ä–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ –∞–¥—Ä–µ—Å—É –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–≤ —Ä–∞–¥–∏—É—Å–µ 10 –º–µ—Ç—Ä–æ–≤)
    for (const existing of addressMatches) {
      if (existing.coordinates?.lat && existing.coordinates?.lng) {
        const distance = this.calculateDistance(
          addressModel.coordinates.lat,
          addressModel.coordinates.lng,
          existing.coordinates.lat,
          existing.coordinates.lng
        );
        
        if (distance < 10) { // –û—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–π —Ä–∞–¥–∏—É—Å - 10 –º–µ—Ç—Ä–æ–≤
          // –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏
          console.group(`üéØ –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π –¥—É–±–ª—å`);
          console.groupEnd();
          return existing;
        } else if (debugEnabled) {
        }
      }
    }
    
    if (debugEnabled) {
    }
    
    return null;
  }
  
  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
   */
  calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const dLat = this.toRadians(lat2 - lat1);
    const dLon = this.toRadians(lon2 - lon1);
    
    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
              Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *
              Math.sin(dLon / 2) * Math.sin(dLon / 2);
    
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  }
  
  toRadians(degrees) {
    return degrees * (Math.PI / 180);
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥—Ä–µ—Å–∞
   */
  async updateAddress(existing, newData) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
    const fieldsToUpdate = [
      'build_year', 'floors_count', 'entrances_count', 'living_spaces_count',
      'wall_material_id', 'ceiling_material_id', 'house_series_id',
      'gas_supply', 'individual_heating', 'has_playground', 'has_sports_area'
    ];
    
    let hasChanges = false;
    
    fieldsToUpdate.forEach(field => {
      if ((existing[field] === null || existing[field] === undefined) && 
          (newData[field] !== null && newData[field] !== undefined)) {
        existing[field] = newData[field];
        hasChanges = true;
      }
    });
    
    if (hasChanges) {
      existing.updated_at = new Date();
      await this.db.save('addresses', existing);
    }
  }
  
  /**
   * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  resetStats() {
    this.stats = {
      total: 0,
      processed: 0,
      added: 0,
      updated: 0,
      skipped: 0,
      errors: 0,
      referencesCreated: 0,
      referencesFound: 0
    };
    this.errors = [];
  }
  
  /**
   * –û—Ç–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞
   */
  cancel() {
    this.isCancelled = true;
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
   */
  async getDebugSetting() {
    try {
      const settings = await this.db.getSettings();
      const debugSetting = settings.find(s => s.key === 'debug_enabled');
      return debugSetting ? debugSetting.value : false;
    } catch {
      return false;
    }
  }
  
  /**
   * –ü–∞—É–∑–∞
   */
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
if (typeof module !== 'undefined' && module.exports) {
  module.exports = ReformaGKHImporter;
} else if (typeof window !== 'undefined') {
  window.ReformaGKHImporter = ReformaGKHImporter;
}