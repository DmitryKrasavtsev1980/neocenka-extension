/**
 * –£–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
 */

class SmartAddressMatcher {
    constructor(spatialIndex) {
        this.spatialIndex = spatialIndex;
        
        // ML-–º–æ–¥–µ–ª—å (–æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        this.model = {
            version: "1.0.0",
            trainedOn: "Moscow dataset",
            accuracy: 0.87,
            lastUpdate: "2025-07-12",
            
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–¥–∏—É—Å—ã
            radii: {
                precise: 20,    // –û—á–µ–Ω—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - 90% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                exact: 25,      
                near: 75,       
                extended: 200,  
                far: 500        
            },
            
            // –û–±—É—á–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
            thresholds: {
                perfect: 0.90,   // –°–Ω–∏–∂–µ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
                excellent: 0.75, // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω
                good: 0.60,      // –°–Ω–∏–∂–µ–Ω
                acceptable: 0.45, // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–µ–Ω
                minimal: 0.30    // –°–Ω–∏–∂–µ–Ω
            },
            
            // –û–±—É—á–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
            weights: {
                geospatial: 0.20,    // –°–Ω–∏–∂–µ–Ω –≤–µ—Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                textual: 0.35,       // –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                semantic: 0.25,      // –£–≤–µ–ª–∏—á–µ–Ω —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –≤–µ—Å
                structural: 0.15,    // –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                fuzzy: 0.05          // –°–Ω–∏–∂–µ–Ω –Ω–µ—á–µ—Ç–∫–∏–π –≤–µ—Å
            }
        };
        
        // –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
        this.normalizationMaps = this.buildNormalizationMaps();
        
        // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        this.obviousPatterns = this.buildObviousPatterns();
        
        // –ö—ç—à –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.cache = new Map();
        this.cacheMaxSize = 1000;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ
        this.stats = {
            totalMatches: 0,
            successfulMatches: 0,
            methodEffectiveness: {},
            averageScores: {},
            radiusEffectiveness: {}
        };
        
        // –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è
        this.training = {
            examples: [],
            enabled: true,
            maxExamples: 1000
        };
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        this.loadPretrainedModel();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ localStorage
        this.restoreTrainingCount();
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
     */
    buildObviousPatterns() {
        return {
            // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —É–ª–∏—Ü (–Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ)
            streetAbbreviations: new Map([
                ['—É–ª', '—É–ª–∏—Ü–∞'], ['—É–ª–∏—Ü–∞', '—É–ª'],
                ['–ø—Ä', '–ø—Ä–æ—Å–ø–µ–∫—Ç'], ['–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø—Ä'], ['–ø—Ä-—Ç', '–ø—Ä–æ—Å–ø–µ–∫—Ç'], ['–ø—Ä-–∫—Ç', '–ø—Ä–æ—Å–ø–µ–∫—Ç'],
                ['–ø–µ—Ä', '–ø–µ—Ä–µ—É–ª–æ–∫'], ['–ø–µ—Ä–µ—É–ª–æ–∫', '–ø–µ—Ä'],
                ['–±-—Ä', '–±—É–ª—å–≤–∞—Ä'], ['–±—É–ª', '–±—É–ª—å–≤–∞—Ä'], ['–±—É–ª—å–≤–∞—Ä', '–±-—Ä'],
                ['—à', '—à–æ—Å—Å–µ'], ['—à–æ—Å—Å–µ', '—à'],
                ['–ø–ª', '–ø–ª–æ—â–∞–¥—å'], ['–ø–ª–æ—â–∞–¥—å', '–ø–ª'],
                ['–Ω–∞–±', '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è'], ['–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è', '–Ω–∞–±'],
                ['—Ç—É–ø', '—Ç—É–ø–∏–∫'], ['—Ç—É–ø–∏–∫', '—Ç—É–ø'],
                ['–ø—Ä-–¥', '–ø—Ä–æ–µ–∑–¥'], ['–ø—Ä–æ–µ–∑–¥', '–ø—Ä-–¥']
            ]),
            
            // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ –¥–æ–º–æ–≤
            houseNumberVariations: [
                // "10–∫1" <-> "10 –∫1", "10–ö1" <-> "10 –∫ 1" –∏ —Ç.–¥.
                /(\d+)([–∫–∫]?)(\d*)/gi,
                /(\d+)\s*([–∫–∫])\s*(\d+)/gi,
                /(\d+)\s*([–∫–∫][–æ–æ][—Ä—Ä][–ø–ø][—É—É][—Å—Å])\s*(\d+)/gi,
                /(\d+)\s*([—Å—Å][—Ç—Ç][—Ä—Ä])\s*(\d+)/gi,
                /(\d+)\s*([—Å—Å][—Ç—Ç][—Ä—Ä][–æ–æ][–µ–µ][–Ω–Ω][–∏–∏][–µ–µ])\s*(\d+)/gi
            ],
            
            // –û—á–µ–≤–∏–¥–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ —Å—É—Ñ—Ñ–∏–∫—Å—ã –≥–æ—Ä–æ–¥–æ–≤
            cityPrefixes: ['–º–æ—Å–∫–≤–∞,', '–º—Å–∫,', '—Å–ø–±,', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥,'],
            citySuffixes: [', –º–æ—Å–∫–≤–∞', ', –º—Å–∫', ', —Å–ø–±', ', —Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥']
        };
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ä—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    buildNormalizationMaps() {
        return {
            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —É–ª–∏—Ü
            streetTypes: new Map([
                // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã
                ['—É–ª–∏—Ü–∞', ['—É–ª', '—É–ª–∏—Ü–∞', '—É–ª–∏—Üa', 'street', 'st', 'str']],
                ['–ø—Ä–æ—Å–ø–µ–∫—Ç', ['–ø—Ä', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø—Ä-—Ç', '–ø—Ä-–∫—Ç', '–ø—Ä–æ—Å–ø–∫—Ç', 'avenue', 'av', 'ave']],
                ['–ø–µ—Ä–µ—É–ª–æ–∫', ['–ø–µ—Ä', '–ø–µ—Ä–µ—É–ª–æ–∫', '–ø–µ—Ä–∫—É–ª–æ–∫', 'lane', 'ln']],
                ['–±—É–ª—å–≤–∞—Ä', ['–±—É–ª', '–±—É–ª—å–≤–∞—Ä', '–±-—Ä', '–±—Ä', 'boulevard', 'blvd']],
                ['–ø–ª–æ—â–∞–¥—å', ['–ø–ª', '–ø–ª–æ—â–∞–¥—å', '–ø–ª–æ—à–∞–¥—å', 'square', 'sq']],
                ['–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è', ['–Ω–∞–±', '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è', '–Ω–±—Ä', 'embankment', 'emb']],
                ['—à–æ—Å—Å–µ', ['—à', '—à–æ—Å—Å–µ', '—à–æ—Å–µ', 'highway', 'hwy']],
                ['—Ç—É–ø–∏–∫', ['—Ç—É–ø', '—Ç—É–ø–∏–∫', '—Ç—É–ø–∫', 'dead end']],
                ['–ø—Ä–æ–µ–∑–¥', ['–ø—Ä-–¥', '–ø—Ä–æ–µ–∑–¥', '–ø—Ä–∑–¥', 'drive', 'dr']],
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã
                ['–∞–ª–ª–µ—è', ['–∞–ª', '–∞–ª–ª–µ—è', '–∞–ª–µ—è', 'alley']],
                ['–¥–æ—Ä–æ–≥–∞', ['–¥–æ—Ä', '–¥–æ—Ä–æ–≥–∞', '–¥—Ä–≥', 'road', 'rd']],
                ['–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å', ['–º–∞–≥', '–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å', '–º–≥—Å—Ç—Ä']],
                ['–ª–∏–Ω–∏—è', ['–ª–∏–Ω', '–ª–∏–Ω–∏—è', '–ª–Ω—è', 'line']]
            ]),
            
            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∑–¥–∞–Ω–∏–π
            buildingTypes: new Map([
                ['–¥–æ–º', ['–¥', '–¥–æ–º', 'house', 'h', 'home']],
                ['–∫–æ—Ä–ø—É—Å', ['–∫', '–∫–æ—Ä–ø', '–∫–æ—Ä–ø—É—Å', '–∫–æ—Ä', 'building', 'bld', 'corp']],
                ['—Å—Ç—Ä–æ–µ–Ω–∏–µ', ['—Å—Ç—Ä', '—Å—Ç—Ä–æ–µ–Ω–∏–µ', '—Å—Ç—Ä–Ω', 'structure', 'str']],
                ['—Å–æ–æ—Ä—É–∂–µ–Ω–∏–µ', ['—Å–æ–æ—Ä', '—Å–æ–æ—Ä—É–∂–µ–Ω–∏–µ', '—Å–æ—Ä–∂']],
                ['–ª–∏—Ç–µ—Ä', ['–ª–∏—Ç', '–ª–∏—Ç–µ—Ä', '–ª—Ç—Ä', 'letter', 'lit']],
                ['–≤–ª–∞–¥–µ–Ω–∏–µ', ['–≤–ª–¥', '–≤–ª–∞–¥–µ–Ω–∏–µ', '–≤–ª–¥–Ω', 'possession']]
            ]),
            
            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            directions: new Map([
                ['—Å–µ–≤–µ—Ä–Ω—ã–π', ['—Å–µ–≤', '—Å–µ–≤–µ—Ä–Ω—ã–π', '—Å–µ–≤–µ—Ä', 'north', 'n']],
                ['—é–∂–Ω—ã–π', ['—é–∂', '—é–∂–Ω—ã–π', '—é–≥', 'south', 's']],
                ['–≤–æ—Å—Ç–æ—á–Ω—ã–π', ['–≤–æ—Å—Ç', '–≤–æ—Å—Ç–æ—á–Ω—ã–π', '–≤–æ—Å—Ç–æ–∫', 'east', 'e']],
                ['–∑–∞–ø–∞–¥–Ω—ã–π', ['–∑–∞–ø', '–∑–∞–ø–∞–¥–Ω—ã–π', '–∑–∞–ø–∞–¥', 'west', 'w']],
                ['—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', ['—Ü–µ–Ω—Ç—Ä', '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '—Ü–Ω—Ç—Ä', 'central', 'c']]
            ]),
            
            // –û–±—â–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
            common: new Map([
                ['–±–æ–ª—å—à–æ–π', ['–±', '–±–æ–ª', '–±–æ–ª—å—à–æ–π', '–±–æ–ª—å—à', 'big']],
                ['–º–∞–ª—ã–π', ['–º', '–º–∞–ª', '–º–∞–ª—ã–π', '–º–ª', 'small']],
                ['–Ω–æ–≤—ã–π', ['–Ω', '–Ω–æ–≤', '–Ω–æ–≤—ã–π', '–Ω–≤—ã', 'new']],
                ['—Å—Ç–∞—Ä—ã–π', ['—Å—Ç', '—Å—Ç–∞—Ä', '—Å—Ç–∞—Ä—ã–π', '—Å—Ç—Ä—ã', 'old']],
                ['–≤–µ—Ä—Ö–Ω–∏–π', ['–≤–µ—Ä—Ö', '–≤–µ—Ä—Ö–Ω–∏–π', '–≤—Ä—Ö', 'upper']],
                ['–Ω–∏–∂–Ω–∏–π', ['–Ω–∏–∂', '–Ω–∏–∂–Ω–∏–π', '–Ω–∂–Ω', 'lower']]
            ])
        };
    }

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —É–º–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
     */
    async matchAddressSmart(listing, addresses) {
        const startTime = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cacheKey = this.getCacheKey(listing, addresses);
        if (this.cache.has(cacheKey)) {
            return this.cache.get(cacheKey);
        }

        const listingCoords = this.normalizeCoordinates(listing.coordinates);
        const listingAddress = this.preprocessAddress(listing.address || '');
        
        console.log(`üß† –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –¥–ª—è: "${listing.address}"`);
        console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${listingCoords.lat}, ${listingCoords.lng}`);
        console.log(`üîß –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: "${listingAddress.normalized}"`);

        let bestMatch = null;
        let matchMethod = 'no_match';

        // –≠—Ç–∞–ø 0: –ü–æ–∏—Å–∫ –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (—Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π!)
        bestMatch = await this.tryObviousMatch(listingCoords, addresses, listingAddress);
        if (bestMatch) {
            matchMethod = 'obvious_match';
            bestMatch.confidence = 'high';
            console.log(`üéØ –û–ß–ï–í–ò–î–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï –Ω–∞–π–¥–µ–Ω–æ: "${bestMatch.address.address}" (${bestMatch.score.toFixed(3)})`);
        }

        // –≠—Ç–∞–ø 1: –¢–æ—á–Ω–æ–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (!bestMatch) {
            bestMatch = await this.tryExactGeoMatch(listingCoords, addresses, listingAddress);
            if (bestMatch) {
                matchMethod = 'exact_geo_smart';
                bestMatch.confidence = 'high';
            }
        }

        // –≠—Ç–∞–ø 2: –£–º–Ω—ã–π –±–ª–∏–∂–Ω–∏–π –ø–æ–∏—Å–∫
        if (!bestMatch) {
            bestMatch = await this.trySmartNearMatch(listingCoords, addresses, listingAddress);
            if (bestMatch) {
                matchMethod = 'smart_near_geo';
                bestMatch.confidence = bestMatch.score >= this.model.thresholds.excellent ? 'high' : 'medium';
            }
        }

        // –≠—Ç–∞–ø 3: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å ML-–ø–æ–¥—Ö–æ–¥–æ–º
        if (!bestMatch) {
            bestMatch = await this.tryMLExtendedMatch(listingCoords, addresses, listingAddress);
            if (bestMatch) {
                matchMethod = 'ml_extended_geo';
                bestMatch.confidence = this.getConfidenceLevel(bestMatch.score);
            }
        }

        // –≠—Ç–∞–ø 4: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å –Ω–µ—á–µ—Ç–∫–æ–π –ª–æ–≥–∏–∫–æ–π
        if (!bestMatch) {
            bestMatch = await this.tryFuzzyGlobalMatch(listingCoords, addresses, listingAddress);
            if (bestMatch) {
                matchMethod = 'fuzzy_global';
                bestMatch.confidence = this.getConfidenceLevel(bestMatch.score);
            }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const result = {
            address: bestMatch?.address || null,
            confidence: bestMatch?.confidence || 'none',
            method: matchMethod,
            distance: bestMatch?.distance || null,
            score: bestMatch?.score || 0,
            textSimilarity: bestMatch?.textSimilarity || 0,
            semanticSimilarity: bestMatch?.semanticSimilarity || 0,
            structuralSimilarity: bestMatch?.structuralSimilarity || 0,
            fuzzyScore: bestMatch?.fuzzyScore || 0,
            processingTime: Date.now() - startTime,
            details: bestMatch?.details || {}
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateStats(result);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        this.addToCache(cacheKey, result);

        return result;
    }

    /**
     * –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞
     */
    preprocessAddress(address) {
        const original = address;
        let normalized = address.toLowerCase().trim();

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≥–æ—Ä–æ–¥–∞
        normalized = normalized.replace(/^(–º–æ—Å–∫–≤–∞,?\s*|—Å–ø–±,?\s*|—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥,?\s*)/i, '');

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø—ã —É–ª–∏—Ü
        normalized = this.normalizeByMaps(normalized, this.normalizationMaps.streetTypes);
        normalized = this.normalizeByMaps(normalized, this.normalizationMaps.buildingTypes);
        normalized = this.normalizeByMaps(normalized, this.normalizationMaps.directions);
        normalized = this.normalizeByMaps(normalized, this.normalizationMaps.common);

        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
        normalized = normalized
            .replace(/[^\w\s–∞-—è—ë]/gi, ' ')
            .replace(/\s+/g, ' ')
            .trim();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        const components = this.extractAddressComponents(normalized);

        return {
            original,
            normalized,
            components,
            tokens: normalized.split(/\s+/).filter(t => t.length > 0)
        };
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–∞–º
     */
    normalizeByMaps(text, normMap) {
        let result = text;
        for (const [canonical, variants] of normMap) {
            const pattern = new RegExp(`\\b(${variants.join('|')})\\b`, 'gi');
            result = result.replace(pattern, canonical);
        }
        return result;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–∞
     */
    extractAddressComponents(address) {
        return {
            street: this.extractStreetName(address),
            houseNumber: this.extractHouseNumber(address),
            building: this.extractBuildingInfo(address),
            direction: this.extractDirection(address)
        };
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü—ã
     */
    extractStreetName(address) {
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ç–∏–ø —É–ª–∏—Ü—ã]
        const streetPattern = /([–∞-—è—ë\s]+?)\s+(—É–ª–∏—Ü–∞|–ø—Ä–æ—Å–ø–µ–∫—Ç|–ø–µ—Ä–µ—É–ª–æ–∫|–±—É–ª—å–≤–∞—Ä|–ø–ª–æ—â–∞–¥—å|–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è|—à–æ—Å—Å–µ|—Ç—É–ø–∏–∫|–ø—Ä–æ–µ–∑–¥|–∞–ª–ª–µ—è|–¥–æ—Ä–æ–≥–∞)/i;
        const match = address.match(streetPattern);
        return match ? match[1].trim() : null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞
     */
    extractHouseNumber(address) {
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ –¥–æ–º–æ–≤
        const patterns = [
            /\b(\d+[–∞-—è—ë]*)\s*(?:–∫–æ—Ä–ø—É—Å|–∫)\s*(\d+[–∞-—è—ë]*)\b/gi,
            /\b(\d+[–∞-—è—ë]*)\s*(?:—Å—Ç—Ä–æ–µ–Ω–∏–µ|—Å—Ç—Ä)\s*(\d+[–∞-—è—ë]*)\b/gi,
            /\b(\d+[–∞-—è—ë]*)\s*(?:–¥–æ–º|–¥)\s*(\d+[–∞-—è—ë]*)\b/gi,
            /\b(\d+[–∞-—è—ë]+)\b/gi,
            /\b(\d+)\b/gi
        ];

        for (const pattern of patterns) {
            const match = address.match(pattern);
            if (match) {
                return match[0].trim();
            }
        }
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–æ–µ–Ω–∏–∏
     */
    extractBuildingInfo(address) {
        const buildingPattern = /(?:–∫–æ—Ä–ø—É—Å|–∫|—Å—Ç—Ä–æ–µ–Ω–∏–µ|—Å—Ç—Ä|–ª–∏—Ç–µ—Ä|–ª–∏—Ç|–≤–ª–∞–¥–µ–Ω–∏–µ|–≤–ª–¥)\s*([–∞-—è—ë\d]+)/gi;
        const matches = [];
        let match;
        while ((match = buildingPattern.exec(address)) !== null) {
            matches.push(match[0].trim());
        }
        return matches.length > 0 ? matches.join(' ') : null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    extractDirection(address) {
        const directionPattern = /\b(—Å–µ–≤–µ—Ä–Ω—ã–π|—é–∂–Ω—ã–π|–≤–æ—Å—Ç–æ—á–Ω—ã–π|–∑–∞–ø–∞–¥–Ω—ã–π|—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π|–±–æ–ª—å—à–æ–π|–º–∞–ª—ã–π|–Ω–æ–≤—ã–π|—Å—Ç–∞—Ä—ã–π|–≤–µ—Ä—Ö–Ω–∏–π|–Ω–∏–∂–Ω–∏–π)\b/gi;
        const match = address.match(directionPattern);
        return match ? match[0].toLowerCase() : null;
    }

    /**
     * –ü–æ–∏—Å–∫ –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
     */
    async tryObviousMatch(coords, addresses, addressData) {
        console.log(`üîç –ò—â–µ–º –æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è: "${addressData.original}"`);
        
        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        const aggressiveNormalized = this.aggressiveNormalize(addressData.original);
        console.log(`üîß –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: "${aggressiveNormalized}"`);
        
        // –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —Ä–∞–∑—É–º–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ (200–º –¥–ª—è –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
        const candidates = this.getAddressesInRadius(addresses, coords, 200);
        console.log(`üìç –ù–∞–π–¥–µ–Ω–æ ${candidates.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 200–º`);
        
        let bestMatch = null;
        let bestScore = 0;
        
        for (const candidate of candidates) {
            const candidateNormalized = this.aggressiveNormalize(candidate.address || '');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ–≤–∏–¥–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            const obviousScore = this.calculateObviousScore(aggressiveNormalized, candidateNormalized);
            
            if (obviousScore >= 0.9) { // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                console.log(`‚úÖ –û—á–µ–≤–∏–¥–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${candidate.address}" (—Å–∫–æ—Ä: ${obviousScore.toFixed(3)})`);
                
                if (obviousScore > bestScore) {
                    bestScore = obviousScore;
                    const candidateResult = {
                        address: candidate,
                        distance: this.calculateDistance(coords, candidate.coordinates),
                        score: obviousScore,
                        textSimilarity: obviousScore,
                        method: 'obvious_aggressive'
                    };
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –±–ª–∏–∑–∫–æ—Å—Ç–∏
                    bestMatch = this.applyProximityRule(candidateResult, coords);
                }
            }
        }
        
        return bestMatch;
    }

    /**
     * –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
     */
    aggressiveNormalize(address) {
        if (!address) return '';
        
        let normalized = address.toLowerCase().trim();
        
        // –£–±–∏—Ä–∞–µ–º –≥–æ—Ä–æ–¥ –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ
        this.obviousPatterns.cityPrefixes.forEach(prefix => {
            if (normalized.startsWith(prefix)) {
                normalized = normalized.substring(prefix.length).trim();
            }
        });
        
        this.obviousPatterns.citySuffixes.forEach(suffix => {
            if (normalized.endsWith(suffix)) {
                normalized = normalized.substring(0, normalized.length - suffix.length).trim();
            }
        });
        
        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π —É–ª–∏—Ü
        this.obviousPatterns.streetAbbreviations.forEach((full, abbr) => {
            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
            const escapedAbbr = abbr.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
            const pattern = new RegExp(`\\b${escapedAbbr}\\b`, 'gi');
            normalized = normalized.replace(pattern, full);
        });
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ –¥–æ–º–æ–≤: —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –±—É–∫–≤–∞–º–∏
        normalized = normalized.replace(/(\d+)\s*([–∫–∫])\s*(\d+)/gi, '$1–∫$3');
        normalized = normalized.replace(/(\d+)\s*([–∫–∫])\s*$/gi, '$1–∫');
        normalized = normalized.replace(/(\d+)\s*([–∞–∞-—è—è])/gi, '$1$2');
        
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        normalized = normalized
            .replace(/[.,;:\-]/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();
            
        return normalized;
    }

    /**
     * –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –¥–ª—è –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
     */
    calculateObviousScore(str1, str2) {
        if (!str1 || !str2) return 0;
        
        // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        if (str1 === str2) return 1.0;
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ç–æ–∫–µ–Ω—ã –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        const tokens1 = str1.split(/\s+/).filter(t => t.length > 0);
        const tokens2 = str2.split(/\s+/).filter(t => t.length > 0);
        
        if (tokens1.length === 0 || tokens2.length === 0) return 0;
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
        let matchingTokens = 0;
        for (const token1 of tokens1) {
            for (const token2 of tokens2) {
                if (token1 === token2 || this.tokensAreSimilar(token1, token2)) {
                    matchingTokens++;
                    break;
                }
            }
        }
        
        // –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
        const totalTokens = Math.max(tokens1.length, tokens2.length);
        const baseScore = matchingTokens / totalTokens;
        
        // –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —á–∞—Å—Ç–µ–π
        let bonus = 0;
        if (this.extractStreetNameSimple(str1) === this.extractStreetNameSimple(str2)) {
            bonus += 0.3; // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü—ã
        }
        if (this.extractHouseNumberSimple(str1) === this.extractHouseNumberSimple(str2)) {
            bonus += 0.2; // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞
        }
        
        return Math.min(baseScore + bonus, 1.0);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤
     */
    tokensAreSimilar(token1, token2) {
        // –û—á–µ–Ω—å –±–ª–∏–∑–∫–∏–µ —Ç–æ–∫–µ–Ω—ã (—Ä–∞–∑–ª–∏—á–∏–µ –≤ 1-2 —Å–∏–º–≤–æ–ª–∞)
        if (Math.abs(token1.length - token2.length) <= 1) {
            const distance = this.levenshteinDistance(token1, token2);
            return distance <= 1;
        }
        return false;
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü—ã
     */
    extractStreetNameSimple(address) {
        const tokens = address.split(/\s+/);
        const streetTypes = ['—É–ª–∏—Ü–∞', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø–µ—Ä–µ—É–ª–æ–∫', '–±—É–ª—å–≤–∞—Ä', '–ø–ª–æ—â–∞–¥—å', '—à–æ—Å—Å–µ', '–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è'];
        
        for (let i = 0; i < tokens.length; i++) {
            if (streetTypes.includes(tokens[i])) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–æ –ø–µ—Ä–µ–¥ —Ç–∏–ø–æ–º —É–ª–∏—Ü—ã
                return i > 0 ? tokens[i-1] : '';
            }
        }
        return tokens[0] || '';
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞
     */
    extractHouseNumberSimple(address) {
        const match = address.match(/(\d+[–∞-—è—ë]*–∫?\d*)/i);
        return match ? match[1] : '';
    }

    /**
     * –¢–æ—á–Ω–æ–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
     */
    async tryExactGeoMatch(coords, addresses, addressData) {
        const nearbyAddresses = this.getAddressesInRadius(addresses, coords, this.model.radii.exact);
        
        if (nearbyAddresses.length === 1) {
            const candidate = nearbyAddresses[0];
            const result = {
                address: candidate,
                distance: this.calculateDistance(coords, candidate.coordinates),
                score: 1.0,
                textSimilarity: 1.0,
                method: 'exact_geo'
            };
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –±–ª–∏–∑–∫–æ—Å—Ç–∏
            return this.applyProximityRule(result, coords);
        }

        return null;
    }

    /**
     * –£–º–Ω—ã–π –±–ª–∏–∂–Ω–∏–π –ø–æ–∏—Å–∫
     */
    async trySmartNearMatch(coords, addresses, addressData) {
        const nearbyAddresses = this.getAddressesInRadius(addresses, coords, this.model.radii.near);
        
        if (nearbyAddresses.length === 0) return null;

        let bestMatch = null;
        let bestScore = 0;

        for (const candidate of nearbyAddresses) {
            const candidateData = this.preprocessAddress(candidate.address || '');
            const score = await this.calculateCompositeScore(addressData, candidateData, coords, candidate.coordinates);
            
            if (score > bestScore && score >= this.model.thresholds.acceptable) {
                bestScore = score;
                const candidateResult = {
                    address: candidate,
                    distance: this.calculateDistance(coords, candidate.coordinates),
                    score: score,
                    textSimilarity: score,
                    method: 'smart_near'
                };
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –±–ª–∏–∑–∫–æ—Å—Ç–∏
                bestMatch = this.applyProximityRule(candidateResult, coords);
            }
        }

        return bestMatch;
    }

    /**
     * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å ML-–ø–æ–¥—Ö–æ–¥–æ–º
     */
    async tryMLExtendedMatch(coords, addresses, addressData) {
        const extendedAddresses = this.getAddressesInRadius(addresses, coords, this.model.radii.extended);
        
        if (extendedAddresses.length === 0) return null;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
        const rankedCandidates = await this.rankCandidatesML(addressData, extendedAddresses, coords);
        const topCandidate = rankedCandidates[0];

        if (topCandidate && topCandidate.score >= this.model.thresholds.minimal) {
            const result = {
                address: topCandidate.address,
                distance: topCandidate.distance,
                score: topCandidate.score,
                textSimilarity: topCandidate.textSimilarity,
                semanticSimilarity: topCandidate.semanticSimilarity,
                structuralSimilarity: topCandidate.structuralSimilarity,
                method: 'ml_extended'
            };
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –±–ª–∏–∑–∫–æ—Å—Ç–∏
            return this.applyProximityRule(result, coords);
        }

        return null;
    }

    /**
     * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å –Ω–µ—á–µ—Ç–∫–æ–π –ª–æ–≥–∏–∫–æ–π
     */
    async tryFuzzyGlobalMatch(coords, addresses, addressData) {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ —Ä–∞–∑—É–º–Ω—ã–º —Ä–∞–¥–∏—É—Å–æ–º
        const farAddresses = this.getAddressesInRadius(addresses, coords, this.model.radii.far);
        
        if (farAddresses.length === 0) return null;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ—á–µ—Ç–∫—É—é –ª–æ–≥–∏–∫—É
        const fuzzyResults = await this.applyFuzzyLogic(addressData, farAddresses, coords);
        const bestFuzzy = fuzzyResults[0];

        if (bestFuzzy && bestFuzzy.score >= this.model.thresholds.minimal) {
            const result = {
                address: bestFuzzy.address,
                distance: bestFuzzy.distance,
                score: bestFuzzy.score,
                fuzzyScore: bestFuzzy.fuzzyScore,
                method: 'fuzzy_global'
            };
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–æ –±–ª–∏–∑–∫–æ—Å—Ç–∏
            return this.applyProximityRule(result, coords);
        }

        return null;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –±–ª–∏–∑–∫–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (‚â§20–º = 90% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)
     */
    applyProximityRule(result, coords) {
        if (!result || !result.address || !coords) return result;
        
        const distance = this.calculateDistance(coords, result.address.coordinates);
        if (distance <= 20) {
            console.log(`üéØ Proximity rule applied! Distance: ${distance.toFixed(1)}m - boosting to 90% confidence`);
            return {
                ...result,
                distance: distance,
                score: 0.90,
                confidence: 'perfect'  // 90% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç perfect —Å–æ–≥–ª–∞—Å–Ω–æ thresholds
            };
        }
        
        return result;
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∞
     */
    async calculateCompositeScore(sourceData, candidateData, sourceCoords, candidateCoords) {
        // 1. –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–∫–æ—Ä
        const distance = this.calculateDistance(sourceCoords, candidateCoords);
        const geoScore = Math.max(0, 1 - (distance / this.model.radii.extended));

        // 2. –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–∫–æ—Ä (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
        const textScore = this.calculateAdvancedTextSimilarity(sourceData.normalized, candidateData.normalized);

        // 3. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–æ—Ä
        const semanticScore = this.calculateSemanticSimilarity(sourceData.components, candidateData.components);

        // 4. –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Å–∫–æ—Ä
        const structuralScore = this.calculateStructuralSimilarity(sourceData.tokens, candidateData.tokens);

        // 5. –ù–µ—á–µ—Ç–∫–∏–π —Å–∫–æ—Ä
        const fuzzyScore = this.calculateFuzzySimilarity(sourceData.normalized, candidateData.normalized);

        // –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —Å–∫–æ—Ä —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä–∞–≤–∏–ª–æ –±–ª–∏–∑–æ—Å—Ç–∏ (‚â§20–º = 90%) –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ applyProximityRule()
        const compositeScore = 
            (geoScore * this.model.weights.geospatial) +
            (textScore * this.model.weights.textual) +
            (semanticScore * this.model.weights.semantic) +
            (structuralScore * this.model.weights.structural) +
            (fuzzyScore * this.model.weights.fuzzy);

        return Math.min(compositeScore, 1.0);
    }

    /**
     * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
     */
    calculateAdvancedTextSimilarity(str1, str2) {
        if (!str1 || !str2) return 0;

        // –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
        const levenshtein = this.normalizedLevenshtein(str1, str2);
        const jaccard = this.jaccardSimilarity(str1.split(/\s+/), str2.split(/\s+/));
        const ngram2 = this.ngramSimilarity(str1, str2, 2);
        const ngram3 = this.ngramSimilarity(str1, str2, 3);
        const lcs = this.longestCommonSubsequence(str1, str2) / Math.max(str1.length, str2.length);

        // –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
        return (levenshtein * 0.25) + (jaccard * 0.25) + (ngram2 * 0.2) + (ngram3 * 0.15) + (lcs * 0.15);
    }

    /**
     * –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    calculateSemanticSimilarity(comp1, comp2) {
        let totalScore = 0;
        let componentCount = 0;

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É–ª–∏—Ü
        if (comp1.street && comp2.street) {
            const streetSim = this.calculateAdvancedTextSimilarity(comp1.street, comp2.street);
            totalScore += streetSim * 2; // –£–ª–∏—Ü–∞ –∏–º–µ–µ—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å
            componentCount += 2;
        }

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –¥–æ–º–æ–≤
        if (comp1.houseNumber && comp2.houseNumber) {
            const houseSim = comp1.houseNumber === comp2.houseNumber ? 1.0 : 
                           this.calculateAdvancedTextSimilarity(comp1.houseNumber, comp2.houseNumber);
            totalScore += houseSim * 1.5;
            componentCount += 1.5;
        }

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–µ–Ω–∏–π
        if (comp1.building && comp2.building) {
            const buildingSim = comp1.building === comp2.building ? 1.0 :
                              this.calculateAdvancedTextSimilarity(comp1.building, comp2.building);
            totalScore += buildingSim;
            componentCount += 1;
        }

        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        if (comp1.direction && comp2.direction) {
            const directionSim = comp1.direction === comp2.direction ? 1.0 : 0;
            totalScore += directionSim * 0.5;
            componentCount += 0.5;
        }

        return componentCount > 0 ? totalScore / componentCount : 0;
    }

    /**
     * –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
     */
    calculateStructuralSimilarity(tokens1, tokens2) {
        if (!tokens1.length || !tokens2.length) return 0;

        const set1 = new Set(tokens1);
        const set2 = new Set(tokens2);
        
        return this.jaccardSimilarity(Array.from(set1), Array.from(set2));
    }

    /**
     * –ù–µ—á–µ—Ç–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
     */
    calculateFuzzySimilarity(str1, str2) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–µ—á–µ—Ç–∫–∞—è –ª–æ–≥–∏–∫–∞
        const words1 = str1.split(/\s+/);
        const words2 = str2.split(/\s+/);
        
        let matchCount = 0;
        for (const word1 of words1) {
            for (const word2 of words2) {
                if (word1.length >= 3 && word2.length >= 3) {
                    const sim = this.normalizedLevenshtein(word1, word2);
                    if (sim >= 0.7) { // –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        matchCount++;
                        break;
                    }
                }
            }
        }
        
        return matchCount / Math.max(words1.length, words2.length);
    }

    /**
     * –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é ML
     */
    async rankCandidatesML(sourceData, candidates, sourceCoords) {
        const results = [];

        for (const candidate of candidates) {
            const candidateData = this.preprocessAddress(candidate.address || '');
            const score = await this.calculateCompositeScore(sourceData, candidateData, sourceCoords, candidate.coordinates);
            
            results.push({
                address: candidate,
                distance: this.calculateDistance(sourceCoords, candidate.coordinates),
                score: score,
                textSimilarity: this.calculateAdvancedTextSimilarity(sourceData.normalized, candidateData.normalized),
                semanticSimilarity: this.calculateSemanticSimilarity(sourceData.components, candidateData.components),
                structuralSimilarity: this.calculateStructuralSimilarity(sourceData.tokens, candidateData.tokens)
            });
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å–∫–æ—Ä–∞
        return results.sort((a, b) => b.score - a.score);
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ—á–µ—Ç–∫–æ–π –ª–æ–≥–∏–∫–∏
     */
    async applyFuzzyLogic(sourceData, candidates, sourceCoords) {
        const results = [];

        for (const candidate of candidates) {
            const candidateData = this.preprocessAddress(candidate.address || '');
            const distance = this.calculateDistance(sourceCoords, candidate.coordinates);
            
            // –ù–µ—á–µ—Ç–∫–∏–π —Å–∫–æ—Ä —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            const fuzzyScore = this.calculateFuzzySimilarity(sourceData.normalized, candidateData.normalized);
            const geoScore = Math.max(0, 1 - (distance / this.model.radii.far));
            const combinedScore = (fuzzyScore * 0.7) + (geoScore * 0.3);
            
            if (combinedScore >= this.model.thresholds.minimal) {
                results.push({
                    address: candidate,
                    distance: distance,
                    score: combinedScore,
                    fuzzyScore: fuzzyScore
                });
            }
        }

        return results.sort((a, b) => b.score - a.score);
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    normalizeCoordinates(coords) {
        return {
            lat: parseFloat(coords.lat),
            lng: parseFloat(coords.lng || coords.lon)
        };
    }

    getAddressesInRadius(addresses, center, radius) {
        return addresses.filter(addr => {
            if (!addr.coordinates?.lat || !addr.coordinates?.lng) return false;
            const distance = this.calculateDistance(center, addr.coordinates);
            return distance <= radius;
        });
    }

    calculateDistance(coord1, coord2) {
        const R = 6371000;
        const lat1Rad = (coord1.lat * Math.PI) / 180;
        const lat2Rad = (coord2.lat * Math.PI) / 180;
        const deltaLatRad = ((coord2.lat - coord1.lat) * Math.PI) / 180;
        const deltaLngRad = ((coord2.lng - coord1.lng) * Math.PI) / 180;

        const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) +
                  Math.cos(lat1Rad) * Math.cos(lat2Rad) *
                  Math.sin(deltaLngRad / 2) * Math.sin(deltaLngRad / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return R * c;
    }

    normalizedLevenshtein(str1, str2) {
        const distance = this.levenshteinDistance(str1, str2);
        return 1 - (distance / Math.max(str1.length, str2.length));
    }

    levenshteinDistance(str1, str2) {
        const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));
        
        for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;
        for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;
        
        for (let j = 1; j <= str2.length; j++) {
            for (let i = 1; i <= str1.length; i++) {
                const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
                matrix[j][i] = Math.min(
                    matrix[j][i - 1] + 1,
                    matrix[j - 1][i] + 1,
                    matrix[j - 1][i - 1] + indicator
                );
            }
        }
        
        return matrix[str2.length][str1.length];
    }

    jaccardSimilarity(arr1, arr2) {
        const set1 = new Set(arr1);
        const set2 = new Set(arr2);
        const intersection = new Set([...set1].filter(x => set2.has(x)));
        const union = new Set([...set1, ...set2]);
        return union.size === 0 ? 0 : intersection.size / union.size;
    }

    ngramSimilarity(str1, str2, n) {
        const ngrams1 = this.getNgrams(str1, n);
        const ngrams2 = this.getNgrams(str2, n);
        return this.jaccardSimilarity(Array.from(ngrams1), Array.from(ngrams2));
    }

    getNgrams(str, n) {
        const ngrams = new Set();
        for (let i = 0; i <= str.length - n; i++) {
            ngrams.add(str.substr(i, n));
        }
        return ngrams;
    }

    longestCommonSubsequence(str1, str2) {
        const m = str1.length;
        const n = str2.length;
        const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));

        for (let i = 1; i <= m; i++) {
            for (let j = 1; j <= n; j++) {
                if (str1[i - 1] === str2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[m][n];
    }

    getConfidenceLevel(score) {
        if (score >= this.model.thresholds.perfect) return 'perfect';
        if (score >= this.model.thresholds.excellent) return 'high';
        if (score >= this.model.thresholds.good) return 'medium';
        if (score >= this.model.thresholds.acceptable) return 'low';
        if (score >= this.model.thresholds.minimal) return 'very_low';
        return 'none';
    }

    getCacheKey(listing, addresses) {
        return `${listing.id}_${addresses.length}_${JSON.stringify(listing.coordinates)}`;
    }

    addToCache(key, value) {
        if (this.cache.size >= this.cacheMaxSize) {
            const firstKey = this.cache.keys().next().value;
            this.cache.delete(firstKey);
        }
        this.cache.set(key, value);
    }

    updateStats(result) {
        this.stats.totalMatches++;
        if (result.address) {
            this.stats.successfulMatches++;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ç–æ–¥–æ–≤
        const method = result.method;
        if (!this.stats.methodEffectiveness[method]) {
            this.stats.methodEffectiveness[method] = { count: 0, totalScore: 0 };
        }
        this.stats.methodEffectiveness[method].count++;
        this.stats.methodEffectiveness[method].totalScore += result.score;
    }

    getStats() {
        const effectiveness = {};
        for (const [method, data] of Object.entries(this.stats.methodEffectiveness)) {
            effectiveness[method] = {
                count: data.count,
                averageScore: data.totalScore / data.count,
                successRate: (data.count / this.stats.totalMatches) * 100
            };
        }

        return {
            totalMatches: this.stats.totalMatches,
            successfulMatches: this.stats.successfulMatches,
            overallSuccessRate: (this.stats.successfulMatches / this.stats.totalMatches) * 100,
            methodEffectiveness: effectiveness,
            cacheSize: this.cache.size,
            modelVersion: this.model.version,
            trainingExamples: this.training.examples.length
        };
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è –∏–∑ localStorage
     */
    restoreTrainingCount() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ training –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (!this.training) {
                console.warn('Training system not initialized yet, skipping restore');
                return;
            }
            
            const savedCount = localStorage.getItem('ml_training_count');
            if (savedCount) {
                const count = parseInt(savedCount);
                if (count > 0) {
                    // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
                    // (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
                    this.training.examples = new Array(count).fill({
                        timestamp: Date.now(),
                        isCorrect: true,
                        listing: 'restored',
                        candidate: 'restored'
                    });
                    console.log(`üîÑ Restored ${count} training examples from localStorage`);
                }
            }
        } catch (error) {
            console.warn('Failed to restore training count:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
     */
    async loadPretrainedModel() {
        try {
            const response = await fetch('/utils/pretrained-model.json');
            if (response.ok) {
                const pretrainedModel = await response.json();
                
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª—å—é
                this.model = { ...this.model, ...pretrainedModel };
                
                console.log(`üß† Loaded pretrained model v${this.model.version} (accuracy: ${this.model.accuracy})`);
            }
        } catch (error) {
            console.log('üìù Using default model configuration');
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö)
     */
    addTrainingExample(listingAddress, candidateAddress, isCorrect) {
        if (!this.training.enabled) return;

        const example = {
            listing: listingAddress,
            candidate: candidateAddress,
            isCorrect: isCorrect,
            timestamp: Date.now(),
            features: this.extractFeatures(listingAddress, candidateAddress)
        };

        this.training.examples.push(example);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏
        if (this.training.examples.length > this.training.maxExamples) {
            this.training.examples.shift();
        }

        console.log(`üìö Added training example: ${isCorrect ? '‚úÖ' : '‚ùå'} (total: ${this.training.examples.length})`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ localStorage
        if (typeof localStorage !== 'undefined') {
            localStorage.setItem('ml_training_count', this.training.examples.length.toString());
        }
        
        // –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 50 –ø—Ä–∏–º–µ—Ä–æ–≤
        if (this.training.examples.length % 50 === 0) {
            this.retrain();
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
     */
    extractFeatures(listingAddress, candidateAddress) {
        const listingData = this.preprocessAddress(listingAddress);
        const candidateData = this.preprocessAddress(candidateAddress);

        return {
            textSimilarity: this.calculateAdvancedTextSimilarity(listingData.normalized, candidateData.normalized),
            semanticSimilarity: this.calculateSemanticSimilarity(listingData.components, candidateData.components),
            structuralSimilarity: this.calculateStructuralSimilarity(listingData.tokens, candidateData.tokens),
            fuzzySimilarity: this.calculateFuzzySimilarity(listingData.normalized, candidateData.normalized),
            lengthRatio: Math.min(listingAddress.length, candidateAddress.length) / Math.max(listingAddress.length, candidateAddress.length)
        };
    }

    /**
     * –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
     */
    retrain() {
        console.log('üîÑ Retraining model with', this.training.examples.length, 'examples');

        const positiveExamples = this.training.examples.filter(ex => ex.isCorrect);
        const negativeExamples = this.training.examples.filter(ex => !ex.isCorrect);

        if (positiveExamples.length < 10 || negativeExamples.length < 10) {
            console.log('üìä Not enough examples for retraining');
            return;
        }

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
        this.optimizeWeights(positiveExamples, negativeExamples);
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤
        this.optimizeThresholds(this.training.examples);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
        this.model.version = this.incrementVersion(this.model.version);
        this.model.lastUpdate = new Date().toISOString().split('T')[0];
        
        console.log(`üéØ Model retrained to v${this.model.version}`);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        this.saveModelForExport();
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
     */
    optimizeWeights(positiveExamples, negativeExamples) {
        const avgPositive = this.averageFeatures(positiveExamples);
        const avgNegative = this.averageFeatures(negativeExamples);

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ —Ä–∞–∑–ª–∏—á–∞—é—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        const importance = {
            textual: Math.abs(avgPositive.textSimilarity - avgNegative.textSimilarity),
            semantic: Math.abs(avgPositive.semanticSimilarity - avgNegative.semanticSimilarity),
            structural: Math.abs(avgPositive.structuralSimilarity - avgNegative.structuralSimilarity),
            fuzzy: Math.abs(avgPositive.fuzzySimilarity - avgNegative.fuzzySimilarity)
        };

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞
        const totalImportance = Object.values(importance).reduce((a, b) => a + b, 0);
        const learningRate = 0.1;

        this.model.weights.textual += learningRate * (importance.textual / totalImportance - this.model.weights.textual);
        this.model.weights.semantic += learningRate * (importance.semantic / totalImportance - this.model.weights.semantic);
        this.model.weights.structural += learningRate * (importance.structural / totalImportance - this.model.weights.structural);
        this.model.weights.fuzzy += learningRate * (importance.fuzzy / totalImportance - this.model.weights.fuzzy);

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
        const totalWeight = Object.values(this.model.weights).reduce((a, b) => a + b, 0);
        for (const key in this.model.weights) {
            this.model.weights[key] /= totalWeight;
        }
    }

    /**
     * –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
     */
    averageFeatures(examples) {
        const avg = {
            textSimilarity: 0,
            semanticSimilarity: 0,
            structuralSimilarity: 0,
            fuzzySimilarity: 0
        };

        for (const example of examples) {
            avg.textSimilarity += example.features.textSimilarity;
            avg.semanticSimilarity += example.features.semanticSimilarity;
            avg.structuralSimilarity += example.features.structuralSimilarity;
            avg.fuzzySimilarity += example.features.fuzzySimilarity;
        }

        for (const key in avg) {
            avg[key] /= examples.length;
        }

        return avg;
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤
     */
    optimizeThresholds(examples) {
        const scores = examples.map(ex => ({
            score: this.calculateCompositeScoreFromFeatures(ex.features),
            label: ex.isCorrect
        })).sort((a, b) => b.score - a.score);

        // –ù–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø–æ F1-–º–µ—Ç—Ä–∏–∫–µ
        let bestF1 = 0;
        let bestThreshold = 0.5;

        for (const item of scores) {
            const threshold = item.score;
            const metrics = this.calculateF1(scores, threshold);
            
            if (metrics.f1 > bestF1) {
                bestF1 = metrics.f1;
                bestThreshold = threshold;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥–∏
        this.model.thresholds.acceptable = Math.max(0.3, bestThreshold - 0.1);
        this.model.thresholds.good = bestThreshold;
        this.model.thresholds.excellent = Math.min(0.9, bestThreshold + 0.15);
    }

    /**
     * –†–∞—Å—á–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∞ –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
     */
    calculateCompositeScoreFromFeatures(features) {
        return (
            features.textSimilarity * this.model.weights.textual +
            features.semanticSimilarity * this.model.weights.semantic +
            features.structuralSimilarity * this.model.weights.structural +
            features.fuzzySimilarity * this.model.weights.fuzzy
        );
    }

    /**
     * –†–∞—Å—á–µ—Ç F1-–º–µ—Ç—Ä–∏–∫–∏
     */
    calculateF1(scores, threshold) {
        let tp = 0, fp = 0, fn = 0;

        for (const item of scores) {
            const predicted = item.score >= threshold;
            const actual = item.label;

            if (predicted && actual) tp++;
            else if (predicted && !actual) fp++;
            else if (!predicted && actual) fn++;
        }

        const precision = tp / (tp + fp) || 0;
        const recall = tp / (tp + fn) || 0;
        const f1 = 2 * precision * recall / (precision + recall) || 0;

        return { precision, recall, f1 };
    }

    /**
     * –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤–µ—Ä—Å–∏–∏
     */
    incrementVersion(version) {
        const parts = version.split('.');
        const patch = parseInt(parts[2]) + 1;
        return `${parts[0]}.${parts[1]}.${patch}`;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–¥–ª—è –∫–æ–º–º–∏—Ç–∞ –≤ GitHub)
     */
    saveModelForExport() {
        const exportModel = {
            version: this.model.version,
            trainedOn: this.model.trainedOn,
            lastUpdate: this.model.lastUpdate,
            trainingExamples: this.training.examples.length,
            radii: this.model.radii,
            thresholds: this.model.thresholds,
            weights: this.model.weights
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
        console.log('üìÅ Export model to pretrained-model.json:');
        console.log(JSON.stringify(exportModel, null, 2));
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞  
        if (typeof localStorage !== 'undefined') {
            localStorage.setItem('ml_trained_model', JSON.stringify(exportModel));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            localStorage.setItem('ml_training_count', this.training.examples.length.toString());
            
            console.log('üíæ Model saved to localStorage as "ml_trained_model"');
        }
    }

    /**
     * –†—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–¥–ª—è –æ–±—É—á–µ–Ω–∏—è)
     */
    correctAddress(listingId, correctAddressId) {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ UI –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥—Ä–µ—Å
        console.log(`üîß Address corrected for listing ${listingId} -> ${correctAddressId}`);
        
        // –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞
        // this.addTrainingExample(listingAddress, correctAddress, true);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SmartAddressMatcher;
}