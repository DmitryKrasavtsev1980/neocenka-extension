/**
 * AI Setup Helper - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 * –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API-–∫–ª—é—á–µ–π
 */

class AISetupHelper {
    constructor() {
        this.configService = window.diContainer?.get('ConfigService');
        if (!this.configService) {
            console.error('‚ùå ConfigService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.');
            return;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YandexGPT –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
     * @param {string} apiKey - API –∫–ª—é—á YandexGPT
     * @param {string} folderId - Folder ID –∏–∑ Yandex Cloud
     * @param {string} model - –º–æ–¥–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é yandexgpt-lite)
     */
    async setupYandexGPT(apiKey, folderId, model = 'yandexgpt-lite') {
        try {
            const config = {
                apiKey: apiKey,
                folderId: folderId,
                model: model
            };

            await this.configService.set('ai.providers.yandex', config);
            
            console.log('‚úÖ YandexGPT –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', {
                folderId: folderId,
                model: model,
                apiKey: apiKey.substring(0, 10) + '...'
            });

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
            await this.reloadAIService();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YandexGPT:', error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Claude –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
     * @param {string} apiKey - API –∫–ª—é—á Claude
     * @param {string} model - –º–æ–¥–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é claude-3-sonnet-20240229)
     */
    async setupClaude(apiKey, model = 'claude-3-sonnet-20240229') {
        try {
            const config = {
                apiKey: apiKey,
                model: model
            };

            await this.configService.set('ai.providers.claude', config);
            
            console.log('‚úÖ Claude –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', {
                model: model,
                apiKey: apiKey.substring(0, 10) + '...'
            });

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
            await this.reloadAIService();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Claude:', error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ AI
     * @param {string} primaryProvider - –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (yandex, claude)
     * @param {boolean} enabled - –≤–∫–ª—é—á–µ–Ω –ª–∏ AI-—á–∞—Ç
     */
    async setupAIGeneral(primaryProvider = 'yandex', enabled = true) {
        try {
            const aiConfig = {
                primaryProvider: primaryProvider,
                fallbackChain: primaryProvider === 'yandex' ? ['yandex', 'claude'] : ['claude', 'yandex'],
                costOptimization: true,
                autoLanguageDetection: true,
                maxRetries: 3,
                budget: {
                    daily: 1.0,
                    perRequest: 0.05
                }
            };

            const chatConfig = {
                enabled: enabled,
                autoOpen: false,
                preferredProvider: primaryProvider,
                maxHistoryMessages: 50
            };

            await this.configService.set('ai', aiConfig);
            await this.configService.set('aiChat', chatConfig);

            console.log('‚úÖ –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
            console.log('–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:', primaryProvider);

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
            await this.reloadAIService();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ AI:', error);
        }
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞
     */
    async reloadAIService() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π AI —Å–µ—Ä–≤–∏—Å
            const universalAI = window.diContainer?.get('UniversalAIService');
            const aiInterface = window.diContainer?.get('AIChatInterface');

            if (universalAI) {
                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
                await universalAI.initialize();
                console.log('üîÑ UniversalAIService –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω');
            }

            if (aiInterface) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                setTimeout(async () => {
                    const available = await universalAI.isAvailable();
                    console.log('üîç AI –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:', available);
                    
                    if (available) {
                        console.log('üéâ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
                        console.log('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —á–∞—Ç–∞ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É.');
                    } else {
                        console.log('‚ö†Ô∏è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API-–∫–ª—é—á–µ–π.');
                    }
                }, 1000);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ AI —Å–µ—Ä–≤–∏—Å–∞:', error);
        }
    }

    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI
     */
    async showCurrentConfig() {
        try {
            const aiConfig = await this.configService.get('ai');
            const chatConfig = await this.configService.get('aiChat');
            const yandexConfig = await this.configService.get('ai.providers.yandex');
            const claudeConfig = await this.configService.get('ai.providers.claude');

            console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI:');
            console.log('–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', aiConfig);
            console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞:', chatConfig);
            
            if (yandexConfig && yandexConfig.apiKey) {
                console.log('YandexGPT:', {
                    configured: true,
                    folderId: yandexConfig.folderId,
                    model: yandexConfig.model,
                    apiKey: yandexConfig.apiKey.substring(0, 10) + '...'
                });
            } else {
                console.log('YandexGPT: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }

            if (claudeConfig && claudeConfig.apiKey) {
                console.log('Claude:', {
                    configured: true,
                    model: claudeConfig.model,
                    apiKey: claudeConfig.apiKey.substring(0, 10) + '...'
                });
            } else {
                console.log('Claude: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            const universalAI = window.diContainer?.get('UniversalAIService');
            if (universalAI) {
                const available = await universalAI.isAvailable();
                const availableProviders = await universalAI.getAvailableProviders();
                console.log('üîç –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', available);
                console.log('üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:', availableProviders);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }

    /**
     * –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–µ–º–æ-—Ä–µ–∂–∏–º)
     */
    async setupDemo() {
        console.log('‚ö†Ô∏è –î–µ–º–æ-—Ä–µ–∂–∏–º: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API-–∫–ª—é—á–µ–π');
        
        // –í–∫–ª—é—á–∞–µ–º AI-—á–∞—Ç –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–µ–π
        await this.setupAIGeneral('yandex', true);
        
        console.log('‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        console.log('üí° –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ API-–∫–ª—é—á–∏:');
        console.log('   aiSetup.setupYandexGPT("YOUR_API_KEY", "YOUR_FOLDER_ID")');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI
     */
    async clearAllSettings() {
        try {
            await this.configService.remove('ai');
            await this.configService.remove('aiChat');
            await this.configService.remove('ai.providers.yandex');
            await this.configService.remove('ai.providers.claude');
            
            console.log('üóëÔ∏è –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –æ—á–∏—â–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
if (typeof window !== 'undefined') {
    window.aiSetup = new AISetupHelper();
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(`
ü§ñ AI Setup Helper –∑–∞–≥—Ä—É–∂–µ–Ω!

–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- aiSetup.setupYandexGPT("API_KEY", "FOLDER_ID") - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å YandexGPT
- aiSetup.setupClaude("API_KEY") - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Claude
- aiSetup.setupAIGeneral("yandex") - –≤—ã–±—Ä–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
- aiSetup.showCurrentConfig() - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
- aiSetup.setupDemo() - –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- aiSetup.clearAllSettings() - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YandexGPT:
aiSetup.setupYandexGPT("AQVN...", "b1g2ab3c4def5gh6");
`);
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AISetupHelper;
}