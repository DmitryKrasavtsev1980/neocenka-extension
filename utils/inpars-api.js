/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º Inpars.ru
 */

class InparsAPI {
    constructor() {
        this.baseURL = 'https://inpars.ru/api/v2';
        this.token = null;
        this.requestCount = 0;
        this.lastRequestTime = 0;
        this.requestQueue = [];
        this.isProcessingQueue = false;
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        this.maxRequestsPerMinute = 10;
        this.minRequestInterval = 6000; // 60000ms / 10 requests = 6000ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ API
     */
    setToken(token) {
        this.token = token;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async loadToken() {
        try {
            if (typeof db !== 'undefined' && db) {
                const token = await db.getSetting('inpars_api_token');
                if (token) {
                    this.token = token;
                    return token;
                }
            }
            return null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ Inpars:', error);
            return null;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    async saveToken(token) {
        try {
            if (typeof db !== 'undefined' && db) {
                await db.setSetting('inpars_api_token', token);
                this.token = token;
                return true;
            }
            return false;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Inpars:', error);
            return false;
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
     */
    async queueRequest(requestFn) {
        return new Promise((resolve, reject) => {
            this.requestQueue.push({ requestFn, resolve, reject });
            this.processQueue();
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async processQueue() {
        if (this.isProcessingQueue || this.requestQueue.length === 0) {
            return;
        }

        this.isProcessingQueue = true;

        while (this.requestQueue.length > 0) {
            const now = Date.now();
            const timeSinceLastRequest = now - this.lastRequestTime;

            // –ñ–¥–µ–º, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if (timeSinceLastRequest < this.minRequestInterval) {
                const waitTime = this.minRequestInterval - timeSinceLastRequest;
                console.log(`‚è±Ô∏è Inpars API: –û–∂–∏–¥–∞–Ω–∏–µ ${waitTime}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º`);
                await new Promise(resolve => setTimeout(resolve, waitTime));
            }

            const { requestFn, resolve, reject } = this.requestQueue.shift();
            
            try {
                this.lastRequestTime = Date.now();
                this.requestCount++;
                const result = await requestFn();
                resolve(result);
            } catch (error) {
                reject(error);
            }
        }

        this.isProcessingQueue = false;
    }

    /**
     * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
     */
    async makeRequest(endpoint, bodyParams = {}, method = 'POST') {
        if (!this.token) {
            await this.loadToken();
            if (!this.token) {
                throw new Error('–¢–æ–∫–µ–Ω API Inpars –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
        }

        const url = new URL(endpoint, this.baseURL);
        
        // Basic Auth –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º PHP –∫–æ–¥–µ
        const authString = btoa(this.token + ':');

        const requestOptions = {
            method: method,
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': `Basic ${authString}`
            }
        };

        // –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º body
        if (method === 'POST' && Object.keys(bodyParams).length > 0) {
            requestOptions.body = JSON.stringify(bodyParams);
        }

        console.log(`üì° Inpars API: ${requestOptions.method} ${url.toString()}`);
        console.log(`üîë Auth: Basic ${authString.substring(0, 20)}...`);
        if (method === 'POST') {
            console.log(`üì¶ Body:`, JSON.stringify(bodyParams, null, 2));
        }

        const response = await fetch(url.toString(), requestOptions);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        if (response.status === 429) {
            const retryAfter = response.headers.get('Retry-After') || 60;
            console.warn(`‚ö†Ô∏è Inpars API: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${retryAfter} —Å–µ–∫.`);
            
            await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
            return this.makeRequest(endpoint, bodyParams, method);
        }

        if (!response.ok) {
            const errorText = await response.text();
            console.error(`‚ùå Inpars API Error ${response.status}:`, errorText);
            throw new Error(`Inpars API Error ${response.status}: ${errorText}`);
        }

        const data = await response.json();
        console.log(`‚úÖ Inpars API: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, –∑–∞–ø–∏—Å–µ–π: ${data.data?.length || 'N/A'}`);
        
        return data;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–∫–∞–∫ –≤ PHP –∫–æ–¥–µ)
     */
    async checkSubscription() {
        return this.queueRequest(async () => {
            try {
                if (!this.token) {
                    await this.loadToken();
                    if (!this.token) {
                        throw new Error('–¢–æ–∫–µ–Ω API Inpars –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                    }
                }

                // GET –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–∫–∞–∫ –≤ PHP)
                const url = `${this.baseURL}/user/subscribe?access-token=${this.token}`;
                
                console.log(`üì° Inpars API: GET ${url}`);

                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                console.log(`üìä Subscription check status: ${response.status}`);

                // –í PHP –∫–æ–¥–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å 200 –∏–ª–∏ 402
                if (response.status === 200) {
                    const data = await response.json();
                    
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
                    if (data.data && data.data.length > 0) {
                        const activeSubscriptions = data.data.filter(sub => {
                            // –í Inpars API –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è endTime, –∞ –Ω–µ dateEnd
                            const endDate = new Date(sub.endTime || sub.dateEnd);
                            return endDate > new Date();
                        });

                        return {
                            success: true,
                            status: 200,
                            active: activeSubscriptions.length > 0,
                            subscriptions: data.data,
                            activeSubscriptions: activeSubscriptions
                        };
                    } else {
                        return {
                            success: true,
                            status: 200,
                            active: false,
                            subscriptions: [],
                            activeSubscriptions: []
                        };
                    }
                } else if (response.status === 402) {
                    // –ö–æ–¥ 402 - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞
                    return {
                        success: true,
                        status: 402,
                        active: false,
                        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏'
                    };
                } else {
                    // –î—Ä—É–≥–∏–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫
                    const errorText = await response.text();
                    throw new Error(`HTTP ${response.status}: ${errorText}`);
                }

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ Inpars:', error);
                return {
                    success: false,
                    status: null,
                    active: false,
                    error: error.message
                };
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∫–∞–∫ –≤ PHP –∫–æ–¥–µ)
     */
    async getCategories() {
        return this.queueRequest(async () => {
            try {
                if (!this.token) {
                    await this.loadToken();
                    if (!this.token) {
                        throw new Error('–¢–æ–∫–µ–Ω API Inpars –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                    }
                }

                // GET –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–∫–∞–∫ –≤ PHP)
                const url = `${this.baseURL}/estate/category?access-token=${this.token}`;
                
                console.log(`üì° Inpars API: GET ${url}`);

                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                console.log(`üìä Categories check status: ${response.status}`);

                if (response.status === 200) {
                    const data = await response.json();
                    
                    if (data.data) {
                        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.data.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
                        return {
                            success: true,
                            categories: data.data,
                            meta: data.meta
                        };
                    } else {
                        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ API');
                    }
                } else {
                    const errorText = await response.text();
                    throw new Error(`HTTP ${response.status}: ${errorText}`);
                }

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π Inpars:', error);
                return {
                    success: false,
                    error: error.message
                };
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–ª–∏–≥–æ–Ω–æ–≤
     */
    async getListings(params = {}) {
        return this.queueRequest(async () => {
            try {
                const endpoint = '/estate';
                const url = new URL(endpoint, this.baseURL);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                Object.keys(params).forEach(key => {
                    if (params[key] !== undefined && params[key] !== null) {
                        if (Array.isArray(params[key])) {
                            params[key].forEach(value => {
                                url.searchParams.append(key + '[]', value);
                            });
                        } else {
                            url.searchParams.append(key, params[key]);
                        }
                    }
                });

                const response = await this.makeRequest(url.pathname + url.search);
                
                if (response.data) {
                    return {
                        success: true,
                        listings: response.data,
                        meta: response.meta
                    };
                } else {
                    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ API');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π Inpars:', error);
                return {
                    success: false,
                    error: error.message
                };
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É –æ–±–ª–∞—Å—Ç–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     */
    async getListingsByPolygon(polygon, categories = [], sources = [], timeStart = null, onProgress = null) {
        return this.queueRequest(async () => {
            try {
                if (!this.token) {
                    await this.loadToken();
                    if (!this.token) {
                        throw new Error('–¢–æ–∫–µ–Ω API Inpars –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                    }
                }
                
                if (!polygon || polygon.length < 3) {
                    throw new Error('–ü–æ–ª–∏–≥–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏');
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–∫–∞–∫ –≤ PHP –∫–æ–¥–µ)
                const polygonString = polygon.map(point => `${point.lat},${point.lng}`).join(',');

                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞–±–æ—á–µ–º—É PHP –∫–æ–¥—É
                const params = {
                    limit: 500,
                    polygon: polygonString,
                    expand: 'region,city,type,section,category,metro,material,rentTime,isNew,rooms,history,phoneProtected',
                    typeAd: 2, // –ü—Ä–æ–¥–∞–∂–∞
                    sourceId: '1,2,13,22', // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–∞–∫ –≤ PHP
                    isNew: 0,
                    withAgent: 1,
                    sortBy: 'updated_asc'
                };

                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
                if (timeStart) {
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ timestamp –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    if (typeof timeStart === 'string') {
                        params.timeStart = Math.floor(new Date(timeStart).getTime() / 1000);
                    } else {
                        params.timeStart = timeStart;
                    }
                } else {
                    // –°—Ç–∞—Ä—Ç–æ–≤–∞—è –¥–∞—Ç–∞ –∫–∞–∫ –≤ PHP –∫–æ–¥–µ
                    params.timeStart = Math.floor(new Date('2021-01-01T00:00:00+03:00').getTime() / 1000);
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
                if (categories && categories.length > 0) {
                    params.categoryId = categories.join(',');
                }

                console.log(`üìç Inpars API: –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É (${polygon.length} —Ç–æ—á–µ–∫), timeStart: ${new Date(params.timeStart * 1000).toISOString()}`);

                // GET –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–∫–∞–∫ –≤ checkSubscription –∏ getCategories)
                const url = new URL('/api/v2/estate', this.baseURL);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
                url.searchParams.append('access-token', this.token);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                Object.keys(params).forEach(key => {
                    if (params[key] !== undefined && params[key] !== null) {
                        url.searchParams.append(key, params[key]);
                    }
                });

                console.log(`üì° Inpars API: GET ${url.toString()}`);

                const response = await fetch(url.toString(), {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                console.log(`üìä Estate search status: ${response.status}`);

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error(`‚ùå Inpars API Error ${response.status}:`, errorText);
                    throw new Error(`Inpars API Error ${response.status}: ${errorText}`);
                }

                const responseData = await response.json();
                console.log(`‚úÖ Inpars API: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, –∑–∞–ø–∏—Å–µ–π: ${responseData.data?.length || 'N/A'}`);
                
                if (responseData.data) {
                    let listings = responseData.data;

                    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if (sources && sources.length > 0) {
                        listings = listings.filter(listing => {
                            const source = this.detectListingSource(listing);
                            return sources.includes(source);
                        });
                    }

                    // –ü–æ–ª—É—á–∞–µ–º updated –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    const nextTimeStart = listings.length > 0 ? listings[listings.length - 1].updated : null;
                    const hasMore = listings.length >= 500;

                    console.log(`‚úÖ Inpars API: –ü–æ–ª—É—á–µ–Ω–æ ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –µ—Å—Ç—å –µ—â–µ: ${hasMore}`);

                    return {
                        success: true,
                        listings: listings,
                        meta: responseData.meta,
                        pagination: {
                            hasMore: hasMore,
                            nextTimeStart: nextTimeStart,
                            currentCount: listings.length
                        },
                        filteredBy: {
                            polygon: polygon.length,
                            categories: categories.length,
                            sources: sources.length
                        }
                    };
                } else {
                    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ API');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É Inpars:', error);
                return {
                    success: false,
                    error: error.message
                };
            }
        });
    }

    /**
     * –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     */
    async importAllListingsByPolygon(polygon, categories = [], sources = [], onProgress = null) {
        try {
            console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø–æ–ª–∏–≥–æ–Ω—É`);
            
            let allListings = [];
            let currentTimeStart = null;
            let pageNumber = 1;
            let hasMore = true;

            while (hasMore) {
                if (onProgress) {
                    onProgress({
                        status: 'loading',
                        page: pageNumber,
                        totalLoaded: allListings.length,
                        message: `–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${pageNumber}...`
                    });
                }

                const result = await this.getListingsByPolygon(
                    polygon, 
                    categories, 
                    sources, 
                    currentTimeStart
                );

                if (!result.success) {
                    throw new Error(result.error);
                }

                allListings = allListings.concat(result.listings);
                hasMore = result.pagination.hasMore;
                currentTimeStart = result.pagination.nextTimeStart;
                pageNumber++;

                console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber - 1}: –ø–æ–ª—É—á–µ–Ω–æ ${result.listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –≤—Å–µ–≥–æ: ${allListings.length}`);

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                if (hasMore) {
                    await new Promise(resolve => setTimeout(resolve, this.minRequestInterval));
                }
            }

            if (onProgress) {
                onProgress({
                    status: 'completed',
                    page: pageNumber - 1,
                    totalLoaded: allListings.length,
                    message: `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`
                });
            }

            console.log(`üéâ –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${allListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ ${pageNumber - 1} —Å—Ç—Ä–∞–Ω–∏—Ü`);

            return {
                success: true,
                listings: allListings,
                totalPages: pageNumber - 1,
                totalCount: allListings.length
            };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
            
            if (onProgress) {
                onProgress({
                    status: 'error',
                    message: `–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`
                });
            }

            return {
                success: false,
                error: error.message
            };
        }
    }


    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –¥–∞–Ω–Ω—ã–º
     */
    detectListingSource(listing) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if (listing.url) {
            if (listing.url.includes('avito.ru')) {
                return 'avito';
            } else if (listing.url.includes('cian.ru')) {
                return 'cian';
            }
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ source –≤ –¥–∞–Ω–Ω—ã—Ö
        if (listing.source) {
            return listing.source.toLowerCase();
        }

        // –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—è–º
        if (listing.site || listing.platform) {
            const platform = (listing.site || listing.platform).toLowerCase();
            if (platform.includes('avito')) return 'avito';
            if (platform.includes('cian')) return 'cian';
        }

        return 'unknown';
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç API
     */
    static formatPolygonForAPI(polygon) {
        if (!polygon || !Array.isArray(polygon)) {
            throw new Error('–ü–æ–ª–∏–≥–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
        }

        return polygon.map(point => {
            // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            const lat = point.lat || point.latitude || point[0];
            const lng = point.lng || point.longitude || point.lon || point[1];
            
            if (typeof lat !== 'number' || typeof lng !== 'number') {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ø–æ–ª–∏–≥–æ–Ω–µ');
            }

            return { lat, lng };
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
     */
    async getRegions() {
        return this.queueRequest(async () => {
            try {
                const response = await this.makeRequest('/region');
                
                if (response.data) {
                    return {
                        success: true,
                        regions: response.data,
                        meta: response.meta
                    };
                } else {
                    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ API');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ Inpars:', error);
                return {
                    success: false,
                    error: error.message
                };
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
     */
    async getCities(regionId = null) {
        return this.queueRequest(async () => {
            try {
                let endpoint = '/city';
                if (regionId) {
                    endpoint += `?regionId=${regionId}`;
                }
                
                const response = await this.makeRequest(endpoint);
                
                if (response.data) {
                    return {
                        success: true,
                        cities: response.data,
                        meta: response.meta
                    };
                } else {
                    throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ API');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ Inpars:', error);
                return {
                    success: false,
                    error: error.message
                };
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API
     */
    getStats() {
        return {
            requestCount: this.requestCount,
            queueLength: this.requestQueue.length,
            isProcessing: this.isProcessingQueue,
            lastRequestTime: this.lastRequestTime,
            hasToken: !!this.token
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    clearQueue() {
        this.requestQueue.forEach(({ reject }) => {
            reject(new Error('–û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω–∞'));
        });
        this.requestQueue = [];
        this.isProcessingQueue = false;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
const inparsAPI = new InparsAPI();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { InparsAPI, inparsAPI };
}

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏
if (typeof window !== 'undefined') {
    window.inparsAPI = inparsAPI;
    window.InparsAPI = InparsAPI;
}