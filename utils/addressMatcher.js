/**
 * –ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –±–∞–∑–æ–π –∞–¥—Ä–µ—Å–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–æ–¥—Ö–æ–¥ —Å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
 */

class AddressMatcher {
    constructor(spatialIndex) {
        this.spatialIndex = spatialIndex;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        this.config = {
            // –†–∞–¥–∏—É—Å—ã –ø–æ–∏—Å–∫–∞ (–≤ –º–µ—Ç—Ä–∞—Ö)
            exactRadius: 30,        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            nearRadius: 100,        // –ë–ª–∏–∂–Ω–∏–π –ø–æ–∏—Å–∫
            extendedRadius: 300,    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
            
            // –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
            highSimilarity: 0.85,   // –í—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
            mediumSimilarity: 0.65, // –°—Ä–µ–¥–Ω–µ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
            lowSimilarity: 0.4,     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
            
            // –í–µ—Å–∞ –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∞
            weights: {
                distance: 0.4,      // –í–µ—Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                textSimilarity: 0.6 // –í–µ—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
            }
        };
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –±–∞–∑–æ–π –∞–¥—Ä–µ—Å–æ–≤
     * @param {Object} listing - –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –∞–¥—Ä–µ—Å–æ–º
     * @param {Array} addresses - –ë–∞–∑–∞ –∞–¥—Ä–µ—Å–æ–≤
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
     */
    async matchAddress(listing, addresses) {
        const listingCoords = {
            lat: listing.coordinates.lat,
            lng: listing.coordinates.lng || listing.coordinates.lon
        };
        
        const listingAddress = this.normalizeAddress(listing.address || '');
        
        console.log(`üîç –ò—â–µ–º –∞–¥—Ä–µ—Å –¥–ª—è: "${listing.address}" –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö ${listingCoords.lat}, ${listingCoords.lng}`);
        
        // –≠—Ç–∞–ø 1: –¢–æ—á–Ω–æ–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (30–º)
        const exactMatches = this.findAddressesInRadius(addresses, listingCoords, this.config.exactRadius);
        if (exactMatches.length === 1) {
            return {
                address: exactMatches[0],
                confidence: 'high',
                method: 'exact_geo',
                distance: this.calculateDistance(listingCoords, exactMatches[0].coordinates),
                score: 1.0
            };
        }
        
        // –≠—Ç–∞–ø 2: –ë–ª–∏–∂–Ω–∏–π –ø–æ–∏—Å–∫ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º (100–º)
        const nearMatches = this.findAddressesInRadius(addresses, listingCoords, this.config.nearRadius);
        if (nearMatches.length > 0) {
            const bestNearMatch = this.findBestTextMatch(listingAddress, nearMatches, listingCoords);
            if (bestNearMatch.textSimilarity >= this.config.highSimilarity) {
                return {
                    address: bestNearMatch.address,
                    confidence: 'high',
                    method: 'near_geo_text',
                    distance: bestNearMatch.distance,
                    textSimilarity: bestNearMatch.textSimilarity,
                    score: bestNearMatch.score
                };
            }
        }
        
        // –≠—Ç–∞–ø 3: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º (300–º)
        const extendedMatches = this.findAddressesInRadius(addresses, listingCoords, this.config.extendedRadius);
        if (extendedMatches.length > 0) {
            const bestExtendedMatch = this.findBestTextMatch(listingAddress, extendedMatches, listingCoords);
            if (bestExtendedMatch.textSimilarity >= this.config.mediumSimilarity) {
                return {
                    address: bestExtendedMatch.address,
                    confidence: bestExtendedMatch.textSimilarity >= this.config.highSimilarity ? 'medium' : 'low',
                    method: 'extended_geo_text',
                    distance: bestExtendedMatch.distance,
                    textSimilarity: bestExtendedMatch.textSimilarity,
                    score: bestExtendedMatch.score
                };
            }
        }
        
        // –≠—Ç–∞–ø 4: –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é)
        const globalBestMatch = this.findBestTextMatch(listingAddress, addresses, listingCoords);
        if (globalBestMatch.textSimilarity >= this.config.lowSimilarity) {
            return {
                address: globalBestMatch.address,
                confidence: 'very_low',
                method: 'global_text',
                distance: globalBestMatch.distance,
                textSimilarity: globalBestMatch.textSimilarity,
                score: globalBestMatch.score
            };
        }
        
        // –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
        return {
            address: null,
            confidence: 'none',
            method: 'no_match',
            distance: null,
            textSimilarity: 0,
            score: 0
        };
    }

    /**
     * –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ
     */
    findAddressesInRadius(addresses, center, radiusMeters) {
        return addresses.filter(address => {
            if (!address.coordinates || !address.coordinates.lat || !address.coordinates.lng) {
                return false;
            }
            
            const distance = this.calculateDistance(center, address.coordinates);
            return distance <= radiusMeters;
        });
    }

    /**
     * –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É
     */
    findBestTextMatch(targetAddress, candidates, targetCoords) {
        let bestMatch = {
            address: null,
            textSimilarity: 0,
            distance: Infinity,
            score: 0
        };
        
        candidates.forEach(candidate => {
            const candidateAddress = this.normalizeAddress(candidate.address || '');
            const textSimilarity = this.calculateTextSimilarity(targetAddress, candidateAddress);
            const distance = this.calculateDistance(targetCoords, candidate.coordinates);
            
            // –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —Å–∫–æ—Ä: –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            const normalizedDistance = Math.min(distance / this.config.extendedRadius, 1);
            const distanceScore = 1 - normalizedDistance;
            
            const score = (textSimilarity * this.config.weights.textSimilarity) + 
                         (distanceScore * this.config.weights.distance);
            
            if (score > bestMatch.score) {
                bestMatch = {
                    address: candidate,
                    textSimilarity: textSimilarity,
                    distance: distance,
                    score: score
                };
            }
        });
        
        return bestMatch;
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
     */
    normalizeAddress(address) {
        return address
            .toLowerCase()
            .replace(/[^\w\s\d–∞-—è—ë]/gi, ' ')  // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            .replace(/\s+/g, ' ')            // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
            .replace(/\b(—É–ª|—É–ª–∏—Ü–∞|–ø—Ä–æ—Å–ø–µ–∫—Ç|–ø—Ä|–¥|–¥–æ–º|–∫|–∫–æ—Ä–ø—É—Å|—Å—Ç—Ä|—Å—Ç—Ä–æ–µ–Ω–∏–µ)\b/g, '') // –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
            .trim();
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ (–∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤)
     */
    calculateTextSimilarity(str1, str2) {
        if (!str1 || !str2) return 0;
        
        // –ê–ª–≥–æ—Ä–∏—Ç–º 1: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
        const levenshteinSim = 1 - (this.levenshteinDistance(str1, str2) / Math.max(str1.length, str2.length));
        
        // –ê–ª–≥–æ—Ä–∏—Ç–º 2: –ñ–∞–∫–∫–∞—Ä–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
        const tokens1 = new Set(str1.split(/\s+/));
        const tokens2 = new Set(str2.split(/\s+/));
        const jaccardSim = this.jaccardSimilarity(tokens1, tokens2);
        
        // –ê–ª–≥–æ—Ä–∏—Ç–º 3: –û–±—â–∏–µ n-–≥—Ä–∞–º–º—ã
        const ngramSim = this.ngramSimilarity(str1, str2, 2);
        
        // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return (levenshteinSim * 0.4) + (jaccardSim * 0.4) + (ngramSim * 0.2);
    }

    /**
     * –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
     */
    levenshteinDistance(str1, str2) {
        const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));
        
        for (let i = 0; i <= str1.length; i += 1) {
            matrix[0][i] = i;
        }
        
        for (let j = 0; j <= str2.length; j += 1) {
            matrix[j][0] = j;
        }
        
        for (let j = 1; j <= str2.length; j += 1) {
            for (let i = 1; i <= str1.length; i += 1) {
                const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
                matrix[j][i] = Math.min(
                    matrix[j][i - 1] + 1,
                    matrix[j - 1][i] + 1,
                    matrix[j - 1][i - 1] + indicator
                );
            }
        }
        
        return matrix[str2.length][str1.length];
    }

    /**
     * –°—Ö–æ–¥—Å—Ç–≤–æ –ñ–∞–∫–∫–∞—Ä–∞
     */
    jaccardSimilarity(set1, set2) {
        const intersection = new Set([...set1].filter(x => set2.has(x)));
        const union = new Set([...set1, ...set2]);
        return union.size === 0 ? 0 : intersection.size / union.size;
    }

    /**
     * –°—Ö–æ–¥—Å—Ç–≤–æ n-–≥—Ä–∞–º–º
     */
    ngramSimilarity(str1, str2, n = 2) {
        const ngrams1 = this.getNgrams(str1, n);
        const ngrams2 = this.getNgrams(str2, n);
        return this.jaccardSimilarity(ngrams1, ngrams2);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ n-–≥—Ä–∞–º–º
     */
    getNgrams(str, n) {
        const ngrams = new Set();
        for (let i = 0; i <= str.length - n; i++) {
            ngrams.add(str.substr(i, n));
        }
        return ngrams;
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ Haversine)
     */
    calculateDistance(coords1, coords2) {
        const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        const dLat = this.toRadians(coords2.lat - coords1.lat);
        const dLng = this.toRadians((coords2.lng || coords2.lon) - (coords1.lng || coords1.lon));
        
        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                  Math.cos(this.toRadians(coords1.lat)) * Math.cos(this.toRadians(coords2.lat)) *
                  Math.sin(dLng / 2) * Math.sin(dLng / 2);
        
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
     */
    toRadians(degrees) {
        return degrees * (Math.PI / 180);
    }

    /**
     * –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async processAllListings(listings, addresses) {
        const results = {
            processed: 0,
            matched: 0,
            highConfidence: 0,
            mediumConfidence: 0,
            lowConfidence: 0,
            noMatch: 0,
            errors: 0
        };

        console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);

        for (let i = 0; i < listings.length; i++) {
            try {
                const listing = listings[i];
                const matchResult = await this.matchAddress(listing, addresses);
                
                results.processed++;
                
                if (matchResult.address) {
                    results.matched++;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    listing.address_id = matchResult.address.id;
                    listing.address_match_confidence = matchResult.confidence;
                    listing.address_match_method = matchResult.method;
                    listing.address_match_score = matchResult.score;
                    listing.address_distance = matchResult.distance;
                    
                    await db.update('listings', listing);
                    
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–æ–≤–µ—Ä–∏—è
                    switch (matchResult.confidence) {
                        case 'high':
                            results.highConfidence++;
                            break;
                        case 'medium':
                            results.mediumConfidence++;
                            break;
                        case 'low':
                        case 'very_low':
                            results.lowConfidence++;
                            break;
                    }
                    
                    console.log(`‚úÖ [${i+1}/${listings.length}] –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –¥–ª—è "${listing.address}" ‚Üí "${matchResult.address.address}" (${matchResult.confidence}, ${Math.round(matchResult.distance)}–º)`);
                } else {
                    results.noMatch++;
                    console.log(`‚ùå [${i+1}/${listings.length}] –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è "${listing.address}"`);
                }
                
                // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                if ((i + 1) % 10 === 0) {
                    console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/${listings.length} (${Math.round(((i + 1) / listings.length) * 100)}%)`);
                }
                
            } catch (error) {
                results.errors++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${i}:`, error);
            }
        }

        console.log(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, results);
        return results;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AddressMatcher;
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
    window.AddressMatcher = AddressMatcher;
}