/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –ü–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class MemoryMonitor {
    constructor() {
        this.measurements = [];
        this.isMonitoring = false;
        this.alertThreshold = 500 * 1024 * 1024; // 500MB –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        this.criticalThreshold = 1024 * 1024 * 1024; // 1GB –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
        this.intervalId = null;
        
        // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.stats = {
            alerts: 0,
            criticalAlerts: 0,
            cleanupTriggers: 0,
            maxMemoryUsed: 0
        };
        
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    static getCurrentMemoryUsage() {
        if ('memory' in performance) {
            const usage = {
                used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024), // MB
                total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024), // MB
                limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024), // MB
                timestamp: Date.now(),
                usagePercent: Math.round((performance.memory.usedJSHeapSize / performance.memory.jsHeapSizeLimit) * 100)
            };
            return usage;
        }
        return null;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    startMonitoring(intervalMs = 10000) {
        if (this.isMonitoring) {
            console.warn('‚ö†Ô∏è [MemoryMonitor] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }
        
        this.isMonitoring = true;
        
        this.intervalId = setInterval(() => {
            const usage = MemoryMonitor.getCurrentMemoryUsage();
            if (usage) {
                this.measurements.push(usage);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
                if (usage.used > this.stats.maxMemoryUsed) {
                    this.stats.maxMemoryUsed = usage.used;
                }
                
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                if (this.measurements.length > 100) {
                    this.measurements.shift();
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
                this.checkThresholds(usage);
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                this.logMemoryStatus(usage);
            }
        }, intervalMs);
        
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤
     */
    checkThresholds(usage) {
        const usageBytes = usage.used * 1024 * 1024;
        
        if (usageBytes > this.criticalThreshold) {
            this.stats.criticalAlerts++;
            console.error(`üö® [MemoryMonitor] –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${usage.used}MB (${usage.usagePercent}%)`);
            this.triggerEmergencyCleanup();
        } else if (usageBytes > this.alertThreshold) {
            this.stats.alerts++;
            console.warn(`‚ö†Ô∏è [MemoryMonitor] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–∞–º—è—Ç–∏: ${usage.used}MB (${usage.usagePercent}%)`);
            this.triggerMemoryCleanup();
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    logMemoryStatus(usage) {
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π
        if (this.measurements.length % 10 === 0) {
            this.logDetailedStats();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    getMemoryLevel(usagePercent) {
        if (usagePercent >= 80) return '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô';
        if (usagePercent >= 60) return '–í–´–°–û–ö–ò–ô';
        if (usagePercent >= 40) return '–°–†–ï–î–ù–ò–ô';
        if (usagePercent >= 20) return '–ù–ò–ó–ö–ò–ô';
        return '–û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –ø–∞–º—è—Ç–∏
     */
    getMemoryEmoji(level) {
        const emojis = {
            '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô': 'üö®',
            '–í–´–°–û–ö–ò–ô': '‚ö†Ô∏è',
            '–°–†–ï–î–ù–ò–ô': 'üìä',
            '–ù–ò–ó–ö–ò–ô': '‚úÖ',
            '–û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô': 'üü¢'
        };
        return emojis[level] || 'üìä';
    }

    /**
     * –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    logDetailedStats() {
        const stats = this.getStats();
        
        console.log(`üìà [Memory Stats] Avg: ${stats.average}MB, Max: ${stats.max}MB, Trend: ${stats.trend}`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—ç—à–∞–º
        this.logCacheStats();
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—ç—à–∞–º
     */
    logCacheStats() {
        if (window.dataCacheManager) {
            const cacheStats = window.dataCacheManager.getStats();
            console.log(`üíæ [Cache Stats] Entries: ${cacheStats.totalEntries}, Memory: ${cacheStats.memoryUsageMB}MB`);
        }
        
        if (window.localEmbeddingService) {
            const embeddingStats = window.localEmbeddingService.getCacheStats();
            console.log(`üß† [Embedding Cache] Vectors: ${embeddingStats.totalEntries}, Tokenizers: ${embeddingStats.loadedTokenizers}`);
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞  
     */
    stopMonitoring() {
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
            this.isMonitoring = false;
            console.log('üõë [MemoryMonitor] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –æ–±—ã—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
     */
    triggerMemoryCleanup() {
        console.log('üßπ [MemoryMonitor] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏...');
        this.stats.cleanupTriggers++;
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö (—á–∞—Å—Ç–∏—á–Ω–æ)
        if (window.dataCacheManager) {
            const oldSize = window.dataCacheManager.cache.size;
            window.dataCacheManager.evictLRU(Math.floor(oldSize * 0.2)); // –£–¥–∞–ª—è–µ–º 20%
        }
        
        console.log('‚úÖ [MemoryMonitor] –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    /**
     * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ
     */
    triggerEmergencyCleanup() {
        console.error('üö® [MemoryMonitor] –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏!');
        
        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö
        if (window.dataCacheManager) {
            const oldSize = window.dataCacheManager.cache.size;
            window.dataCacheManager.evictLRU(Math.floor(oldSize * 0.5)); // –£–¥–∞–ª—è–µ–º 50%
        }
        
        // –û—á–∏—â–∞–µ–º AI –∫—ç—à–∏
        if (window.localEmbeddingService) {
            window.localEmbeddingService.clearCache();
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if (typeof gc === 'function') {
            gc();
            console.log('üóëÔ∏è [MemoryMonitor] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        }
        
        console.log('‚úÖ [MemoryMonitor] –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    getStats() {
        if (this.measurements.length === 0) return null;
        
        const latest = this.measurements[this.measurements.length - 1];
        const usages = this.measurements.map(m => m.used);
        
        // –¢—Ä–µ–Ω–¥ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ 10)
        let trend = '—Å—Ç–∞–±–∏–ª—å–Ω—ã–π';
        if (this.measurements.length >= 20) {
            const recent = usages.slice(-10);
            const previous = usages.slice(-20, -10);
            const recentAvg = recent.reduce((a, b) => a + b, 0) / recent.length;
            const previousAvg = previous.reduce((a, b) => a + b, 0) / previous.length;
            
            if (recentAvg > previousAvg * 1.1) trend = '—Ä–∞—Å—Ç—É—â–∏–π';
            else if (recentAvg < previousAvg * 0.9) trend = '—Å–Ω–∏–∂–∞—é—â–∏–π—Å—è';
        }
        
        return {
            current: latest,
            average: Math.round(usages.reduce((a, b) => a + b, 0) / usages.length),
            max: Math.max(...usages),
            min: Math.min(...usages),
            measurementCount: this.measurements.length,
            trend,
            alerts: this.stats.alerts,
            criticalAlerts: this.stats.criticalAlerts,
            cleanupTriggers: this.stats.cleanupTriggers,
            maxMemoryUsed: this.stats.maxMemoryUsed
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
     */
    getDetailedReport() {
        const stats = this.getStats();
        if (!stats) return null;
        
        return {
            ...stats,
            thresholds: {
                alert: Math.round(this.alertThreshold / 1024 / 1024),
                critical: Math.round(this.criticalThreshold / 1024 / 1024)
            },
            cacheStats: window.dataCacheManager ? window.dataCacheManager.getStats() : null,
            embeddingStats: window.localEmbeddingService ? window.localEmbeddingService.getCacheStats() : null,
            recommendations: this.generateRecommendations(stats)
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     */
    generateRecommendations(stats) {
        const recommendations = [];
        
        if (stats.maxMemoryUsed > 1000) {
            recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞');
        }
        
        if (stats.criticalAlerts > 0) {
            recommendations.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
        }
        
        if (stats.trend === '—Ä–∞—Å—Ç—É—â–∏–π') {
            recommendations.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—ç—à–∏ –∏ event listeners');
        }
        
        if (stats.cleanupTriggers > 10) {
            recommendations.push('–ß–∞—Å—Ç—ã–µ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ - —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∫—ç—à–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }
        
        return recommendations;
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    exportData() {
        return {
            measurements: this.measurements,
            stats: this.getStats(),
            detailedReport: this.getDetailedReport(),
            config: {
                alertThreshold: Math.round(this.alertThreshold / 1024 / 1024),
                criticalThreshold: Math.round(this.criticalThreshold / 1024 / 1024),
                isMonitoring: this.isMonitoring
            }
        };
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
     */
    setThresholds(alertMB, criticalMB) {
        this.alertThreshold = alertMB * 1024 * 1024;
        this.criticalThreshold = criticalMB * 1024 * 1024;
        
        console.log(`‚öôÔ∏è [MemoryMonitor] –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Ä–æ–≥–∏: Alert=${alertMB}MB, Critical=${criticalMB}MB`);
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
     */
    checkMemoryNow() {
        const usage = MemoryMonitor.getCurrentMemoryUsage();
        if (usage) {
            console.log(`üîç [MemoryMonitor] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`);
            console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usage.used}MB (${usage.usagePercent}%)`);
            console.log(`   –î–æ—Å—Ç—É–ø–Ω–æ: ${usage.limit}MB`);
            console.log(`   –£—Ä–æ–≤–µ–Ω—å: ${this.getMemoryLevel(usage.usagePercent)}`);
            
            this.checkThresholds(usage);
            return usage;
        }
        
        console.warn('‚ö†Ô∏è [MemoryMonitor] Performance API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return null;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
     */
    printVisualReport() {
        const stats = this.getStats();
        if (!stats) {
            console.log('üìä [MemoryMonitor] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞');
            return;
        }

        console.log('üìä ‚ïê‚ïê‚ïê –û–¢–ß–ï–¢ –ü–û –ü–ê–ú–Ø–¢–ò ‚ïê‚ïê‚ïê');
        console.log(`üìà –¢–µ–∫—É—â–µ–µ: ${stats.current.used}MB (${stats.current.usagePercent}%)`);
        console.log(`üìä –°—Ä–µ–¥–Ω–µ–µ: ${stats.average}MB`);
        console.log(`üîù –ú–∞–∫—Å–∏–º—É–º: ${stats.max}MB`);
        console.log(`üìâ –ú–∏–Ω–∏–º—É–º: ${stats.min}MB`);
        console.log(`üìà –¢—Ä–µ–Ω–¥: ${stats.trend}`);
        console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${stats.alerts}`);
        console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: ${stats.criticalAlerts}`);
        console.log(`üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏: ${stats.cleanupTriggers}`);
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        const recommendations = this.generateRecommendations(stats);
        if (recommendations.length > 0) {
            console.log('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
            recommendations.forEach(rec => console.log(`   ‚Ä¢ ${rec}`));
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MemoryMonitor
window.memoryMonitor = new MemoryMonitor();

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 15 —Å–µ–∫—É–Ω–¥
    window.memoryMonitor.startMonitoring(15000);
    
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.MemoryMonitor = MemoryMonitor;