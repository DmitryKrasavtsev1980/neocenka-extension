/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –†–µ—Ñ–æ—Ä–º—ã –ñ–ö–•
 */
class ReformaGKHReferenceResolver {
  constructor(databaseManager) {
    this.db = databaseManager;
    this.cache = {
      wall_materials: new Map(),
      ceiling_materials: new Map(),
      house_series: new Map(),
      house_classes: new Map()
    };
    this.loadingPromises = new Map();
    
    // –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π
    this.nameMappings = {
      wall_materials: {
        "–ü–∞–Ω–µ–ª—å–Ω—ã–µ": "–ü–∞–Ω–µ–ª—å",
        "–ö–∏—Ä–ø–∏—á–Ω—ã–µ": "–ö–∏—Ä–ø–∏—á", 
        "–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–µ": "–ú–æ–Ω–æ–ª–∏—Ç",
        "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ": "–î–µ—Ä–µ–≤–æ",
        "–ò–Ω—ã–µ": "–î—Ä—É–≥–æ–µ",
        "–°–º–µ—à–∞–Ω–Ω—ã–µ": "–°–º–µ—à–∞–Ω–Ω—ã–µ",
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ GeoJSON
        "–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å": "–ü–∞–Ω–µ–ª—å",
        "–ë–ª–æ—á–Ω—ã–µ": "–ë–ª–æ—á–Ω—ã–π"
      },
      ceiling_materials: {
        "–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ": "–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω",
        "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ": "–î–µ—Ä–µ–≤–æ",
        "–°–º–µ—à–∞–Ω–Ω—ã–µ": "–°–º–µ—à–∞–Ω–Ω—ã–µ",
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "–ò–Ω—ã–µ": "–î—Ä—É–≥–æ–µ"
      }
    };
    
    // –ü—Ä–∞–≤–∏–ª–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    this.smartMatching = {
      wall_materials: [
        { patterns: ["–ø–∞–Ω–µ–ª", "panel"], canonical: "–ü–∞–Ω–µ–ª—å–Ω—ã–π" },
        { patterns: ["–∫–∏—Ä–ø–∏—á", "brick"], canonical: "–ö–∏—Ä–ø–∏—á–Ω—ã–π" },
        { patterns: ["–º–æ–Ω–æ–ª–∏—Ç", "monolith"], canonical: "–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π" },
        { patterns: ["–±–ª–æ–∫", "block"], canonical: "–ë–ª–æ—á–Ω—ã–π" },
        { patterns: ["–¥–µ—Ä–µ–≤", "wood"], canonical: "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π" },
        { patterns: ["–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω"], canonical: "–ü–∞–Ω–µ–ª—å–Ω—ã–π" }, // –ñ–ë –ø–∞–Ω–µ–ª–∏ = –ø–∞–Ω–µ–ª—å–Ω—ã–π
        { patterns: ["—Å–º–µ—à–∞–Ω", "mixed"], canonical: "–°–º–µ—à–∞–Ω–Ω—ã–π" }
      ],
      ceiling_materials: [
        { patterns: ["–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω", "reinforced", "–∂/–±", "–∂–±"], canonical: "–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω–æ–µ" },
        { patterns: ["–¥–µ—Ä–µ–≤", "wood"], canonical: "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ" },
        { patterns: ["—Å–º–µ—à–∞–Ω", "mixed"], canonical: "–°–º–µ—à–∞–Ω–Ω–æ–µ" }
      ]
    };
    
    // –¶–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    this.defaultColors = {
      wall_materials: ['#e74c3c', '#3498db', '#2ecc71', '#f39c12', '#9b59b6', '#1abc9c'],
      ceiling_materials: ['#34495e', '#95a5a6', '#d35400', '#27ae60'],
      house_series: ['#8e44ad', '#2980b9', '#16a085', '#f1c40f'],
      house_classes: ['#c0392b', '#7f8c8d', '#2c3e50', '#e67e22']
    };
    this.colorIndexes = {
      wall_materials: 0,
      ceiling_materials: 0,
      house_series: 0,
      house_classes: 0
    };
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    this.matchStats = {
      wall_materials: { found: 0, created: 0 },
      ceiling_materials: { found: 0, created: 0 },
      house_series: { found: 0, created: 0 },
      house_classes: { found: 0, created: 0 }
    };
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –≤ –∫—ç—à
   */
  async initialize() {
    const debugEnabled = await this.getDebugSetting();
    
    try {
      if (debugEnabled) {
      }
      
      await Promise.all([
        this.loadReferenceToCache('wall_materials'),
        this.loadReferenceToCache('ceiling_materials'),
        this.loadReferenceToCache('house_series'),
        this.loadReferenceToCache('house_classes')
      ]);
      
      if (debugEnabled) {
        console.log('üèóÔ∏è –ö—ç—à —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω:', {
          wall_materials: this.cache.wall_materials.size,
          ceiling_materials: this.cache.ceiling_materials.size,
          house_series: this.cache.house_series.size,
          house_classes: this.cache.house_classes.size
        });
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:', error);
      throw error;
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –≤ –∫—ç—à
   */
  async loadReferenceToCache(referenceType) {
    try {
      const items = await this.db.getAll(referenceType);
      const cache = this.cache[referenceType];
      
      items.forEach(item => {
        const normalizedName = this.normalizeName(item.name);
        cache.set(normalizedName, item);
      });
      
    } catch (error) {
      console.warn(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ ${referenceType}:`, error);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
   */
  async getOrCreate(referenceType, originalName) {
    if (!originalName || originalName.trim() === "" || originalName === "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ") {
      return null;
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    const existingMatch = this.findSmartMatch(referenceType, originalName);
    if (existingMatch) {
      this.matchStats[referenceType].found++;
      return existingMatch.id;
    }
    
    const normalizedName = this.normalizeReferenceName(originalName, referenceType);
    const cacheKey = this.normalizeName(normalizedName);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = this.cache[referenceType].get(cacheKey);
    if (cached) {
      return cached.id;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–µ–º –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –∑–∞–ø–∏—Å—å
    const loadingKey = `${referenceType}:${cacheKey}`;
    if (this.loadingPromises.has(loadingKey)) {
      const result = await this.loadingPromises.get(loadingKey);
      return result.id;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const createPromise = this.createNewReference(referenceType, normalizedName);
    this.loadingPromises.set(loadingKey, createPromise);
    
    try {
      const newItem = await createPromise;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
      this.cache[referenceType].set(cacheKey, newItem);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.matchStats[referenceType].created++;
      
      this.loadingPromises.delete(loadingKey);
      return newItem.id;
      
    } catch (error) {
      this.loadingPromises.delete(loadingKey);
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ ${referenceType}:`, error);
      return null;
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
   */
  async createNewReference(referenceType, name) {
    const ModelClass = this.getModelClass(referenceType);
    const color = this.getNextColor(referenceType);
    
    const newItem = new ModelClass({
      name: name,
      color: color,
      created_at: new Date(),
      updated_at: new Date()
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º null, —á—Ç–æ–±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∞–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞)
    newItem.id = null;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    const saved = await this.db.add(referenceType, newItem);
    
    const debugEnabled = await this.getDebugSetting();
    if (debugEnabled) {
    }
    
    return saved;
  }
  
  /**
   * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
   */
  findSmartMatch(referenceType, originalName) {
    const smartRules = this.smartMatching[referenceType];
    if (!smartRules) return null;
    
    const normalizedInput = originalName.toLowerCase().trim();
    
    // –ò—â–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for (const rule of smartRules) {
      for (const pattern of rule.patterns) {
        if (normalizedInput.includes(pattern.toLowerCase())) {
          // –ò—â–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫—ç—à–µ
          const canonicalKey = this.normalizeName(rule.canonical);
          const cached = this.cache[referenceType].get(canonicalKey);
          if (cached) {
            const debugEnabled = this.getDebugSettingSync();
            if (debugEnabled) {
            }
            return cached;
          }
        }
      }
    }
    
    return null;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
   */
  normalizeReferenceName(originalName, referenceType) {
    const mapping = this.nameMappings[referenceType];
    if (mapping && mapping[originalName]) {
      return mapping[originalName];
    }
    
    // –û–±—â–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    return originalName.trim()
      .replace(/\s+/g, ' ')  // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
      .replace(/^([–∞-—è])/i, (match) => match.toUpperCase()); // –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
  }
  
  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à–µ (–ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
   */
  normalizeName(name) {
    return name.toLowerCase().trim();
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –º–æ–¥–µ–ª–∏ –ø–æ —Ç–∏–ø—É —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
   */
  getModelClass(referenceType) {
    const classes = {
      'wall_materials': WallMaterialModel,
      'ceiling_materials': CeilingMaterialModel,
      'house_series': HouseSeriesModel,
      'house_classes': HouseClassModel
    };
    
    return classes[referenceType] || WallMaterialModel;
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
   */
  getNextColor(referenceType) {
    const colors = this.defaultColors[referenceType] || this.defaultColors.wall_materials;
    const index = this.colorIndexes[referenceType] || 0;
    
    const color = colors[index % colors.length];
    this.colorIndexes[referenceType] = index + 1;
    
    return color;
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
   */
  async getDebugSetting() {
    try {
      const settings = await this.db.getSettings();
      const debugSetting = settings.find(s => s.key === 'debug_enabled');
      return debugSetting ? debugSetting.value : false;
    } catch {
      return false;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à)
   */
  getDebugSettingSync() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ localStorage –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if (typeof localStorage !== 'undefined') {
      try {
        return localStorage.getItem('debug_enabled') === 'true';
      } catch {
        return false;
      }
    }
    return false;
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  getStats() {
    const stats = {};
    
    Object.keys(this.cache).forEach(referenceType => {
      stats[referenceType] = {
        cached: this.cache[referenceType].size,
        found: this.matchStats[referenceType].found,
        created: this.matchStats[referenceType].created
      };
    });
    
    return stats;
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache() {
    Object.keys(this.cache).forEach(key => {
      this.cache[key].clear();
    });
    this.loadingPromises.clear();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    Object.keys(this.matchStats).forEach(key => {
      this.matchStats[key] = { found: 0, created: 0 };
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
if (typeof module !== 'undefined' && module.exports) {
  module.exports = ReformaGKHReferenceResolver;
} else if (typeof window !== 'undefined') {
  window.ReformaGKHReferenceResolver = ReformaGKHReferenceResolver;
}