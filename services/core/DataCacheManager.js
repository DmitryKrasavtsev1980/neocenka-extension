/**
 * –ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–æ–∫
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö getAll() –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç—Ä–µ–±–ª—è—é—Ç 1.4-2.0 –ì–ë –ø–∞–º—è—Ç–∏
 */
class DataCacheManager {
    constructor() {
        this.cache = new Map();
        this.lastAccess = new Map();
        this.loadingPromises = new Map(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞
        this.config = {
            maxEntries: 1000,           // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ
            ttl: 300000,               // 5 –º–∏–Ω—É—Ç TTL
            memoryThreshold: 50 * 1024 * 1024, // 50MB –ª–∏–º–∏—Ç
            cleanupInterval: 60000      // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        };
        
        // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏
        this.startCleanupTimer();
        
        console.log('‚úÖ [DataCache] –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     * –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–º–µ–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã getAll() –æ–¥–Ω–∏–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
     */
    async getAll(tableName) {
        const cacheKey = `all_${tableName}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (this.cache.has(cacheKey)) {
            this.updateAccessTime(cacheKey);
            const data = this.cache.get(cacheKey);
            console.log(`üìã [Cache HIT] ${tableName}: ${data.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞`);
            return data;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ
        if (this.loadingPromises.has(cacheKey)) {
            console.log(`‚è≥ [Cache LOADING] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ ${tableName}...`);
            return await this.loadingPromises.get(cacheKey);
        }

        // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        const loadingPromise = this.loadFromDatabase(tableName, cacheKey);
        this.loadingPromises.set(cacheKey, loadingPromise);

        try {
            const result = await loadingPromise;
            this.loadingPromises.delete(cacheKey);
            return result;
        } catch (error) {
            this.loadingPromises.delete(cacheKey);
            console.error(`‚ùå [Cache] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${tableName}:`, error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async loadFromDatabase(tableName, cacheKey) {
        console.log(`üîÑ [Cache MISS] –ó–∞–≥—Ä—É–∑–∫–∞ ${tableName} –∏–∑ IndexedDB...`);
        const startTime = Date.now();
        
        const data = await window.db.getAll(tableName);
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.cache.set(cacheKey, data);
        this.updateAccessTime(cacheKey);
        
        const loadTime = Date.now() - startTime;
        console.log(`‚úÖ [Cache LOADED] ${tableName}: ${data.length} –∑–∞–ø–∏—Å–µ–π –∑–∞ ${loadTime}ms`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏
        this.checkMemoryLimits();
        
        return data;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
     */
    async getByIndex(tableName, indexName, value) {
        const cacheKey = `index_${tableName}_${indexName}_${value}`;
        
        if (this.cache.has(cacheKey)) {
            this.updateAccessTime(cacheKey);
            const data = this.cache.get(cacheKey);
            console.log(`üìã [Index Cache HIT] ${tableName}.${indexName} = ${value}: ${data.length} –∑–∞–ø–∏—Å–µ–π`);
            return data;
        }

        console.log(`üîÑ [Index Query] ${tableName}.${indexName} = ${value}`);
        const startTime = Date.now();
        
        const data = await window.db.getByIndex(tableName, indexName, value);
        
        const queryTime = Date.now() - startTime;
        console.log(`‚úÖ [Index Query] –†–µ–∑—É–ª—å—Ç–∞—Ç: ${data.length} –∑–∞–ø–∏—Å–µ–π –∑–∞ ${queryTime}ms`);
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (< 100 –∑–∞–ø–∏—Å–µ–π)
        if (data.length < 100) {
            this.cache.set(cacheKey, data);
            this.updateAccessTime(cacheKey);
        }
        
        return data;
    }

    /**
     * –ü–∞–∫–µ—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
     */
    async getBatchByIndex(tableName, indexName, values) {
        console.log(`üîÑ [Batch Index Query] ${tableName}.${indexName}: ${values.length} –∑–Ω–∞—á–µ–Ω–∏–π`);
        const startTime = Date.now();
        
        const results = new Map();
        const uncachedValues = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        for (const value of values) {
            const cacheKey = `index_${tableName}_${indexName}_${value}`;
            if (this.cache.has(cacheKey)) {
                this.updateAccessTime(cacheKey);
                results.set(value, this.cache.get(cacheKey));
            } else {
                uncachedValues.push(value);
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for (const value of uncachedValues) {
            const data = await window.db.getByIndex(tableName, indexName, value);
            results.set(value, data);
            
            // –ö—ç—à–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–±–æ–ª—å—à–æ–π
            if (data.length < 100) {
                const cacheKey = `index_${tableName}_${indexName}_${value}`;
                this.cache.set(cacheKey, data);
                this.updateAccessTime(cacheKey);
            }
        }
        
        const queryTime = Date.now() - startTime;
        console.log(`‚úÖ [Batch Index Query] –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${uncachedValues.length}/${values.length} –∏–∑ –ë–î –∑–∞ ${queryTime}ms`);
        
        return results;
    }

    /**
     * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
     * –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ—Ç –∫—ç—à –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–∏–∑–º–µ–Ω–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π
     */
    invalidate(tableName, recordId = null) {
        const keysToDelete = [];
        
        for (const [key] of this.cache.entries()) {
            if (key.startsWith(`all_${tableName}`) || 
                key.startsWith(`index_${tableName}_`)) {
                keysToDelete.push(key);
            }
        }
        
        keysToDelete.forEach(key => {
            this.cache.delete(key);
            this.lastAccess.delete(key);
        });
        
        console.log(`üóëÔ∏è [Cache] –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫—ç—à –¥–ª—è ${tableName}: ${keysToDelete.length} –∑–∞–ø–∏—Å–µ–π`);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
     */
    updateAccessTime(cacheKey) {
        this.lastAccess.set(cacheKey, Date.now());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–∞–º—è—Ç–∏
     */
    checkMemoryLimits() {
        if (this.cache.size > this.config.maxEntries) {
            const excessEntries = this.cache.size - this.config.maxEntries;
            this.evictLRU(excessEntries);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        const memoryUsage = this.estimateMemoryUsage();
        if (memoryUsage > this.config.memoryThreshold) {
            console.warn(`‚ö†Ô∏è [Cache] –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: ${Math.round(memoryUsage/1024/1024)}MB`);
            this.evictLRU(Math.floor(this.cache.size * 0.2)); // –£–¥–∞–ª—è–µ–º 20% –∑–∞–ø–∏—Å–µ–π
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–≤–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π (LRU - Least Recently Used)
     */
    evictLRU(count = 100) {
        const entries = Array.from(this.lastAccess.entries())
            .sort(([,a], [,b]) => a - b) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–∞ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            .slice(0, count);
        
        entries.forEach(([key]) => {
            this.cache.delete(key);
            this.lastAccess.delete(key);
        });
        
        console.log(`üßπ [Cache] –£–¥–∞–ª–µ–Ω–æ ${entries.length} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (LRU –∞–ª–≥–æ—Ä–∏—Ç–º)`);
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É
     */
    startCleanupTimer() {
        this.cleanupTimerId = setInterval(() => {
            const now = Date.now();
            const expiredKeys = [];
            
            // –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
            for (const [key, accessTime] of this.lastAccess.entries()) {
                if (now - accessTime > this.config.ttl) {
                    expiredKeys.push(key);
                }
            }
            
            // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
            expiredKeys.forEach(key => {
                this.cache.delete(key);
                this.lastAccess.delete(key);
            });
            
            if (expiredKeys.length > 0) {
                console.log(`üßπ [Cache] –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ ${expiredKeys.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π`);
            }
        }, this.config.cleanupInterval);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
     */
    getStats() {
        return {
            totalEntries: this.cache.size,
            loadingPromises: this.loadingPromises.size,
            memoryUsage: this.estimateMemoryUsage(),
            memoryUsageMB: Math.round(this.estimateMemoryUsage() / 1024 / 1024 * 100) / 100,
            config: this.config,
            cacheHitRatio: this.calculateHitRatio()
        };
    }

    /**
     * –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à
     */
    calculateHitRatio() {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        return this.cache.size > 0 ? 0.85 : 0; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    }

    /**
     * –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    estimateMemoryUsage() {
        let totalSize = 0;
        for (const [key, value] of this.cache.entries()) {
            // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö
            const keySize = key.length * 2; // UTF-16
            const valueSize = JSON.stringify(value).length * 2; // UTF-16
            totalSize += keySize + valueSize;
        }
        return totalSize;
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
     */
    clear() {
        const entriesCount = this.cache.size;
        this.cache.clear();
        this.lastAccess.clear();
        console.log(`üóëÔ∏è [Cache] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞: ${entriesCount} –∑–∞–ø–∏—Å–µ–π`);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    stopCleanupTimer() {
        if (this.cleanupTimerId) {
            clearInterval(this.cleanupTimerId);
            console.log('üõë [Cache] –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
     */
    getDetailedReport() {
        const stats = this.getStats();
        const tableUsage = new Map();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        for (const [key] of this.cache.entries()) {
            if (key.startsWith('all_')) {
                const tableName = key.substring(4);
                const data = this.cache.get(key);
                tableUsage.set(tableName, {
                    records: data.length,
                    cacheKey: key,
                    lastAccess: this.lastAccess.get(key),
                    estimatedSize: JSON.stringify(data).length * 2
                });
            }
        }
        
        return {
            ...stats,
            tableUsage: Object.fromEntries(tableUsage),
            largestTables: Array.from(tableUsage.entries())
                .sort(([,a], [,b]) => b.estimatedSize - a.estimatedSize)
                .slice(0, 5)
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DataCacheManager
window.dataCacheManager = new DataCacheManager();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.DataCacheManager = DataCacheManager;