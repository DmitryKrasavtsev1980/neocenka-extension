/**
 * –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embedding-–≤–µ–∫—Ç–æ—Ä–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ—Å—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
 */

class LocalEmbeddingService {
    constructor() {
        this.downloadService = new window.ModelDownloadService();
        this.registry = new window.EmbeddingModelsRegistry();
        this.loadedTokenizers = new Map();
        
        // üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∫—ç—à –≤–º–µ—Å—Ç–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ Map
        this.vectorCache = new LimitedVectorCache(1000); // –ú–∞–∫—Å–∏–º—É–º 1000 –≤–µ–∫—Ç–æ—Ä–æ–≤
        
        console.log('‚úÖ [LocalEmbedding] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫—ç—à–µ–º –≤–µ–∫—Ç–æ—Ä–æ–≤ (1000 –∑–∞–ø–∏—Å–µ–π)');
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embedding-–≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
     */
    async generateEmbedding(text, modelId = 'paraphrase-multilingual-MiniLM-L12-v2') {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cacheKey = `${modelId}:${this.hashString(text)}`;
            if (this.vectorCache.has(cacheKey)) {
                console.log(`üìã [LocalEmbedding] –í–µ–∫—Ç–æ—Ä—ã –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
                return this.vectorCache.get(cacheKey);
            }


            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
            const isDownloaded = await this.downloadService.isModelDownloaded(modelId);
            if (!isDownloaded) {
                throw new Error(`–ú–æ–¥–µ–ª—å ${modelId} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–Ω–∞—á–∞–ª–∞.`);
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
            const modelConfig = this.registry.getModel(modelId);
            if (!modelConfig) {
                throw new Error(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ ${modelId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
            const tokenizer = await this.getTokenizer(modelId);

            // –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            const tokens = await this.tokenizeText(text, tokenizer);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding-–≤–µ–∫—Ç–æ—Ä
            const vector = await this.computeEmbedding(tokens, modelConfig);

            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.vectorCache.set(cacheKey, vector);

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
            await this.downloadService.updateLastUsed(modelId);

            return vector;

        } catch (error) {
            console.error(`‚ùå [LocalEmbedding] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embedding:`, error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
     */
    async getTokenizer(modelId) {
        if (this.loadedTokenizers.has(modelId)) {
            return this.loadedTokenizers.get(modelId);
        }

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
            const tokenizerConfigFile = await this.downloadService.getModelFile(modelId, 'tokenizer_config.json');
            const tokenizerConfig = JSON.parse(new TextDecoder().decode(tokenizerConfigFile.data));

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
            const tokenizer = new SimpleTokenizer(tokenizerConfig);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å vocab
            try {
                const vocabFile = await this.downloadService.getModelFile(modelId, 'vocab.txt');
                const vocabText = new TextDecoder().decode(vocabFile.data);
                tokenizer.loadVocab(vocabText);
            } catch (error) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –≤–º–µ—Å—Ç–æ vocab
            }

            this.loadedTokenizers.set(modelId, tokenizer);
            return tokenizer;

        } catch (error) {
            console.error(`‚ùå [LocalEmbedding] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è ${modelId}:`, error);
            
            // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä—É
            const fallbackTokenizer = new SimpleTokenizer({});
            this.loadedTokenizers.set(modelId, fallbackTokenizer);
            return fallbackTokenizer;
        }
    }

    /**
     * –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
     */
    async tokenizeText(text, tokenizer) {
        return tokenizer.tokenize(text);
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ embedding-–≤–µ–∫—Ç–æ—Ä–∞ –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
     */
    async computeEmbedding(tokens, modelConfig) {
        const dimensions = modelConfig.dimensions || 384;
        
        // –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä –∑–∞–¥–∞–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
        const vector = new Array(dimensions).fill(0);
        
        // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embedding –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–æ–≤
        for (let i = 0; i < tokens.length; i++) {
            const token = tokens[i];
            const tokenId = this.getTokenId(token);
            
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ –≤–µ–∫—Ç–æ—Ä—É
            for (let dim = 0; dim < dimensions; dim++) {
                const influence = Math.sin((tokenId + i) * (dim + 1) * 0.01);
                vector[dim] += influence / Math.sqrt(tokens.length);
            }
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä
        const norm = Math.sqrt(vector.reduce((sum, val) => sum + val * val, 0));
        if (norm > 0) {
            for (let i = 0; i < dimensions; i++) {
                vector[i] /= norm;
            }
        }

        return vector;
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ ID
     */
    getTokenId(token) {
        let hash = 0;
        for (let i = 0; i < token.length; i++) {
            const char = token.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
        }
        return Math.abs(hash);
    }

    /**
     * –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è embedding-–≤–µ–∫—Ç–æ—Ä–æ–≤
     */
    async batchGenerateEmbeddings(texts, modelId, progressCallback = null) {
        const results = [];
        const total = texts.length;


        for (let i = 0; i < texts.length; i++) {
            try {
                const vector = await this.generateEmbedding(texts[i], modelId);
                results.push(vector);

                if (progressCallback && i % 10 === 0) {
                    progressCallback({
                        stage: 'processing',
                        progress: Math.round((i / total) * 100),
                        processed: i + 1,
                        total
                    });
                }
            } catch (error) {
                console.error(`‚ùå [LocalEmbedding] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ ${i}:`, error);
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤–æ–π –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
                const modelConfig = this.registry.getModel(modelId);
                const dimensions = modelConfig?.dimensions || 384;
                results.push(new Array(dimensions).fill(0));
            }
        }

        if (progressCallback) {
            progressCallback({
                stage: 'completed',
                progress: 100,
                processed: total,
                total
            });
        }

        return results;
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
     */
    cosineSimilarity(vector1, vector2) {
        if (vector1.length !== vector2.length) {
            throw new Error('–í–µ–∫—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏');
        }

        let dotProduct = 0;
        let norm1 = 0;
        let norm2 = 0;

        for (let i = 0; i < vector1.length; i++) {
            dotProduct += vector1[i] * vector2[i];
            norm1 += vector1[i] * vector1[i];
            norm2 += vector2[i] * vector2[i];
        }

        if (norm1 === 0 || norm2 === 0) return 0;
        
        return dotProduct / (Math.sqrt(norm1) * Math.sqrt(norm2));
    }

    /**
     * –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫—ç—à–∞
     */
    hashString(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return hash;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        const cacheSize = this.vectorCache.size;
        this.vectorCache.clear();
        console.log(`üßπ [LocalEmbedding] –û—á–∏—â–µ–Ω –∫—ç—à –≤–µ–∫—Ç–æ—Ä–æ–≤ (${cacheSize} –∑–∞–ø–∏—Å–µ–π)`);
        return cacheSize;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
     */
    getCacheStats() {
        return {
            totalEntries: this.vectorCache.size,
            loadedTokenizers: this.loadedTokenizers.size
        };
    }
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
 */
class SimpleTokenizer {
    constructor(config = {}) {
        this.config = config;
        this.vocab = null;
        this.maxLength = config.max_length || 512;
    }

    loadVocab(vocabText) {
        this.vocab = new Map();
        const lines = vocabText.split('\n');
        
        for (let i = 0; i < lines.length; i++) {
            const token = lines[i].trim();
            if (token) {
                this.vocab.set(token, i);
            }
        }
        
        console.log(`‚úÖ [SimpleTokenizer] –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ª–æ–≤–∞—Ä—å: ${this.vocab.size} —Ç–æ–∫–µ–Ω–æ–≤`);
    }

    tokenize(text) {
        if (!text) return [];

        // –ü—Ä–æ—Å—Ç–∞—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        const tokens = text
            .toLowerCase()
            .replace(/[^\w–∞-—è—ë\s]/g, ' ')
            .split(/\s+/)
            .filter(token => token.length > 0);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        return tokens.slice(0, this.maxLength);
    }

    encode(text) {
        const tokens = this.tokenize(text);
        
        if (!this.vocab) {
            // –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–ª–æ–≤–∞—Ä—è
            return tokens.map(token => this.hashToken(token));
        }

        // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è
        return tokens.map(token => this.vocab.get(token) || this.vocab.get('[UNK]') || 0);
    }

    hashToken(token) {
        let hash = 0;
        for (let i = 0; i < token.length; i++) {
            const char = token.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return Math.abs(hash) % 30000; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è
    }
}

/**
 * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∫—ç—à —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π LRU –æ—á–∏—Å—Ç–∫–æ–π –¥–ª—è embedding –≤–µ–∫—Ç–æ—Ä–æ–≤
 * –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏
 */
class LimitedVectorCache {
    constructor(maxSize = 1000) {
        this.cache = new Map();
        this.accessCount = new Map();
        this.accessTime = new Map();
        this.maxSize = maxSize;
        
        console.log(`‚úÖ [LimitedVectorCache] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–º–∞–∫—Å. ${maxSize} –≤–µ–∫—Ç–æ—Ä–æ–≤)`);
    }

    get(key) {
        if (this.cache.has(key)) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            this.accessCount.set(key, (this.accessCount.get(key) || 0) + 1);
            this.accessTime.set(key, Date.now());
            return this.cache.get(key);
        }
        return undefined;
    }

    has(key) {
        return this.cache.has(key);
    }

    set(key, value) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞
        if (this.cache.size >= this.maxSize && !this.cache.has(key)) {
            this.evictLRU();
        }
        
        this.cache.set(key, value);
        this.accessCount.set(key, 1);
        this.accessTime.set(key, Date.now());
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤
        if (this.cache.size % 100 === 0) {
            console.log(`üìä [LimitedVectorCache] –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${this.cache.size}/${this.maxSize} –≤–µ–∫—Ç–æ—Ä–æ–≤`);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π (LRU –∞–ª–≥–æ—Ä–∏—Ç–º)
     */
    evictLRU() {
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        const entries = Array.from(this.accessTime.entries())
            .sort(([,timeA], [,timeB]) => timeA - timeB);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (25% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
        const toRemove = Math.floor(this.maxSize * 0.25);
        const keysToRemove = entries.slice(0, toRemove).map(([key]) => key);
        
        keysToRemove.forEach(key => {
            this.cache.delete(key);
            this.accessCount.delete(key);
            this.accessTime.delete(key);
        });
        
        console.log(`üßπ [LimitedVectorCache] –£–¥–∞–ª–µ–Ω–æ ${keysToRemove.length} —Å—Ç–∞—Ä—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ (LRU)`);
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clear() {
        const size = this.cache.size;
        this.cache.clear();
        this.accessCount.clear();
        this.accessTime.clear();
        console.log(`üóëÔ∏è [LimitedVectorCache] –û—á–∏—â–µ–Ω –∫—ç—à: ${size} –≤–µ–∫—Ç–æ—Ä–æ–≤`);
        return size;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
     */
    getStats() {
        const memoryEstimate = this.estimateMemoryUsage();
        
        return {
            totalEntries: this.cache.size,
            maxSize: this.maxSize,
            usagePercent: Math.round((this.cache.size / this.maxSize) * 100),
            memoryUsageMB: Math.round(memoryEstimate / 1024 / 1024 * 100) / 100,
            topAccessed: this.getTopAccessedKeys(5)
        };
    }

    /**
     * –û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    estimateMemoryUsage() {
        let totalSize = 0;
        for (const [key, value] of this.cache.entries()) {
            // –ö–ª—é—á + –º–∞—Å—Å–∏–≤ –∏–∑ 384 —á–∏—Å–µ–ª (–ø—Ä–∏–º–µ—Ä–Ω–æ)
            const keySize = key.length * 2; // UTF-16
            const vectorSize = Array.isArray(value) ? value.length * 8 : 0; // 8 –±–∞–π—Ç –Ω–∞ —á–∏—Å–ª–æ
            totalSize += keySize + vectorSize;
        }
        return totalSize;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª—é—á–µ–π
     */
    getTopAccessedKeys(limit = 5) {
        return Array.from(this.accessCount.entries())
            .sort(([,countA], [,countB]) => countB - countA)
            .slice(0, limit)
            .map(([key, count]) => ({ key, accessCount: count }));
    }

    get size() {
        return this.cache.size;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.LocalEmbeddingService = LocalEmbeddingService;
window.LimitedVectorCache = LimitedVectorCache;