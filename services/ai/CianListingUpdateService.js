/**
 * –°–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π Cian
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å BaseListingUpdateService –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ Cian
 * –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ ParsingManager.updateListings()
 */

console.log('üì¶ [CianUpdate] –°–∫—Ä–∏–ø—Ç CianListingUpdateService.js –∑–∞–≥—Ä—É–∂–µ–Ω');

class CianListingUpdateService extends BaseListingUpdateService {
    constructor(config = {}) {
        console.log('üèóÔ∏è [CianUpdate] –°–æ–∑–¥–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä CianListingUpdateService');
        super(config);
        this.source = 'cian';
        this.supportedSources = ['cian'];
        
        // –°—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        this.db = null;
        this.progressManager = null;
        this.parsingManager = null;
        
        // –¢–µ–∫—É—â–∏–π ID –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        this.currentAreaId = null;
        
        this.debugEnabled = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     * @param {Object} dependencies - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
     */
    async initialize(dependencies = {}) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
            this.db = dependencies.db || window.db;
            this.progressManager = dependencies.progressManager || window.progressManager;
            
            if (!this.db) {
                throw new Error('Database –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è CianListingUpdateService');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º debug —Ä–µ–∂–∏–º
            this.debugEnabled = await this.isDebugEnabled();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑—å —Å background script
            await this.testBackgroundConnection();
            
            this.initialized = true;
        } catch (error) {
            this.handleError(error, 'initialize');
            throw error;
        }
    }

    /**
     * –¢–µ—Å—Ç —Å–≤—è–∑–∏ —Å background script
     */
    async testBackgroundConnection() {
        console.log('üîç [CianUpdate] –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑—å —Å background script...');
        
        return new Promise((resolve) => {
            if (typeof chrome === 'undefined' || !chrome.runtime) {
                console.error('‚ùå [CianUpdate] Chrome extension API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                resolve(false);
                return;
            }

            chrome.runtime.sendMessage({
                action: 'checkHealth'
            }, (response) => {
                if (chrome.runtime.lastError) {
                    console.error('‚ùå [CianUpdate] Background script –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:', chrome.runtime.lastError.message);
                    resolve(false);
                    return;
                }
                
                console.log('‚úÖ [CianUpdate] Background script –æ—Ç–≤–µ—á–∞–µ—Ç:', response);
                resolve(true);
            });
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ debug —Ä–µ–∂–∏–º–∞
     */
    async isDebugEnabled() {
        try {
            if (this.db) {
                const debugSetting = await this.db.get('settings', 'debug_enabled');
                return debugSetting?.value === true;
            }
            return false;
        } catch (error) {
            return false;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –æ–±–ª–∞—Å—Ç–∏
     * @param {string|number} areaId - ID –æ–±–ª–∞—Å—Ç–∏
     * @param {Object} options - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async updateListingsByArea(areaId, options = {}) {
        try {
            await this.debugLog('–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Cian –¥–ª—è –æ–±–ª–∞—Å—Ç–∏:', areaId);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            this.currentAreaId = areaId;
            
            const config = this.prepareConfig(options);
            this.initStats();

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–∞—Å—Ç—å
            const area = await this.db.get('map_areas', areaId);
            if (!area) {
                throw new Error(`–û–±–ª–∞—Å—Ç—å —Å ID ${areaId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            }

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const listingsToUpdate = await this.getUpdateableListings(areaId, config.maxAgeDays);
            
            if (listingsToUpdate.length === 0) {
                await this.debugLog('–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π Cian –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏:', area.name);
                this.finishStats();
                return {
                    success: true,
                    message: '–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                    stats: this.getStats()
                };
            }

            this.stats.total = listingsToUpdate.length;
            this.updateProgress(0, this.stats.total, `–ù–∞–π–¥–µ–Ω–æ ${this.stats.total} –æ–±—ä—è–≤–ª–µ–Ω–∏–π Cian –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ç—á–∞–º–∏
            let updatedCount = 0;
            let errorCount = 0;
            
            for (let i = 0; i < listingsToUpdate.length; i += config.batchSize) {
                const batch = listingsToUpdate.slice(i, i + config.batchSize);
                const batchResults = await this.updateBatch(batch, config);
                
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–∞
                batchResults.forEach(result => {
                    if (result.success) {
                        updatedCount++;
                        this.stats.updated++;
                    } else {
                        errorCount++;
                        this.stats.failed++;
                    }
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                const currentProgress = Math.min(i + config.batchSize, listingsToUpdate.length);
                this.updateProgress(
                    currentProgress, 
                    this.stats.total,
                    `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}, –æ—à–∏–±–æ–∫: ${errorCount}`
                );

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if (i + config.batchSize < listingsToUpdate.length) {
                    await this.delay(1000);
                }
            }

            this.finishStats();
            
            if (this.debugEnabled) {
                await this.debugLog(`–ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Cian: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount}, –æ—à–∏–±–æ–∫ ${errorCount}`);
            }

            return {
                success: true,
                message: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π Cian –∏–∑ ${listingsToUpdate.length}`,
                stats: this.getStats()
            };

        } catch (error) {
            this.handleError(error, 'updateListingsByArea');
            this.finishStats();
            return {
                success: false,
                message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π Cian: ${error.message}`,
                error: error.message,
                stats: this.getStats()
            };
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ ID
     * @param {string|number} listingId - ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @param {Object} options - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async updateListingById(listingId, options = {}) {
        try {
            await this.debugLog('–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Cian –ø–æ ID:', listingId);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã
            const listing = await this.db.getListing(listingId);
            if (!listing) {
                throw new Error(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${listingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Cian
            const source = this.detectSourceFromUrl(listing.url);
            if (source !== 'cian') {
                throw new Error(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listingId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º Cian (–∏—Å—Ç–æ—á–Ω–∏–∫: ${source})`);
            }

            this.initStats();
            this.stats.total = 1;

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ UIManager
            const result = await this.updateSingleListingUsingUIManager(listing);
            
            this.stats.updated = result.success ? 1 : 0;
            this.stats.failed = result.success ? 0 : 1;
            this.finishStats();

            return result;

        } catch (error) {
            this.handleError(error, 'updateListingById');
            return {
                success: false,
                message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${error.message}`,
                error: error.message
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Cian, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param {string|number} areaId - ID –æ–±–ª–∞—Å—Ç–∏
     * @param {number} maxAgeDays - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –¥–Ω—è—Ö
     * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async getUpdateableListings(areaId, maxAgeDays = null) {
        try {
            const ageDays = maxAgeDays || this.config.maxAgeDays;
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - ageDays);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏
            const allListings = await this.getListingsInArea(areaId);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Cian, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            const cianListings = allListings.filter(listing => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                const source = this.detectSourceFromUrl(listing.url);
                if (source !== 'cian') {
                    return false;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                if (listing.status !== 'active') {
                    return false;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if (!listing.updated_at) {
                    return true; // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º
                }

                const lastUpdate = new Date(listing.updated_at);
                return lastUpdate < cutoffDate;
            });

            if (this.debugEnabled) {
                await this.debugLog(`–ù–∞–π–¥–µ–Ω–æ ${cianListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π Cian –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ ${allListings.length} –≤—Å–µ–≥–æ`);
            }
            
            return cianListings;

        } catch (error) {
            this.handleError(error, 'getUpdateableListings');
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–µ–æ–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
     * @param {string|number} areaId - ID –æ–±–ª–∞—Å—Ç–∏
     * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async getListingsInArea(areaId) {
        try {
            if (this.debugEnabled) {
                await this.debugLog(`–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ ${areaId}`);
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –ë–î –¥–ª—è –≥–µ–æ–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const areaAddresses = await this.db.getAddressesInMapArea(areaId);
            
            if (areaAddresses.length === 0) {
                return [];
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
            const areaListings = [];
            for (const address of areaAddresses) {
                const addressListings = await this.db.getListingsByAddress(address.id);
                areaListings.push(...addressListings);
            }

            if (this.debugEnabled) {
                await this.debugLog(`–ù–∞–π–¥–µ–Ω–æ ${areaListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ –≥–µ–æ–ø–æ–∏—Å–∫`);
            }
            
            return areaListings;

        } catch (error) {
            this.handleError(error, 'getListingsInArea');
            return [];
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞—Ç—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     * @param {Array} batch - –ú–∞—Å—Å–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     * @returns {Promise<Array>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async updateBatch(batch, config) {
        const promises = batch.map(listing => this.updateSingleListing(listing, config));
        const results = await Promise.allSettled(promises.map(p => p.then(r => ({ success: true, result: r })).catch(e => ({ success: false, error: e }))));
        
        return results.map(r => r.value || { success: false, error: r.reason });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥
     * @param {Object} listing - –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async updateSingleListing(listing, config) {
        try {
            // –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥ URL
            const result = await this.updateListingDirectly(listing);
            return result;
            
        } catch (error) {
            await this.debugLog(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}:`, error.message);
            throw error;
        }
    }

    /**
     * –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥
     * @param {Object} listing - –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async updateListingDirectly(listing) {
        let tab = null;
        try {
            // –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∫–∞–∫ –≤ UIManager)
            tab = await this.createTabWithRetry(listing.url, 2);
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º content script
            await this.waitForPageLoad(tab.id);
            await this.injectContentScript(tab.id, listing.url);
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const response = await this.waitForContentScriptAndParse(tab.id, {
                action: 'parseCurrentListing',
                areaId: this.currentAreaId || null,
                existingListingId: listing.id
            });
            
            if (response && response.success && response.data) {
                // –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∫–∞–∫ –≤ UIManager)
                await this.processParsingResults(listing, response.data);
                
                return {
                    success: true,
                    listingId: listing.id,
                    message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥',
                    data: response.data
                };
            } else {
                throw new Error(response?.error || '–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ');
            }

        } catch (error) {
            return {
                success: false,
                listingId: listing.id,
                error: error.message,
                message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${error.message}`
            };
        } finally {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            if (tab && tab.id) {
                try {
                    await chrome.tabs.remove(tab.id);
                } catch (closeError) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
                }
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ–ª–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ UIManager)
     */
    async processParsingResults(listing, responseData) {
        try {
            // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "–û–±–Ω–æ–≤–ª–µ–Ω–æ: 31 –∏—é–ª, 09:01"
            let updatedDate = new Date();
            if (responseData.updated_date) {
                try {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–û–±–Ω–æ–≤–ª–µ–Ω–æ: 31 –∏—é–ª, 09:01"
                    const dateMatch = responseData.updated_date.match(/(\d{1,2})\s+(—è–Ω–≤|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞—è|–º–∞–π|–∏—é–Ω|–∏—é–ª|–∞–≤–≥|—Å–µ–Ω|–æ–∫—Ç|–Ω–æ—è|–¥–µ–∫),?\s+(\d{1,2}):(\d{2})/i);
                    if (dateMatch) {
                        const day = parseInt(dateMatch[1]);
                        const monthName = dateMatch[2];
                        const hours = parseInt(dateMatch[3]);
                        const minutes = parseInt(dateMatch[4]);
                        
                        const monthMap = {
                            '—è–Ω–≤': 0, '—Ñ–µ–≤': 1, '–º–∞—Ä': 2, '–∞–ø—Ä': 3, '–º–∞—è': 4, '–º–∞–π': 4, '–∏—é–Ω': 5,
                            '–∏—é–ª': 6, '–∞–≤–≥': 7, '—Å–µ–Ω': 8, '–æ–∫—Ç': 9, '–Ω–æ—è': 10, '–¥–µ–∫': 11
                        };
                        
                        const currentDate = new Date();
                        const currentYear = currentDate.getFullYear();
                        const month = monthMap[monthName.toLowerCase()];
                        
                        if (month !== undefined) {
                            // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É —Å —Ç–µ–∫—É—â–∏–º –≥–æ–¥–æ–º
                            updatedDate = new Date(currentYear, month, day, hours, minutes);
                            
                            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–≤—à–∞—è—Å—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π - –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
                            if (updatedDate > currentDate) {
                                updatedDate = new Date(currentYear - 1, month, day, hours, minutes);
                            }
                        }
                    }
                } catch (dateError) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
            const updatedListing = {
                ...listing, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                updated_at: new Date() // –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            };
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
            let priceHistory = listing.price_history || [];
            
            // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è
            if (priceHistory.length === 0 && listing.created) {
                priceHistory = [{
                    date: listing.created,
                    price: listing.price,
                    source: 'initial'
                }];
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            const isArchived = responseData.status === 'archived';
            if (isArchived) {
                updatedListing.status = 'archived';
                // –î–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è —Å —Å–∞–π—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
                if (responseData.updated_date) {
                    updatedListing.updated = updatedDate; // –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å —Å–∞–π—Ç–∞
                    updatedListing.last_seen = updatedDate;
                }
            } else {
                // –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –í–°–ï–ì–î–ê —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–∞—Ä—Å–∏–Ω–≥–∞
                updatedListing.updated = new Date();
                updatedListing.status = 'active';
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            const priceChanged = listing.price !== responseData.price;
            
            // 1. –ï—Å–ª–∏ –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏—à–ª–∞ –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω - –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
            if (responseData.price_history && responseData.price_history.length > 0) {
                const newHistory = responseData.price_history.map(entry => ({
                    date: entry.date,
                    price: entry.price
                }));
                
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–µ–π
                const filteredExistingHistory = priceHistory.filter(entry => entry.price && entry.price > 0);
                const combinedHistory = [...filteredExistingHistory];
                for (const newEntry of newHistory) {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º –ø–æ–ª–µ–º price
                    if (newEntry.price && newEntry.price > 0) {
                        const exists = combinedHistory.some(existing => 
                            existing.date === newEntry.date && existing.price === newEntry.price
                        );
                        if (!exists) {
                            combinedHistory.push(newEntry);
                        }
                    }
                }
                
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                priceHistory = combinedHistory.sort((a, b) => new Date(a.date) - new Date(b.date));
                
                // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                const sortedByDateDesc = priceHistory.sort((a, b) => new Date(b.date) - new Date(a.date));
                updatedListing.price = sortedByDateDesc[0].price;
                
            } else {
                // 2. –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –Ω–æ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                if (priceChanged) {
                    updatedListing.price = responseData.price;
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏
                    const dateForEntry = isArchived ? updatedDate : new Date();
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                    priceHistory = [...priceHistory];
                    priceHistory.push({
                        date: dateForEntry.toISOString(),
                        price: responseData.price
                    });
                    priceHistory.sort((a, b) => new Date(a.date) - new Date(b.date));
                }
            }
            
            updatedListing.price_history = priceHistory;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await this.db.update('listings', updatedListing);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∫–∞–∫ –≤ UIManager)
            if (typeof window !== 'undefined' && window.realEstateObjectManager && updatedListing.object_id) {
                try {
                    await window.realEstateObjectManager.updateObjectOnListingChange(
                        listing.id, 
                        listing, 
                        updatedListing
                    );
                    await this.debugLog('‚úÖ CianUpdate: –°–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
                } catch (error) {
                    await this.debugLog('‚ùå CianUpdate: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', error.message);
                }
            }
            
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–∏–∑ UIManager)
     */
    async createTabWithRetry(url, maxRetries = 3) {
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                return await new Promise((resolve, reject) => {
                    chrome.tabs.create({ url: url, active: false }, (newTab) => {
                        if (chrome.runtime.lastError) {
                            reject(new Error(chrome.runtime.lastError.message));
                        } else {
                            resolve(newTab);
                        }
                    });
                });
            } catch (error) {
                if (attempt === maxRetries) {
                    throw error;
                }
                await this.delay(1000 * attempt);
            }
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏–∑ UIManager)
     */
    async waitForPageLoad(tabId) {
        return new Promise((resolve) => {
            const checkPageLoad = () => {
                chrome.tabs.get(tabId, (tab) => {
                    if (chrome.runtime.lastError) {
                        resolve();
                        return;
                    }
                    
                    if (tab.status === 'complete') {
                        setTimeout(resolve, 2000); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    } else {
                        setTimeout(checkPageLoad, 500);
                    }
                });
            };
            
            checkPageLoad();
        });
    }

    /**
     * –ò–Ω–∂–µ–∫—Ü–∏—è content script (–∏–∑ UIManager)
     */
    async injectContentScript(tabId, listingUrl) {
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –ø–∞—Ä—Å–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            const isCian = listingUrl.includes('cian.ru');
            
            if (!isCian) {
                throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–∞–π—Ç –¥–ª—è CianListingUpdateService: ${listingUrl}`);
            }
            
            // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            await chrome.scripting.executeScript({
                target: { tabId: tabId },
                files: ['data/database.js', 'utils/error-reporter.js']
            });
            
            // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º Cian –ø–∞—Ä—Å–µ—Ä
            await chrome.scripting.executeScript({
                target: { tabId: tabId },
                files: ['content-scripts/cian-parser.js']
            });
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Cian
            await new Promise(resolve => setTimeout(resolve, 5000));
            
        } catch (error) {
            throw error;
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ content script –∏ –ø–∞—Ä—Å–∏–Ω–≥ (–∏–∑ UIManager)
     */
    async waitForContentScriptAndParse(tabId, settings) {
        const maxAttempts = 15;
        const attemptDelay = 3000;
        
        for (let attempt = 1; attempt <= maxAttempts; attempt++) {
            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—ã–º ping
                try {
                    await chrome.tabs.sendMessage(tabId, { action: 'ping' });
                } catch (pingError) {
                    // –ï—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping, –∂–¥–µ–º –±–æ–ª—å—à–µ
                    if (attempt < maxAttempts) {
                        await new Promise(resolve => setTimeout(resolve, attemptDelay));
                        continue;
                    }
                }
                
                // –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                const response = await chrome.tabs.sendMessage(tabId, {
                    action: 'parseCurrentListing',
                    areaId: settings.areaId,
                    existingListingId: settings.existingListingId
                });
                
                return response;
                
            } catch (error) {
                if (attempt === maxAttempts) {
                    throw new Error(`Content script –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`);
                }
                
                await new Promise(resolve => setTimeout(resolve, attemptDelay));
            }
        }
    }


    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param {number} ms - –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
     * @returns {Promise} Promise —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ Cian
     * @returns {Promise<boolean>} –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
     */
    async isServiceAvailable() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Chrome extension API –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            return !!(this.db && typeof chrome !== 'undefined' && chrome.runtime);
        } catch (error) {
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     * @returns {Array<string>} –ú–∞—Å—Å–∏–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    getSupportedSources() {
        return this.supportedSources;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CianListingUpdateService;
} else {
    window.CianListingUpdateService = CianListingUpdateService;
}