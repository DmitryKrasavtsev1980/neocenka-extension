/**
 * –°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ AI-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏, –≥–¥–µ ML-–∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å
 */

class AddressValidationService {
    constructor(config = {}) {
        this.config = {
            maxDistance: 500, // –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö
            aiPromptTemplate: this.getAIPromptTemplate(),
            batchSize: 5, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
            ...config
        };
        
        this.universalAI = null;
        this.db = null;
        this.addressManager = null;
        this.smartMatcher = null;
        
        this.stats = {
            processed: 0,
            foundByAI: 0,
            validated: 0,
            errors: 0,
            distanceIssues: 0
        };
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async initialize(dependencies = {}) {
        this.db = dependencies.db || window.db;
        this.addressManager = dependencies.addressManager || window.addressManager;
        this.smartMatcher = dependencies.smartMatcher || window.smartAddressMatcher;
        this.universalAI = dependencies.universalAI;
        
        if (!this.db || !this.addressManager || !this.smartMatcher || !this.universalAI) {
            throw new Error('AddressValidationService: Missing required dependencies');
        }
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ AI
     */
    async findAddressesWithAI(progressCallback = null, filters = null) {
        try {
            // 1. –ù–∞—Ö–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ –∞–¥—Ä–µ—Å–æ–≤
            const unprocessedListings = await this.getUnprocessedListings(filters);
            
            if (unprocessedListings.length === 0) {
                return {
                    success: true,
                    message: 'üìç –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–∂–µ –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞',
                    stats: this.stats
                };
            }
            
            console.log(`ü§ñ AI-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è ${unprocessedListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            console.log('üîç –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:');
            unprocessedListings.slice(0, 3).forEach((listing, i) => {
                console.log(`${i+1}. ID: ${listing.id}`);
                console.log(`   –ê–¥—Ä–µ—Å: "${listing.address || '–ù–ï–¢'}"`);
                console.log(`   title: "${listing.title?.substring(0, 50)}..."`);
                console.log(`   address_id: ${listing.address_id || '–ù–ï–¢'}`);
                console.log(`   confidence: ${listing.address_match_confidence || '–ù–ï–¢'}`);
                console.log(`   coordinates: ${listing.coordinates ? '–µ—Å—Ç—å' : '–ù–ï–¢'}`);
                console.log(`   status: ${listing.status}`);
                console.log('---');
            });
            
            // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
            const results = [];
            for (let i = 0; i < unprocessedListings.length; i += this.config.batchSize) {
                const batch = unprocessedListings.slice(i, i + this.config.batchSize);
                const batchResults = await this.processBatch(batch);
                results.push(...batchResults);
                
                // –û—Ç—á—ë—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞–∂–¥—ã–µ 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
                const processedCount = Math.min(i + batch.length, unprocessedListings.length);
                const shouldReport = processedCount % 10 === 0 || processedCount === unprocessedListings.length;
                
                if (progressCallback && shouldReport) {
                    try {
                        await progressCallback({
                            processed: processedCount,
                            total: unprocessedListings.length,
                            found: this.stats.foundByAI,
                            errors: this.stats.errors
                        });
                    } catch (error) {
                        console.warn('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–∫–æ–ª–ª–±–µ–∫–µ:', error);
                        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ UI
                    }
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if (i + this.config.batchSize < unprocessedListings.length) {
                    await this.delay(2000);
                }
            }
            
            return {
                success: true,
                message: this.formatResults(),
                stats: this.stats,
                results: results
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ AI-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤:', error);
            return {
                success: false,
                message: `‚ùå –û—à–∏–±–∫–∞ AI-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${error.message}`,
                stats: this.stats
            };
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
     */
    async validateAddressAccuracy(progressCallback = null, filters = null) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å distance > 50–º
            const suspiciousListings = await this.getSuspiciousDistanceListings(filters);
            
            if (suspiciousListings.length === 0) {
                return {
                    success: true,
                    message: '‚úÖ –í—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–º–µ—é—Ç –ø—Ä–∏–µ–º–ª–µ–º—É—é —Ç–æ—á–Ω–æ—Å—Ç—å (<50–º)',
                    stats: { checked: 0, suspicious: 0 }
                };
            }
            
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ ${suspiciousListings.length} –∞–¥—Ä–µ—Å–æ–≤`);
            
            if (progressCallback) {
                await progressCallback({
                    processed: 0,
                    total: suspiciousListings.length,
                    stage: 'analysis'
                });
            }
            
            const analysis = await this.analyzeDistanceIssues(suspiciousListings, progressCallback);
            
            return {
                success: true,
                message: this.formatDistanceAnalysis(analysis),
                stats: analysis.stats,
                recommendations: analysis.recommendations
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏:', error);
            return {
                success: false,
                message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏: ${error.message}`
            };
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –±–µ–∑ –∞–¥—Ä–µ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ DuplicatesManager)
     */
    async getUnprocessedListings(filters = null) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –æ–±–ª–∞—Å—Ç–∏
        let listingsInArea = [];
        
        if (window.duplicatesManager && window.duplicatesManager.getListingsInArea) {
            listingsInArea = await window.duplicatesManager.getListingsInArea();
        } else {
            console.warn('‚ö†Ô∏è DuplicatesManager –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥');
            // Fallback –∫ –Ω–∞—à–µ–º—É —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
            const allListings = await this.db.getAll('listings');
            const currentArea = window.dataState?.getState('currentArea');
            
            if (currentArea && currentArea.polygon) {
                listingsInArea = allListings.filter(listing => {
                    if (!listing.coordinates?.lat || !(listing.coordinates.lng || listing.coordinates.lon)) {
                        return false;
                    }
                    const lat = parseFloat(listing.coordinates.lat);
                    const lng = parseFloat(listing.coordinates.lng || listing.coordinates.lon);
                    return window.db.isPointInPolygon({lat, lng}, currentArea.polygon);
                });
            } else {
                listingsInArea = allListings;
            }
        }
        
        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${listingsInArea.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤/–ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã
        if (filters && (filters.segments.length > 0 || filters.subsegments.length > 0)) {
            listingsInArea = await this.applySegmentFilters(listingsInArea, filters);
            console.log(`üîç –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${listingsInArea.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const aiProcessed = listingsInArea.filter(l => l.address_match_method === 'ai_analysis').length;
        const withoutAddress = listingsInArea.filter(l => !l.address_id).length;
        const veryLowConfidence = listingsInArea.filter(l => l.address_match_confidence === 'very_low').length;
        
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   ‚Ä¢ –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ AI: ${aiProcessed}`);
        console.log(`   ‚Ä¢ –ë–µ–∑ –∞–¥—Ä–µ—Å–∞: ${withoutAddress}`);
        console.log(`   ‚Ä¢ –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${veryLowConfidence}`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ –∞–¥—Ä–µ—Å–æ–≤ –∏–ª–∏ —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º, –ù–û –∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ AI
        const needsProcessing = listingsInArea.filter(listing => {
            const needsProcessing = (!listing.address_id || 
                listing.address_match_confidence === 'very_low') &&
                listing.address_match_method !== 'ai_analysis'; // –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ AI
            return needsProcessing;
        });
        
        console.log(`üîç –ò—Ç–æ–≥–æ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI: ${needsProcessing.length}`);
        return needsProcessing;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤/–ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
     */
    async applySegmentFilters(listings, filters) {
        if (!filters || (!filters.segments.length && !filters.subsegments.length)) {
            return listings;
        }

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∏ listing -> segment
            const allRealEstateObjects = await this.db.getAll('real_estate_objects');
            
            // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É listing_id -> segment_id —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            const listingToSegmentMap = new Map();
            
            allRealEstateObjects.forEach(obj => {
                if (obj.listings && Array.isArray(obj.listings)) {
                    obj.listings.forEach(listingId => {
                        listingToSegmentMap.set(listingId, obj.segment_id);
                    });
                }
            });

            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º/–ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞–º
            const filteredListings = listings.filter(listing => {
                const segmentId = listingToSegmentMap.get(listing.id);
                
                if (!segmentId) {
                    return false; // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —Å–µ–≥–º–µ–Ω—Ç—É
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
                if (filters.segments.length > 0 && filters.segments.includes(segmentId)) {
                    return true;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞–º
                if (filters.subsegments.length > 0) {
                    // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    const realEstateObj = allRealEstateObjects.find(obj => 
                        obj.listings && obj.listings.includes(listing.id)
                    );
                    
                    if (realEstateObj && realEstateObj.subsegment_id && 
                        filters.subsegments.includes(realEstateObj.subsegment_id)) {
                        return true;
                    }
                }

                return false;
            });

            console.log(`üîç –§–∏–ª—å—Ç—Ä –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º/–ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞–º: ${listings.length} ‚Üí ${filteredListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            
            return filteredListings;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', error);
            return listings; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
     */
    async getSuspiciousDistanceListings(filters = null) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –æ–±–ª–∞—Å—Ç–∏
        let listingsInArea = [];
        
        if (window.duplicatesManager && window.duplicatesManager.getListingsInArea) {
            listingsInArea = await window.duplicatesManager.getListingsInArea();
        } else {
            console.warn('‚ö†Ô∏è DuplicatesManager –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è getSuspiciousDistanceListings');
            const allListings = await this.db.getAll('listings');
            const currentArea = window.dataState?.getState('currentArea');
            
            if (currentArea && currentArea.polygon) {
                listingsInArea = allListings.filter(listing => {
                    if (!listing.coordinates?.lat || !(listing.coordinates.lng || listing.coordinates.lon)) {
                        return false;
                    }
                    const lat = parseFloat(listing.coordinates.lat);
                    const lng = parseFloat(listing.coordinates.lng || listing.coordinates.lon);
                    return window.db.isPointInPolygon({lat, lng}, currentArea.polygon);
                });
            } else {
                listingsInArea = allListings;
            }
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
        return listingsInArea.filter(listing => {
            return listing.address_id && 
                   listing.address_distance && 
                   listing.address_distance > 50;
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async processBatch(listings) {
        const results = [];
        
        for (const listing of listings) {
            try {
                this.stats.processed++;
                
                // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ —Ä–∞–¥–∏—É—Å–µ 500–º
                const nearbyAddresses = await this.findNearbyAddresses(listing);
                
                if (nearbyAddresses.length === 0) {
                    console.log(`‚ö†Ô∏è  –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: –ù–ï–¢ –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 500–º –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ${listing.coordinates.lat}, ${listing.coordinates.lng || listing.coordinates.lon}`);
                    results.push({
                        listingId: listing.id,
                        success: false,
                        reason: '–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 500–º'
                    });
                    continue;
                }
                
                // AI-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                const aiResult = await this.analyzeWithAI(listing, nearbyAddresses);
                
                if (aiResult.success && aiResult.selectedAddress) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
                    await this.assignAddress(listing, aiResult.selectedAddress);
                    
                    this.stats.foundByAI++;
                    results.push({
                        listingId: listing.id,
                        success: true,
                        addressId: aiResult.selectedAddress.id,
                        distance: aiResult.distance,
                        reason: aiResult.reason
                    });
                } else {
                    // AI –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å - –ù–ï –ø–æ–º–µ—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                    // –û–Ω–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
                    console.log(`üö´ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: AI –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
                    results.push({
                        listingId: listing.id,
                        success: false,
                        reason: aiResult.reason || 'AI –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å'
                    });
                }
                
            } catch (error) {
                this.stats.errors++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}:`, error);
                results.push({
                    listingId: listing.id,
                    success: false,
                    reason: `–û—à–∏–±–∫–∞: ${error.message}`
                });
            }
        }
        
        return results;
    }
    
    /**
     * –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ
     */
    async findNearbyAddresses(listing) {
        const allAddresses = await this.db.getAll('addresses');
        const listingCoords = {
            lat: listing.coordinates.lat,
            lng: listing.coordinates.lng || listing.coordinates.lon
        };
        
        const nearby = [];
        
        for (const address of allAddresses) {
            if (!address.coordinates) continue;
            
            const distance = this.calculateDistance(listingCoords, address.coordinates);
            
            if (distance <= this.config.maxDistance) {
                nearby.push({
                    ...address,
                    distance: distance
                });
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        return nearby.sort((a, b) => a.distance - b.distance).slice(0, 10); // –ë–µ—Ä–µ–º —Ç–æ–ø-10 –±–ª–∏–∂–∞–π—à–∏—Ö
    }
    
    /**
     * AI-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–¥—Ä–µ—Å–∞
     */
    async analyzeWithAI(listing, nearbyAddresses) {
        try {
            const prompt = this.buildAIPrompt(listing, nearbyAddresses);
            
            console.log(`\nüîç AI –ê–ù–ê–õ–ò–ó –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}:`);
            console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${listing.coordinates.lat}, ${listing.coordinates.lng || listing.coordinates.lon}`);
            console.log(`üè† –ê–¥—Ä–µ—Å –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏: "${listing.address}"`);
            console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${nearbyAddresses.length} –±–ª–∏–∂–∞–π—à–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 500–º`);
            console.log('üìã –ê–¥—Ä–µ—Å–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:');
            nearbyAddresses.forEach((addr, i) => {
                console.log(`  ${i+1}. "${addr.address}" (${Math.round(addr.distance)}–º)`);
                console.log(`      ID: ${addr.id}`);
                console.log(`      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${addr.coordinates?.lat}, ${addr.coordinates?.lng}`);
            });
            
            console.log('\nüì® –ó–ê–ü–†–û–° –ö AI:');
            console.log(prompt);
            
            const response = await this.universalAI.sendRequest(prompt, {
                taskType: 'analysis',
                language: 'ru',
                maxTokens: 500
            });
            
            console.log('\nüì• –û–¢–í–ï–¢ –û–¢ AI:');
            console.log(response.content);
            
            const result = this.parseAIResponse(response.content, nearbyAddresses);
            
            console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ò–ù–ì–ê:');
            console.log(JSON.stringify(result, null, 2));
            console.log('---\n');
            
            return result;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞:', error);
            return {
                success: false,
                reason: `–û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: ${error.message}`
            };
        }
    }
    
    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI
     */
    buildAIPrompt(listing, nearbyAddresses) {
        const addressesList = nearbyAddresses.map((addr, index) => 
            `${index + 1}. ${addr.address} (${Math.round(addr.distance)}–º)`
        ).join('\n');
        
        return `–¢–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–¥—Ä–µ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.

**–ê–¥—Ä–µ—Å –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:**
"${listing.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}"

**–ë–ª–∏–∂–∞–π—à–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ —Ä–∞–¥–∏—É—Å–µ 500–º:**
${addressesList}

**–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:**
1. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –£–ª–∏—Ü–∞ –ò –Ω–æ–º–µ—Ä –¥–æ–º–∞ –¥–æ–ª–∂–Ω—ã –ü–û–õ–ù–û–°–¢–¨–Æ —Å–æ–≤–ø–∞–¥–∞—Ç—å
2. –†–ê–ó–ù–´–ï –ù–û–ú–ï–†–ê –î–û–ú–û–í = –†–ê–ó–ù–´–ï –ê–î–†–ï–°–ê! (–¥–æ–º 8 ‚â† –¥–æ–º 14 ‚â† –¥–æ–º 17)  
3. –ó–ê–ü–†–ï–©–ï–ù–û –≤—ã–±–∏—Ä–∞—Ç—å "–±–ª–∏–∂–∞–π—à–∏–π" –¥–æ–º - —Ç–æ–ª—å–∫–æ –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
4. –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞ –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ - —ç—Ç–æ –í–°–ï–ì–î–ê selectedIndex: null
5. –ù–ï –£–ì–ê–î–´–í–ê–ô! –õ—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å null, —á–µ–º –≤—ã–±—Ä–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ–º
6. –ü—Ä–æ–≤–µ—Ä—è–π –Ω–æ–º–µ—Ä –¥–æ–º–∞ –î–í–ê–ñ–î–´ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º!

**–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ JSON):**
{
  "selectedIndex": —á–∏—Å–ª–æ (1-${nearbyAddresses.length}) –∏–ª–∏ null,
  "reason": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–æ–º–µ—Ä–æ–≤ –¥–æ–º–æ–≤"
}

**–ö–†–ò–¢–ò–ß–ù–´–ï –ø—Ä–∏–º–µ—Ä—ã:**
- –û–±—ä—è–≤–ª–µ–Ω–∏–µ: "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —É–ª., 14", –≤ —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å –¥–æ–º 8,10,13,15,17 ‚Üí selectedIndex: null (–¥–æ–º–∞ 14 –ù–ï–¢ –≤ —Å–ø–∏—Å–∫–µ!)
- "6-—Ä –ú–æ–ª–æ–¥—ë–∂–∏, 40" –∏ –≤ —Å–ø–∏—Å–∫–µ "6-—Ä. –ú–æ–ª–æ–¥—ë–∂–∏, –¥. 30" ‚Üí selectedIndex: null (40 ‚â† 30)
- "—É–ª. –õ–µ–Ω–∏–Ω–∞, 25" –∏ –≤ —Å–ø–∏—Å–∫–µ "–õ–µ–Ω–∏–Ω–∞, 25" ‚Üí selectedIndex: –Ω–æ–º–µ—Ä (–¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)`;
    }
    
    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI
     */
    parseAIResponse(aiResponse, nearbyAddresses) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
            if (!jsonMatch) {
                throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ AI');
            }
            
            const parsed = JSON.parse(jsonMatch[0]);
            
            if (parsed.selectedIndex === null || parsed.selectedIndex === undefined) {
                return {
                    success: false,
                    reason: parsed.reason || 'AI –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–¥—Ä–µ—Å'
                };
            }
            
            const selectedAddress = nearbyAddresses[parsed.selectedIndex - 1];
            if (!selectedAddress) {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–¥—Ä–µ—Å–∞');
            }
            
            return {
                success: true,
                selectedAddress: selectedAddress,
                distance: selectedAddress.distance,
                reason: parsed.reason
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI:', error);
            return {
                success: false,
                reason: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI: ${error.message}`
            };
        }
    }
    
    /**
     * –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—é
     */
    async assignAddress(listing, address) {
        const updatedListing = {
            ...listing,
            address_id: address.id,
            address_match_confidence: 'high',
            address_match_method: 'ai_analysis',
            address_match_score: 0.85,
            address_distance: address.distance,
            processing_status: 'duplicate_check_needed',
            updated_at: new Date()
        };
        
        await this.db.update('listings', updatedListing);
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
     */
    async analyzeDistanceIssues(suspiciousListings, progressCallback = null) {
        const analysis = {
            stats: {
                total: suspiciousListings.length,
                checked: 0,
                corrected: 0,
                confirmed: 0,
                failed: 0,
                byDistance: { '50-100–º': 0, '100-200–º': 0, '200–º+': 0 },
                byConfidence: { high: 0, medium: 0, low: 0, very_low: 0 }
            },
            recommendations: []
        };
        
        console.log(`üîç AI-–∞–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è ${suspiciousListings.length} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤`);
        
        // AI-–∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        for (let i = 0; i < suspiciousListings.length; i++) {
            const listing = suspiciousListings[i];
            const distance = listing.address_distance;
            const confidence = listing.address_match_confidence;
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º
            if (distance <= 100) analysis.stats.byDistance['50-100–º']++;
            else if (distance <= 200) analysis.stats.byDistance['100-200–º']++;
            else analysis.stats.byDistance['200–º+']++;
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–æ–≤–µ—Ä–∏—è
            analysis.stats.byConfidence[confidence] = (analysis.stats.byConfidence[confidence] || 0) + 1;
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            if (progressCallback && (i % 10 === 0 || i === suspiciousListings.length - 1)) {
                await progressCallback({
                    processed: i + 1,
                    total: suspiciousListings.length,
                    stage: 'validation'
                });
            }
            
            try {
                // AI-–∞–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                const aiValidation = await this.validateAddressWithAI(listing);
                
                if (aiValidation.needsCorrection) {
                    // AI —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –∞–¥—Ä–µ—Å –Ω–µ–≤–µ—Ä–Ω—ã–π - –°–ë–†–ê–°–´–í–ê–ï–ú –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                    analysis.stats.corrected++;
                    console.log(`üîß –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: AI –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∞–¥—Ä–µ—Å (${Math.round(distance)}–º) - ${aiValidation.reason}`);
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è AI
                    listing.address_id = null;
                    listing.address_match_confidence = null;
                    listing.address_match_method = null;
                    listing.address_distance = null;
                    listing.processing_status = 'address_needed';
                    await this.db.update('listings', listing);
                } else {
                    // AI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
                    analysis.stats.confirmed++;
                    listing.processing_status = 'duplicate_check_needed';
                    await this.db.update('listings', listing);
                    console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: AI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∞–¥—Ä–µ—Å (${Math.round(distance)}–º) - ${aiValidation.reason}`);
                }
                
                analysis.stats.checked++;
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}:`, error);
                analysis.stats.failed++;
            }
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (analysis.stats.byDistance['200–º+'] > 0) {
            analysis.recommendations.push(`üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ: ${analysis.stats.byDistance['200–º+']} –∞–¥—Ä–µ—Å–æ–≤ —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º >200–º`);
        }
        
        if (analysis.stats.corrected > 0) {
            analysis.recommendations.push(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${analysis.stats.corrected} –Ω–µ—Ç–æ—á–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤`);
        }
        
        if (analysis.stats.confirmed > analysis.stats.corrected) {
            analysis.recommendations.push(`‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã AI –∫–∞–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ`);
        }
        
        return analysis;
    }
    
    /**
     * AI-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
     */
    async validateAddressWithAI(listing) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
            const assignedAddress = await this.db.get('addresses', listing.address_id);
            if (!assignedAddress) {
                return { needsCorrection: true, reason: '–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ' };
            }
            
            const distance = Math.round(listing.address_distance);
            const listingAddress = listing.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
            
            // –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–¥—Ä–µ—Å–æ–≤
            const prompt = `–ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥—Ä–µ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –Ω–∏–º–∏.

**–ê–¥—Ä–µ—Å –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏:**
"${listingAddress}"

**–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞:**
"${assignedAddress.address}"

**–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–∏–º–∏:** ${distance} –º–µ—Ç—Ä–æ–≤

**–ó–∞–¥–∞—á–∞:** –û–ø—Ä–µ–¥–µ–ª–∏, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥—Ä–µ—Å –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.

**–°–¢–†–û–ì–ò–ï –∫—Ä–∏—Ç–µ—Ä–∏–∏ (–∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å):**
1. –ö–û–†–†–ï–ö–¢–ù–û: –¢–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —É–ª–∏—Ü—ã –ò –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞
2. –û–®–ò–ë–ö–ê: –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏ (—Ä–∞–∑–Ω—ã–µ —É–ª–∏—Ü—ã, —Ä–∞–∑–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–æ–≤, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–∞)
3. –û–°–û–ë–û –ö–†–ò–¢–ò–ß–ù–û: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ >100–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ–≥–¥–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—à–∏–±–∫—É

**–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ JSON):**
{
  "needsCorrection": true/false,
  "reason": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
  "confidence": "high|medium|low"
}`;

            const response = await this.universalAI.sendRequest(prompt, {
                taskType: 'analysis',
                language: 'ru',
                maxTokens: 300
            });
            
            // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI
            const jsonMatch = response.content.match(/\{[\s\S]*\}/);
            if (!jsonMatch) {
                throw new Error('AI –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–π JSON');
            }
            
            const aiResponse = JSON.parse(jsonMatch[0]);
            
            console.log(`üîç AI –≤–∞–ª–∏–¥–∞—Ü–∏—è: ${listing.id} - ${aiResponse.needsCorrection ? '–ò–°–ü–†–ê–í–ò–¢–¨' : '–ü–û–î–¢–í–ï–†–î–ò–¢–¨'} (${aiResponse.reason})`);
            
            return {
                needsCorrection: aiResponse.needsCorrection || false,
                reason: aiResponse.reason || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
                confidence: aiResponse.confidence || 'medium'
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ AI-–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
            return {
                needsCorrection: false,
                reason: `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`,
                confidence: 'low'
            };
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
     */
    formatResults() {
        const successRate = this.stats.processed > 0 ? 
            ((this.stats.foundByAI / this.stats.processed) * 100).toFixed(1) : 0;
            
        return `ü§ñ **AI-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${this.stats.processed}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ AI: ${this.stats.foundByAI}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å AI: ${successRate}%
‚Ä¢ –û—à–∏–±–æ–∫: ${this.stats.errors}

${this.stats.foundByAI > 0 ? '‚úÖ AI-–∞–ª–≥–æ—Ä–∏—Ç–º —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞!' : '‚ùå AI –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π'}`;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
     */
    formatDistanceAnalysis(analysis) {
        const { stats, recommendations } = analysis;
        
        let message = `üîç **AI-–∞–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–æ–≤:**

üìä **–ù–∞–π–¥–µ–Ω–æ ${stats.total} –∞–¥—Ä–µ—Å–æ–≤ —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º >50–º:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ AI: ${stats.checked}
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.corrected}
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${stats.confirmed}
‚Ä¢ –û—à–∏–±–æ–∫ –∞–Ω–∞–ª–∏–∑–∞: ${stats.failed}

**–ü–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º:**
‚Ä¢ 50-100–º: ${stats.byDistance['50-100–º']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π
‚Ä¢ 100-200–º: ${stats.byDistance['100-200–º']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π  
‚Ä¢ –ë–æ–ª–µ–µ 200–º: ${stats.byDistance['200–º+']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π

**–ü–æ —É—Ä–æ–≤–Ω—è–º –¥–æ–≤–µ—Ä–∏—è:**
‚Ä¢ –í—ã—Å–æ–∫–æ–µ: ${stats.byConfidence.high || 0}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: ${stats.byConfidence.medium || 0}
‚Ä¢ –ù–∏–∑–∫–æ–µ: ${stats.byConfidence.low || 0}
‚Ä¢ –û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ: ${stats.byConfidence.very_low || 0}`;

        if (recommendations.length > 0) {
            message += `\n\n**üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n${recommendations.map(r => `‚Ä¢ ${r}`).join('\n')}`;
        }
        
        return message;
    }
    
    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞)
     */
    calculateDistance(coord1, coord2) {
        const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        const lat1Rad = (coord1.lat * Math.PI) / 180;
        const lat2Rad = (coord2.lat * Math.PI) / 180;
        const deltaLatRad = ((coord2.lat - coord1.lat) * Math.PI) / 180;
        const deltaLngRad = ((coord2.lng - coord1.lng) * Math.PI) / 180;

        const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) +
                  Math.cos(lat1Rad) * Math.cos(lat2Rad) *
                  Math.sin(deltaLngRad / 2) * Math.sin(deltaLngRad / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return R * c;
    }
    
    /**
     * AI –ø—Ä–æ–º–ø—Ç —à–∞–±–ª–æ–Ω
     */
    getAIPromptTemplate() {
        return {
            systemRole: '–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ç–æ—á–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏.',
            guidelines: [
                '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–ª–∏—Ü, –¥–æ–º–æ–≤, —Ä–∞–π–æ–Ω–æ–≤',
                '–£—á–∏—Ç—ã–≤–∞–π —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤',
                '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–≤–∞–π —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º –≤ —Ç–µ–∫—Å—Ç–µ',
                '–ï—Å–ª–∏ –Ω–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤—ã–±–∏—Ä–∞–π –±–ª–∏–∂–∞–π—à–∏–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é',
                '–ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∞–¥—Ä–µ—Å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —á–µ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º'
            ]
        };
    }
    
    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return { ...this.stats };
    }
    
    /**
     * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    resetStats() {
        this.stats = {
            processed: 0,
            foundByAI: 0,
            validated: 0,
            errors: 0,
            distanceIssues: 0
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AddressValidationService;
} else {
    window.AddressValidationService = AddressValidationService;
}