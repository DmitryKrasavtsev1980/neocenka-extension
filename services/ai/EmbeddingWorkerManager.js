/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä Web Worker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å embedding –º–æ–¥–µ–ª—è–º–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É —Å Transformers.js –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
 */

class EmbeddingWorkerManager {
    constructor() {
        this.worker = null;
        this.registry = new window.EmbeddingModelsRegistry();
        this.requestQueue = new Map(); // –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å Promise
        this.requestId = 0;
        
        this.initialize();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è worker'–∞
     */
    initialize() {
        try {
            // –°–æ–∑–¥–∞–µ–º worker –∫–∞–∫ –º–æ–¥—É–ª—å
            this.worker = new Worker(
                chrome.runtime.getURL('workers/embedding-worker.js'),
                { type: 'module' }
            );
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç worker'–∞
            this.worker.onmessage = (e) => {
                this.handleWorkerMessage(e.data);
            };
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            this.worker.onerror = (error) => {
                console.error('‚ùå [WorkerManager] –û—à–∏–±–∫–∞ worker:', error);
            };
            
            console.log('‚úÖ [WorkerManager] Embedding Worker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå [WorkerManager] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å worker:', error);
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç worker'–∞
     */
    handleWorkerMessage(data) {
        const { id, type, success, result, error, progress, modelId } = data;
        
        if (type === 'progress') {
            // –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            this.handleProgress(modelId, progress);
            return;
        }
        
        // –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
        const request = this.requestQueue.get(id);
        if (!request) {
            console.warn(`‚ö†Ô∏è [WorkerManager] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å ${id}`);
            return;
        }
        
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        this.requestQueue.delete(id);
        
        if (success) {
            request.resolve(result);
        } else {
            const err = new Error(error.message);
            err.stack = error.stack;
            request.reject(err);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    handleProgress(modelId, progress) {
        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±–µ–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const progressCallbacks = this.progressCallbacks?.get(modelId);
        if (progressCallbacks) {
            progressCallbacks.forEach(callback => {
                try {
                    callback(progress);
                } catch (error) {
                    console.error('‚ùå [WorkerManager] –û—à–∏–±–∫–∞ –≤ –∫–æ–ª–±–µ–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
                }
            });
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è worker'—É —Å Promise
     */
    sendMessage(action, data = {}) {
        return new Promise((resolve, reject) => {
            if (!this.worker) {
                reject(new Error('Worker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'));
                return;
            }
            
            const id = ++this.requestId;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º Promise –≤ –æ—á–µ—Ä–µ–¥–∏
            this.requestQueue.set(id, { resolve, reject });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            this.worker.postMessage({
                id,
                action,
                data
            });
            
            // –¢–∞–π–º–∞—É—Ç –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            setTimeout(() => {
                if (this.requestQueue.has(id)) {
                    this.requestQueue.delete(id);
                    reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏'));
                }
            }, 300000); // 5 –º–∏–Ω—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
     */
    async loadEmbeddingModel(modelId, progressCallback = null) {
        const modelConfig = this.registry.getModel(modelId);
        if (!modelConfig) {
            throw new Error(`–ú–æ–¥–µ–ª—å ${modelId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ`);
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±–µ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (progressCallback) {
            if (!this.progressCallbacks) {
                this.progressCallbacks = new Map();
            }
            
            if (!this.progressCallbacks.has(modelId)) {
                this.progressCallbacks.set(modelId, new Set());
            }
            
            this.progressCallbacks.get(modelId).add(progressCallback);
        }
        
        try {
            console.log(`üîÑ [WorkerManager] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ${modelId} —á–µ—Ä–µ–∑ worker...`);
            
            const result = await this.sendMessage('loadModel', {
                modelId,
                modelConfig
            });
            
            console.log(`‚úÖ [WorkerManager] –ú–æ–¥–µ–ª—å ${modelId} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
            return result;
            
        } finally {
            // –û—á–∏—â–∞–µ–º –∫–æ–ª–±–µ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if (progressCallback && this.progressCallbacks?.has(modelId)) {
                this.progressCallbacks.get(modelId).delete(progressCallback);
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embedding-–≤–µ–∫—Ç–æ—Ä–∞
     */
    async generateEmbedding(modelId, text, options = {}) {
        return await this.sendMessage('generateEmbedding', {
            modelId,
            text,
            options
        });
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
     */
    async testModel(modelId, testText) {
        return await this.sendMessage('testModel', {
            modelId,
            testText
        });
    }

    /**
     * –í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
     */
    async unloadModel(modelId) {
        return await this.sendMessage('unloadModel', {
            modelId
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π
     */
    async getModelsStatus() {
        return await this.sendMessage('getStatus');
    }

    /**
     * –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è embedding-–≤–µ–∫—Ç–æ—Ä–æ–≤
     */
    async batchGenerateEmbeddings(texts, modelId, options = {}) {
        const { batchSize = 10, progressCallback } = options;
        const results = [];
        
        console.log(`üîÑ [WorkerManager] –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è ${texts.length} —Ç–µ–∫—Å—Ç–æ–≤, —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: ${batchSize}`);
        
        for (let i = 0; i < texts.length; i += batchSize) {
            const batch = texts.slice(i, i + batchSize);
            
            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞
            const batchPromises = batch.map(text => 
                this.generateEmbedding(modelId, text)
            );
            
            const batchResults = await Promise.all(batchPromises);
            results.push(...batchResults);
            
            // –ö–æ–ª–±–µ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if (progressCallback) {
                const progress = Math.round(((i + batch.length) / texts.length) * 100);
                progressCallback({
                    stage: 'processing',
                    progress,
                    processed: i + batch.length,
                    total: texts.length
                });
            }
        }
        
        console.log(`‚úÖ [WorkerManager] –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (${results.length} –≤–µ–∫—Ç–æ—Ä–æ–≤)`);
        return results;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        if (this.worker) {
            this.worker.terminate();
            this.worker = null;
        }
        
        // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        for (const [id, request] of this.requestQueue) {
            request.reject(new Error('Worker –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω'));
        }
        
        this.requestQueue.clear();
        this.progressCallbacks?.clear();
        
        console.log('üóëÔ∏è [WorkerManager] Embedding Worker —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.EmbeddingWorkerManager = EmbeddingWorkerManager;