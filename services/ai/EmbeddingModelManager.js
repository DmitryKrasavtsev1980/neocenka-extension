/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è embedding-–º–æ–¥–µ–ª–µ–π
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫–æ–π –º–æ–¥–µ–ª–µ–π –∏–∑ HuggingFace Hub —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */

class EmbeddingModelManager {
    constructor() {
        this.modelsRegistry = new window.EmbeddingModelsRegistry();
        this.loadedModels = new Map(); // –ö—ç—à —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        this.downloadProgress = new Map(); // –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Worker Manager –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π —Ä–∞–±–æ—Ç—ã —Å Transformers.js
        this.workerManager = new window.EmbeddingWorkerManager();
        
        console.log('‚úÖ [ModelManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Worker Manager');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã Transformers.js –¥–ª—è Chrome Extension
     */
    async setupTransformersEnvironment() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Transformers.js (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ script-—Ç–µ–≥)
        if (typeof transformers === 'undefined' && typeof window.transformers === 'undefined') {
            console.error('‚ùå [ModelManager] Transformers.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ script-—Ç–µ–≥');
            throw new Error('Transformers.js –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ <script src="../libs/transformers.min.js">');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ transformers
        const Transformers = window.transformers || transformers;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Chrome Extension
        if (Transformers && Transformers.env) {
            const env = Transformers.env;
            env.allowRemoteModels = true;
            env.allowLocalModels = false;
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
            env.remoteURL = 'https://huggingface.co/';
            env.localURL = null;
        }
        
        console.log('üîß [ModelManager] –°—Ä–µ–¥–∞ Transformers.js –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è Chrome Extension');
        return Transformers;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ embedding-–º–æ–¥–µ–ª–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
     * @param {string} modelId - ID –º–æ–¥–µ–ª–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
     * @param {Function} progressCallback - Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     * @returns {Promise<Object>} –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
     */
    async loadEmbeddingModel(modelId, progressCallback = null) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ
        if (this.loadedModels.has(modelId)) {
            console.log(`‚úÖ [ModelManager] –ú–æ–¥–µ–ª—å ${modelId} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞`);
            return this.loadedModels.get(modelId);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID –º–æ–¥–µ–ª–∏
        const modelConfig = this.modelsRegistry.getModel(modelId);
        if (!modelConfig) {
            throw new Error(`–ú–æ–¥–µ–ª—å ${modelId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ`);
        }

        console.log(`üîÑ [ModelManager] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏: ${modelConfig.name} (${modelConfig.modelSize})`);

        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            this.downloadProgress.set(modelId, { stage: 'downloading', progress: 0 });

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ Transformers.js
            const Transformers = await this.setupTransformersEnvironment();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –∏–∑ HuggingFace
            console.log(`üîÑ [ModelManager] –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å ${modelConfig.fullName} –∏–∑ HuggingFace...`);
            
            const model = await Transformers.pipeline('feature-extraction', modelConfig.fullName, {
                progress_callback: (progress) => {
                    if (progressCallback) {
                        const percentage = Math.round((progress.loaded / progress.total) * 100);
                        progressCallback({
                            modelId: modelId,
                            modelName: modelConfig.name,
                            stage: 'downloading',
                            progress: percentage,
                            loaded: progress.loaded,
                            total: progress.total
                        });
                    }
                    
                    this.downloadProgress.set(modelId, { 
                        stage: 'downloading', 
                        progress: Math.round((progress.loaded / progress.total) * 100),
                        loaded: progress.loaded,
                        total: progress.total
                    });
                }
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –∫—ç—à –ø–∞–º—è—Ç–∏
            this.loadedModels.set(modelId, model);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            this.downloadProgress.set(modelId, { 
                stage: 'ready', 
                progress: 100,
                loadedAt: new Date()
            });

            console.log(`‚úÖ [ModelManager] –ú–æ–¥–µ–ª—å ${modelConfig.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`);
            
            if (progressCallback) {
                progressCallback({
                    modelId: modelId,
                    modelName: modelConfig.name,
                    stage: 'ready',
                    progress: 100,
                    loadedAt: new Date()
                });
            }

            return model;

        } catch (error) {
            console.error(`‚ùå [ModelManager] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ${modelId}:`, error);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.downloadProgress.delete(modelId);
            
            if (progressCallback) {
                progressCallback({
                    modelId: modelId,
                    modelName: modelConfig.name,
                    stage: 'error',
                    progress: 0,
                    error: error.message
                });
            }
            
            throw error;
        }
    }

    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
     * @param {Function} progressCallback - Callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    async preloadRecommendedModel(progressCallback = null) {
        const recommendedModel = this.modelsRegistry.getDefaultModel('ru');
        console.log(`üöÄ [ModelManager] –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –º–æ–¥–µ–ª–∏: ${recommendedModel.name}`);
        
        return await this.loadEmbeddingModel(recommendedModel.id, progressCallback);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏)
     * @param {string} modelId - ID –º–æ–¥–µ–ª–∏
     * @returns {Promise<boolean>} True –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞
     */
    async checkModelAvailability(modelId) {
        const modelConfig = this.modelsRegistry.getModel(modelId);
        if (!modelConfig) return false;

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ HEAD-–∑–∞–ø—Ä–æ—Å –∫ HuggingFace
            const checkUrl = `https://huggingface.co/${modelConfig.fullName}/resolve/main/config.json`;
            const response = await fetch(checkUrl, { method: 'HEAD' });
            return response.ok;
        } catch (error) {
            console.warn(`‚ö†Ô∏è [ModelManager] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ ${modelId}:`, error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
     * @param {string} modelId - ID –º–æ–¥–µ–ª–∏
     * @returns {Object|null} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
     */
    getLoadingProgress(modelId) {
        return this.downloadProgress.get(modelId) || null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
     * @returns {Object} –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
     */
    getModelsStatus() {
        const status = {
            loaded: Array.from(this.loadedModels.keys()),
            loading: [],
            available: []
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
        for (const [modelId, progress] of this.downloadProgress.entries()) {
            if (progress.stage === 'downloading') {
                status.loading.push({
                    modelId,
                    progress: progress.progress || 0,
                    stage: progress.stage
                });
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        status.available = this.modelsRegistry.getModelIds();

        return status;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –ø–∞–º—è—Ç–∏
     * @param {string} modelId - ID –º–æ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞
     */
    unloadModel(modelId) {
        if (this.loadedModels.has(modelId)) {
            this.loadedModels.delete(modelId);
            this.downloadProgress.delete(modelId);
            console.log(`üóëÔ∏è [ModelManager] –ú–æ–¥–µ–ª—å ${modelId} –≤—ã–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ø–∞–º—è—Ç–∏`);
            return true;
        }
        return false;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ –ø–∞–º—è—Ç–∏
     */
    unloadAllModels() {
        const unloadedCount = this.loadedModels.size;
        this.loadedModels.clear();
        this.downloadProgress.clear();
        console.log(`üóëÔ∏è [ModelManager] –í—ã–≥—Ä—É–∂–µ–Ω–æ ${unloadedCount} –º–æ–¥–µ–ª–µ–π –∏–∑ –ø–∞–º—è—Ç–∏`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π)
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ –∫—ç—à–∞
     */
    getCacheInfo() {
        const loadedModels = Array.from(this.loadedModels.keys()).map(modelId => {
            const config = this.modelsRegistry.getModel(modelId);
            return {
                modelId,
                name: config?.name || 'Unknown',
                modelSize: config?.modelSize || 'Unknown',
                loadedAt: this.downloadProgress.get(modelId)?.loadedAt
            };
        });

        return {
            loadedCount: this.loadedModels.size,
            models: loadedModels,
            totalApproximateSize: loadedModels.reduce((total, model) => {
                const sizeStr = model.modelSize;
                if (sizeStr && sizeStr.includes('MB')) {
                    return total + parseInt(sizeStr.replace('MB', ''));
                }
                return total;
            }, 0) + 'MB'
        };
    }

    /**
     * –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ embedding –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
     * @param {string} modelId - ID –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async testModel(modelId) {
        console.log(`üß™ [ModelManager] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ ${modelId}...`);
        
        try {
            const model = await this.loadEmbeddingModel(modelId);
            const testText = "–¢–µ—Å—Ç–æ–≤—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ embedding-–º–æ–¥–µ–ª–∏";
            
            const startTime = Date.now();
            const embedding = await model(testText, { 
                pooling: 'mean',
                normalize: true 
            });
            const processingTime = Date.now() - startTime;

            const vector = Array.from(embedding.data);
            const dimensions = vector.length;
            
            const testResult = {
                success: true,
                modelId,
                dimensions,
                processingTime,
                vectorSample: vector.slice(0, 5), // –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                testText
            };

            console.log(`‚úÖ [ModelManager] –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ ${modelId} —É—Å–ø–µ—à–µ–Ω:`, testResult);
            return testResult;

        } catch (error) {
            console.error(`‚ùå [ModelManager] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ ${modelId}:`, error);
            return {
                success: false,
                modelId,
                error: error.message
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
     * @param {Object} requirements - –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–æ–¥–µ–ª–∏
     * @returns {Object} –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
     */
    getModelRecommendation(requirements = {}) {
        const {
            language = 'ru',
            priority = 'balanced', // 'speed', 'accuracy', 'balanced'
            textType = 'real_estate' // –¢–∏–ø —Ç–µ–∫—Å—Ç–æ–≤
        } = requirements;

        let recommendedModel;

        if (language === 'ru' || language === 'russian') {
            // –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            switch (priority) {
                case 'speed':
                    recommendedModel = this.modelsRegistry.getModel('all-MiniLM-L6-v2');
                    break;
                case 'accuracy':
                    recommendedModel = this.modelsRegistry.getModel('all-mpnet-base-v2');
                    break;
                default: // 'balanced'
                    recommendedModel = this.modelsRegistry.getModel('paraphrase-multilingual-MiniLM-L12-v2');
            }
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
            recommendedModel = this.modelsRegistry.getModel('all-mpnet-base-v2');
        }

        return {
            recommended: recommendedModel,
            alternatives: this.modelsRegistry.getModelsByRussianSupport().slice(1, 3),
            reasoning: this.getRecommendationReasoning(recommendedModel, priority, language)
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     * @private
     */
    getRecommendationReasoning(model, priority, language) {
        const reasons = [];
        
        if (language === 'ru') {
            reasons.push(`–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${model.russianSupport})`);
        }
        
        switch (priority) {
            case 'speed':
                reasons.push(`–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (${model.avgProcessingTime})`);
                break;
            case 'accuracy':
                reasons.push(`–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (${model.accuracy})`);
                break;
            default:
                reasons.push(`–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏`);
        }

        reasons.push(`–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: ${model.modelSize}`);
        reasons.push(`–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: ${model.dimensions} –∏–∑–º–µ—Ä–µ–Ω–∏–π`);

        return reasons;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = EmbeddingModelManager;
} else {
    window.EmbeddingModelManager = EmbeddingModelManager;
}