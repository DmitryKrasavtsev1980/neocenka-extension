/**
 * AI-—Å–µ—Ä–≤–∏—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 * –ó–∞–º–µ–Ω—è–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –Ω–∞ AI-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–µ–π
 */

class AIDuplicateDetectionService {
    constructor() {
        this.universalAIService = null;
        this.databaseManager = null;
        this.initialized = false;
        this.debugEnabled = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async init() {
        if (this.initialized) return;

        // –ü–æ–ª—É—á–∞–µ–º Universal AI Service
        try {
            this.universalAIService = window.diContainer?.get?.('UniversalAIService') || 
                                    new UniversalAIService();
            if (typeof this.universalAIService.init === 'function') {
                await this.universalAIService.init();
            }
        } catch (error) {
            console.error('‚ùå [AIDuplicateDetection] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UniversalAIService:', error);
            throw error;
        }

        // –ü–æ–ª—É—á–∞–µ–º DatabaseManager
        this.databaseManager = window.db;
        if (!this.databaseManager) {
            throw new Error('DatabaseManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        this.initialized = true;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
     */
    async processDuplicatesWithAI(progressCallback = null, filters = null) {
        if (!this.initialized) await this.init();

        const results = {
            processed: 0,
            merged: 0,
            errors: 0,
            analyzed: 0,
            totalFound: 0
        };

        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π
            const listingsForProcessing = await this.getListingsForDuplicateProcessing(filters);
            
            if (listingsForProcessing.length === 0) {
                return {
                    ...results,
                    message: '–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π'
                };
            }

            results.totalFound = listingsForProcessing.length;

            if (progressCallback) {
                progressCallback({
                    stage: 'grouping',
                    message: `–ù–∞–π–¥–µ–Ω–æ ${listingsForProcessing.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`,
                    progress: 10
                });
            }

            // 2. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∞–¥—Ä–µ—Å–∞–º (–¥—É–±–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —É –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞)
            const addressGroups = await this.groupListingsByAddress(listingsForProcessing);
            
            if (progressCallback) {
                progressCallback({
                    stage: 'analyzing',
                    message: `–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ ${addressGroups.size} –∞–¥—Ä–µ—Å–∞–º`,
                    progress: 20
                });
            }

            let processedGroups = 0;
            const totalGroups = addressGroups.size;

            // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å—É
            for (const [addressId, listings] of addressGroups.entries()) {
                if (listings.length < 2) {
                    // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ - —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –Ω–µ–≥–æ
                    await this.createObjectFromSingleListing(listings[0], addressId);
                    results.processed++;
                    results.merged++;
                } else {
                    // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ –¥—É–±–ª–∏
                    const groupResults = await this.processAddressGroup(listings, addressId);
                    results.processed += groupResults.processed;
                    results.merged += groupResults.merged;
                    results.analyzed += groupResults.analyzed;
                    results.errors += groupResults.errors;
                }

                processedGroups++;
                if (progressCallback) {
                    const progress = 20 + (processedGroups / totalGroups) * 70;
                    progressCallback({
                        stage: 'processing',
                        message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: ${processedGroups}/${totalGroups}`,
                        progress: Math.round(progress)
                    });
                }
            }

            if (progressCallback) {
                progressCallback({
                    stage: 'completed',
                    message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                    progress: 100
                });
            }

            return results;

        } catch (error) {
            console.error('‚ùå [AIDuplicateDetection] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π:', error);
            results.errors++;
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π
     */
    async getListingsForDuplicateProcessing(filters = null) {
        try {
            // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            const allListings = await this.databaseManager.getAll('listings');
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            let candidateListings = allListings.filter(listing => 
                listing.processing_status === 'duplicate_check_needed' && 
                listing.address_id // –£ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥—Ä–µ—Å
            );

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã
            if (filters && (filters.segments?.length > 0 || filters.subsegments?.length > 0)) {
                candidateListings = await this.applySegmentFilters(candidateListings, filters);
            }

            return candidateListings;

        } catch (error) {
            console.error('‚ùå [AIDuplicateDetection] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ CianListingUpdateService)
     */
    async applySegmentFilters(listings, filters) {
        if (!filters || (!filters.segments?.length && !filters.subsegments?.length)) {
            return listings;
        }

        try {
            console.log(`üîç [AIDuplicateDetection] –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: —Å–µ–≥–º–µ–Ω—Ç—ã=${filters.segments?.length || 0}, –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã=${filters.subsegments?.length || 0}`);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∏ —Å–µ–≥–º–µ–Ω—Ç—ã
            const allAddresses = await this.databaseManager.getAll('addresses');
            const allSegments = await this.databaseManager.getAll('segments');
            const allSubsegments = await this.databaseManager.getAll('subsegments');
            
            // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É address_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const addressMap = new Map(allAddresses.map(addr => [addr.id, addr]));
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            let allowedAddressIds = new Set();
            
            if (filters.segments?.length > 0) {
                const selectedSegments = allSegments.filter(seg => filters.segments.includes(seg.id));
                
                for (const segment of selectedSegments) {
                    console.log(`üîç [AIDuplicateDetection] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç: ${segment.name} (${segment.id})`);
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
                    if (segment.filters) {
                        console.log(`üîç [AIDuplicateDetection] –§–∏–ª—å—Ç—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–∞:`, segment.filters);
                        
                        const segmentAddresses = allAddresses.filter(address => {
                            return this.addressMatchesSegmentFilters(address, segment.filters);
                        });
                        
                        console.log(`üîç [AIDuplicateDetection] –ù–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ ${segment.name}: ${segmentAddresses.length}`);
                        segmentAddresses.forEach(addr => allowedAddressIds.add(addr.id));
                    } else {
                        console.log(`‚ö†Ô∏è [AIDuplicateDetection] –£ —Å–µ–≥–º–µ–Ω—Ç–∞ ${segment.name} –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –æ–±–ª–∞—Å—Ç–∏`);
                        allAddresses.forEach(addr => allowedAddressIds.add(addr.id));
                    }
                }
            } else if (filters.subsegments?.length > 0) {
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç—ã, –ø–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏—Ö —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                const selectedSubsegments = allSubsegments.filter(sub => filters.subsegments.includes(sub.id));
                const parentSegmentIds = [...new Set(selectedSubsegments.map(sub => sub.segment_id))];
                const parentSegments = allSegments.filter(seg => parentSegmentIds.includes(seg.id));
                
                for (const segment of parentSegments) {
                    if (segment.filters) {
                        const segmentAddresses = allAddresses.filter(address => {
                            return this.addressMatchesSegmentFilters(address, segment.filters);
                        });
                        segmentAddresses.forEach(addr => allowedAddressIds.add(addr.id));
                    } else {
                        allAddresses.forEach(addr => allowedAddressIds.add(addr.id));
                        break;
                    }
                }
            }
            
            console.log(`üîç [AIDuplicateDetection] –í—Å–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: ${allowedAddressIds.size}`);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º
            const filteredListings = listings.filter(listing => 
                listing.address_id && allowedAddressIds.has(listing.address_id)
            );
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if (filters.subsegments?.length > 0) {
                return this.listingMatchesSubsegmentFilters(filteredListings, filters.subsegments, allAddresses);
            }
            
            return filteredListings;

        } catch (error) {
            console.error(`‚ùå [AIDuplicateDetection] –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:`, error);
            return listings;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–¥—Ä–µ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞–º —Å–µ–≥–º–µ–Ω—Ç–∞ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ CianListingUpdateService)
     */
    addressMatchesSegmentFilters(address, filters) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        if (filters.type && filters.type.length > 0) {
            if (!filters.type.includes(address.type)) return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å –¥–æ–º–∞
        if (filters.house_class_id && filters.house_class_id.length > 0) {
            if (!filters.house_class_id.includes(address.house_class_id)) return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é –¥–æ–º–∞
        if (filters.house_series_id && filters.house_series_id.length > 0) {
            if (!filters.house_series_id.includes(address.house_series_id)) return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω
        if (filters.wall_material_id && filters.wall_material_id.length > 0) {
            if (!filters.wall_material_id.includes(address.wall_material_id)) return false;
        }
        
        return true;
    }

    /**
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–¥—Å–µ–≥–º–µ–Ω—Ç–∞–º (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ CianListingUpdateService)
     */
    listingMatchesSubsegmentFilters(listings, subsegmentIds, allAddresses) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
        return listings;
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å–∞–º
     */
    async groupListingsByAddress(listings) {
        const groups = new Map();

        for (const listing of listings) {
            const addressId = listing.address_id;
            if (!addressId) continue;

            if (!groups.has(addressId)) {
                groups.set(addressId, []);
            }
            groups.get(addressId).push(listing);
        }

        return groups;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async createObjectFromSingleListing(listing, addressId) {
        try {
            if (!window.realEstateObjectManager) {
                throw new Error('RealEstateObjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            const objectId = await window.realEstateObjectManager.mergeIntoObject(
                [{ type: 'listing', id: listing.id }],
                addressId
            );

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
            return {
                objectId: objectId,
                addressId: addressId,
                listings: [listing.id],
                createdAt: new Date()
            };

        } catch (error) {
            console.error(`‚ùå [AIDuplicateDetection] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}:`, error);
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ (–ü–†–ê–í–ò–õ–¨–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú)
     * –õ–æ–≥–∏–∫–∞: "–Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ vs —Å—Ç–∞—Ä—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ"
     */
    async processAddressGroup(listings, addressId) {
        const results = {
            processed: 0,
            merged: 0,
            analyzed: 0,
            errors: 0
        };

        try {
            console.log(`üéØ [AI-–î–£–ë–õ–ò] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞ ${addressId} —Å ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏`);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞) - —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è
            listings.sort((a, b) => new Date(a.created) - new Date(b.created));
            console.log(`üîÑ [AI-–î–£–ë–õ–ò] –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏:`);
            listings.forEach((listing, index) => {
                console.log(`   ${index + 1}. ID: ${listing.id}, –î–∞—Ç–∞: ${listing.created}, –¢–∏–ø: ${listing.property_type}, –≠—Ç–∞–∂: ${listing.floor}`);
            });

            const existingObjects = new Map(); // id –æ–±—ä—è–≤–ª–µ–Ω–∏—è -> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            for (let i = 0; i < listings.length; i++) {
                const newListing = listings[i];  // –¢–µ–∫—É—â–µ–µ "–Ω–æ–≤–æ–µ" –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                
                console.log(`\nüìç [AI-–î–£–ë–õ–ò] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${i + 1}/${listings.length}: ${newListing.id}`);
                console.log(`   –¢–∏–ø: ${newListing.property_type}, –≠—Ç–∞–∂: ${newListing.floor}, –¶–µ–Ω–∞: ${newListing.price}`);
                

                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –°–¢–ê–†–´–ï –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–∏–ª–∏—Å—å –î–û —ç—Ç–æ–≥–æ)
                const olderListings = listings.slice(0, i);
                
                if (olderListings.length === 0) {
                    // –°–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                    console.log(`   ‚úÖ –ü–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç`);
                    const objectInfo = await this.createObjectFromSingleListing(newListing, addressId);
                    // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ processedListings - –æ–Ω–æ –¥–æ–ª–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è—Ö!
                    existingObjects.set(newListing.id, objectInfo);
                    
                    results.processed++;
                    results.merged++;
                    continue;
                }

                console.log(`   üîç –ï—Å—Ç—å ${olderListings.length} —Å—Ç–∞—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è`);
                console.log(`   üìã –¢–ï–ö–£–©–ï–ï –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–º–æ–¥–µ–ª—å):`, {
                    id: newListing.id,
                    property_type: newListing.property_type,
                    floor: newListing.floor,
                    price: newListing.price,
                    area_total: newListing.area_total,
                    rooms: newListing.rooms,
                    created: newListing.created
                });
                
                console.log(`   üìù –°–¢–ê–†–´–ï –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–æ–¥–µ–ª–∏):`);
                olderListings.forEach((listing, idx) => {
                    console.log(`      ${idx + 1}. ID: ${listing.id}, –¢–∏–ø: ${listing.property_type}, –≠—Ç–∞–∂: ${listing.floor}, –¶–µ–Ω–∞: ${listing.price}, –ü–ª–æ—â–∞–¥—å: ${listing.area_total}, –ö–æ–º–Ω–∞—Ç—ã: ${listing.rooms}`);
                });
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (—Ç–∏–ø + —ç—Ç–∞–∂)
                const relevantOlderListings = this.filterRelevantListings(newListing, olderListings);
                console.log(`   üîß –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö: ${relevantOlderListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                
                if (relevantOlderListings.length === 0) {
                    // –ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                    console.log(`   ‚ùå –ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç`);
                    const objectInfo = await this.createObjectFromSingleListing(newListing, addressId);
                    // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ processedListings - –æ–Ω–æ –¥–æ–ª–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è—Ö!
                    existingObjects.set(newListing.id, objectInfo);
                    
                    results.processed++;
                    results.merged++;
                    continue;
                }

                // –ò—â–µ–º –¥—É–±–ª—å —Å—Ä–µ–¥–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                const duplicateFound = await this.findDuplicateAmongOlder(newListing, relevantOlderListings);
                results.analyzed += relevantOlderListings.length;

                if (duplicateFound) {
                    // –ù–∞–π–¥–µ–Ω –¥—É–±–ª—å - –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—ä–µ–∫—Ç–æ–º
                    await this.mergeWithExistingObject(newListing, duplicateFound, addressId, existingObjects);
                    
                    results.processed++;
                    // merged –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º - –æ–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª, –º—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –∫ –Ω–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏–µ

                } else {
                    // –î—É–±–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                    const objectInfo = await this.createObjectFromSingleListing(newListing, addressId);
                    // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ processedListings - –æ–Ω–æ –¥–æ–ª–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è—Ö!
                    existingObjects.set(newListing.id, objectInfo);
                    
                    results.processed++;
                    results.merged++;
                }
            }

            return results;

        } catch (error) {
            console.error(`‚ùå [AIDuplicateDetection] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã –∞–¥—Ä–µ—Å–∞ ${addressId}:`, error);
            results.errors++;
            return results;
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É –∏ —ç—Ç–∞–∂—É
     */
    filterRelevantListings(newListing, olderListings) {
        console.log(`   üîç [–§–ò–õ–¨–¢–†-1] –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è ${newListing.id} (${newListing.property_type}, —ç—Ç–∞–∂ ${newListing.floor})`);
        
        const filtered = olderListings.filter((oldListing, index) => {
            console.log(`      üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º ${index + 1}/${olderListings.length}: ${oldListing.id} (${oldListing.property_type}, —ç—Ç–∞–∂ ${oldListing.floor})`);
            
            // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–≤–∞—Ä—Ç–∏—Ä—ã (property_type –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å)
            if (newListing.property_type !== oldListing.property_type) {
                console.log(`         ‚ùå –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã: "${newListing.property_type}" ‚â† "${oldListing.property_type}"`);
                return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–∂—É (—Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ –±–æ–ª–µ–µ 2 —ç—Ç–∞–∂–µ–π)
            if (!this.isCompatibleFloor(newListing.floor, oldListing.floor)) {
                console.log(`         ‚ùå –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —ç—Ç–∞–∂–∏: ${newListing.floor} –∏ ${oldListing.floor}`);
                return false;
            }

            console.log(`         ‚úÖ –ü–†–û–®–õ–û —Ñ–∏–ª—å—Ç—Ä-1!`);
            return true;
        });

        console.log(`   üéØ [–§–ò–õ–¨–¢–†-1] –†–µ–∑—É–ª—å—Ç–∞—Ç: ${filtered.length}/${olderListings.length} –ø—Ä–æ—à–ª–∏`);
        return filtered;
    }

    // –ú–µ—Ç–æ–¥ isCompatibleRoomType —É–¥–∞–ª–µ–Ω - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º –æ—Ç–∫–ª—é—á–µ–Ω–∞

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —ç—Ç–∞–∂–µ–π
     */
    isCompatibleFloor(floor1, floor2) {
        // –ï—Å–ª–∏ —É –æ–¥–Ω–æ–≥–æ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ —É–∫–∞–∑–∞–Ω —ç—Ç–∞–∂ - —Å—á–∏—Ç–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏
        if (!floor1 || !floor2) {
            return true;
        }

        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —ç—Ç–∞–∂–µ–π
        return floor1 === floor2;
    }

    /**
     * –ü–æ–∏—Å–∫ –¥—É–±–ª—è —Å—Ä–µ–¥–∏ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async findDuplicateAmongOlder(newListing, relevantOlderListings) {
        console.log(`   ü§ñ [AI-–ê–ù–ê–õ–ò–ó] –ò—â–µ–º –¥—É–±–ª–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${newListing.id} —Å—Ä–µ–¥–∏ ${relevantOlderListings.length} —Å—Ç–∞—Ä—ã—Ö`);
        
        for (let j = 0; j < relevantOlderListings.length; j++) {
            const oldListing = relevantOlderListings[j];
            console.log(`\n     üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ ${j + 1}/${relevantOlderListings.length}: ${newListing.id} vs ${oldListing.id}`);
            console.log(`     –ù–æ–≤–æ–µ: ${newListing.property_type}, —ç—Ç–∞–∂ ${newListing.floor}, ${newListing.price}‚ÇΩ`);
            console.log(`     –°—Ç–∞—Ä–æ–µ: ${oldListing.property_type}, —ç—Ç–∞–∂ ${oldListing.floor}, ${oldListing.price}‚ÇΩ`);
            
            try {
                // –£—Ä–æ–≤–µ–Ω—å 2 —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                // const compatible = this.areListingsBasicallyCompatible(newListing, oldListing);
                console.log(`     üîß –ë–∞–∑–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ‚úÖ –ü–†–û–ü–£–©–ï–ù–ê (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)`);
                
                // if (!compatible) {
                //     console.log(`     ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã`);
                //     continue;
                // }

                // AI-–∞–Ω–∞–ª–∏–∑: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–º —Å—Ç–∞—Ä–æ–≥–æ?
                console.log(`     ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ AI-–∞–Ω–∞–ª–∏–∑...`);
                const isDuplicate = await this.compareListingsWithAI(newListing, oldListing);
                console.log(`     üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç AI: ${isDuplicate ? 'üî• –î–£–ë–õ–¨!' : '‚ùå –ù–ï –î–£–ë–õ–¨'}`);

                if (isDuplicate) {
                    console.log(`   ‚úÖ [AI-–ê–ù–ê–õ–ò–ó] –ù–∞–π–¥–µ–Ω –¥—É–±–ª—å! –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${newListing.id} = ${oldListing.id}`);
                    return oldListing; // –ù–∞–π–¥–µ–Ω –¥—É–±–ª—å!
                }

            } catch (error) {
                console.error(`     ‚ùå –û—à–∏–±–∫–∞ AI-—Å—Ä–∞–≤–Ω–µ–Ω–∏—è ${newListing.id} –∏ ${oldListing.id}:`, error);
                continue; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            }
        }

        console.log(`   ‚ùå [AI-–ê–ù–ê–õ–ò–ó] –î—É–±–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${newListing.id}`);
        return null; // –î—É–±–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }

    /**
     * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—ä–µ–∫—Ç–æ–º (–Ω–∞–π–¥–µ–Ω –¥—É–±–ª—å)
     */
    async mergeWithExistingObject(newListing, duplicateOldListing, addressId, existingObjects) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –æ–±—ä–µ–∫—Ç–µ
            const existingObjectInfo = existingObjects.get(duplicateOldListing.id);
            
            // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –≤–∫–ª—é—á–∞—é—â–∏–π –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            // RealEstateObjectManager –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const itemsToMerge = [
                { type: 'listing', id: duplicateOldListing.id },
                { type: 'listing', id: newListing.id }
            ];

            const objectId = await window.realEstateObjectManager.mergeIntoObject(itemsToMerge, addressId);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const updatedObjectInfo = {
                objectId: objectId,
                addressId: addressId,
                listings: [duplicateOldListing.id, newListing.id],
                createdAt: existingObjectInfo?.createdAt || new Date(),
                updatedAt: new Date()
            };

            existingObjects.set(newListing.id, updatedObjectInfo);

            return updatedObjectInfo;

        } catch (error) {
            console.error(`‚ùå [AIDuplicateDetection] –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π ${newListing.id} –∏ ${duplicateOldListing.id}:`, error);
            throw error;
        }
    }

    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI
     */
    async compareListingsWithAI(listing1, listing2) {
        // –£—Ä–æ–≤–µ–Ω—å 2 —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        // if (!this.areListingsBasicallyCompatible(listing1, listing2)) {
        //     return false;
        // }

        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞
            const listingData1 = this.prepareLightListingData(listing1);
            const listingData2 = this.prepareLightListingData(listing2);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
            const prompt = this.buildDuplicateAnalysisPrompt(listingData1, listingData2);
            console.log(`       üìù [AI-–ü–†–û–ú–ü–¢] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç:\n${prompt}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
            const response = await this.universalAIService.sendRequest(prompt);
            console.log(`       ü§ñ [AI-–û–¢–í–ï–¢] –¢–∏–ø –æ—Ç–≤–µ—Ç–∞:`, typeof response);
            console.log(`       ü§ñ [AI-–û–¢–í–ï–¢] –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç:`, response);
            console.log(`       ü§ñ [AI-–û–¢–í–ï–¢] JSON stringify:`, JSON.stringify(response, null, 2));

            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI
            const result = this.parseAIDuplicateResponse(response);
            console.log(`       üîç [AI-–ü–ê–†–°–ò–ù–ì] –†–∞—Å–ø–∞—Ä—Å–∏–ª–∏ –∫–∞–∫: ${result}`);
            return result;

        } catch (error) {
            console.error(`       ‚ùå [AI-–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ${listing1.id} –∏ ${listing2.id}:`, error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –¥—É–±–ª–∏ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
            return false;
        }
    }

    /**
     * –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    areListingsBasicallyCompatible(listing1, listing2) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —É –¥—É–±–ª–µ–π
        
        // –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å
        if (listing1.property_type !== listing2.property_type) {
            return false;
        }
        
        // –ü–ª–æ—â–∞–¥—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 20%
        if (listing1.area_total && listing2.area_total) {
            const areaDiff = Math.abs(listing1.area_total - listing2.area_total) / 
                           Math.max(listing1.area_total, listing2.area_total);
            if (areaDiff > 0.2) return false;
        }

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç —É–±—Ä–∞–Ω–æ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –æ—Å—Ç–∞–≤–ª—è–µ–º AI —Ä–µ—à–∞—Ç—å

        // –≠—Ç–∞–∂ –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 2
        if (listing1.floor && listing2.floor) {
            if (Math.abs(listing1.floor - listing2.floor) > 2) return false;
        }

        // –¶–µ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞
        if (listing1.price && listing2.price) {
            const priceRatio = Math.max(listing1.price, listing2.price) / 
                              Math.min(listing1.price, listing2.price);
            if (priceRatio > 2) return false;
        }

        return true;
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±–ª–µ–≥—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞
     */
    prepareLightListingData(listing) {
        return {
            description: listing.description ? listing.description.substring(0, 500) : null,
            price: listing.price,
            area_total: listing.area_total,
            area_living: listing.area_living,
            area_kitchen: listing.area_kitchen,
            rooms: listing.rooms,
            floor: listing.floor,
            seller_name: listing.seller_name ? listing.seller_name.substring(0, 100) : null,
            updated: listing.updated
        };
    }

    /**
     * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
     */
    buildDuplicateAnalysisPrompt(listing1, listing2) {
        return `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –æ–Ω–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ (–æ–± –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ –æ–±—ä–µ–∫—Ç–µ).

–û–ë–™–Ø–í–õ–ï–ù–ò–ï 1:
${JSON.stringify(listing1, null, 2)}

–û–ë–™–Ø–í–õ–ï–ù–ò–ï 2:
${JSON.stringify(listing2, null, 2)}

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:
1. –û—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–µ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
2. –°—Ö–æ–∂–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–ø–ª–æ—â–∞–¥—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç, —ç—Ç–∞–∂)
3. –ë–ª–∏–∑–∫–∏–µ —Ü–µ–Ω—ã (–º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –∏–∑-–∑–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤)
4. –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–ª–∏ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è/–∑–∞–≥–æ–ª–æ–≤–∫–∏
5. –°–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
6. –°—Ö–æ–∂–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

–£—á—Ç–∏ —á—Ç–æ:
- –î—É–±–ª–∏–∫–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Å —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ (–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
- –¶–µ–Ω—ã –º–æ–≥—É—Ç –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
- –û–ø–∏—Å–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–µ–≥–∫–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã
- –û–¥–∏–Ω –æ–±—ä–µ–∫—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–∏–µ–ª—Ç–æ—Ä–æ–≤

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ "–î–ê" –µ—Å–ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç—ã, –∏–ª–∏ "–ù–ï–¢" –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã. –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
     */
    parseAIDuplicateResponse(response) {
        if (!response) return false;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏
        const text = (response.content || response.toString()).toUpperCase().trim();
        console.log(`       üîç [–ü–ê–†–°–ï–†] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: "${text}"`);
        
        // –ò—â–µ–º —á–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
        if (text.includes('–î–ê') && !text.includes('–ù–ï–¢')) {
            return true;
        }
        
        if (text.includes('–ù–ï–¢') && !text.includes('–î–ê')) {
            return false;
        }

        // –ò—â–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if (text.includes('YES') && !text.includes('NO')) {
            return true;
        }
        
        if (text.includes('NO') && !text.includes('YES')) {
            return false;
        }

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –¥—É–±–ª–∏ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
        return false;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π (—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π)
     */
    async getDuplicateProcessingStats(filters = null) {
        try {
            const allListings = await this.databaseManager.getAll('listings');
            console.log('üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î:', allListings.length);

            // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            const statusAnalysis = {};
            allListings.forEach(listing => {
                const status = listing.processing_status || 'undefined';
                statusAnalysis[status] = (statusAnalysis[status] || 0) + 1;
            });
            console.log('üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:', statusAnalysis);

            // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é –∞–¥—Ä–µ—Å–∞
            let candidateListings = allListings.filter(listing => listing.address_id);
            console.log('üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –û–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∞–¥—Ä–µ—Å–∞–º–∏:', candidateListings.length);

            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            let beforeFilterCount = candidateListings.length;
            if (filters && (filters.segments?.length > 0 || filters.subsegments?.length > 0)) {
                console.log('üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã:', filters);
                candidateListings = await this.applySegmentFilters(candidateListings, filters);
                console.log('üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', candidateListings.length, '–∏–∑', beforeFilterCount);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                if (candidateListings.length === 0 && beforeFilterCount > 0) {
                    console.log('‚ö†Ô∏è [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã! –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—ã...');
                    await this.debugFilteringProcess(allListings.slice(0, 5), filters);
                }
            }

            const stats = {
                total: candidateListings.length,
                needProcessing: candidateListings.filter(l => l.processing_status === 'duplicate_check_needed').length,
                processed: candidateListings.filter(l => l.processing_status === 'processed').length,
                hasObjects: candidateListings.filter(l => l.object_id).length
            };

            stats.efficiency = stats.total > 0 ? Math.round((stats.processed / stats.total) * 100) : 0;

            console.log('üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);

            return stats;

        } catch (error) {
            console.error('‚ùå [AIDuplicateDetection] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    async debugFilteringProcess(sampleListings, filters) {
        console.log('üîç [–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π:');
        
        for (const listing of sampleListings.slice(0, 5)) {
            if (!listing.address_id) {
                console.log(`‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: –ù–ï–¢ –ê–î–†–ï–°–ê`);
                continue;
            }

            try {
                const address = await this.databaseManager.get('addresses', listing.address_id);
                if (!address) {
                    console.log(`‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: –ê–î–†–ï–° –ù–ï –ù–ê–ô–î–ï–ù (${listing.address_id})`);
                    continue;
                }

                console.log(`‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}:`, {
                    address_id: listing.address_id,
                    segment_id: address.segment_id,
                    status: listing.processing_status,
                    filters: filters
                });

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                if (filters.segments?.length > 0) {
                    const segmentMatch = filters.segments.includes(address.segment_id);
                    console.log(`  - –°–µ–≥–º–µ–Ω—Ç ${address.segment_id} –≤ —Ñ–∏–ª—å—Ç—Ä–µ [${filters.segments.join(', ')}]: ${segmentMatch ? '–î–ê' : '–ù–ï–¢'}`);
                }

            } catch (error) {
                console.log(`‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${listing.id}: –û–®–ò–ë–ö–ê`, error.message);
            }
        }
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     * @param {string} addressId - ID –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {Function} progressCallback - Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    async processSingleAddressTest(addressId, progressCallback = null) {
        if (!this.initialized) await this.init();

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ
            const address = await this.databaseManager.get('addresses', addressId);
            if (!address) {
                throw new Error(`–ê–¥—Ä–µ—Å —Å ID ${addressId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            progressCallback?.({
                stage: 'analyzing',
                message: `–ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞: ${address.full_address}`,
                progress: 10
            });

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            const allListingsForAddress = await this.databaseManager.getByIndex('listings', 'address_id', addressId);
            let listingsForProcessing = allListingsForAddress.filter(listing => 
                listing.processing_status === 'duplicate_check_needed'
            );

            console.log(`üéØ [–¢–ï–°–¢] –ù–∞–π–¥–µ–Ω–æ ${listingsForProcessing.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –∞–¥—Ä–µ—Å—É:`, address.full_address);

            if (listingsForProcessing.length < 2) {
                progressCallback?.({
                    stage: 'completed',
                    message: `–ê–¥—Ä–µ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω–µ–µ 2 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥—É–±–ª–µ–π`,
                    progress: 100
                });
                return { processed: 0, merged: 0, errors: 0, analyzed: 0 };
            }

            // –¢–ï–°–¢: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if (listingsForProcessing.length > 5) {
                listingsForProcessing = listingsForProcessing.slice(0, 5);
                console.log(`üî¨ [–¢–ï–°–¢] –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ—Å—Ç –ø–µ—Ä–≤—ã–º–∏ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏`);
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            progressCallback?.({
                stage: 'processing',
                message: `–û–±—Ä–∞–±–æ—Ç–∫–∞ ${listingsForProcessing.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π...`,
                progress: 30
            });

            const result = await this.processAddressGroup(listingsForProcessing, addressId);

            progressCallback?.({
                stage: 'completed',
                message: `–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed}, –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: ${result.merged}`,
                progress: 100
            });

            return result;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞:', error);
            progressCallback?.({
                stage: 'error',
                message: `–û—à–∏–±–∫–∞: ${error.message}`,
                progress: 100
            });
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AIDuplicateDetectionService;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
    window.AIDuplicateDetectionService = AIDuplicateDetectionService;
}