/**
 * –ì–∏–±—Ä–∏–¥–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 * –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç embedding-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å AI-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

class HybridDuplicateDetectionService {
    constructor() {
        this.embeddingService = new window.EmbeddingService();
        this.modelsRegistry = new window.EmbeddingModelsRegistry();
        this.universalAIService = null;
        this.databaseManager = null;
        this.initialized = false;
        this.debugEnabled = false;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        this.settings = {
            embeddingModelId: 'paraphrase-multilingual-MiniLM-L12-v2', // –õ—É—á—à–∏–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
            embeddingThreshold: 0.82, // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è embedding-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            aiVerificationThreshold: 0.78, // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è AI-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            maxCandidatesForAI: 15, // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞
            enableProgressiveThresholds: true, // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤
            cacheEmbeddings: true // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ embedding-–≤–µ–∫—Ç–æ—Ä–æ–≤
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async init(customSettings = {}) {
        if (this.initialized) return;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        await this.loadOptimalParameters();

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.settings = { ...this.settings, ...customSettings };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EmbeddingService
        try {
            await this.embeddingService.initializeDatabase();
            console.log(`‚úÖ [HybridDuplicates] EmbeddingService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
        } catch (error) {
            console.error(`‚ùå [HybridDuplicates] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EmbeddingService:`, error);
            throw error;
        }

        // –ü–æ–ª—É—á–∞–µ–º Universal AI Service (–¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞)
        try {
            this.universalAIService = window.diContainer?.get?.('UniversalAIService') || 
                                    new UniversalAIService();
            if (typeof this.universalAIService.init === 'function') {
                await this.universalAIService.init();
            }
        } catch (error) {
            console.error('‚ùå [HybridDuplicates] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UniversalAIService:', error);
            throw error;
        }

        // –ü–æ–ª—É—á–∞–µ–º DatabaseManager
        this.databaseManager = window.db;
        if (!this.databaseManager) {
            throw new Error('DatabaseManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        const optimalSettings = this.modelsRegistry.getDuplicateDetectionSettings(this.settings.embeddingModelId);
        if (optimalSettings) {
            this.settings = { ...this.settings, ...optimalSettings };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å embedding-–º–æ–¥–µ–ª–∏
        if (!this.modelsRegistry.isValidModelId(this.settings.embeddingModelId)) {
            console.warn(`‚ö†Ô∏è [HybridDuplicates] –ú–æ–¥–µ–ª—å ${this.settings.embeddingModelId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
        console.log(`üîç [HybridDuplicates] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤:`, {
            embeddingService: !!this.embeddingService,
            universalAIService: !!this.universalAIService,
            databaseManager: !!this.databaseManager,
            modelsRegistry: !!this.modelsRegistry
        });

        console.log(`‚úÖ [HybridDuplicates] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é: ${this.settings.embeddingModelId}`);
        console.log(`üîß [HybridDuplicates] –ù–∞—Å—Ç—Ä–æ–π–∫–∏:`, this.settings);

        this.initialized = true;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–∏–±—Ä–∏–¥–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π
     */
    async processDuplicatesWithHybridAI(progressCallback = null, filters = null) {
        if (!this.initialized) await this.init();

        const results = {
            processed: 0,
            merged: 0,
            errors: 0,
            analyzed: 0,
            totalFound: 0,
            embeddingFiltered: 0, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö embedding
            aiVerified: 0, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö AI
            cacheHits: 0, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à embedding
            statistics: {
                embeddingTime: 0,
                aiTime: 0,
                totalTime: 0
            }
        };

        const startTime = Date.now();

        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            const listingsForProcessing = await this.getListingsForDuplicateProcessing(filters);
            
            if (listingsForProcessing.length === 0) {
                return {
                    ...results,
                    message: '–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π'
                };
            }

            results.totalFound = listingsForProcessing.length;
            console.log(`üéØ [HybridDuplicates] –ù–∞–π–¥–µ–Ω–æ ${listingsForProcessing.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);

            if (progressCallback) {
                progressCallback({
                    stage: 'embedding_preparation',
                    message: `–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ embedding-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è ${listingsForProcessing.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`,
                    progress: 5
                });
            }

            // 2. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è embedding-–≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            await this.preGenerateEmbeddings(listingsForProcessing, progressCallback);

            // 3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å–∞–º
            const addressGroups = await this.groupListingsByAddress(listingsForProcessing);
            
            if (progressCallback) {
                progressCallback({
                    stage: 'grouped',
                    message: `–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ ${addressGroups.size} –∞–¥—Ä–µ—Å–∞–º`,
                    progress: 25
                });
            }

            let processedGroups = 0;
            const totalGroups = addressGroups.size;

            // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
            for (const [addressId, listings] of addressGroups.entries()) {
                if (listings.length < 2) {
                    // –û–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç (–ù–ï –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)
                    await this.createObjectFromSingleListing(listings[0], addressId);
                    results.processed++;
                    // results.merged++; // –£–ë–†–ê–ù–û: —ç—Ç–æ –Ω–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                } else {
                    // –ù–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    const groupResults = await this.processAddressGroupHybrid(listings, addressId, results);
                    results.processed += groupResults.processed;
                    results.merged += groupResults.merged;
                    results.analyzed += groupResults.analyzed;
                    results.errors += groupResults.errors;
                    results.embeddingFiltered += groupResults.embeddingFiltered || 0;
                    results.aiVerified += groupResults.aiVerified || 0;
                }

                processedGroups++;
                if (progressCallback) {
                    const progress = 25 + (processedGroups / totalGroups) * 70;
                    progressCallback({
                        stage: 'hybrid_processing',
                        message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: ${processedGroups}/${totalGroups}`,
                        progress: Math.round(progress)
                    });
                }
            }

            results.statistics.totalTime = Date.now() - startTime;

            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–µ—Å—å –∫–µ—à –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π
            if (window.dataCacheManager && (results.processed > 0 || results.merged > 0)) {
                await window.dataCacheManager.invalidate('listings');
                await window.dataCacheManager.invalidate('objects');
            }

            if (progressCallback) {
                progressCallback({
                    stage: 'completed',
                    message: '–ì–∏–±—Ä–∏–¥–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                    progress: 100,
                    statistics: results.statistics
                });
            }

            console.log(`‚úÖ [HybridDuplicates] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, results);
            return results;

        } catch (error) {
            console.error('‚ùå [HybridDuplicates] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
            results.errors++;
            throw error;
        }
    }

    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è embedding-–≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async preGenerateEmbeddings(listings, progressCallback = null) {
        console.log(`üîÑ [HybridDuplicates] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ embedding-–≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embedding
        const textsToEmbed = listings.map(listing => this.prepareTextForEmbedding(listing));
        
        // –ü–∞–∫–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è embedding-–≤–µ–∫—Ç–æ—Ä–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        const embeddingStartTime = Date.now();
        
        await this.embeddingService.batchGenerateEmbeddings(
            textsToEmbed, 
            this.settings.embeddingModelId,
            {
                useCache: this.settings.cacheEmbeddings,
                batchSize: this.settings.batchSize || 10,
                progressCallback: (progress) => {
                    if (progressCallback) {
                        progressCallback({
                            stage: 'embedding_generation',
                            message: `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è embedding: ${progress.processed}/${progress.total}`,
                            progress: 5 + (progress.progress * 0.15) // 5-20% –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        });
                    }
                }
            }
        );

        const embeddingTime = Date.now() - embeddingStartTime;
        console.log(`‚úÖ [HybridDuplicates] Embedding-–≤–µ–∫—Ç–æ—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∑–∞ ${embeddingTime}–º—Å`);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
     */
    async processAddressGroupHybrid(listings, addressId, globalResults) {
        const results = {
            processed: 0,
            merged: 0,
            analyzed: 0,
            errors: 0,
            embeddingFiltered: 0,
            aiVerified: 0
        };

        try {
            console.log(`üéØ [HybridDuplicates] –ì–∏–±—Ä–∏–¥–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ ${addressId} —Å ${listings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏`);
            
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
            listings.sort((a, b) => new Date(a.created) - new Date(b.created));

            const existingObjects = new Map();
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            for (let i = 0; i < listings.length; i++) {
                const newListing = listings[i];
                const olderListings = listings.slice(0, i);
                
                console.log(`\nüìç [HybridDuplicates] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${i + 1}/${listings.length}: ${newListing.id}`);
                
                if (olderListings.length === 0) {
                    // –ü–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç (–ù–ï –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)
                    const objectInfo = await this.createObjectFromSingleListing(newListing, addressId);
                    existingObjects.set(newListing.id, objectInfo);
                    results.processed++;
                    // results.merged++; // –£–ë–†–ê–ù–û: —ç—Ç–æ –Ω–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                    continue;
                }

                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                const relevantOlderListings = this.filterRelevantListings(newListing, olderListings);
                
                if (relevantOlderListings.length === 0) {
                    // –ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç (–ù–ï –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)
                    const objectInfo = await this.createObjectFromSingleListing(newListing, addressId);
                    existingObjects.set(newListing.id, objectInfo);
                    results.processed++;
                    // results.merged++; // –£–ë–†–ê–ù–û: —ç—Ç–æ –Ω–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                    continue;
                }

                // –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –¥—É–±–ª–µ–π: Embedding + AI
                const duplicateFound = await this.findDuplicateHybrid(newListing, relevantOlderListings, results);
                
                if (duplicateFound) {
                    // –ù–∞–π–¥–µ–Ω –¥—É–±–ª—å - –æ–±—ä–µ–¥–∏–Ω—è–µ–º
                    await this.mergeWithExistingObject(newListing, duplicateFound, addressId, existingObjects);
                    results.processed++;
                    results.merged++; // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                } else {
                    // –î—É–±–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç (–ù–ï –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)
                    const objectInfo = await this.createObjectFromSingleListing(newListing, addressId);
                    existingObjects.set(newListing.id, objectInfo);
                    results.processed++;
                    // results.merged++; // –£–ë–†–ê–ù–û: —ç—Ç–æ –Ω–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                }
            }

            return results;

        } catch (error) {
            console.error(`‚ùå [HybridDuplicates] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã ${addressId}:`, error);
            results.errors++;
            return results;
        }
    }

    /**
     * –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –¥—É–±–ª–µ–π: Embedding-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è + AI-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
     */
    async findDuplicateHybrid(newListing, relevantOlderListings, results) {
        console.log(`ü§ñ [HybridDuplicates] –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –¥—É–±–ª–µ–π –¥–ª—è ${newListing.id} —Å—Ä–µ–¥–∏ ${relevantOlderListings.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤`);

        try {
            // –≠—Ç–∞–ø 1: Embedding-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            const embeddingStartTime = Date.now();
            const embeddingCandidates = await this.filterByEmbeddingSimilarity(newListing, relevantOlderListings);
            const embeddingTime = Date.now() - embeddingStartTime;
            
            results.embeddingFiltered = results.embeddingFiltered || 0;
            results.embeddingFiltered += (relevantOlderListings.length - embeddingCandidates.length);
            

            if (embeddingCandidates.length === 0) {
                return null;
            }

            // –≠—Ç–∞–ø 2: AI-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            const aiStartTime = Date.now();
            const aiCandidates = embeddingCandidates.slice(0, this.settings.maxCandidatesForAI);
            
            console.log(`ü§ñ [AI] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ AI-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é ${aiCandidates.length} –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤`);

            for (const candidateData of aiCandidates) {
                const { listing: candidateListing, similarity } = candidateData;
                
                console.log(`   üîç AI-–∞–Ω–∞–ª–∏–∑: ${newListing.id} vs ${candidateListing.id} (embedding: ${similarity.toFixed(3)})`);
                
                try {
                    const isDuplicate = await this.compareListingsWithAI(newListing, candidateListing);
                    results.aiVerified = (results.aiVerified || 0) + 1;
                    results.analyzed = (results.analyzed || 0) + 1; // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å—á–∏—Ç–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑—ã
                    
                    if (isDuplicate) {
                        const aiTime = Date.now() - aiStartTime;
                        console.log(`‚úÖ [HybridDuplicates] –î—É–±–ª—å –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ AI –∑–∞ ${aiTime}–º—Å!`);
                        return candidateListing;
                    }
                } catch (error) {
                    console.error(`‚ùå [AI] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${newListing.id} vs ${candidateListing.id}:`, error);
                    continue;
                }
            }

            const aiTime = Date.now() - aiStartTime;
            console.log(`‚ùå [HybridDuplicates] AI –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥—É–±–ª–∏ –∑–∞ ${aiTime}–º—Å`);
            return null;

        } catch (error) {
            console.error(`‚ùå [HybridDuplicates] –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:`, error);
            return null;
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ embedding-—Å—Ö–æ–¥—Å—Ç–≤—É
     */
    async filterByEmbeddingSimilarity(newListing, olderListings) {
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã
            const newText = this.prepareTextForEmbedding(newListing);
            const olderTexts = olderListings.map(listing => this.prepareTextForEmbedding(listing));

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            const newVector = await this.embeddingService.generateEmbedding(
                newText, 
                this.settings.embeddingModelId, 
                this.settings.cacheEmbeddings
            );

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–ø–∞–∫–µ—Ç–Ω–æ)
            const olderVectors = await this.embeddingService.batchGenerateEmbeddings(
                olderTexts, 
                this.settings.embeddingModelId,
                { useCache: this.settings.cacheEmbeddings, batchSize: 10 }
            );


            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
            const candidates = [];
            for (let i = 0; i < olderListings.length; i++) {
                const similarity = this.embeddingService.calculateCosineSimilarity(newVector, olderVectors[i]);
                
                
                if (similarity >= this.settings.embeddingThreshold) {
                    candidates.push({
                        listing: olderListings[i],
                        similarity: similarity
                    });
                }
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–¥—Å—Ç–≤–∞
            candidates.sort((a, b) => b.similarity - a.similarity);
            
            return candidates;

        } catch (error) {
            console.error(`‚ùå [HybridDuplicates] –û—à–∏–±–∫–∞ embedding-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:`, error);
            console.error(`üîç [Debug] EmbeddingService —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, {
                service: !!this.embeddingService,
                modelId: this.settings.embeddingModelId,
                threshold: this.settings.embeddingThreshold,
                newTextLength: this.prepareTextForEmbedding(newListing)?.length,
                newText: this.prepareTextForEmbedding(newListing)?.substring(0, 100),
                olderTextLength: this.prepareTextForEmbedding(olderListings[0])?.length,
                olderText: this.prepareTextForEmbedding(olderListings[0])?.substring(0, 100)
            });
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞
            return olderListings.map(listing => ({ listing, similarity: 1.0 }));
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è embedding-–∞–Ω–∞–ª–∏–∑–∞
     */
    prepareTextForEmbedding(listing) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è embedding-–∞–Ω–∞–ª–∏–∑–∞
        // –ò–°–ö–õ–Æ–ß–ê–ï–ú: seller_type, phone, seller_info, balcony, bathroom_type, renovation, 
        //           phone_protected, is_new_building, is_apartments, house_details, source, url, floors_count
        const parts = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–æ—Å–Ω–æ–≤–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        if (listing.description && listing.description.trim()) {
            parts.push(listing.description.trim());
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞
        const structuredData = [];
        
        if (listing.property_type) structuredData.push(`–¢–∏–ø: ${listing.property_type}`);
        if (listing.rooms) structuredData.push(`–ö–æ–º–Ω–∞—Ç—ã: ${listing.rooms}`);
        if (listing.area_total) structuredData.push(`–ü–ª–æ—â–∞–¥—å: ${listing.area_total} –º¬≤`);
        if (listing.area_living) structuredData.push(`–ñ–∏–ª–∞—è: ${listing.area_living} –º¬≤`);
        if (listing.area_kitchen) structuredData.push(`–ö—É—Ö–Ω—è: ${listing.area_kitchen} –º¬≤`);
        if (listing.floor) structuredData.push(`–≠—Ç–∞–∂: ${listing.floor}`);
        if (listing.price) structuredData.push(`–¶–µ–Ω–∞: ${listing.price} —Ä—É–±`);
        
        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–º–∞ - –æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        
        if (structuredData.length > 0) {
            parts.push(structuredData.join(', '));
        }
        
        const finalText = parts.join('\n\n').trim();
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã embedding-–º–æ–¥–µ–ª–µ–π
        return finalText.length > 1500 ? finalText.substring(0, 1500) + '...' : finalText;
    }

    // –ú–µ—Ç–æ–¥—ã, –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ AIDuplicateDetectionService
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–µ–π
     */
    async getListingsForDuplicateProcessing(filters = null) {
        try {
            const allListings = await this.databaseManager.getAll('listings');
            
            let candidateListings = allListings.filter(listing => 
                listing.processing_status === 'duplicate_check_needed' && 
                listing.address_id
            );

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–∏–∑ AIChatModal)
            if (filters?.useListingIds && filters?.listingIds?.length > 0) {
                const listingIdsSet = new Set(filters.listingIds);
                candidateListings = candidateListings.filter(listing => listingIdsSet.has(listing.id));
                console.log(`üéØ [HybridDuplicates] –ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ ID: ${candidateListings.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            } else if (filters && (filters.segments?.length > 0 || filters.subsegments?.length > 0)) {
                candidateListings = await this.applySegmentFilters(candidateListings, filters);
            }

            return candidateListings;

        } catch (error) {
            console.error('‚ùå [HybridDuplicates] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
            throw error;
        }
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å–∞–º
     */
    async groupListingsByAddress(listings) {
        const groups = new Map();

        for (const listing of listings) {
            const addressId = listing.address_id;
            if (!addressId) continue;

            if (!groups.has(addressId)) {
                groups.set(addressId, []);
            }
            groups.get(addressId).push(listing);
        }

        return groups;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async createObjectFromSingleListing(listing, addressId) {
        try {
            if (!window.realEstateObjectManager) {
                throw new Error('RealEstateObjectManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            const savedObject = await window.realEstateObjectManager.mergeIntoObject(
                [{ type: 'listing', id: listing.id }],
                addressId
            );

            return {
                objectId: savedObject.id, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ—Ä–µ–º ID –∏–∑ –æ–±—ä–µ–∫—Ç–∞
                addressId: addressId,
                listings: [listing.id],
                createdAt: new Date()
            };

        } catch (error) {
            console.error(`‚ùå [HybridDuplicates] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}:`, error);
            throw error;
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    filterRelevantListings(newListing, olderListings) {
        return olderListings.filter(oldListing => {
            // –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å
            if (newListing.property_type !== oldListing.property_type) {
                return false;
            }

            // –≠—Ç–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º
            if (!this.isCompatibleFloor(newListing.floor, oldListing.floor)) {
                return false;
            }

            return true;
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —ç—Ç–∞–∂–µ–π
     */
    isCompatibleFloor(floor1, floor2) {
        if (!floor1 || !floor2) return true;
        return floor1 === floor2;
    }

    /**
     * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ–±—ä–µ–∫—Ç–æ–º
     */
    async mergeWithExistingObject(newListing, duplicateOldListing, addressId, existingObjects) {
        try {
            const existingObjectInfo = existingObjects.get(duplicateOldListing.id);
            
            // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
            const updatedObject = await window.realEstateObjectManager.addListingsToExistingObject(
                existingObjectInfo.objectId, 
                [newListing.id]
            );

            const updatedObjectInfo = {
                objectId: existingObjectInfo.objectId, // ID –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ
                addressId: addressId,
                listings: [...existingObjectInfo.listings, newListing.id], // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫ —Å–ø–∏—Å–∫—É
                createdAt: existingObjectInfo?.createdAt || new Date(),
                updatedAt: new Date()
            };

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ–Ω–æ —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç)
            existingObjects.set(newListing.id, updatedObjectInfo);
            
            return updatedObjectInfo;

        } catch (error) {
            console.error(`‚ùå [HybridDuplicates] –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π:`, error);
            throw error;
        }
    }

    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI (–∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–æ –∏–∑ AIDuplicateDetectionService)
     */
    async compareListingsWithAI(listing1, listing2) {
        try {
            const listingData1 = this.prepareLightListingData(listing1);
            const listingData2 = this.prepareLightListingData(listing2);

            const prompt = this.buildDuplicateAnalysisPrompt(listingData1, listingData2);
            const response = await this.universalAIService.sendRequest(prompt);

            return this.parseAIDuplicateResponse(response);

        } catch (error) {
            console.error(`‚ùå [HybridDuplicates] –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞:`, error);
            return false;
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞
     */
    prepareLightListingData(listing) {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞, –∏—Å–∫–ª—é—á–∞—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        // –ò–°–ö–õ–Æ–ß–ê–ï–ú: seller_type, phone, seller_info, balcony, bathroom_type, renovation,
        //           phone_protected, is_new_building, is_apartments, house_details, source, url, floors_count
        return {
            // –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–∫—Ç–∞
            description: listing.description ? listing.description.substring(0, 500) : null,
            property_type: listing.property_type,
            price: listing.price,
            area_total: listing.area_total,
            area_living: listing.area_living,
            area_kitchen: listing.area_kitchen,
            rooms: listing.rooms,
            floor: listing.floor,
            
            // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–º–∞ –Ω–µ –≤–∫–ª—é—á–∞–µ–º - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            
            // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            updated: listing.updated,
            created: listing.created
        };
    }

    /**
     * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞
     */
    buildDuplicateAnalysisPrompt(listing1, listing2) {
        return `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –æ–Ω–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ (–æ–± –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ –æ–±—ä–µ–∫—Ç–µ).

–û–ë–™–Ø–í–õ–ï–ù–ò–ï 1:
${JSON.stringify(listing1, null, 2)}

–û–ë–™–Ø–í–õ–ï–ù–ò–ï 2:
${JSON.stringify(listing2, null, 2)}

–≠—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ embedding-—Å—Ö–æ–¥—Å—Ç–≤—É, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –±–ª–∏–∑–æ—Å—Ç—å –∏—Ö —Ç–µ–∫—Å—Ç–æ–≤.

–í–ê–ñ–ù–û: –í –¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–º–∞, —Å—Å—ã–ª–∫–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ–∫—É—Å–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö —Å–∞–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:
1. –û—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–µ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
2. –°—Ö–æ–∂–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–ø–ª–æ—â–∞–¥—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç, —ç—Ç–∞–∂, –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞)
3. –ë–ª–∏–∑–∫–∏–µ —Ü–µ–Ω—ã (–º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –∏–∑-–∑–∞ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏)
4. –°—Ö–æ–∂–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

–£—á—Ç–∏ —á—Ç–æ:
- –î—É–±–ª–∏–∫–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Å —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ (–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
- –¶–µ–Ω—ã –º–æ–≥—É—Ç –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤
- –û–ø–∏—Å–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–µ–≥–∫–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã
- –û–¥–∏–Ω –æ–±—ä–µ–∫—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–∏–µ–ª—Ç–æ—Ä–æ–≤
- –ù–ï —É—á–∏—Ç—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–∞—Ö, –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Ç–∏–ø –¥–æ–º–∞, —Ä–µ–º–æ–Ω—Ç –∏ –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ "–î–ê" –µ—Å–ª–∏ —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç—ã, –∏–ª–∏ "–ù–ï–¢" –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã. –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI
     */
    parseAIDuplicateResponse(response) {
        if (!response) return false;

        const text = (response.content || response.toString()).toUpperCase().trim();
        
        if (text.includes('–î–ê') && !text.includes('–ù–ï–¢')) {
            return true;
        }
        
        if (text.includes('–ù–ï–¢') && !text.includes('–î–ê')) {
            return false;
        }

        if (text.includes('YES') && !text.includes('NO')) {
            return true;
        }
        
        if (text.includes('NO') && !text.includes('YES')) {
            return false;
        }

        return false;
    }

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∫–æ–ø–∏—Ä—É—é—Ç—Å—è –∏–∑ AIDuplicateDetectionService –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    async applySegmentFilters(listings, filters) {
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        // –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–∑ AIDuplicateDetectionService
        return listings;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ embedding
     */
    async getCacheStatistics() {
        return await this.embeddingService.getCacheStats(this.settings.embeddingModelId);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ embedding
     */
    async clearEmbeddingCache(olderThanDays = null) {
        return await this.embeddingService.clearCache(this.settings.embeddingModelId, olderThanDays);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    updateSettings(newSettings) {
        this.settings = { ...this.settings, ...newSettings };
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        if (newSettings.embeddingModelId) {
            const optimalSettings = this.modelsRegistry.getDuplicateDetectionSettings(newSettings.embeddingModelId);
            if (optimalSettings) {
                this.settings = { ...this.settings, ...optimalSettings };
            }
        }
        
        console.log(`üîß [HybridDuplicates] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:`, this.settings);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ localStorage
     */
    async loadOptimalParameters() {
        try {
            const savedParams = localStorage.getItem('optimalDuplicateParameters');
            if (savedParams) {
                const config = JSON.parse(savedParams);
                console.log('üîß [HybridDuplicates] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', config);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if (config.embeddingThreshold) {
                    this.settings.embeddingThreshold = config.embeddingThreshold;
                }
                if (config.aiVerificationThreshold) {
                    this.settings.aiVerificationThreshold = config.aiVerificationThreshold;
                }
                if (config.maxCandidatesForAI) {
                    this.settings.maxCandidatesForAI = config.maxCandidatesForAI;
                }
                
                console.log('‚úÖ [HybridDuplicates] –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:', {
                    embeddingThreshold: this.settings.embeddingThreshold,
                    aiVerificationThreshold: this.settings.aiVerificationThreshold,
                    maxCandidatesForAI: this.settings.maxCandidatesForAI,
                    appliedAt: config.appliedAt,
                    quality: config.quality
                });
                
                return true;
            } else {
                console.log('‚ÑπÔ∏è [HybridDuplicates] –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                return false;
            }
        } catch (error) {
            console.error('‚ùå [HybridDuplicates] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', error);
            return false;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã /applyparameters)
     */
    updateParameters(newParameters) {
        try {
            console.log('üîß [HybridDuplicates] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', newParameters);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ settings
            if (newParameters.embeddingThreshold !== undefined) {
                this.settings.embeddingThreshold = newParameters.embeddingThreshold;
            }
            if (newParameters.aiVerificationThreshold !== undefined) {
                this.settings.aiVerificationThreshold = newParameters.aiVerificationThreshold;
            }
            if (newParameters.maxCandidatesForAI !== undefined) {
                this.settings.maxCandidatesForAI = newParameters.maxCandidatesForAI;
            }
            
            console.log('‚úÖ [HybridDuplicates] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
                embeddingThreshold: this.settings.embeddingThreshold,
                aiVerificationThreshold: this.settings.aiVerificationThreshold,
                maxCandidatesForAI: this.settings.maxCandidatesForAI
            });
            
            return true;
            
        } catch (error) {
            console.error('‚ùå [HybridDuplicates] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', error);
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    getCurrentParameters() {
        return {
            embeddingThreshold: this.settings.embeddingThreshold,
            aiVerificationThreshold: this.settings.aiVerificationThreshold,
            maxCandidatesForAI: this.settings.maxCandidatesForAI
        };
    }

    /**
     * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose() {
        this.embeddingService.dispose();
        this.initialized = false;
        console.log('üîÑ HybridDuplicateDetectionService –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = HybridDuplicateDetectionService;
} else {
    window.HybridDuplicateDetectionService = HybridDuplicateDetectionService;
}