/**
 * –¢–µ—Å—Ç–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ embedding-–º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
 */
class EmbeddingModelTester {
    constructor() {
        this.registry = new window.EmbeddingModelsRegistry();
        this.embeddingService = new window.EmbeddingService();
        this.hybridService = new window.HybridDuplicateDetectionService();
        this.results = new Map(); // modelId -> —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        this.testSampleSize = 50; // –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.dbName = 'neocenka-extension';
        this.testResultsStore = 'model_test_results';
        this.db = null;
        
        console.log('‚úÖ [ModelTester] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è embedding-–º–æ–¥–µ–ª–µ–π');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async initializeDatabase() {
        if (this.db) return;

        const request = indexedDB.open(this.dbName, 18);
        
        request.onupgradeneeded = (event) => {
            const db = event.target.result;
            
            if (!db.objectStoreNames.contains(this.testResultsStore)) {
                const store = db.createObjectStore(this.testResultsStore, { keyPath: 'id' });
                
                store.createIndex('modelId', 'modelId', { unique: false });
                store.createIndex('testDate', 'testDate', { unique: false });
                store.createIndex('accuracy', 'accuracy', { unique: false });
                
                console.log('‚úÖ –°–æ–∑–¥–∞–Ω store –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π');
            }
        };

        return new Promise((resolve, reject) => {
            request.onsuccess = (event) => {
                this.db = event.target.result;
                resolve();
            };
            request.onerror = () => reject(request.error);
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
     * @param {Function} progressCallback - Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     * @param {Object} filters - –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
     */
    async testAllModels(progressCallback = null, filters = null) {
        await this.initializeDatabase();
        
        const models = this.registry.getModelIds();
        const testResults = {};
        
        console.log(`üß™ [ModelTester] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${models.length} –º–æ–¥–µ–ª–µ–π embedding`);
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É
        const testSample = await this.prepareTestSample(filters);
        console.log(`üìä [ModelTester] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: ${testSample.length} –ø–∞—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
        
        for (let i = 0; i < models.length; i++) {
            const modelId = models[i];
            
            if (progressCallback) {
                progressCallback({
                    stage: 'testing_model',
                    currentModel: modelId,
                    modelIndex: i + 1,
                    totalModels: models.length,
                    progress: Math.round((i / models.length) * 100)
                });
            }
            
            console.log(`üîÑ [ModelTester] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ${modelId}`);
            
            try {
                const modelResult = await this.testSingleModel(modelId, testSample, progressCallback);
                testResults[modelId] = modelResult;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await this.saveTestResult(modelId, modelResult);
                
            } catch (error) {
                console.error(`‚ùå [ModelTester] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ ${modelId}:`, error);
                testResults[modelId] = {
                    error: error.message,
                    accuracy: 0,
                    precision: 0,
                    recall: 0,
                    f1Score: 0
                };
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
        const comparison = this.compareModels(testResults);
        
        if (progressCallback) {
            progressCallback({
                stage: 'completed',
                progress: 100,
                bestModel: comparison.bestModel,
                results: testResults
            });
        }
        
        console.log(`‚úÖ [ModelTester] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: ${comparison.bestModel.id}`);
        
        return comparison;
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async prepareTestSample(filters = null) {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const listings = await this.getListingsForTesting(filters);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã + –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç—ã)
        const testPairs = [];
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã)
        const objectGroups = this.groupListingsByObject(listings);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (–¥—É–±–ª–∏–∫–∞—Ç—ã)
        let positivePairs = 0;
        for (const [objectId, objectListings] of objectGroups.entries()) {
            if (objectListings.length > 1 && positivePairs < this.testSampleSize / 2) {
                // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                for (let i = 0; i < objectListings.length - 1; i++) {
                    for (let j = i + 1; j < objectListings.length; j++) {
                        if (positivePairs < this.testSampleSize / 2) {
                            testPairs.push({
                                listing1: objectListings[i],
                                listing2: objectListings[j],
                                isDuplicate: true,
                                source: 'existing_object'
                            });
                            positivePairs++;
                        }
                    }
                }
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (–Ω–µ –¥—É–±–ª–∏–∫–∞—Ç—ã)
        let negativePairs = 0;
        const allListings = Array.from(listings);
        while (negativePairs < this.testSampleSize / 2 && negativePairs < allListings.length * 0.1) {
            const listing1 = allListings[Math.floor(Math.random() * allListings.length)];
            const listing2 = allListings[Math.floor(Math.random() * allListings.length)];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            if (listing1.id !== listing2.id && listing1.object_id !== listing2.object_id) {
                testPairs.push({
                    listing1,
                    listing2,
                    isDuplicate: false,
                    source: 'random_pair'
                });
                negativePairs++;
            }
        }
        
        console.log(`üìä [ModelTester] –°–æ–∑–¥–∞–Ω–æ ${positivePairs} –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ ${negativePairs} –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤`);
        
        return testPairs;
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏
     */
    async testSingleModel(modelId, testSample, progressCallback = null) {
        const startTime = Date.now();
        const results = {
            modelId,
            testDate: new Date(),
            totalTests: testSample.length,
            truePositives: 0,  // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
            falsePositives: 0, // –õ–æ–∂–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã  
            trueNegatives: 0,  // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –Ω–µ-–¥—É–±–ª–∏–∫–∞—Ç—ã
            falseNegatives: 0, // –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
            processingTimes: [],
            similarities: []
        };
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é –º–æ–¥–µ–ª—å
        const originalModel = this.hybridService.settings.embeddingModelId;
        this.hybridService.settings.embeddingModelId = modelId;
        
        for (let i = 0; i < testSample.length; i++) {
            const testPair = testSample[i];
            
            if (progressCallback && i % 10 === 0) {
                progressCallback({
                    stage: 'processing_pair',
                    currentModel: modelId,
                    pairIndex: i + 1,
                    totalPairs: testSample.length,
                    progress: Math.round((i / testSample.length) * 100)
                });
            }
            
            try {
                const pairStartTime = Date.now();
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding –¥–ª—è –æ–±–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                const embedding1 = await this.embeddingService.generateEmbedding(
                    this.prepareTextForEmbedding(testPair.listing1), 
                    modelId
                );
                const embedding2 = await this.embeddingService.generateEmbedding(
                    this.prepareTextForEmbedding(testPair.listing2), 
                    modelId
                );
                
                // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
                const similarity = this.embeddingService.calculateCosineSimilarity(embedding1, embedding2);
                
                const processingTime = Date.now() - pairStartTime;
                results.processingTimes.push(processingTime);
                results.similarities.push({ similarity, actual: testPair.isDuplicate });
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –ø–æ—Ä–æ–≥—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ —Å–∏—Å—Ç–µ–º—ã)
                const predicted = similarity >= this.hybridService.settings.embeddingThreshold;
                const actual = testPair.isDuplicate;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                if (predicted && actual) {
                    results.truePositives++;
                } else if (predicted && !actual) {
                    results.falsePositives++;
                } else if (!predicted && !actual) {
                    results.trueNegatives++;
                } else if (!predicted && actual) {
                    results.falseNegatives++;
                }
                
            } catch (error) {
                console.error(`‚ùå [ModelTester] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã ${i} –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelId}:`, error);
            }
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        this.hybridService.settings.embeddingModelId = originalModel;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        const precision = results.truePositives / (results.truePositives + results.falsePositives) || 0;
        const recall = results.truePositives / (results.truePositives + results.falseNegatives) || 0;
        const accuracy = (results.truePositives + results.trueNegatives) / results.totalTests || 0;
        const f1Score = 2 * (precision * recall) / (precision + recall) || 0;
        
        const avgProcessingTime = results.processingTimes.reduce((a, b) => a + b, 0) / results.processingTimes.length;
        const totalTime = Date.now() - startTime;
        
        return {
            ...results,
            precision: Math.round(precision * 1000) / 1000,
            recall: Math.round(recall * 1000) / 1000,
            accuracy: Math.round(accuracy * 1000) / 1000,
            f1Score: Math.round(f1Score * 1000) / 1000,
            avgProcessingTime: Math.round(avgProcessingTime),
            totalTime,
            threshold: this.hybridService.settings.embeddingThreshold
        };
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è embedding
     */
    prepareTextForEmbedding(listing) {
        const parts = [];
        
        if (listing.description) {
            parts.push(listing.description);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if (listing.rooms) parts.push(`${listing.rooms} –∫–æ–º–Ω–∞—Ç—ã`);
        if (listing.area_total) parts.push(`${listing.area_total}–º¬≤`);
        if (listing.floor) parts.push(`${listing.floor} —ç—Ç–∞–∂`);
        if (listing.property_type) parts.push(listing.property_type);
        
        return parts.join(' ');
    }

    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–π
     */
    compareModels(results) {
        const models = Object.keys(results);
        let bestModel = null;
        let bestScore = -1;
        
        const comparison = {
            models: {},
            ranking: [],
            bestModel: null,
            recommendation: ''
        };
        
        for (const modelId of models) {
            const result = results[modelId];
            
            if (result.error) {
                comparison.models[modelId] = {
                    ...result,
                    overallScore: 0,
                    recommendation: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏'
                };
                continue;
            }
            
            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª (–≤–µ—Å –Ω–∞ F1-score –∏ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏)
            const f1Weight = 0.7;
            const speedWeight = 0.3;
            const maxTime = 200; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            
            const normalizedSpeed = Math.max(0, (maxTime - result.avgProcessingTime) / maxTime);
            const overallScore = (result.f1Score * f1Weight) + (normalizedSpeed * speedWeight);
            
            comparison.models[modelId] = {
                ...result,
                overallScore: Math.round(overallScore * 1000) / 1000,
                recommendation: this.getModelRecommendation(result)
            };
            
            if (overallScore > bestScore) {
                bestScore = overallScore;
                bestModel = {
                    id: modelId,
                    score: overallScore,
                    ...result
                };
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –±–∞–ª–ª—É
        comparison.ranking = models
            .filter(id => !results[id].error)
            .sort((a, b) => comparison.models[b].overallScore - comparison.models[a].overallScore);
        
        comparison.bestModel = bestModel;
        comparison.recommendation = this.generateOverallRecommendation(comparison);
        
        return comparison;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
     */
    getModelRecommendation(result) {
        if (result.f1Score > 0.8 && result.avgProcessingTime < 100) {
            return '–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞';
        } else if (result.f1Score > 0.75) {
            return '–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á';
        } else if (result.avgProcessingTime < 70) {
            return '–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏';
        } else {
            return '–¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤';
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    generateOverallRecommendation(comparison) {
        const best = comparison.bestModel;
        if (!best) return '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª—É—á—à—É—é –º–æ–¥–µ–ª—å';
        
        const modelInfo = this.registry.getModel(best.id);
        return `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å ${modelInfo.name} —Å F1-score ${best.f1Score} –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${best.avgProcessingTime}–º—Å. ${comparison.models[best.id].recommendation}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async getListingsForTesting(filters = null) {
        if (!window.db) {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å object_id)
        const processedListings = await window.db.getByIndex('listings', 'processing_status', 'processed');
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        if (filters) {
            return processedListings.filter(listing => {
                if (filters.addressId && listing.address_id !== filters.addressId) return false;
                if (filters.propertyType && listing.property_type !== filters.propertyType) return false;
                if (filters.minPrice && listing.price < filters.minPrice) return false;
                if (filters.maxPrice && listing.price > filters.maxPrice) return false;
                return true;
            });
        }
        
        return processedListings.slice(0, this.testSampleSize * 10); // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     */
    groupListingsByObject(listings) {
        const groups = new Map();
        
        for (const listing of listings) {
            if (listing.object_id) {
                if (!groups.has(listing.object_id)) {
                    groups.set(listing.object_id, []);
                }
                groups.get(listing.object_id).push(listing);
            }
        }
        
        return groups;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    async saveTestResult(modelId, result) {
        if (!this.db) await this.initializeDatabase();
        
        const testRecord = {
            id: `${modelId}_${Date.now()}`,
            modelId,
            testDate: result.testDate,
            accuracy: result.accuracy,
            precision: result.precision,
            recall: result.recall,
            f1Score: result.f1Score,
            avgProcessingTime: result.avgProcessingTime,
            totalTime: result.totalTime,
            totalTests: result.totalTests,
            threshold: result.threshold
        };
        
        const transaction = this.db.transaction([this.testResultsStore], 'readwrite');
        const store = transaction.objectStore(this.testResultsStore);
        await store.put(testRecord);
        
        console.log(`üíæ [ModelTester] –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelId}`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–∏
     */
    async getTestHistory(modelId = null) {
        if (!this.db) await this.initializeDatabase();
        
        const transaction = this.db.transaction([this.testResultsStore], 'readonly');
        const store = transaction.objectStore(this.testResultsStore);
        
        if (modelId) {
            const index = store.index('modelId');
            return new Promise((resolve) => {
                const request = index.getAll(modelId);
                request.onsuccess = () => resolve(request.result);
                request.onerror = () => resolve([]);
            });
        } else {
            return new Promise((resolve) => {
                const request = store.getAll();
                request.onsuccess = () => resolve(request.result);
                request.onerror = () => resolve([]);
            });
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.EmbeddingModelTester = EmbeddingModelTester;