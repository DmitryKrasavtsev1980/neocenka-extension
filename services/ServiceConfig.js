/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
 */

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 */
async function loadServiceSettings() {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º IndexedDB —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç db, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if (typeof db !== 'undefined' && db.getSetting) {
            // console.log('üìã Loading settings from IndexedDB...');
            
            const inparsToken = await db.getSetting('inpars_api_token') || '';
            const inparsSourceAvito = await db.getSetting('inpars_source_avito');
            const inparsSourceCian = await db.getSetting('inpars_source_cian');
            const avitoDelay = await db.getSetting('parsing_delay_avito') || 30;
            const cianDelay = await db.getSetting('parsing_delay_cian') || 30;
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            const enabledSources = [];
            if (inparsSourceAvito !== false) enabledSources.push('avito'); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
            if (inparsSourceCian !== false) enabledSources.push('cian'); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
            
            // console.log('üîë Loaded inpars token:', inparsToken ? '***set***' : 'not set');
            // console.log('üì° Enabled sources:', enabledSources);
            
            return {
                inparsToken,
                inparsEnabledSources: enabledSources,
                avitoDelay,
                cianDelay
            };
        } 
        else if (typeof chrome !== 'undefined' && chrome.storage) {
            // Fallback –∫ chrome.storage –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            // console.log('üìã Loading settings from chrome.storage...');
            const result = await chrome.storage.local.get([
                'inpars_api_token',
                'inpars_enabled_sources',
                'parsing_delay_avito',
                'parsing_delay_cian'
            ]);
            
            // console.log('üîç Debug chrome.storage result:', result);
            
            return {
                inparsToken: result.inpars_api_token || '',
                inparsEnabledSources: result.inpars_enabled_sources || ['avito', 'cian'],
                avitoDelay: result.parsing_delay_avito || 30,
                cianDelay: result.parsing_delay_cian || 30
            };
        } else {
            // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            // console.log('üìã Using fallback settings...');
            return {
                inparsToken: '',
                inparsEnabledSources: ['avito', 'cian'],
                avitoDelay: 30,
                cianDelay: 30
            };
        }
    } catch (error) {
        console.error('Failed to load service settings:', error);
        return {
            inparsToken: '',
            inparsEnabledSources: ['avito', 'cian'],
            avitoDelay: 30,
            cianDelay: 30
        };
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 */
async function createServiceConfig() {
    const settings = await loadServiceSettings();
    
    // console.log('üîç Debug service config creation:', { inparsToken: settings.inparsToken ? '***set***' : 'empty', inparsEnabledSources: settings.inparsEnabledSources });

    return {
        // –í–Ω–µ—à–Ω–∏–µ API —Å–µ—Ä–≤–∏—Å—ã
        inpars: {
            service: InparsService,
            token: settings.inparsToken,
            enabledSources: settings.inparsEnabledSources,
            rateLimit: {
                requests: 10,
                window: 60000 // 1 –º–∏–Ω—É—Ç–∞
            }
        },
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏)
        neocenkaAPI: {
            service: class NeocenkaAPIService extends BaseAPIService {
                constructor(config) {
                    super({
                        name: 'NeocenkaAPIService',
                        baseURL: 'https://neocenka.ru/api',
                        ...config
                    });
                }
            }
        },
        
        // –ü–∞—Ä—Å–µ—Ä—ã (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ)
        avitoParser: {
            service: class AvitoParserService extends BaseAPIService {
                constructor(config) {
                    super({
                        name: 'AvitoParserService',
                        delay: settings.avitoDelay * 1000,
                        ...config
                    });
                }
            }
        },
        
        cianParser: {
            service: class CianParserService extends BaseAPIService {
                constructor(config) {
                    super({
                        name: 'CianParserService',
                        delay: settings.cianDelay * 1000,
                        ...config
                    });
                }
            }
        }
    };
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ ServiceManager
 */
async function initializeServices() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if (typeof BaseAPIService === 'undefined') {
            throw new Error('BaseAPIService is not available');
        }
        
        if (typeof ServiceManager === 'undefined') {
            throw new Error('ServiceManager is not available');
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const config = await createServiceConfig();
        
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤
        const manager = ServiceManager.fromConfig(config);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupGlobalEventHandlers(manager);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        await manager.initialize();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        setServiceManager(manager);
        
        // console.log('‚úÖ Services initialized successfully');
        return manager;
        
    } catch (error) {
        console.error('‚ùå Failed to initialize services:', error);
        throw error;
    }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupGlobalEventHandlers(manager) {
    // –û–±—â–∏–µ —Å–æ–±—ã—Ç–∏—è
    manager.on('manager:initialized', () => {
        // console.log('üöÄ ServiceManager initialized');
        dispatchGlobalEvent('services:ready', { manager });
    });
    
    manager.on('service:error', ({ service, error }) => {
        console.error(`‚ùå Service '${service}' error:`, error);
        dispatchGlobalEvent('service:error', { service, error });
    });
    
    // –°–æ–±—ã—Ç–∏—è Inpars —Å–µ—Ä–≤–∏—Å–∞
    manager.on('service:initialized', ({ name }) => {
        if (name === 'inpars') {
            // console.log('‚úÖ Inpars service initialized');
            dispatchGlobalEvent('inpars:ready');
        }
    });
    
    // Rate limiting —Å–æ–±—ã—Ç–∏—è
    manager.on('service:request:start', ({ service, url }) => {
        if (service === 'inpars') {
            dispatchGlobalEvent('inpars:request:start', { url });
        }
    });
    
    manager.on('service:request:success', ({ service, data }) => {
        if (service === 'inpars') {
            dispatchGlobalEvent('inpars:request:success', { data });
        }
    });
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
 */
function dispatchGlobalEvent(eventName, detail = {}) {
    if (typeof window !== 'undefined' && window.document) {
        const event = new CustomEvent(eventName, { detail });
        window.document.dispatchEvent(event);
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ (—É–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
 */
function getService(name) {
    try {
        const manager = getServiceManager();
        return manager.getService(name);
    } catch (error) {
        console.error(`Failed to get service '${name}':`, error);
        return null;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 */
function waitForServices(timeout = 10000) {
    return new Promise((resolve, reject) => {
        const timer = setTimeout(() => {
            reject(new Error('Services initialization timeout'));
        }, timeout);
        
        function checkServices() {
            try {
                const manager = getServiceManager();
                if (manager && manager.isInitialized) {
                    clearTimeout(timer);
                    resolve(manager);
                } else {
                    setTimeout(checkServices, 100);
                }
            } catch (error) {
                setTimeout(checkServices, 100);
            }
        }
        
        checkServices();
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–∏—Å–∞
 */
async function updateServiceSettings(serviceName, settings) {
    try {
        const manager = getServiceManager();
        const service = manager.getService(serviceName);
        
        if (serviceName === 'inpars' && service) {
            if (settings.token) {
                service.setToken(settings.token);
            }
            if (settings.enabledSources) {
                service.setEnabledSources(settings.enabledSources);
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if (typeof chrome !== 'undefined' && chrome.storage) {
            const storageData = {};
            
            if (serviceName === 'inpars') {
                if (settings.token) storageData.inpars_api_token = settings.token;
                if (settings.enabledSources) storageData.inpars_enabled_sources = settings.enabledSources;
            }
            
            await chrome.storage.local.set(storageData);
        }
        
        // console.log(`‚úÖ Updated settings for service '${serviceName}'`);
        
    } catch (error) {
        console.error(`‚ùå Failed to update settings for service '${serviceName}':`, error);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        createServiceConfig,
        initializeServices,
        getService,
        waitForServices,
        updateServiceSettings,
        loadServiceSettings
    };
} else {
    // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    window.ServiceConfig = {
        createServiceConfig,
        initializeServices,
        getService,
        waitForServices,
        updateServiceSettings,
        loadServiceSettings
    };
    
    // –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î
}