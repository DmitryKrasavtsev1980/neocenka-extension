/**
 * RealEstateObjectService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
 * –°–ª–µ–¥—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ v0.1 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DI –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
class RealEstateObjectService {
    constructor(database, validationService, errorHandlingService, configService) {
        this.database = database;
        this.validationService = validationService;
        this.errorHandlingService = errorHandlingService;
        this.configService = configService;
        
        // –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        this.objectsCache = new Map();
        this.cacheExpiry = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        
        this.debugEnabled = false;
        this.loadDebugSettings();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
     */
    async loadDebugSettings() {
        try {
            const debugConfig = await this.configService.get('debug.enabled');
            this.debugEnabled = debugConfig === true;
        } catch (error) {
            this.debugEnabled = false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
     */
    async getObjectsBySegment(segmentId, options = {}) {
        console.log('üîç RealEstateObjectService: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞:', segmentId, options);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cacheKey = `segment_${segmentId}`;
        const cached = this.objectsCache.get(cacheKey);
        if (cached && (Date.now() - cached.timestamp) < this.cacheExpiry) {
            console.log('üîç RealEstateObjectService: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞, –æ–±—ä–µ–∫—Ç–æ–≤:', cached.data.length);
            return cached.data;
        }

        if (!window.db) {
            console.error('üîç RealEstateObjectService: window.db –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return [];
        }

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –∏ —Ç–∞–±–ª–∏—Ü–∞ –¥—É–±–ª–µ–π - window.db.getObjectsBySegment()
            console.log('üîç RealEstateObjectService: –í—ã–∑—ã–≤–∞–µ–º window.db.getObjectsBySegment() –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥—É–±–ª–µ–π');
            const objects = await window.db.getObjectsBySegment(segmentId);
            
            console.log('üîç RealEstateObjectService: –ü–æ–ª—É—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ database.js:', objects?.length || 0);
            
            if (!objects || !Array.isArray(objects)) {
                return [];
            }

            // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∞–¥—Ä–µ—Å–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            if (options.includeAddress && objects.length > 0) {
                for (const obj of objects) {
                    if (obj.address_id) {
                        obj.address = await window.db.getAddress(obj.address_id);
                    }
                }
            }

            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.objectsCache.set(cacheKey, {
                data: objects,
                timestamp: Date.now()
            });
            
            return objects;
            
        } catch (error) {
            console.error('üîç RealEstateObjectService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤:', error);
            return [];
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
     */
    filterObjects(objects, filters) {
        if (!objects || objects.length === 0) return [];

        const filtered = objects.filter(obj => {
            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç
            if (filters.rooms && filters.rooms.length > 0) {
                const objRooms = obj.rooms ? obj.rooms.toString() : 'studio';
                const roomsMatch = filters.rooms.some(room => {
                    if (room === 'studio') return objRooms === 'studio' || objRooms === '0';
                    if (room === '4+') return parseInt(objRooms) >= 4;
                    return objRooms === room;
                });
                if (!roomsMatch) return false;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            if (obj.price) {
                if (filters.priceFrom && obj.price < filters.priceFrom) return false;
                if (filters.priceTo && obj.price > filters.priceTo) return false;
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å

            return true;
        });

        if (this.debugEnabled) {
            console.log('üè† RealEstateObjectService: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:', filtered.length);
        }

        return filtered;
    }

    /**
     * –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
     */
    calculateProfitability(object, parameters) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ –º–æ–¥–µ–ª–∏ —Ñ–ª–∏–ø–ø–∏–Ω–≥
        
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - —Å–ª—É—á–∞–π–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç -5% –¥–æ 35%
        const mockProfitability = Math.random() * 40 - 5;
        
        return {
            annualReturn: mockProfitability,
            totalProfit: object.price ? object.price * (mockProfitability / 100) : 0,
            renovationCosts: parameters.renovationType === 'manual' ? 
                (parameters.workCost + parameters.materialsCost) : 
                Math.floor(object.price * 0.15), // 15% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            holdingPeriod: parameters.renovationSpeed * 12, // –≤ –º–µ—Å—è—Ü–∞—Ö
            taxAmount: 0 // –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ–∑–∂–µ
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
     */
    getObjectsStatistics(objects) {
        if (!objects || objects.length === 0) {
            return {
                total: 0,
                averagePrice: 0,
                priceRange: { min: 0, max: 0 },
                roomDistribution: {}
            };
        }

        const prices = objects.map(obj => obj.price || 0).filter(price => price > 0);
        const roomCounts = {};
        
        objects.forEach(obj => {
            const rooms = obj.rooms || 'studio';
            roomCounts[rooms] = (roomCounts[rooms] || 0) + 1;
        });

        return {
            total: objects.length,
            averagePrice: prices.length > 0 ? Math.round(prices.reduce((a, b) => a + b, 0) / prices.length) : 0,
            priceRange: {
                min: prices.length > 0 ? Math.min(...prices) : 0,
                max: prices.length > 0 ? Math.max(...prices) : 0
            },
            roomDistribution: roomCounts
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    clearCache() {
        this.objectsCache.clear();
        if (this.debugEnabled) {
            console.log('üè† RealEstateObjectService: –ö—ç—à –æ—á–∏—â–µ–Ω');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = RealEstateObjectService;
}