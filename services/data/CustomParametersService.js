/**
 * CustomParametersService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã v0.1 –∏ SOLID
 */

class CustomParametersService {
    constructor(database, validationService, configService, errorHandler) {
        this.database = database;
        this.validationService = validationService;
        this.configService = configService;
        this.errorHandler = errorHandler;

        // –ö—ç—à –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.parametersCache = new Map();
        this.cacheTimeouts = new Map();

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        this.cacheConfig = this.configService?.get('performance.cache') || {
            ttl: 300000, // 5 –º–∏–Ω—É—Ç
            maxSize: 100
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.eventHandlers = new Map();

        this.initialize();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async initialize() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            this.limits = this.configService?.getDatabaseLimits() || {
                maxParametersPerObject: 50,
                maxParameterNameLength: 100,
                maxOptionsCount: 50
            };

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞
            this.setupCacheCleanup();

            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            await this.initializeDefaultParameters();

        } catch (error) {
            await this.errorHandler?.handleError(error, {
                service: 'CustomParametersService',
                method: 'initialize'
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    async getParameters(activeOnly = false) {
        try {
            const cacheKey = `parameters_${activeOnly}`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.parametersCache.has(cacheKey)) {
                return this.parametersCache.get(cacheKey);
            }

            let parameters;
            if (activeOnly) {
                parameters = await this.database.getActiveCustomParameters();
                console.log(`üîç CustomParametersService: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${parameters?.length || 0}`, parameters);
            } else {
                parameters = await this.database.getCustomParameters();
                console.log(`üîç CustomParametersService: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${parameters?.length || 0}`, parameters);
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            parameters.sort((a, b) => (a.display_order || 0) - (b.display_order || 0));

            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.setCacheValue(cacheKey, parameters);

            return parameters;

        } catch (error) {
            await this.errorHandler?.handleError(error, {
                service: 'CustomParametersService',
                method: 'getParameters',
                params: { activeOnly }
            });
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ ID
     */
    async getParameter(parameterId) {
        try {
            const cacheKey = `parameter_${parameterId}`;

            if (this.parametersCache.has(cacheKey)) {
                return this.parametersCache.get(cacheKey);
            }

            const parameter = await this.database.getCustomParameter(parameterId);

            if (parameter) {
                this.setCacheValue(cacheKey, parameter);
            }

            return parameter;

        } catch (error) {
            await this.errorHandler?.handleError(error, {
                service: 'CustomParametersService',
                method: 'getParameter',
                params: { parameterId }
            });
            return null;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     */
    async createParameter(parameterData) {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            const validationErrors = await this.validateParameterData(parameterData);
            if (validationErrors.length > 0) {
                throw new Error(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationErrors.join(', ')}`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            const existingCount = (await this.getParameters()).length;
            if (existingCount >= this.limits.maxParametersPerObject) {
                throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${this.limits.maxParametersPerObject}`);
            }

            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            const parameter = new CustomParameterModel({
                ...parameterData,
                display_order: parameterData.display_order || existingCount
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const savedParameter = await this.database.addCustomParameter(parameter);

            // –û—á–∏—â–∞–µ–º –∫—ç—à
            this.invalidateCache();

            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ
            await this.emitEvent('parameterCreated', { parameter: savedParameter });

            return savedParameter;

        } catch (error) {
            await this.errorHandler?.handleError(error, {
                service: 'CustomParametersService',
                method: 'createParameter',
                params: { parameterData }
            });
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     */
    async updateParameter(parameterId, updateData) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            const existingParameter = await this.getParameter(parameterId);
            if (!existingParameter) {
                throw new Error(`–ü–∞—Ä–∞–º–µ—Ç—Ä —Å ID ${parameterId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            const updatedData = { ...existingParameter, ...updateData, id: parameterId };

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const validationErrors = await this.validateParameterData(updatedData);
            if (validationErrors.length > 0) {
                throw new Error(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationErrors.join(', ')}`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const updatedParameter = await this.database.updateCustomParameter(updatedData);

            // –û—á–∏—â–∞–µ–º –∫—ç—à
            this.invalidateCache();

            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ
            await this.emitEvent('parameterUpdated', {
                parameter: updatedParameter,
                oldParameter: existingParameter
            });

            return updatedParameter;

        } catch (error) {
            await this.errorHandler?.handleError(error, {
                service: 'CustomParametersService',
                method: 'updateParameter',
                params: { parameterId, updateData }
            });
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     */
    async deleteParameter(parameterId) {
        try {
            const existingParameter = await this.getParameter(parameterId);
            if (!existingParameter) {
                throw new Error(`–ü–∞—Ä–∞–º–µ—Ç—Ä —Å ID ${parameterId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // –£–¥–∞–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è –∏ –≤—Å–µ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)
            await this.database.deleteCustomParameter(parameterId);

            // –û—á–∏—â–∞–µ–º –∫—ç—à
            this.invalidateCache();

            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ
            await this.emitEvent('parameterDeleted', { parameter: existingParameter });

            return true;

        } catch (error) {
            await this.errorHandler?.handleError(error, {
                service: 'CustomParametersService',
                method: 'deleteParameter',
                params: { parameterId }
            });
            throw error;
        }
    }

    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    async reorderParameters(parameterIds) {
        try {
            const operations = [];

            for (let i = 0; i < parameterIds.length; i++) {
                const parameterId = parameterIds[i];
                const parameter = await this.getParameter(parameterId);

                if (parameter) {
                    parameter.display_order = i;
                    operations.push(this.database.updateCustomParameter(parameter));
                }
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            await Promise.all(operations);

            // –û—á–∏—â–∞–µ–º –∫—ç—à
            this.invalidateCache();

            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ
            await this.emitEvent('parametersReordered', { parameterIds });

            return true;

        } catch (error) {
            await this.errorHandler?.handleError(error, {
                service: 'CustomParametersService',
                method: 'reorderParameters',
                params: { parameterIds }
            });
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ç–∏–ø—É
     */
    async getParametersByType(type) {
        try {
            const allParameters = await this.getParameters(true);
            return allParameters.filter(param => param.type === type);

        } catch (error) {
            await this.errorHandler?.handleError(error, {
                service: 'CustomParametersService',
                method: 'getParametersByType',
                params: { type }
            });
            return [];
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     */
    async validateParameterData(data) {
        const errors = [];

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –±–∞–∑–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const parameter = new CustomParameterModel(data);
        const modelErrors = parameter.validate();
        errors.push(...modelErrors);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if (data.name && data.name.length > this.limits.maxParameterNameLength) {
            errors.push(`–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º ${this.limits.maxParameterNameLength} —Å–∏–º–≤–æ–ª–æ–≤)`);
        }

        if (data.options && data.options.length > this.limits.maxOptionsCount) {
            errors.push(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º ${this.limits.maxOptionsCount})`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
        if (data.name) {
            const existingParameters = await this.getParameters();
            const duplicateName = existingParameters.find(p =>
                p.name.toLowerCase() === data.name.toLowerCase() && p.id !== data.id
            );

            if (duplicateName) {
                errors.push(`–ü–∞—Ä–∞–º–µ—Ç—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${data.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            }
        }

        return errors;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
     */
    async validateParameterValue(parameterId, value) {
        try {
            const parameter = await this.getParameter(parameterId);
            if (!parameter) {
                return ['–ü–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'];
            }

            const valueModel = new ObjectCustomValueModel({
                parameter_id: parameterId,
                value: value
            });

            return valueModel.validateValueByType(parameter);

        } catch (error) {
            await this.errorHandler?.handleError(error, {
                service: 'CustomParametersService',
                method: 'validateParameterValue',
                params: { parameterId, value }
            });
            return ['–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è'];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     */
    async getParametersStats() {
        try {
            return await this.database.getCustomParametersStats();

        } catch (error) {
            await this.errorHandler?.handleError(error, {
                service: 'CustomParametersService',
                method: 'getParametersStats'
            });
            return { total: 0, active: 0, byType: {} };
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    async initializeDefaultParameters() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ë–î
            if (!this.database || !this.database.db) {
                console.log('üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                return;
            }

            const existingParameters = await this.getParameters();
            if (existingParameters.length > 0) {
                return; // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ –µ—Å—Ç—å
            }

            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            const defaultParameters = [
                {
                    name: '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—ä–µ–∑–¥–∞',
                    type: 'rating',
                    validation: { required: false, min: 1, max: 5 },
                    display_order: 0
                },
                {
                    name: '–ì–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞',
                    type: 'date',
                    validation: { required: false },
                    display_order: 1
                },
                {
                    name: '–¢–∏–ø –ø–∞—Ä–∫–æ–≤–∫–∏',
                    type: 'select',
                    options: ['–ù–µ—Ç', '–£–ª–∏—á–Ω–∞—è', '–ü–æ–¥–∑–µ–º–Ω–∞—è', '–ö—Ä—ã—Ç–∞—è'],
                    validation: { required: false },
                    display_order: 2
                },
                {
                    name: '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–º–æ–Ω—Ç',
                    type: 'currency',
                    validation: { required: false, min: 0 },
                    display_order: 3
                },
                {
                    name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏',
                    type: 'textarea',
                    validation: { required: false },
                    display_order: 4
                }
            ];

            for (const paramData of defaultParameters) {
                await this.createParameter(paramData);
            }

        } catch (error) {
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º
     */
    setCacheValue(key, value) {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.cacheTimeouts.has(key)) {
            clearTimeout(this.cacheTimeouts.get(key));
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        this.parametersCache.set(key, value);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        const timeout = setTimeout(() => {
            this.parametersCache.delete(key);
            this.cacheTimeouts.delete(key);
        }, this.cacheConfig.ttl);

        this.cacheTimeouts.set(key, timeout);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if (this.parametersCache.size > this.cacheConfig.maxSize) {
            // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            const keysToDelete = Array.from(this.parametersCache.keys()).slice(0,
                this.parametersCache.size - this.cacheConfig.maxSize + 1);

            keysToDelete.forEach(key => {
                if (this.cacheTimeouts.has(key)) {
                    clearTimeout(this.cacheTimeouts.get(key));
                    this.cacheTimeouts.delete(key);
                }
                this.parametersCache.delete(key);
            });
        }
    }

    invalidateCache() {
        this.parametersCache.clear();
        this.cacheTimeouts.forEach(timeout => clearTimeout(timeout));
        this.cacheTimeouts.clear();
    }

    setupCacheCleanup() {
        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        setInterval(() => {
            const now = Date.now();
            for (const [key, timeout] of this.cacheTimeouts.entries()) {
                if (now - timeout > this.cacheConfig.ttl) {
                    this.parametersCache.delete(key);
                    clearTimeout(timeout);
                    this.cacheTimeouts.delete(key);
                }
            }
        }, 600000); // 10 –º–∏–Ω—É—Ç
    }

    /**
     * –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
     */
    on(event, handler) {
        if (!this.eventHandlers.has(event)) {
            this.eventHandlers.set(event, []);
        }
        this.eventHandlers.get(event).push(handler);
    }

    off(event, handler) {
        if (this.eventHandlers.has(event)) {
            const handlers = this.eventHandlers.get(event);
            const index = handlers.indexOf(handler);
            if (index > -1) {
                handlers.splice(index, 1);
            }
        }
    }

    async emitEvent(event, data) {
        if (this.eventHandlers.has(event)) {
            const handlers = this.eventHandlers.get(event);
            for (const handler of handlers) {
                try {
                    await handler(data);
                } catch (error) {
                    console.warn(`Error in event handler for ${event}:`, error);
                }
            }
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        this.invalidateCache();
        this.eventHandlers.clear();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CustomParametersService;
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ window –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
    window.CustomParametersService = CustomParametersService;
}