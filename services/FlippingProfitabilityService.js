/**
 * FlippingProfitabilityService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–ª–∏–ø–ø–∏–Ω–≥–∞
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 * –°–ª–µ–¥—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ v0.1
 */
class FlippingProfitabilityService {
    constructor(errorHandlingService, configService) {
        this.errorHandlingService = errorHandlingService;
        this.configService = configService;
        
        this.debugEnabled = false;
        this.loadDebugSettings();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–ª–∞–¥–∫–∏
     */
    async loadDebugSettings() {
        try {
            const debugConfig = await this.configService.get('debug.enabled');
            this.debugEnabled = debugConfig === true;
        } catch (error) {
            this.debugEnabled = false;
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ñ–ª–∏–ø–ø–∏–Ω–≥–∞
     * @param {Object} object - –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     * @param {Object} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞
     * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞
     */
    calculateFlippingProfitability(object, params) {
        try {
            if (this.debugEnabled) {
                console.log('üî¢ FlippingProfitabilityService: –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–∞', object.id);
            }

            // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–π —Ç–∞–±–ª–∏—Ü—ã (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
            // if (params && params.debugTaxCalculation) {
            //     console.log('üîç –ù–ê–ß–ê–õ–û –†–ê–°–ß–Å–¢–ê:', { ... });
            // }

            // 1. –†–∞—Å—á—ë—Ç –ø—Ä–æ–¥–∞–∂–Ω–æ–π —Ü–µ–Ω—ã
            const salePrice = params.referencePricePerMeter * object.area_total;
            

            // 2. –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞
            const renovationCost = this.calculateRenovationCost(object.area_total, params);
            
            // –û—Ç–ª–∞–¥–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–º–æ–Ω—Ç–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
            // if (params && params.debugTaxCalculation) {
            //     console.log('üîç –†–ê–°–ß–Å–¢ –†–ï–ú–û–ù–¢–ê:', { ... });
            // }

            // 3. –†–∞—Å—á—ë—Ç —Å—Ä–æ–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
            const renovationDays = object.area_total / params.renovationSpeed;
            const totalProjectDays = renovationDays + params.averageExposureDays;
            const totalProjectMonths = totalProjectDays / 30;
            
            

            // 4. –†–∞—Å—á—ë—Ç –æ–±—â–∏—Ö –∑–∞—Ç—Ä–∞—Ç
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º
            if (params.financing === 'mortgage') {
                if (!params.downPayment || params.downPayment <= 0 || params.downPayment >= 100) {
                    throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: ${params.downPayment}%`);
                }
                if (!params.mortgageRate || params.mortgageRate <= 0) {
                    throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∏–ø–æ—Ç–µ–∫–∏: ${params.mortgageRate}%`);
                }
                if (!params.mortgageTerm || params.mortgageTerm <= 0) {
                    throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ –∏–ø–æ—Ç–µ–∫–∏: ${params.mortgageTerm} –ª–µ—Ç`);
                }
            }
            
            const financingResult = this.calculateFinancingCosts(object.currentPrice, params, totalProjectDays);
            const totalCosts = financingResult.downPayment + renovationCost + params.additionalExpenses + financingResult.interestCosts;

            // 5. –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–æ –Ω–∞–ª–æ–≥–æ–≤
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏ –∏–ø–æ—Ç–µ–∫–µ –≤—ã—á–∏—Ç–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ + –∑–∞—Ç—Ä–∞—Ç—ã, –±–µ–∑ –¥–≤–æ–π–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
            const actualPurchasePrice = object.currentPrice; // –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –æ–±—ä–µ–∫—Ç–∞
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–Ω–µ–≥ –¥–ª—è –Ω–∞–ª–∏—á–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
            const cashCosts = this.calculateCashCosts(object.currentPrice, params, totalProjectMonths);
            
            const operationalCosts = renovationCost + params.additionalExpenses + financingResult.interestCosts + cashCosts;
            const grossProfit = salePrice - actualPurchasePrice - operationalCosts;

            // 6. –†–∞—Å—á—ë—Ç –Ω–∞–ª–æ–≥–æ–≤ - –ø–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞, –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–Ω–µ–≥ –∏–∑ –Ω–∞–ª–æ–≥–æ–æ–±–ª–∞–≥–∞–µ–º–æ–π –±–∞–∑—ã
            const taxes = this.calculateTaxes(object.currentPrice, salePrice, totalCosts, params.taxType, params, renovationCost, cashCosts);
            const netProfit = grossProfit - taxes;

            // 7. –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: ROI —Å—á–∏—Ç–∞–µ–º –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ —Ñ–ª–∏–ø–ø–µ—Ä–∞, –∞ –Ω–µ –æ—Ç –æ–±—â–∏—Ö –∑–∞—Ç—Ä–∞—Ç
            const investedCapital = params.financing === 'mortgage' 
                ? financingResult.downPayment + operationalCosts
                : totalCosts; // –ü—Ä–∏ –Ω–∞–ª–∏–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã
            const roi = (netProfit / investedCapital) * 100;
            const annualROI = (roi / totalProjectMonths) * 12;

            // 8. –†–∞–∑–¥–µ–ª –ø—Ä–∏–±—ã–ª–∏ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            const profitSharing = this.calculateProfitSharing(netProfit, params);

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–Ω—É –æ–±—ä–µ–∫—Ç–∞, –∞ –∑–∞—Ç—Ä–∞—Ç—ã —Ñ–ª–∏–ø–ø–µ—Ä–∞ –ø–µ—Ä–µ–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
            const displayPurchasePrice = object.currentPrice; // –í—Å–µ–≥–¥–∞ –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞
            const actualFlipperCosts = params.financing === 'mortgage' 
                ? financingResult.downPayment + financingResult.interestCosts  // –í–∑–Ω–æ—Å + –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                : object.currentPrice;  // –ü—Ä–∏ –Ω–∞–ª–∏–∫–µ = –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞

            const result = {
                salePrice,
                purchasePrice: displayPurchasePrice, // –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                actualPurchasePrice: object.currentPrice, // –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
                flipperPurchaseCosts: actualFlipperCosts, // –†–µ–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã —Ñ–ª–∏–ø–ø–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
                renovationCost,
                additionalExpenses: params.additionalExpenses,
                financingCosts: financingResult.interestCosts,
                cashCosts, // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–Ω–µ–≥ –¥–ª—è –Ω–∞–ª–∏—á–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
                totalCosts: investedCapital, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª —Ñ–ª–∏–ø–ø–µ—Ä–∞
                grossProfit,
                taxes,
                netProfit,
                roi: Math.round(roi * 100) / 100, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
                annualROI: Math.round(annualROI * 100) / 100,
                totalProjectDays: Math.round(totalProjectDays),
                totalProjectMonths: Math.round(totalProjectMonths * 10) / 10,
                profitSharing,
                financing: financingResult
            };

            if (this.debugEnabled) {
                console.log('üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞:', result);
            }

            return result;

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityService: –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞:', error);
            throw error;
        }
    }

    /**
     * –†–∞—Å—á—ë—Ç —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
     * @param {Object} object - –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ 
     * @param {number} targetROI - —Ü–µ–ª–µ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (% –≥–æ–¥–æ–≤—ã—Ö)
     * @param {Object} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞
     * @returns {number} —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
     */
    calculateTargetPrice(object, targetROI, params) {
        try {
            // –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã
            let minPrice = object.currentPrice * 0.3; // –ú–∏–Ω–∏–º—É–º 30% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            let maxPrice = object.currentPrice * 0.95; // –ú–∞–∫—Å–∏–º—É–º 95% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            let iterations = 0;
            const maxIterations = 15; // –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–±—É–µ—Ç –≥–æ—Ä–∞–∑–¥–æ –º–µ–Ω—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π
            const precision = 0.1; // –¢–æ—á–Ω–æ—Å—Ç—å 0.1%

            while (iterations < maxIterations && (maxPrice - minPrice) > 1000) {
                const testPrice = (minPrice + maxPrice) / 2;
                const testObject = { ...object, currentPrice: testPrice };
                const result = this.calculateFlippingProfitability(testObject, params);

                if (Math.abs(result.annualROI - targetROI) < precision) {
                    return Math.round(testPrice);
                }

                // –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫: —Å—É–∂–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–¥–≤–æ–µ
                if (result.annualROI > targetROI) {
                    minPrice = testPrice; // –ú–æ–∂–µ–º –ø–æ–≤—ã—Å–∏—Ç—å —Ü–µ–Ω—É
                } else {
                    maxPrice = testPrice; // –ù—É–∂–Ω–æ –ø–æ–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É
                }

                iterations++;
            }

            const finalPrice = (minPrice + maxPrice) / 2;
            return Math.round(finalPrice);

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityService: –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã:', error);
            return object.currentPrice;
        }
    }

    /**
     * –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞
     * @param {number} area - –ø–ª–æ—â–∞–¥—å –æ–±—ä–µ–∫—Ç–∞
     * @param {Object} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞
     * @returns {number} —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞
     */
    calculateRenovationCost(area, params) {
        if (params.renovationType === 'auto') {
            // –ó–∞–≥–ª—É—à–∫–∞: 20000 ‚ÇΩ/–º¬≤ —Ä–∞–±–æ—Ç—ã + 20000 ‚ÇΩ/–º¬≤ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            return area * (20000 + 20000);
        } else {
            return area * (params.workCost + params.materialsCost);
        }
    }

    /**
     * –†–∞—Å—á—ë—Ç –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
     * @param {number} purchasePrice - —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
     * @param {Object} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {number} projectDays - —Å—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –¥–Ω—è—Ö
     * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    calculateFinancingCosts(purchasePrice, params, projectDays) {
        if (params.financing === 'cash') {
            return {
                downPayment: purchasePrice,
                loanAmount: 0,
                monthlyPayment: 0,
                interestCosts: 0,
                totalPayments: 0
            };
        } else {
            // –ò–ø–æ—Ç–µ–∫–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (!purchasePrice || purchasePrice <= 0) {
                throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${purchasePrice}`);
            }
            if (!projectDays || projectDays <= 0) {
                throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞: ${projectDays} –¥–Ω–µ–π`);
            }
            
            const downPaymentAmount = purchasePrice * (params.downPayment / 100);
            const loanAmount = purchasePrice - downPaymentAmount;
            const monthlyPayment = this.calculateMortgagePayment(loanAmount, params.mortgageRate, params.mortgageTerm);
            const projectMonths = projectDays / 30;
            const interestCosts = monthlyPayment * projectMonths;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –∑–Ω–∞—á–µ–Ω–∏—è
            if (isNaN(downPaymentAmount) || isNaN(loanAmount) || isNaN(monthlyPayment) || isNaN(interestCosts)) {
                throw new Error(`–ü–æ–ª—É—á–µ–Ω—ã NaN –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –∏–ø–æ—Ç–µ–∫–∏: downPayment=${downPaymentAmount}, loanAmount=${loanAmount}, monthlyPayment=${monthlyPayment}, interestCosts=${interestCosts}`);
            }

            return {
                downPayment: downPaymentAmount,
                loanAmount: loanAmount,
                monthlyPayment: Math.round(monthlyPayment),
                interestCosts: Math.round(interestCosts),
                totalPayments: Math.round(interestCosts),
                projectMonths: Math.round(projectMonths * 10) / 10
            };
        }
    }

    /**
     * –†–∞—Å—á—ë—Ç –∏–ø–æ—Ç–µ—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     * @param {number} loanAmount - —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
     * @param {number} annualRate - –≥–æ–¥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (%)
     * @param {number} years - —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ (–ª–µ—Ç)
     * @returns {number} –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂
     */
    calculateMortgagePayment(loanAmount, annualRate, years) {
        const monthlyRate = annualRate / 100 / 12;
        const totalPayments = years * 12;
        
        if (monthlyRate === 0) return loanAmount / totalPayments;
        
        return (loanAmount * monthlyRate * Math.pow(1 + monthlyRate, totalPayments)) / 
               (Math.pow(1 + monthlyRate, totalPayments) - 1);
    }

    /**
     * –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–µ–Ω–µ–≥ –¥–ª—è –Ω–∞–ª–∏—á–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {number} purchasePrice - —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
     * @param {Object} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞
     * @param {number} projectMonths - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö
     * @returns {number} —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–Ω–µ–≥
     */
    calculateCashCosts(purchasePrice, params, projectMonths) {
        // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–µ–Ω–µ–≥ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
        // if (params.debugTaxCalculation) {
        //     console.log('üîç –°–¢–û–ò–ú–û–°–¢–¨ –î–ï–ù–ï–ì: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', { ... });
        // }
        
        // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–Ω–µ–≥ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–ª–∏—á–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
        if (params.financing !== 'cash' || !params.cashCostRate || params.cashCostRate <= 0) {
            // if (params.debugTaxCalculation) {
            //     console.log('üîç –°–¢–û–ò–ú–û–°–¢–¨ –î–ï–ù–ï–ì: –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è', { ... });
            // }
            return 0;
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–Ω–µ–≥ —Ç–æ–ª—å–∫–æ –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏ (–Ω–µ –≤–∫–ª—é—á–∞—è —Ä–µ–º–æ–Ω—Ç –∏ –¥–æ–ø.—Ä–∞—Å—Ö–æ–¥—ã)
        // –§–æ—Ä–º—É–ª–∞: (—Å—É–º–º–∞ * –ø—Ä–æ—Ü–µ–Ω—Ç –≥–æ–¥–æ–≤—ã—Ö * –º–µ—Å—è—Ü—ã) / 12
        const cashCosts = (purchasePrice * (params.cashCostRate / 100) * projectMonths) / 12;
        
        // if (params.debugTaxCalculation) {
        //     console.log('üîç –°–¢–û–ò–ú–û–°–¢–¨ –î–ï–ù–ï–ì: –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ', { ... });
        // }
        
        return cashCosts;
    }

    /**
     * –†–∞—Å—á—ë—Ç –Ω–∞–ª–æ–≥–æ–≤
     * @param {number} purchasePrice - —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
     * @param {number} salePrice - —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
     * @param {number} totalCosts - –æ–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã
     * @param {string} taxType - —Ç–∏–ø –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è
     * @param {Object} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞
     * @param {number} calculatedRenovationCost - —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞
     * @param {number} cashCosts - —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–Ω–µ–≥ (–Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –Ω–∞–ª–æ–≥–æ–æ–±–ª–∞–≥–∞–µ–º—É—é –±–∞–∑—É)
     * @returns {number} —Å—É–º–º–∞ –Ω–∞–ª–æ–≥–æ–≤
     */
    calculateTaxes(purchasePrice, salePrice, totalCosts, taxType, params, calculatedRenovationCost = 0, cashCosts = 0) {
        // –û—Ç–ª–∞–¥–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Ñ–ª–∞–≥–µ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
        // if (params && params.debugTaxCalculation) {
        //     console.log('üîç –ù–ê–õ–û–ì–ò: –¢–∏–ø –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è:', taxType, '–ü–æ–∫—É–ø–∫–∞:', purchasePrice, '–ü—Ä–æ–¥–∞–∂–∞:', salePrice);
        //     console.log('üîç –°–¢–û–ò–ú–û–°–¢–¨ –†–ï–ú–û–ù–¢–ê:', { ... });
        // }
        
        if (taxType === 'ip') {
            // –ò–ü: 15% —Å (–¥–æ—Ö–æ–¥—ã - —Ä–∞—Å—Ö–æ–¥—ã)
            // –ü—Ä–∏ –∏–ø–æ—Ç–µ–∫–µ –≤ —Ä–∞—Å—Ö–æ–¥—ã –≤–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω—É—é –ø–æ–∫—É–ø–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å + —Ä–µ–º–æ–Ω—Ç + –¥–æ–ø.—Ä–∞—Å—Ö–æ–¥—ã + –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            let deductibleCosts;
            if (params && params.financing === 'mortgage') {
                // –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ + —Ä–µ–º–æ–Ω—Ç + –¥–æ–ø.—Ä–∞—Å—Ö–æ–¥—ã + –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∏–ø–æ—Ç–µ–∫–µ
                const financingResult = this.calculateFinancingCosts(purchasePrice, params, params.totalProjectDays || 62);
                const renovationFromParams = calculatedRenovationCost || params.renovationCost || 0;
                const additionalFromParams = params.additionalExpenses || 0;
                deductibleCosts = purchasePrice + renovationFromParams + additionalFromParams + financingResult.interestCosts;
                
                // –û—Ç–ª–∞–¥–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∫ –≤—ã—á–µ—Ç—É –¥–ª—è –ò–ü (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
                // if (params.debugTaxCalculation) {
                //     console.log('üîç –ò–ü –†–ê–°–•–û–î–´ –ö –í–´–ß–ï–¢–£:', { ... });
                // }
            } else {
                // –ü—Ä–∏ –Ω–∞–ª–∏—á–Ω–æ–º —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–µ–Ω–µ–≥ –∏–∑ –Ω–∞–ª–æ–≥–æ–æ–±–ª–∞–≥–∞–µ–º–æ–π –±–∞–∑—ã
                deductibleCosts = totalCosts - cashCosts;
                
                // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –Ω–∞–ª–∏—á–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω–æ)
                // if (params.debugTaxCalculation) {
                //     console.log('üîç –ò–ü –ù–ê–õ–ò–ß–ù–û–ï –†–ê–°–•–û–î–´ –ö –í–´–ß–ï–¢–£:', { ... });
                // }
            }
            const taxableIncome = salePrice - deductibleCosts;
            const taxAmount = Math.max(0, taxableIncome * 0.15);
            // if (params && params.debugTaxCalculation) {
            //     console.log('üîç –ò–ü: –†–∞—Å—Ö–æ–¥—ã –∫ –≤—ã—á–µ—Ç—É:', deductibleCosts, '–ù–∞–ª–æ–≥–æ–æ–±–ª–∞–≥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥:', taxableIncome, '–ù–∞–ª–æ–≥ 15%:', taxAmount);
            // }
            return taxAmount;
        } else {
            // –§–∏–∑–ª–∏—Ü–æ: –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Å —Ä–∞–∑–Ω–∏—Ü—ã –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏
            const taxableIncome = salePrice - purchasePrice;
            if (taxableIncome <= 0) return 0;
            
            const taxAmount = taxableIncome <= 2400000 
                ? taxableIncome * 0.13
                : (2400000 * 0.13) + ((taxableIncome - 2400000) * 0.15);
            // if (params && params.debugTaxCalculation) {
            //     console.log('üîç –§–ò–ó–õ–ò–¶–û: –ù–∞–ª–æ–≥–æ–æ–±–ª–∞–≥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥:', taxableIncome, '–ù–∞–ª–æ–≥:', taxAmount, '–°—Ç–∞–≤–∫–∞:', taxableIncome <= 2400000 ? '13%' : '13%+15%');
            // }
            return taxAmount;
        }
    }

    /**
     * –†–∞–∑–¥–µ–ª –ø—Ä–∏–±—ã–ª–∏ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
     * @param {number} netProfit - —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å
     * @param {Object} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–¥–µ–ª–∞
     * @returns {Object} —Ä–∞–∑–¥–µ–ª –ø—Ä–∏–±—ã–ª–∏
     */
    calculateProfitSharing(netProfit, params) {
        if (params.participants === 'flipper') {
            return { 
                flipper: netProfit, 
                investor: 0,
                flipperPercent: 100,
                investorPercent: 0
            };
        }

        if (params.profitSharing === 'percentage') {
            const flipperShare = netProfit * (params.flipperPercentage / 100);
            const investorShare = netProfit - flipperShare;
            
            return { 
                flipper: Math.round(flipperShare), 
                investor: Math.round(investorShare),
                flipperPercent: params.flipperPercentage,
                investorPercent: params.investorPercentage
            };
        } else { // fix-plus-percentage
            const flipperFixed = params.fixedPaymentAmount;
            const remainingProfit = netProfit - flipperFixed;
            const flipperPercent = Math.max(0, remainingProfit * (params.fixedPlusPercentage / 100));
            const investorShare = Math.max(0, remainingProfit - flipperPercent);
            
            return {
                flipper: Math.round(flipperFixed + flipperPercent),
                investor: Math.round(investorShare),
                flipperFixed: flipperFixed,
                flipperPercent: params.fixedPlusPercentage,
                remainingProfit: Math.round(remainingProfit)
            };
        }
    }

    /**
     * –†–∞—Å—á—ë—Ç –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–π —Ç–∞–±–ª–∏—Ü—ã (—Å –æ—Ç–ª–∞–¥–∫–æ–π –Ω–∞–ª–æ–≥–æ–≤)
     * @param {Object} object - –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     * @param {Object} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞
     * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–≤—É–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
     */
    calculateBothScenariosForDetails(object, params) {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–π —Ç–∞–±–ª–∏—Ü—ã
            const paramsWithDebug = { ...params, debugTaxCalculation: true };
            
            // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
            const currentPriceResult = this.calculateFlippingProfitability(object, paramsWithDebug);

            // –°—Ü–µ–Ω–∞—Ä–∏–π 2: —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            const targetPrice = this.calculateTargetPrice(object, params.profitabilityPercent, paramsWithDebug);
            const targetObject = { ...object, currentPrice: targetPrice };
            const targetPriceResult = this.calculateFlippingProfitability(targetObject, paramsWithDebug);

            return {
                currentPrice: currentPriceResult,
                targetPrice: {
                    ...targetPriceResult,
                    targetPurchasePrice: targetPrice,
                    discount: Math.round(((object.currentPrice - targetPrice) / object.currentPrice) * 100)
                }
            };

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityService: –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–π —Ç–∞–±–ª–∏—Ü—ã:', error);
            throw error;
        }
    }

    /**
     * –†–∞—Å—á—ë—Ç –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
     * @param {Object} object - –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
     * @param {Object} params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞
     * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–≤—É–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
     */
    calculateBothScenarios(object, params) {
        try {
            // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
            const currentPriceResult = this.calculateFlippingProfitability(object, params);

            // –°—Ü–µ–Ω–∞—Ä–∏–π 2: —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            const targetPrice = this.calculateTargetPrice(object, params.profitabilityPercent, params);
            const targetObject = { ...object, currentPrice: targetPrice };
            const targetPriceResult = this.calculateFlippingProfitability(targetObject, params);

            return {
                currentPrice: currentPriceResult,
                targetPrice: {
                    ...targetPriceResult,
                    targetPurchasePrice: targetPrice,
                    discount: Math.round(((object.currentPrice - targetPrice) / object.currentPrice) * 100)
                }
            };

        } catch (error) {
            console.error('‚ùå FlippingProfitabilityService: –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:', error);
            throw error;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å—É–º–º—ã
     * @param {number} amount - —Å—É–º–º–∞
     * @returns {string} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
     */
    formatCurrency(amount) {
        return new Intl.NumberFormat('ru-RU').format(Math.round(amount)) + ' ‚ÇΩ';
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
     * @param {number} percent - –ø—Ä–æ—Ü–µ–Ω—Ç—ã
     * @param {number} decimals - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
     * @returns {string} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
     */
    formatPercent(percent, decimals = 1) {
        return (Math.round(percent * Math.pow(10, decimals)) / Math.pow(10, decimals)).toFixed(decimals) + '%';
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FlippingProfitabilityService;
}