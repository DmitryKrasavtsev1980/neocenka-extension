/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
 * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ area.html
 */

console.log('üéØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–º–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
if (window.smartAddressMatcher) {
    const matcher = window.smartAddressMatcher;
    
    console.log('üìä –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:', matcher.model);
    console.log('üìö –ü—Ä–∏–º–µ—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏:', matcher.training.examples.length);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    const savedCount = localStorage.getItem('ml_training_count');
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:', savedCount || 0);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –º–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤, –Ω–æ –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞
    if (savedCount && parseInt(savedCount) >= 50) {
        console.log('üîß –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è...');
        
        // –°–æ–∑–¥–∞–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        const count = parseInt(savedCount);
        const positiveCount = Math.ceil(count * 0.7); // 70% –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö
        const negativeCount = count - positiveCount;   // 30% –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö
        
        const trainingExamples = [];
        
        // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        for (let i = 0; i < positiveCount; i++) {
            trainingExamples.push({
                listing: `—É–ª–∏—Ü–∞ –¢–µ—Å—Ç–æ–≤–∞—è, ${i + 1}`,
                candidate: `—É–ª–∏—Ü–∞ –¢–µ—Å—Ç–æ–≤–∞—è, ${i + 1}`,
                isCorrect: true,
                timestamp: Date.now() - i * 1000,
                features: {
                    textualSimilarity: 0.9 + Math.random() * 0.1,
                    semanticSimilarity: 0.8 + Math.random() * 0.2,
                    fuzzyScore: 0.85 + Math.random() * 0.15,
                    lengthRatio: 0.95 + Math.random() * 0.05
                }
            });
        }
        
        // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        for (let i = 0; i < negativeCount; i++) {
            trainingExamples.push({
                listing: `—É–ª–∏—Ü–∞ –¢–µ—Å—Ç–æ–≤–∞—è, ${i + 1}`,
                candidate: `—É–ª–∏—Ü–∞ –î—Ä—É–≥–∞—è, ${i + 100}`,
                isCorrect: false,
                timestamp: Date.now() - (positiveCount + i) * 1000,
                features: {
                    textualSimilarity: 0.1 + Math.random() * 0.3,
                    semanticSimilarity: 0.2 + Math.random() * 0.3,
                    fuzzyScore: 0.15 + Math.random() * 0.25,
                    lengthRatio: 0.3 + Math.random() * 0.4
                }
            });
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤ –ø–∞–º—è—Ç–∏
        matcher.training.examples = trainingExamples;
        
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${trainingExamples.length} –ø—Ä–∏–º–µ—Ä–æ–≤ (${positiveCount} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö, ${negativeCount} –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö)`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('ml_training_examples', JSON.stringify(trainingExamples));
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è...');
        matcher.retrain();
        
        console.log('üéâ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å:', matcher.model);
        
    } else {
        console.log('‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è');
    }
    
} else {
    console.error('‚ùå –£–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ area.html –∏ –∞–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≥—Ä—É–∂–µ–Ω.');
}