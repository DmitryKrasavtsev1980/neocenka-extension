/**
 * ApplicationController - –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Application Controller –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

class ApplicationController {
    constructor() {
        // DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container = null;
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
        this.controllers = new Map();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.state = {
            initialized: false,
            loading: false,
            currentPage: null,
            user: null,
            errors: []
        };
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        this.configService = null;
        this.errorHandler = null;
        this.errorReporter = null;
        this.dataState = null;
        
        // –†–æ—É—Ç–∏–Ω–≥
        this.routes = new Map();
        this.currentRoute = null;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.eventHandlers = new Map();
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.appConfig = this.getDefaultAppConfig();
        
        this.initialize();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultAppConfig() {
        return {
            version: '1.0.0',
            debug: false,
            pages: {
                main: { controller: 'MainController', title: '–ì–ª–∞–≤–Ω–∞—è' },
                area: { controller: 'AreaController', title: '–û–±–ª–∞—Å—Ç–∏' },
                segments: { controller: 'SegmentController', title: '–°–µ–≥–º–µ–Ω—Ç—ã' },
                settings: { controller: 'SettingsController', title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' }
            },
            services: {
                autoStart: true,
                healthCheck: true
            }
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
     */
    async initialize() {
        try {
            this.state.loading = true;
            this.emit('app:loading-start');

            // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            await this.setupDIContainer();
            
            // 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            await this.registerServices();
            
            // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            await this.initializeServices();
            
            // 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
            await this.setupControllers();
            
            // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—É—Ç–∏–Ω–≥
            this.setupRouting();
            
            // 6. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupGlobalEventHandlers();
            
            // 7. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.loadInitialData();
            
            this.state.initialized = true;
            this.state.loading = false;
            
            this.emit('app:initialized');
            // console.log('üöÄ ApplicationController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (SegmentTable –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ legacy –∫–æ–¥–∞)');

        } catch (error) {
            this.state.loading = false;
            await this.handleInitializationError(error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     */
    async setupDIContainer() {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if (typeof diContainer !== 'undefined') {
            this.container = diContainer;
        } else if (typeof DIContainer !== 'undefined') {
            this.container = new DIContainer();
        } else {
            throw new Error('DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
     */
    async registerServices() {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–∞–Ω–Ω—ã—Ö
        this.container.registerFactory('SegmentService', (container) => {
            return new SegmentService(
                container.get('Database'),
                container.get('ValidationService'),
                container.get('ConfigService'),
                container.get('ErrorHandlingService')
            );
        }, { singleton: true, dependencies: ['Database', 'ValidationService', 'ConfigService', 'ErrorHandlingService'] });

        this.container.registerFactory('ReferenceDataService', (container) => {
            return new ReferenceDataService(
                container.get('Database'),
                container.get('ConfigService'),
                container.get('ErrorHandlingService')
            );
        }, { singleton: true, dependencies: ['Database', 'ConfigService', 'ErrorHandlingService'] });

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.container.registerFactory('SegmentModal', (container) => {
            return new SegmentModal(
                container.get('ValidationService'),
                container.get('ConfigService')
            );
        }, { singleton: true, dependencies: ['ValidationService', 'ConfigService'] });

        // SegmentTable –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è legacy –≤–µ—Ä—Å–∏—è –∏–∑ SegmentsManager
        /*
        this.container.registerFactory('SegmentTable', (container) => {
            return new SegmentTable(
                container.get('ConfigService'),
                container.get('ErrorHandlingService')
            );
        }, { singleton: true, dependencies: ['ConfigService', 'ErrorHandlingService'] });
        */

        this.container.registerFactory('SegmentChart', (container) => {
            return new SegmentChart(
                container.get('ConfigService'),
                container.get('ErrorHandlingService')
            );
        }, { singleton: true, dependencies: ['ConfigService', 'ErrorHandlingService'] });

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞—Ä—Ç—ã
        this.container.registerFactory('MapRenderer', (container) => {
            return new MapRenderer(
                container.get('ConfigService'),
                container.get('ErrorHandlingService')
            );
        }, { singleton: true, dependencies: ['ConfigService', 'ErrorHandlingService'] });

        this.container.registerFactory('MarkerManager', (container) => {
            return new MarkerManager(
                container.get('MapRenderer'),
                container.get('ConfigService'),
                container.get('ErrorHandlingService')
            );
        }, { singleton: true, dependencies: ['MapRenderer', 'ConfigService', 'ErrorHandlingService'] });

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º GlobalErrorReporter
        this.container.registerFactory('GlobalErrorReporter', (container) => {
            return new GlobalErrorReporter(
                container.get('ErrorHandlingService'),
                container.get('ConfigService')
            );
        }, { singleton: true, dependencies: ['ErrorHandlingService', 'ConfigService'] });

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ñ–ª–∏–ø–ø–∏–Ω–≥-–æ—Ç—á—ë—Ç–∞
        this.container.registerFactory('RealEstateObjectService', (container) => {
            const database = window.db;
            const validationService = container.get('ValidationService');
            const errorHandlingService = container.get('ErrorHandlingService');
            const configService = container.get('ConfigService');
            
            return new RealEstateObjectService(database, validationService, errorHandlingService, configService);
        }, { singleton: true, dependencies: ['ValidationService', 'ErrorHandlingService', 'ConfigService'] });

        this.container.registerFactory('FlippingController', async (container) => {
            const flippingController = new FlippingController(container);
            await flippingController.initialize();
            return flippingController;
        }, { singleton: true, dependencies: ['RealEstateObjectService'] });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    async initializeServices() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            await this.container.initialize();
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            this.configService = this.container.get('ConfigService');
            this.errorHandler = this.container.get('ErrorHandlingService');
            this.errorReporter = this.container.get('GlobalErrorReporter');
            this.dataState = this.container.get('DataState');
            
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: ${error.message}`);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
     */
    async setupControllers() {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
        await this.registerControllers();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
        for (const [name, controller] of this.controllers) {
            if (typeof controller.initialize === 'function') {
                await controller.initialize();
            }
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
     */
    safeGetService(serviceName) {
        try {
            return this.container.get(serviceName);
        } catch (error) {
            console.warn(`‚ö†Ô∏è –°–µ—Ä–≤–∏—Å ${serviceName} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
            return null;
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
     */
    async registerControllers() {
        // SegmentController - —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        try {
            this.controllers.set('SegmentController', new SegmentController({
                segmentService: this.container.get('SegmentService'),
                referenceDataService: this.container.get('ReferenceDataService'),
                validationService: this.container.get('ValidationService'),
                configService: this.configService,
                errorHandler: this.errorHandler,
                dataState: this.dataState,
                segmentModal: this.safeGetService('SegmentModal'),
                // segmentTable: this.safeGetService('SegmentTable'), // –û—Ç–∫–ª—é—á—ë–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è legacy –≤–µ—Ä—Å–∏—è
                segmentChart: this.safeGetService('SegmentChart'),
                mapRenderer: this.safeGetService('MapRenderer'),
                markerManager: this.safeGetService('MarkerManager')
            }));
        } catch (error) {
            console.warn('‚ö†Ô∏è SegmentController –Ω–µ —Å–æ–∑–¥–∞–Ω:', error.message);
        }

        // MapController - —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        try {
            this.controllers.set('MapController', new MapController({
                configService: this.configService,
                errorHandler: this.errorHandler,
                dataState: this.dataState,
                mapRenderer: this.safeGetService('MapRenderer'),
                markerManager: this.safeGetService('MarkerManager')
            }));
        } catch (error) {
            console.warn('‚ö†Ô∏è MapController –Ω–µ —Å–æ–∑–¥–∞–Ω:', error.message);
        }

        // –î–µ–ª–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        if (typeof window !== 'undefined') {
            window.segmentController = this.controllers.get('SegmentController');
            window.mapController = this.controllers.get('MapController');
            window.appController = this;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–∏–Ω–≥–∞
     */
    setupRouting() {
        // –ü—Ä–æ—Å—Ç–æ–π —Ä–æ—É—Ç–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ hash
        this.routes.set('main', {
            path: '#main',
            controller: 'SegmentController',
            title: '–ì–ª–∞–≤–Ω–∞—è'
        });
        
        this.routes.set('area', {
            path: '#area', 
            controller: 'MapController',
            title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç—è–º–∏'
        });
        
        this.routes.set('segments', {
            path: '#segments',
            controller: 'SegmentController', 
            title: '–°–µ–≥–º–µ–Ω—Ç—ã'
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è hash
        window.addEventListener('hashchange', () => {
            this.handleRouteChange();
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–æ—É—Ç–∞
        this.handleRouteChange();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ—É—Ç–∞
     */
    handleRouteChange() {
        const hash = window.location.hash || '#main';
        const route = Array.from(this.routes.values()).find(r => r.path === hash);
        
        if (route) {
            this.navigateToRoute(route);
        } else {
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–æ—É—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            this.navigate('main');
        }
    }

    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ä–æ—É—Ç—É
     */
    async navigateToRoute(route) {
        try {
            this.currentRoute = route;
            this.state.currentPage = route.controller;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (route.title) {
                document.title = `${route.title} - Neocenka Extension`;
            }
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            const controller = this.controllers.get(route.controller);
            if (controller && typeof controller.activate === 'function') {
                await controller.activate();
            }
            
            this.emit('route:changed', { route, controller: route.controller });
            
        } catch (error) {
            await this.errorHandler.handleError(error, {
                context: 'navigation',
                route: route.path
            });
        }
    }

    /**
     * –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
     */
    navigate(routeName, params = {}) {
        const route = this.routes.get(routeName);
        if (route) {
            let path = route.path;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if (Object.keys(params).length > 0) {
                const searchParams = new URLSearchParams(params);
                path += '?' + searchParams.toString();
            }
            
            window.location.hash = path.substring(1); // –£–±–∏—Ä–∞–µ–º #
        } else {
            console.warn(`–†–æ—É—Ç '${routeName}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupGlobalEventHandlers() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        document.addEventListener('keydown', (e) => {
            this.handleGlobalKeydown(e);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.addEventListener('controller:error', (data) => {
            this.handleControllerError(data);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        this.dataState.subscribe('*', (key, newValue, oldValue) => {
            this.emit('data:changed', { key, newValue, oldValue });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
        this.controllers.forEach((controller, name) => {
            if (typeof controller.addEventListener === 'function') {
                controller.addEventListener('*', (eventType, data) => {
                    this.emit(`controller:${name.toLowerCase()}:${eventType}`, data);
                });
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
     */
    handleGlobalKeydown(e) {
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA' || e.target.contentEditable === 'true') {
            return;
        }

        // –°–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å Ctrl/Cmd
        if (e.ctrlKey || e.metaKey) {
            switch (e.key) {
                case '1':
                    e.preventDefault();
                    this.navigate('main');
                    break;
                case '2':
                    e.preventDefault();
                    this.navigate('area');
                    break;
                case '3':
                    e.preventDefault();
                    this.navigate('segments');
                    break;
                case '/':
                    e.preventDefault();
                    this.focusSearch();
                    break;
            }
        }

        // –°–æ–∫—Ä–∞—â–µ–Ω–∏—è –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        switch (e.key) {
            case 'Escape':
                this.handleEscapeKey();
                break;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadInitialData() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await this.loadConfiguration();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.loadUserData();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.loadReferenceData();
            
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async loadConfiguration() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ localStorage –∏–ª–∏ chrome.storage
        if (typeof chrome !== 'undefined' && chrome.storage) {
            const result = await chrome.storage.local.get('appConfig');
            if (result.appConfig) {
                this.appConfig = { ...this.appConfig, ...result.appConfig };
            }
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ —Å–µ—Ä–≤–∏—Å–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º set –≤–º–µ—Å—Ç–æ setState)
        this.configService.set('app', this.appConfig);
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadUserData() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        this.state.user = {
            id: 'user_' + Date.now(),
            preferences: {},
            lastActivity: new Date()
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async loadReferenceData() {
        try {
            const referenceService = this.container.get('ReferenceDataService');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            const referenceTypes = ['house_series', 'house_classes', 'wall_materials'];
            const referenceData = {};
            
            for (const type of referenceTypes) {
                referenceData[type] = await referenceService.getAll(type);
            }
            
            this.dataState.setState('referenceData', referenceData);
            
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    async handleInitializationError(error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ApplicationController:', error);
        
        this.state.errors.push({
            type: 'initialization',
            message: error.message,
            timestamp: new Date(),
            critical: true
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        this.showCriticalError(error);
        
        this.emit('app:initialization-error', { error });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
     */
    async handleControllerError(data) {
        const { controller, error, context } = data;
        
        await this.errorHandler.handleError(error, {
            ...context,
            source: 'ApplicationController',
            controller: controller
        });
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
     */
    showCriticalError(error) {
        const errorElement = document.createElement('div');
        errorElement.className = 'critical-error-overlay';
        errorElement.innerHTML = `
            <div class="critical-error-content">
                <h2>‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h2>
                <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</p>
                <pre class="error-details">${error.message}</pre>
                <div class="error-actions">
                    <button onclick="location.reload()" class="btn btn-primary">
                        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    </button>
                    <button onclick="this.parentElement.parentElement.parentElement.remove()" class="btn btn-secondary">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(errorElement);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape
     */
    handleEscapeKey() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω, –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
        this.emit('global:escape');
    }

    /**
     * –§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫
     */
    focusSearch() {
        const searchInput = document.querySelector('[data-role="search"], input[type="search"], .search-input');
        if (searchInput) {
            searchInput.focus();
        }
    }

    /**
     * –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
     */
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    getApplicationState() {
        return {
            ...this.state,
            controllers: Array.from(this.controllers.keys()),
            services: this.container?.getRegisteredServices() || [],
            currentRoute: this.currentRoute,
            health: this.errorReporter?.getSystemHealth() || null
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
     */
    getController(name) {
        return this.controllers.get(name);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
     */
    getService(name) {
        return this.container?.get(name);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async updateConfiguration(updates) {
        this.appConfig = { ...this.appConfig, ...updates };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        if (typeof chrome !== 'undefined' && chrome.storage) {
            await chrome.storage.local.set({ appConfig: this.appConfig });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–µ—Ä–≤–∏—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        this.configService.setState('app', this.appConfig);
        
        this.emit('config:updated', { config: this.appConfig });
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async restart() {
        try {
            this.emit('app:restart-start');
            
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
            for (const [name, controller] of this.controllers) {
                if (typeof controller.destroy === 'function') {
                    controller.destroy();
                }
            }
            this.controllers.clear();
            
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if (this.container && typeof this.container.destroy === 'function') {
                this.container.destroy();
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.state = {
                initialized: false,
                loading: false,
                currentPage: null,
                user: null,
                errors: []
            };
            
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            await this.initialize();
            
            this.emit('app:restart-complete');
            
        } catch (error) {
            await this.handleInitializationError(error);
        }
    }

    // === –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô ===

    addEventListener(eventType, handler) {
        if (!this.eventHandlers.has(eventType)) {
            this.eventHandlers.set(eventType, []);
        }
        this.eventHandlers.get(eventType).push(handler);
    }

    removeEventListener(eventType, handler) {
        if (this.eventHandlers.has(eventType)) {
            const handlers = this.eventHandlers.get(eventType);
            const index = handlers.indexOf(handler);
            if (index > -1) {
                handlers.splice(index, 1);
            }
        }
    }

    emit(eventType, data = {}) {
        if (this.eventHandlers.has(eventType)) {
            this.eventHandlers.get(eventType).forEach(handler => {
                try {
                    handler(data);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${eventType}:`, error);
                }
            });
        }
    }

    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async shutdown() {
        try {
            this.emit('app:shutdown-start');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await this.saveApplicationState();
            
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
            for (const [name, controller] of this.controllers) {
                if (typeof controller.destroy === 'function') {
                    controller.destroy();
                }
            }
            
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            if (this.container && typeof this.container.destroy === 'function') {
                this.container.destroy();
            }
            
            // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.eventHandlers.clear();
            
            this.emit('app:shutdown-complete');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async saveApplicationState() {
        try {
            const stateToSave = {
                lastRoute: this.currentRoute?.path,
                timestamp: Date.now(),
                userPreferences: this.state.user?.preferences
            };
            
            if (typeof chrome !== 'undefined' && chrome.storage) {
                await chrome.storage.local.set({ applicationState: stateToSave });
            }
            
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        }
    }
}

// –°–æ–∑–¥–∞—ë–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const applicationController = new ApplicationController();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { ApplicationController, applicationController };
} else {
    window.ApplicationController = ApplicationController;
    window.applicationController = applicationController;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    applicationController.shutdown();
});