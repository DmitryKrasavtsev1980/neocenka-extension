/**
 * Web Worker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Transformers.js embedding –º–æ–¥–µ–ª—è–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ES6 modules –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ worker'–∞
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Transformers.js –∏–∑ CDN (–≤ worker –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏ CSP)
import { pipeline, env } from 'https://cdn.jsdelivr.net/npm/@xenova/transformers@2.17.1/dist/transformers.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Chrome Extension
env.allowRemoteModels = true;
env.allowLocalModels = false;

// –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
const modelCache = new Map();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
self.onmessage = async function(e) {
    const { id, action, data } = e.data;
    
    try {
        let result;
        
        switch (action) {
            case 'loadModel':
                result = await loadModel(data.modelId, data.modelConfig);
                break;
                
            case 'generateEmbedding':
                result = await generateEmbedding(data.modelId, data.text, data.options);
                break;
                
            case 'testModel':
                result = await testModel(data.modelId, data.testText);
                break;
                
            case 'unloadModel':
                result = unloadModel(data.modelId);
                break;
                
            case 'getStatus':
                result = getModelsStatus();
                break;
                
            default:
                throw new Error(`Unknown action: ${action}`);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.postMessage({
            id,
            success: true,
            result
        });
        
    } catch (error) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
        self.postMessage({
            id,
            success: false,
            error: {
                message: error.message,
                stack: error.stack
            }
        });
    }
};

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
 */
async function loadModel(modelId, modelConfig) {
    console.log(`üîÑ [Worker] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ${modelId}...`);
    
    try {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è feature extraction
        const model = await pipeline('feature-extraction', modelConfig.fullName, {
            // –ö–æ–ª–±–µ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_callback: (progress) => {
                self.postMessage({
                    type: 'progress',
                    modelId,
                    progress: {
                        stage: 'downloading',
                        progress: Math.round((progress.loaded / progress.total) * 100),
                        loaded: progress.loaded,
                        total: progress.total
                    }
                });
            }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        modelCache.set(modelId, {
            model,
            config: modelConfig,
            loadedAt: new Date()
        });
        
        console.log(`‚úÖ [Worker] –ú–æ–¥–µ–ª—å ${modelId} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
        
        return {
            success: true,
            modelId,
            loadedAt: new Date(),
            memoryUsage: getMemoryUsage()
        };
        
    } catch (error) {
        console.error(`‚ùå [Worker] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ${modelId}:`, error);
        throw error;
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embedding-–≤–µ–∫—Ç–æ—Ä–∞
 */
async function generateEmbedding(modelId, text, options = {}) {
    const cached = modelCache.get(modelId);
    if (!cached) {
        throw new Error(`–ú–æ–¥–µ–ª—å ${modelId} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
    }
    
    try {
        console.log(`üîÑ [Worker] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è embedding –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        
        const startTime = Date.now();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embedding
        const output = await cached.model(text, {
            pooling: 'mean',
            normalize: true,
            ...options
        });
        
        const processingTime = Date.now() - startTime;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤
        const vector = Array.from(output.data);
        
        console.log(`‚úÖ [Worker] Embedding —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (${vector.length} –∏–∑–º–µ—Ä–µ–Ω–∏–π, ${processingTime}ms)`);
        
        return {
            vector,
            dimensions: vector.length,
            processingTime,
            modelId
        };
        
    } catch (error) {
        console.error(`‚ùå [Worker] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embedding:`, error);
        throw error;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
 */
async function testModel(modelId, testText = "–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ") {
    const cached = modelCache.get(modelId);
    if (!cached) {
        throw new Error(`–ú–æ–¥–µ–ª—å ${modelId} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
    }
    
    try {
        const startTime = Date.now();
        const result = await generateEmbedding(modelId, testText);
        const totalTime = Date.now() - startTime;
        
        return {
            success: true,
            modelId,
            dimensions: result.dimensions,
            processingTime: totalTime,
            vectorSample: result.vector.slice(0, 5), // –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π
            testText
        };
        
    } catch (error) {
        return {
            success: false,
            modelId,
            error: error.message
        };
    }
}

/**
 * –í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –ø–∞–º—è—Ç–∏
 */
function unloadModel(modelId) {
    const wasLoaded = modelCache.has(modelId);
    modelCache.delete(modelId);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    if (typeof gc === 'function') {
        gc();
    }
    
    console.log(`üóëÔ∏è [Worker] –ú–æ–¥–µ–ª—å ${modelId} ${wasLoaded ? '–≤—ã–≥—Ä—É–∂–µ–Ω–∞' : '–Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}`);
    
    return {
        success: true,
        wasLoaded,
        memoryUsage: getMemoryUsage()
    };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
 */
function getModelsStatus() {
    const loaded = Array.from(modelCache.keys());
    
    return {
        loaded,
        count: loaded.length,
        memoryUsage: getMemoryUsage(),
        models: Object.fromEntries(
            Array.from(modelCache.entries()).map(([id, data]) => [
                id, 
                {
                    modelId: id,
                    loadedAt: data.loadedAt,
                    config: data.config
                }
            ])
        )
    };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
 */
function getMemoryUsage() {
    if ('performance' in self && 'memory' in performance) {
        return {
            used: Math.round(performance.memory.usedJSHeapSize / 1024 / 1024), // MB
            total: Math.round(performance.memory.totalJSHeapSize / 1024 / 1024), // MB
            limit: Math.round(performance.memory.jsHeapSizeLimit / 1024 / 1024) // MB
        };
    }
    return null;
}

console.log('üöÄ [Worker] Embedding Worker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');