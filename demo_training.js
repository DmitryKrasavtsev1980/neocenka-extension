/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
 * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ area.html –∏–ª–∏ settings.html
 */

console.log('üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ë–£–ß–ï–ù–ò–Ø –ú–û–î–ï–õ–ò');

if (!window.smartAddressMatcher) {
    console.error('‚ùå SmartAddressMatcher –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ area.html');
    console.log('üí° –ù–∞–∂–º–∏—Ç–µ "üß† –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å–∞ (—É–º–Ω—ã–π ML)" –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å');
} else {
    const matcher = window.smartAddressMatcher;
    
    console.log('\nüìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ú–û–î–ï–õ–ò:');
    console.log('–í–µ—Ä—Å–∏—è:', matcher.model.version);
    console.log('–ü—Ä–∏–º–µ—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏:', matcher.training.examples.length);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–µ—Å–∞
    console.log('\nüî¢ –¢–ï–ö–£–©–ò–ï –í–ï–°–ê:');
    for (const [key, value] of Object.entries(matcher.model.weights)) {
        console.log(`  ${key}: ${value.toFixed(3)}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    console.log('\nüîß –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ü–†–ò–ú–ï–†–û–í...');
    
    const testExamples = [];
    
    // 15 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ (—Ö–æ—Ä–æ—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
    for (let i = 0; i < 15; i++) {
        testExamples.push({
            listing: `–¢–µ—Å—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞, –¥–æ–º ${i + 1}`,
            candidate: `–¢–µ—Å—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞, –¥–æ–º ${i + 1}`,
            isCorrect: true,
            timestamp: Date.now() - i * 60000,
            features: {
                textualSimilarity: 0.85 + Math.random() * 0.15,
                semanticSimilarity: 0.80 + Math.random() * 0.20,
                structuralSimilarity: 0.90 + Math.random() * 0.10,
                fuzzyScore: 0.88 + Math.random() * 0.12,
                lengthRatio: 0.95 + Math.random() * 0.05
            }
        });
    }
    
    // 10 –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ (–ø–ª–æ—Ö–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)  
    for (let i = 0; i < 10; i++) {
        testExamples.push({
            listing: `–¢–µ—Å—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞, –¥–æ–º ${i + 1}`,
            candidate: `–°–æ–≤—Å–µ–º –¥—Ä—É–≥–∞—è —É–ª–∏—Ü–∞, –¥–æ–º ${i + 100}`,
            isCorrect: false,
            timestamp: Date.now() - (15 + i) * 60000,
            features: {
                textualSimilarity: 0.05 + Math.random() * 0.25,
                semanticSimilarity: 0.10 + Math.random() * 0.30,
                structuralSimilarity: 0.15 + Math.random() * 0.25,
                fuzzyScore: 0.08 + Math.random() * 0.22,
                lengthRatio: 0.20 + Math.random() * 0.50
            }
        });
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${testExamples.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ (15 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö, 10 –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö)`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const oldWeights = { ...matcher.model.weights };
    const oldThresholds = { ...matcher.model.thresholds };
    const oldVersion = matcher.model.version;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º—É
    matcher.training.examples = testExamples;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('ml_training_examples', JSON.stringify(testExamples));
    localStorage.setItem('ml_training_count', testExamples.length.toString());
    
    console.log('\nüîÑ –ó–ê–ü–£–°–ö –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–Ø...');
    matcher.retrain();
    
    console.log('\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–£–ß–ï–ù–ò–Ø:');
    console.log(`üìà –í–µ—Ä—Å–∏—è: ${oldVersion} ‚Üí ${matcher.model.version}`);
    
    console.log('\nüìä –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í–ï–°–û–í:');
    let weightsChanged = false;
    for (const [key, newValue] of Object.entries(matcher.model.weights)) {
        const oldValue = oldWeights[key];
        const change = newValue - oldValue;
        const changePercent = (change * 100).toFixed(1);
        const changed = Math.abs(change) > 0.001;
        
        if (changed) weightsChanged = true;
        
        console.log(`  ${key}: ${oldValue.toFixed(3)} ‚Üí ${newValue.toFixed(3)} ${changed ? `(${changePercent > 0 ? '+' : ''}${changePercent}%)` : '(–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)'}`);
    }
    
    console.log('\nüìä –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–û–†–û–ì–û–í:');
    let thresholdsChanged = false;
    for (const [key, newValue] of Object.entries(matcher.model.thresholds)) {
        const oldValue = oldThresholds[key];
        const change = newValue - oldValue;
        const changed = Math.abs(change) > 0.001;
        
        if (changed) thresholdsChanged = true;
        
        console.log(`  ${key}: ${oldValue.toFixed(3)} ‚Üí ${newValue.toFixed(3)} ${changed ? '(–∏–∑–º–µ–Ω–∏–ª—Å—è)' : '(–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)'}`);
    }
    
    if (weightsChanged || thresholdsChanged) {
        console.log('\n‚úÖ –ú–û–î–ï–õ–¨ –£–°–ü–ï–®–ù–û –û–ë–£–ß–ï–ù–ê!');
        console.log('üí° –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    } else {
        console.log('\n‚ö†Ô∏è  –ú–æ–¥–µ–ª—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('   1. –ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞—à–µ–ª —É–ª—É—á—à–µ–Ω–∏–π');
        console.log('   2. Learning rate —Å–ª–∏—à–∫–æ–º –º–∞–ª');
        console.log('   3. –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã');
    }
    
    console.log('\nüìà –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–†–ò–ú–ï–†–û–í –î–õ–Ø –°–õ–ï–î–£–Æ–©–ï–ì–û –û–ë–£–ß–ï–ù–ò–Ø:', matcher.training.examples.length + 50);
}