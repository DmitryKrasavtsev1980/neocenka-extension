// –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –ò–°–¢–û–†–ò–ò –¶–ï–ù–´ - –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Avito

console.log('üöÄ === –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –ò–°–¢–û–†–ò–ò –¶–ï–ù–´ ===');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏
function testFindPriceHistoryButton() {
    console.log('üîç === –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ö–ù–û–ü–ö–ò ===');
    
    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const selectors = [
        'p[aria-haspopup="true"][aria-expanded="false"][tabindex="0"].T7ujv.Tdsqf.dsi88.cujIu.aStJv',
        'div.K5h5l.price-history-entry-point-iKhax p[tabindex="0"]',
        'p.T7ujv.Tdsqf.dsi88.cujIu.aStJv',
        'div.K5h5l p[tabindex="0"]', 
        'p[aria-haspopup="true"][aria-expanded="false"]',
        '.price-history-entry-point-iKhax p',
        '.K5h5l.price-history-entry-point-iKhax',
        '[class*="price-history-entry-point"]'
    ];
    
    let button = null;
    
    for (const selector of selectors) {
        try {
            const elements = document.querySelectorAll(selector);
            console.log(`üéØ –°–µ–ª–µ–∫—Ç–æ—Ä "${selector}": –Ω–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            
            elements.forEach((el, index) => {
                const text = el.textContent || '';
                console.log(`  –≠–ª–µ–º–µ–Ω—Ç ${index + 1}: "${text.trim()}"`);
                
                if (text.includes('–∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã') || text.includes('–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã')) {
                    button = el;
                    console.log('‚úÖ –ù–ê–ô–î–ï–ù–ê –ö–ù–û–ü–ö–ê –ò–°–¢–û–†–ò–ò –¶–ï–ù!');
                    console.log('  üìù –¢–µ–∫—Å—Ç:', text);
                    console.log('  üè∑Ô∏è –ö–ª–∞—Å—Å—ã:', el.className);
                    console.log('  üìã aria-haspopup:', el.getAttribute('aria-haspopup'));
                    console.log('  üìã aria-expanded:', el.getAttribute('aria-expanded'));
                    console.log('  üìã tabindex:', el.getAttribute('tabindex'));
                    console.log('  üñºÔ∏è –≠–ª–µ–º–µ–Ω—Ç:', el);
                }
            });
        } catch (e) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ "${selector}":`, e.message);
        }
        
        if (button) break;
    }
    
    if (!button) {
        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:');
        console.log('  üìä –í—Å–µ–≥–æ p —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', document.querySelectorAll('p').length);
        console.log('  üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å tabindex:', document.querySelectorAll('[tabindex]').length);
        console.log('  üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å aria-haspopup:', document.querySelectorAll('[aria-haspopup]').length);
        console.log('  üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ .price-history-entry-point-iKhax:', document.querySelectorAll('.price-history-entry-point-iKhax').length);
        
        // –ò—â–µ–º –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–ª–æ–≤–æ–º "–∏—Å—Ç–æ—Ä–∏—è"
        const allElements = document.querySelectorAll('*');
        const historyElements = [];
        allElements.forEach(el => {
            const text = (el.textContent || '').toLowerCase();
            if (text.includes('–∏—Å—Ç–æ—Ä') && el.textContent.length < 100) {
                historyElements.push({
                    tag: el.tagName,
                    text: el.textContent.trim(),
                    classes: el.className,
                    hasTabindex: el.hasAttribute('tabindex'),
                    element: el
                });
            }
        });
        
        if (historyElements.length > 0) {
            console.log('üí° –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–ª–æ–≤–æ–º "–∏—Å—Ç–æ—Ä":', historyElements);
        }
    }
    
    return button;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ tooltip
function testActivateTooltip(button) {
    if (!button) {
        console.log('‚ùå –ù–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
    }
    
    console.log('üñ±Ô∏è === –¢–ï–°–¢ –ê–ö–¢–ò–í–ê–¶–ò–ò TOOLTIP ===');
    console.log('üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É:', button);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const rect = button.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    
    console.log('üìê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏:', { x: centerX, y: centerY, rect });
    console.log('üìã –ù–∞—á–∞–ª—å–Ω–æ–µ aria-expanded:', button.getAttribute('aria-expanded'));
    
    // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            mutation.addedNodes.forEach((node) => {
                if (node.nodeType === 1) {
                    const text = node.textContent || '';
                    if (text.includes('‚ÇΩ') && (text.includes('—è–Ω–≤') || text.includes('—Ñ–µ–≤') || 
                        text.includes('–º–∞—Ä') || text.includes('–∞–ø—Ä') || text.includes('–º–∞–π') || 
                        text.includes('–∏—é–Ω') || text.includes('–∏—é–ª') || text.includes('–∞–≤–≥') || 
                        text.includes('—Å–µ–Ω') || text.includes('–æ–∫—Ç') || text.includes('–Ω–æ—è') || 
                        text.includes('–¥–µ–∫'))) {
                        
                        console.log('üéâ TOOLTIP –ü–û–Ø–í–ò–õ–°–Ø!');
                        console.log('üì¶ –≠–ª–µ–º–µ–Ω—Ç:', node);
                        console.log('üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:', text.substring(0, 200) + '...');
                        observer.disconnect();
                    }
                }
            });
        });
    });
    
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º tooltip
    setTimeout(() => {
        console.log('1Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å...');
        button.focus();
    }, 100);
    
    setTimeout(() => {
        console.log('2Ô∏è‚É£ mouseenter...');
        button.dispatchEvent(new MouseEvent('mouseenter', {
            bubbles: true,
            cancelable: true,
            view: window,
            clientX: centerX,
            clientY: centerY
        }));
    }, 200);
    
    setTimeout(() => {
        console.log('3Ô∏è‚É£ mouseover...');
        button.dispatchEvent(new MouseEvent('mouseover', {
            bubbles: true,
            cancelable: true,
            view: window,
            clientX: centerX,
            clientY: centerY
        }));
    }, 300);
    
    setTimeout(() => {
        console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º aria-expanded:', button.getAttribute('aria-expanded'));
        
        // –ò—â–µ–º tooltip –≤ DOM
        const tooltips = document.querySelectorAll('[role="tooltip"], .tooltip, [class*="tooltip"]');
        console.log('üîç –ù–∞–π–¥–µ–Ω–æ tooltip —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', tooltips.length);
        
        tooltips.forEach((tooltip, index) => {
            console.log(`  Tooltip ${index + 1}:`, tooltip);
            console.log(`  –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${tooltip.textContent.substring(0, 100)}...`);
        });
        
        observer.disconnect();
    }, 1000);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
const button = testFindPriceHistoryButton();
if (button) {
    setTimeout(() => testActivateTooltip(button), 1000);
} else {
    console.log('‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
}